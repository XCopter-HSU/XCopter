
SimpleFlightController.elf:     file format elf32-littlenios2
SimpleFlightController.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000e2d0 memsz 0x0000e2d0 flags r-x
    LOAD off    0x0000f2f0 vaddr 0x0000e2f0 paddr 0x0000fe10 align 2**12
         filesz 0x00001b20 memsz 0x00001b20 flags rw-
    LOAD off    0x00011930 vaddr 0x00011930 paddr 0x00011930 align 2**12
         filesz 0x00000000 memsz 0x000073d8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000df98  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000019c  0000e154  0000e154  0000f154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b20  0000e2f0  0000fe10  0000f2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073d8  00011930  00011930  00011930  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00018d08  00018d08  00010e10  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  00010e10  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b30  00000000  00000000  00010e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00020165  00000000  00000000  00011980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007c27  00000000  00000000  00031ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000938b  00000000  00000000  0003970c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026ec  00000000  00000000  00042a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000034e0  00000000  00000000  00045184  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004981  00000000  00000000  00048664  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0004cfe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f0  00000000  00000000  0004d008  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00051195  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  0005119b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000511a1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000511a2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000010  00000000  00000000  000511a3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000010  00000000  00000000  000511b3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000010  00000000  00000000  000511c3  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  000511d3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001a  00000000  00000000  000511dd  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00388743  00000000  00000000  000511f7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
0000e154 l    d  .rodata	00000000 .rodata
0000e2f0 l    d  .rwdata	00000000 .rwdata
00011930 l    d  .bss	00000000 .bss
00018d08 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SimpleFlightController_bsp//obj/HAL/src/crt0.o
000001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0000e2f0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00001d80 l     F .text	00000008 __fp_lock
00001d88 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00002e30 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00002f48 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00002f74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003070 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003160 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003244 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00003438 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000fd84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003688 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0000fd88 l     O .rwdata	00000004 lockid
00011950 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0000fd8c l     O .rwdata	00000004 lockid
00011958 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000050a0 l     F .text	00000044 OS_InitMisc
000050e4 l     F .text	00000068 OS_InitRdyList
00005244 l     F .text	000000e0 OS_InitTCBList
00004fc4 l     F .text	000000dc OS_InitEventList
0000514c l     F .text	0000007c OS_InitTaskIdle
000051c8 l     F .text	0000007c OS_InitTaskStat
000054a4 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000072a0 l     F .text	0000010c OS_FlagTaskRdy
00006ffc l     F .text	000001c0 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b734 l     F .text	00000038 alt_dev_reg
0000ecc4 l     O .rwdata	0000106c jtag_uart_cpu_s0
0000fd30 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000bab0 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0000bd54 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c52c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000c6e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000c7f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ca80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000cf20 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000d058 l     F .text	00000050 alt_get_errno
0000d0a8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000e004 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
0000fdda g     O .rwdata	00000002 OSTaskNameSize
00002cf4 g     F .text	00000064 _isatty_r
00003364 g     F .text	000000d4 alt_main
00000314 g     F .text	000000b8 _puts_r
00018c08 g     O .bss	00000100 alt_irq
00002d58 g     F .text	0000006c _lseek_r
00007b00 g     F .text	000000d0 OS_MemInit
0000fe10 g       *ABS*	00000000 __flash_rwdata_start
0000b6d0 g     F .text	00000064 OSTimeSet
00003d2c g     F .text	00000610 OSEventPendMulti
00018d08 g       *ABS*	00000000 __alt_heap_start
0000d848 g     F .text	00000020 OSTaskCreateHook
000119e4 g     O .bss	00002000 task1_stk
0000fdb2 g     O .rwdata	00000002 OSMboxEn
00004390 g     F .text	0000007c OSIntEnter
00002a1c g     F .text	0000005c __sseek
00001e18 g     F .text	0000019c __sinit
0000fdc2 g     O .rwdata	00000002 OSQEn
00001d9c g     F .text	00000064 __sfmoreglue
00003a00 g     F .text	000000d0 __malloc_unlock
0000d8a4 g     F .text	0000001c OSTaskStatHook
00011960 g     O .bss	00000001 OSLockNesting
0000fe00 g     O .rwdata	00000002 OSDataSize
00011961 g     O .bss	00000001 OSRunning
000012d0 g     F .text	0000013c memmove
0000d8dc g     F .text	0000001c OSInitHookBegin
0000fdf8 g     O .rwdata	00000002 OSTmrSize
00001e00 g     F .text	00000018 _cleanup
00011964 g     O .bss	00000004 OSIdleCtr
0000d530 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
000057c8 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0000fdfe g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000fd9e g     O .rwdata	00000002 OSEventSize
00011968 g     O .bss	00000001 OSPrioHighRdy
00002c8c g     F .text	00000068 _fstat_r
0000d868 g     F .text	00000020 OSTaskDelHook
0001193c g     O .bss	00000004 errno
00002998 g     F .text	00000008 __seofread
0000d510 g       .text	00000000 OSStartHighRdy
00009fe8 g     F .text	000001f4 OSTaskCreateExt
00006b48 g     F .text	00000068 OSFlagPendGetFlagsRdy
0000fdde g     O .rwdata	00000002 OSTaskStatStkSize
00005c28 g     F .text	00000308 OSFlagAccept
000081d8 g     F .text	000000b8 OSQFlush
00007bd0 g     F .text	00000140 OSQAccept
00011948 g     O .bss	00000004 alt_argv
00017d5c g       *ABS*	00000000 _gp
00009e2c g     F .text	000001bc OSTaskCreate
00009904 g     F .text	00000528 OSTaskChangePrio
0001195c g     O .bss	00000004 alt_heapsem
00005a9c g     F .text	0000018c OSDebugInit
0000a1dc g     F .text	000003dc OSTaskDel
0000eb44 g     O .rwdata	00000180 alt_fd_list
000159e4 g     O .bss	00000370 OSFlagTbl
00004db8 g     F .text	000000b0 OS_EventTaskRemove
0000d950 g     F .text	00000090 alt_find_dev
000011c4 g     F .text	0000010c memcpy
0000fdc8 g     O .rwdata	00000002 OSRdyTblSize
00001d90 g     F .text	0000000c _cleanup_r
0000cfe0 g     F .text	00000078 alt_io_redirect
0000e154 g       *ABS*	00000000 __DTOR_END__
000003cc g     F .text	00000014 puts
00003ad0 g     F .text	00000120 OSEventNameGet
0000fdac g     O .rwdata	00000002 OSFlagMax
0000440c g     F .text	000000f4 OSIntExit
0000fde6 g     O .rwdata	00000002 OSTCBSize
00011969 g     O .bss	00000001 OSPrioCur
0000bfb4 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000e108 g     F .text	00000008 .hidden __udivsi3
000030c0 g     F .text	000000a0 isatty
0000fdcc g     O .rwdata	00000002 OSStkWidth
0000fdc0 g     O .rwdata	00000002 OSPtrSize
0000fda0 g     O .rwdata	00000002 OSEventTblSize
0000d484 g       .text	00000000 OSCtxSw
0000dbf0 g     F .text	0000008c alt_icache_flush
00011938 g     O .bss	00000004 __malloc_top_pad
0001196c g     O .bss	00000004 OSTCBList
00011940 g     O .bss	00000004 alt_fd_list_lock
0000046c g     F .text	000004ac __sfvwrite_r
00015d54 g     O .bss	00000c30 OSMemTbl
00011970 g     O .bss	00000001 OSTickStepState
00001970 g     F .text	00000064 _sbrk_r
0000fdc4 g     O .rwdata	00000002 OSQMax
00016984 g     O .bss	00000800 OSTaskStatStk
00007730 g     F .text	000000f8 OSMemNameGet
0000fda4 g     O .rwdata	00000002 OSFlagEn
00002dc4 g     F .text	0000006c _read_r
0000fdea g     O .rwdata	00000002 OSTimeTickHookEn
00008700 g     F .text	00000168 OSQPost
000073ac g     F .text	000000a0 OS_FlagUnlink
0000fd7c g     O .rwdata	00000004 alt_max_fd
00005374 g     F .text	00000064 OS_MemCopy
000053d8 g     F .text	000000cc OS_Sched
00002b50 g     F .text	00000128 _fclose_r
00007640 g     F .text	000000f0 OSMemGet
0000a8b8 g     F .text	000001c0 OSTaskNameSet
00001d50 g     F .text	00000030 fflush
00011934 g     O .bss	00000004 __malloc_max_sbrked_mem
00011974 g     O .bss	00000004 OSCtxSwCtr
0000d8c0 g     F .text	0000001c OSTimeTickHook
0000fdae g     O .rwdata	00000002 OSFlagNameSize
00004e68 g     F .text	000000f8 OS_EventTaskRemoveMulti
00004c70 g     F .text	00000148 OS_EventTaskWaitMulti
0000fdc6 g     O .rwdata	00000002 OSQSize
00003294 g     F .text	000000d0 lseek
0000920c g     F .text	00000268 OSSemPend
0000fd5c g     O .rwdata	00000004 _global_impure_ptr
0000140c g     F .text	00000564 _realloc_r
0000fdb0 g     O .rwdata	00000002 OSLowestPrio
00018d08 g       *ABS*	00000000 __bss_end
0000ce30 g     F .text	000000f0 alt_iic_isr_register
0000d930 g     F .text	00000020 OSTCBInitHook
0000fdf6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000d360 g     F .text	00000104 alt_tick
0000fd98 g     O .rwdata	00000002 OSEventEn
0000fdf2 g     O .rwdata	00000002 OSTmrCfgNameSize
000020e0 g     F .text	00000018 __fp_lock_all
0000cde4 g     F .text	0000004c alt_ic_irq_enabled
000071bc g     F .text	000000e4 OS_FlagInit
0000d2c8 g     F .text	00000098 alt_alarm_stop
0000fdd4 g     O .rwdata	00000002 OSTaskIdleStkSize
000119b0 g     O .bss	00000004 alt_irq_active
00008dec g     F .text	000000b0 OSSemAccept
00007940 g     F .text	000000d8 OSMemPut
0000744c g     F .text	000001f4 OSMemCreate
00011978 g     O .bss	00000004 OSIdleCtrMax
000000ec g     F .exceptions	000000d0 alt_irq_handler
0000eb1c g     O .rwdata	00000028 alt_dev_null
0000fde8 g     O .rwdata	00000002 OSTicksPerSec
0000d484 g       .text	00000000 OSIntCtxSw
0000ca64 g     F .text	0000001c alt_dcache_flush_all
0001197c g     O .bss	00000004 OSTCBFreeList
0000fe10 g       *ABS*	00000000 __ram_rwdata_end
00009474 g     F .text	00000174 OSSemPendAbort
0000fd74 g     O .rwdata	00000008 alt_dev_list
000036d8 g     F .text	000000ec write
0000fdec g     O .rwdata	00000002 OSVersionNbr
0000e2f0 g       *ABS*	00000000 __ram_rodata_end
00002fc4 g     F .text	000000ac fstat
0000fd94 g     O .rwdata	00000004 OSEndiannessTest
0000e110 g     F .text	00000008 .hidden __umodsi3
0000fda6 g     O .rwdata	00000002 OSFlagGrpSize
00018d08 g       *ABS*	00000000 end
0000c848 g     F .text	000000dc altera_avalon_uart_write
0000b968 g     F .text	00000148 altera_avalon_jtag_uart_init
00005638 g     F .text	000000c8 OS_TaskStat
0000e154 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000c5a0 g     F .text	00000088 alt_avalon_timer_sc_init
0000c688 g     F .text	00000060 altera_avalon_uart_write_fd
0000c268 g     F .text	000002c4 altera_avalon_jtag_uart_write
000020d0 g     F .text	00000004 __sfp_lock_acquire
000010dc g     F .text	000000e8 memchr
00005324 g     F .text	00000050 OS_MemClr
0000d554 g     F .text	000002f4 OSTaskStkInit
000001f8 g     F .text	00000038 task1
0000224c g     F .text	000002d0 _free_r
000049d0 g     F .text	00000198 OS_EventTaskRdy
0000de60 g     F .text	000001a4 __call_exitprocs
00011980 g     O .bss	00000001 OSCPUUsage
0000fd64 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000003c _start
00000230 g     F .text	00000038 task2
000119b4 g     O .bss	00000004 _alt_tick_rate
00008290 g     F .text	000002fc OSQPend
0000b1dc g     F .text	00000144 OSTimeDly
000119b8 g     O .bss	00000004 _alt_nticks
00003488 g     F .text	000000f0 read
0000b7a0 g     F .text	00000064 alt_sys_init
0000dd44 g     F .text	0000011c __register_exitproc
00011981 g     O .bss	00000001 OSTaskCtr
0000b320 g     F .text	00000160 OSTimeDlyHMSM
0000be60 g     F .text	00000068 altera_avalon_jtag_uart_close
0000e2f0 g       *ABS*	00000000 __ram_rwdata_start
0000e154 g       *ABS*	00000000 __ram_rodata_start
000119bc g     O .bss	00000028 __malloc_current_mallinfo
0000fd9a g     O .rwdata	00000002 OSEventMax
000095e8 g     F .text	00000110 OSSemPost
00004588 g     F .text	000000d8 OSSchedUnlock
0000b804 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000daf4 g     F .text	000000fc alt_get_fd
00011984 g     O .bss	00000004 OSMemFreeList
000046cc g     F .text	000000ac OSStatInit
00006f38 g     F .text	000000c4 OSFlagQuery
0000fdd0 g     O .rwdata	00000002 OSTaskCreateExtEn
00002aec g     F .text	00000064 _close_r
0000dcc8 g     F .text	0000007c memcmp
000049b4 g     F .text	0000001c OS_Dummy
0000b8c4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018d08 g       *ABS*	00000000 __alt_stack_base
0000b914 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000019d4 g     F .text	00000138 __swsetup_r
00017184 g     O .bss	000001e0 OSQTbl
00001fb4 g     F .text	0000011c __sfp
0000e714 g     O .rwdata	00000408 __malloc_av_
000020dc g     F .text	00000004 __sinit_lock_release
00011988 g     O .bss	00000004 OSTCBHighRdy
00002944 g     F .text	00000054 __sread
0001198c g     O .bss	00000004 OSQFreeList
0000d9e0 g     F .text	00000114 alt_find_file
0000cad0 g     F .text	000000a0 alt_dev_llist_insert
000038e0 g     F .text	00000120 __malloc_lock
000035d8 g     F .text	000000b0 sbrk
00003bf0 g     F .text	0000013c OSEventNameSet
00001b0c g     F .text	00000244 _fflush_r
00011990 g     O .bss	00000001 OSRdyGrp
00011930 g       *ABS*	00000000 __bss_start
00002830 g     F .text	00000114 memset
00000268 g     F .text	000000ac main
0001194c g     O .bss	00000004 alt_envp
00011930 g     O .bss	00000004 __malloc_max_total_mem
0000b864 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e1a8 g     O .rodata	00000100 OSUnMapTbl
0000fdca g     O .rwdata	00000002 OSSemEn
00006bb0 g     F .text	00000388 OSFlagPost
00002a78 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00002c78 g     F .text	00000014 fclose
00004b68 g     F .text	00000108 OS_EventTaskWait
000139e4 g     O .bss	00002000 task2_stk
00005700 g     F .text	000000c8 OS_TaskStatStkChk
0000a5b8 g     F .text	00000158 OSTaskDelReq
00000918 g     F .text	000007c4 _malloc_r
0000fd80 g     O .rwdata	00000004 alt_errno
00004660 g     F .text	0000006c OSStart
00003884 g     F .text	0000005c __env_unlock
0000251c g     F .text	000000a8 _fwalk
0000aa78 g     F .text	000001f4 OSTaskResume
00007a18 g     F .text	000000e8 OSMemQuery
0000fddc g     O .rwdata	00000002 OSTaskStatEn
0000fdb6 g     O .rwdata	00000002 OSMemMax
00008868 g     F .text	00000170 OSQPostFront
0000e074 g     F .text	00000048 .hidden __divsi3
00011991 g     O .bss	00000003 OSRdyTbl
0000fd90 g     O .rwdata	00000002 OSDebugEn
00002110 g     F .text	0000013c _malloc_trim_r
0000e154 g       *ABS*	00000000 __CTOR_END__
0000fda8 g     O .rwdata	00000002 OSFlagNodeSize
0000fdf0 g     O .rwdata	00000002 OSTmrCfgMax
00007d10 g     F .text	000001f8 OSQCreate
0000a710 g     F .text	000001a8 OSTaskNameGet
0000e154 g       *ABS*	00000000 __flash_rodata_start
000089d8 g     F .text	0000020c OSQPostOpt
00004778 g     F .text	0000021c OSTimeTick
0000fdd8 g     O .rwdata	00000002 OSTaskMax
0000e154 g       *ABS*	00000000 __DTOR_LIST__
00008e9c g     F .text	00000100 OSSemCreate
0000fdfc g     O .rwdata	00000002 OSTmrWheelSize
0000fdd2 g     O .rwdata	00000002 OSTaskDelEn
000096f8 g     F .text	00000110 OSSemQuery
00007f08 g     F .text	000002d0 OSQDel
0000858c g     F .text	00000174 OSQPendAbort
0000b76c g     F .text	00000034 alt_irq_init
00003578 g     F .text	00000060 alt_release_fd
0000dc7c g     F .text	00000014 atexit
00002a80 g     F .text	0000006c _write_r
00004500 g     F .text	00000088 OSSchedLock
00005f30 g     F .text	00000128 OSFlagCreate
0000fd60 g     O .rwdata	00000004 _impure_ptr
00011944 g     O .bss	00000004 alt_argc
0000cbcc g     F .text	0000005c _do_dtors
0000fda2 g     O .rwdata	00000002 OSEventMultiEn
00006058 g     F .text	00000270 OSFlagDel
00011994 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006548 g     F .text	00000600 OSFlagPend
0000fdee g     O .rwdata	00000002 OSTmrEn
000020f8 g     F .text	00000018 __fp_unlock_all
0000fd6c g     O .rwdata	00000008 alt_fs_list
00005514 g     F .text	00000074 OS_StrCopy
0000fdb8 g     O .rwdata	00000002 OSMemNameSize
0000d8f8 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000fde4 g     O .rwdata	00000002 OSTCBPrioTblMax
0000fde0 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000cc58 g     F .text	00000050 alt_ic_isr_register
0000fdb4 g     O .rwdata	00000002 OSMemEn
0000fdbe g     O .rwdata	00000002 OSMutexEn
0000fe10 g       *ABS*	00000000 _edata
0000c628 g     F .text	00000060 altera_avalon_uart_read_fd
00018d08 g       *ABS*	00000000 _end
00011998 g     O .bss	00000001 OSIntNesting
000001bc g       *ABS*	00000000 __ram_exceptions_end
0000bec8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000b480 g     F .text	000001ec OSTimeDlyResume
000063f8 g     F .text	00000150 OSFlagNameSet
0000ac6c g     F .text	000001c8 OSTaskStkChk
0000cd44 g     F .text	000000a0 alt_ic_irq_disable
0000fdba g     O .rwdata	00000002 OSMemSize
000029a0 g     F .text	0000007c __swrite
0000fd68 g     O .rwdata	00000004 __malloc_trim_threshold
0000d464 g     F .text	00000020 altera_nios2_qsys_irq_init
0001199c g     O .bss	00000004 OSTCBCur
0000dc90 g     F .text	00000038 exit
0000fdbc g     O .rwdata	00000002 OSMemTblSize
000025c4 g     F .text	000000b8 _fwalk_reent
0000e0bc g     F .text	0000004c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000020d4 g     F .text	00000004 __sfp_lock_release
0000433c g     F .text	00000054 OSInit
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000b044 g     F .text	0000012c OSTaskQuery
00008d40 g     F .text	000000ac OS_QInit
00005588 g     F .text	00000054 OS_StrLen
00007828 g     F .text	00000118 OSMemNameSet
0000fdd6 g     O .rwdata	00000002 OSTaskProfileEn
000119a0 g     O .bss	00000004 OSTime
00017364 g     O .bss	00000800 OSTaskIdleStk
0000e118 g     F .text	0000003c _exit
0000c924 g     F .text	00000140 alt_alarm_start
000062c8 g     F .text	00000130 OSFlagNameGet
0000b66c g     F .text	00000064 OSTimeGet
0000267c g     F .text	000001b4 __smakebuf_r
000003e0 g     F .text	0000008c strlen
0000d888 g     F .text	0000001c OSTaskSwHook
0000d174 g     F .text	00000154 open
00017b64 g     O .bss	00000b40 OSEventTbl
000186a4 g     O .bss	00000510 OSTCBTbl
00009808 g     F .text	000000fc OSSemSet
0000cc28 g     F .text	00000030 alt_icache_flush_all
0000fe04 g     O .rwdata	00000004 alt_priority_mask
00008f9c g     F .text	00000270 OSSemDel
000119a4 g     O .bss	00000004 OSFlagFreeList
0000cca8 g     F .text	0000009c alt_ic_irq_enable
0000fd9c g     O .rwdata	00000002 OSEventNameSize
000119a8 g     O .bss	00000001 OSStatRdy
00018bb4 g     O .bss	00000054 OSTCBPrioTbl
0000c738 g     F .text	000000c0 altera_avalon_uart_read
000037c4 g     F .text	000000c0 __env_lock
0000fde2 g     O .rwdata	00000002 OSTaskSwHookEn
0000fe08 g     O .rwdata	00000008 alt_alarm_list
0000fdaa g     O .rwdata	00000002 OSFlagWidth
0000cb70 g     F .text	0000005c _do_ctors
00002e80 g     F .text	000000c8 close
00011954 g     O .bss	00000004 alt_envsem
000119ac g     O .bss	00000004 OSIdleCtrRun
00004994 g     F .text	00000020 OSVersion
0000fdf4 g     O .rwdata	00000002 OSTmrCfgWheelSize
000031c4 g     F .text	00000080 alt_load
0000b170 g     F .text	0000006c OS_TaskStkClr
0000fdce g     O .rwdata	00000002 OSTaskCreateEn
00004f60 g     F .text	00000064 OS_EventWaitListInit
0000d914 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
000020d8 g     F .text	00000004 __sinit_lock_acquire
0000ae34 g     F .text	00000210 OSTaskSuspend
000055dc g     F .text	0000005c OS_TaskIdle
0000fdfa g     O .rwdata	00000002 OSTmrTblSize
00008be4 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	00043900 	call	4390 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c000b4 	movhi	r3,2
 130:	18e30204 	addi	r3,r3,-29688
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10800017 	ldw	r2,0(r2)
 144:	010000b4 	movhi	r4,2
 148:	21230204 	addi	r4,r4,-29688
 14c:	e0fffd17 	ldw	r3,-12(fp)
 150:	180690fa 	slli	r3,r3,3
 154:	20c7883a 	add	r3,r4,r3
 158:	18c00104 	addi	r3,r3,4
 15c:	18c00017 	ldw	r3,0(r3)
 160:	1809883a 	mov	r4,r3
 164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <__alt_data_end+0xfc000110>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <__alt_data_end+0xfc00011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	000440c0 	call	440c <OSIntExit>
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c8:	d69f5714 	ori	gp,gp,32092
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d0:	10864c14 	ori	r2,r2,6448

    movhi r3, %hi(__bss_end)
     1d4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d8:	18e34214 	ori	r3,r3,36104

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1ec:	00031c40 	call	31c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f0:	00033640 	call	3364 <alt_main>

000001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f4:	003fff06 	br	1f4 <__alt_data_end+0xfc0001f4>

000001f8 <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     1f8:	defffd04 	addi	sp,sp,-12
     1fc:	dfc00215 	stw	ra,8(sp)
     200:	df000115 	stw	fp,4(sp)
     204:	df000104 	addi	fp,sp,4
     208:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
     20c:	01000074 	movhi	r4,1
     210:	21385504 	addi	r4,r4,-7852
     214:	00003cc0 	call	3cc <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     218:	0009883a 	mov	r4,zero
     21c:	000b883a 	mov	r5,zero
     220:	018000c4 	movi	r6,3
     224:	000f883a 	mov	r7,zero
     228:	000b3200 	call	b320 <OSTimeDlyHMSM>
  }
     22c:	003ff706 	br	20c <__alt_data_end+0xfc00020c>

00000230 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
     230:	defffd04 	addi	sp,sp,-12
     234:	dfc00215 	stw	ra,8(sp)
     238:	df000115 	stw	fp,4(sp)
     23c:	df000104 	addi	fp,sp,4
     240:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
     244:	01000074 	movhi	r4,1
     248:	21385a04 	addi	r4,r4,-7832
     24c:	00003cc0 	call	3cc <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     250:	0009883a 	mov	r4,zero
     254:	000b883a 	mov	r5,zero
     258:	018000c4 	movi	r6,3
     25c:	000f883a 	mov	r7,zero
     260:	000b3200 	call	b320 <OSTimeDlyHMSM>
  }
     264:	003ff706 	br	244 <__alt_data_end+0xfc000244>

00000268 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
     268:	defff904 	addi	sp,sp,-28
     26c:	dfc00615 	stw	ra,24(sp)
     270:	df000515 	stw	fp,20(sp)
     274:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
     278:	00800044 	movi	r2,1
     27c:	d8800015 	stw	r2,0(sp)
     280:	00800074 	movhi	r2,1
     284:	10867904 	addi	r2,r2,6628
     288:	d8800115 	stw	r2,4(sp)
     28c:	00820004 	movi	r2,2048
     290:	d8800215 	stw	r2,8(sp)
     294:	d8000315 	stw	zero,12(sp)
     298:	d8000415 	stw	zero,16(sp)
     29c:	01000034 	movhi	r4,0
     2a0:	21007e04 	addi	r4,r4,504
     2a4:	000b883a 	mov	r5,zero
     2a8:	01800074 	movhi	r6,1
     2ac:	318e7804 	addi	r6,r6,14816
     2b0:	01c00044 	movi	r7,1
     2b4:	0009fe80 	call	9fe8 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
     2b8:	00800084 	movi	r2,2
     2bc:	d8800015 	stw	r2,0(sp)
     2c0:	00800074 	movhi	r2,1
     2c4:	108e7904 	addi	r2,r2,14820
     2c8:	d8800115 	stw	r2,4(sp)
     2cc:	00820004 	movi	r2,2048
     2d0:	d8800215 	stw	r2,8(sp)
     2d4:	d8000315 	stw	zero,12(sp)
     2d8:	d8000415 	stw	zero,16(sp)
     2dc:	01000034 	movhi	r4,0
     2e0:	21008c04 	addi	r4,r4,560
     2e4:	000b883a 	mov	r5,zero
     2e8:	01800074 	movhi	r6,1
     2ec:	31967804 	addi	r6,r6,23008
     2f0:	01c00084 	movi	r7,2
     2f4:	0009fe80 	call	9fe8 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     2f8:	00046600 	call	4660 <OSStart>
  return 0;
     2fc:	0005883a 	mov	r2,zero
}
     300:	e037883a 	mov	sp,fp
     304:	dfc00117 	ldw	ra,4(sp)
     308:	df000017 	ldw	fp,0(sp)
     30c:	dec00204 	addi	sp,sp,8
     310:	f800283a 	ret

00000314 <_puts_r>:
     314:	defff604 	addi	sp,sp,-40
     318:	dc400815 	stw	r17,32(sp)
     31c:	2023883a 	mov	r17,r4
     320:	2809883a 	mov	r4,r5
     324:	dc000715 	stw	r16,28(sp)
     328:	dfc00915 	stw	ra,36(sp)
     32c:	2821883a 	mov	r16,r5
     330:	00003e00 	call	3e0 <strlen>
     334:	00c00074 	movhi	r3,1
     338:	18ff5804 	addi	r3,r3,-672
     33c:	18c00017 	ldw	r3,0(r3)
     340:	11000044 	addi	r4,r2,1
     344:	d8800115 	stw	r2,4(sp)
     348:	18c00217 	ldw	r3,8(r3)
     34c:	00800074 	movhi	r2,1
     350:	10b85f04 	addi	r2,r2,-7812
     354:	d8800215 	stw	r2,8(sp)
     358:	1940030b 	ldhu	r5,12(r3)
     35c:	00800044 	movi	r2,1
     360:	d8800315 	stw	r2,12(sp)
     364:	00800084 	movi	r2,2
     368:	d8800515 	stw	r2,20(sp)
     36c:	dc000015 	stw	r16,0(sp)
     370:	d9000615 	stw	r4,24(sp)
     374:	dec00415 	stw	sp,16(sp)
     378:	2888000c 	andi	r2,r5,8192
     37c:	1000061e 	bne	r2,zero,398 <_puts_r+0x84>
     380:	19001917 	ldw	r4,100(r3)
     384:	00b7ffc4 	movi	r2,-8193
     388:	29480014 	ori	r5,r5,8192
     38c:	2084703a 	and	r2,r4,r2
     390:	1940030d 	sth	r5,12(r3)
     394:	18801915 	stw	r2,100(r3)
     398:	89400217 	ldw	r5,8(r17)
     39c:	8809883a 	mov	r4,r17
     3a0:	d9800404 	addi	r6,sp,16
     3a4:	000046c0 	call	46c <__sfvwrite_r>
     3a8:	1000061e 	bne	r2,zero,3c4 <_puts_r+0xb0>
     3ac:	00800284 	movi	r2,10
     3b0:	dfc00917 	ldw	ra,36(sp)
     3b4:	dc400817 	ldw	r17,32(sp)
     3b8:	dc000717 	ldw	r16,28(sp)
     3bc:	dec00a04 	addi	sp,sp,40
     3c0:	f800283a 	ret
     3c4:	00bfffc4 	movi	r2,-1
     3c8:	003ff906 	br	3b0 <__alt_data_end+0xfc0003b0>

000003cc <puts>:
     3cc:	00800074 	movhi	r2,1
     3d0:	10bf5804 	addi	r2,r2,-672
     3d4:	200b883a 	mov	r5,r4
     3d8:	11000017 	ldw	r4,0(r2)
     3dc:	00003141 	jmpi	314 <_puts_r>

000003e0 <strlen>:
     3e0:	208000cc 	andi	r2,r4,3
     3e4:	10001d26 	beq	r2,zero,45c <strlen+0x7c>
     3e8:	20800007 	ldb	r2,0(r4)
     3ec:	10001d26 	beq	r2,zero,464 <strlen+0x84>
     3f0:	2005883a 	mov	r2,r4
     3f4:	00000206 	br	400 <strlen+0x20>
     3f8:	10c00007 	ldb	r3,0(r2)
     3fc:	18001526 	beq	r3,zero,454 <strlen+0x74>
     400:	10800044 	addi	r2,r2,1
     404:	10c000cc 	andi	r3,r2,3
     408:	183ffb1e 	bne	r3,zero,3f8 <__alt_data_end+0xfc0003f8>
     40c:	10c00017 	ldw	r3,0(r2)
     410:	01ffbff4 	movhi	r7,65279
     414:	39ffbfc4 	addi	r7,r7,-257
     418:	01a02074 	movhi	r6,32897
     41c:	31a02004 	addi	r6,r6,-32640
     420:	00000206 	br	42c <strlen+0x4c>
     424:	10800104 	addi	r2,r2,4
     428:	10c00017 	ldw	r3,0(r2)
     42c:	19cb883a 	add	r5,r3,r7
     430:	00c6303a 	nor	r3,zero,r3
     434:	28c6703a 	and	r3,r5,r3
     438:	1986703a 	and	r3,r3,r6
     43c:	183ff926 	beq	r3,zero,424 <__alt_data_end+0xfc000424>
     440:	10c00007 	ldb	r3,0(r2)
     444:	18000326 	beq	r3,zero,454 <strlen+0x74>
     448:	10800044 	addi	r2,r2,1
     44c:	10c00007 	ldb	r3,0(r2)
     450:	183ffd1e 	bne	r3,zero,448 <__alt_data_end+0xfc000448>
     454:	1105c83a 	sub	r2,r2,r4
     458:	f800283a 	ret
     45c:	2005883a 	mov	r2,r4
     460:	003fea06 	br	40c <__alt_data_end+0xfc00040c>
     464:	0005883a 	mov	r2,zero
     468:	f800283a 	ret

0000046c <__sfvwrite_r>:
     46c:	30800217 	ldw	r2,8(r6)
     470:	defff404 	addi	sp,sp,-48
     474:	dcc00515 	stw	r19,20(sp)
     478:	dfc00b15 	stw	ra,44(sp)
     47c:	df000a15 	stw	fp,40(sp)
     480:	ddc00915 	stw	r23,36(sp)
     484:	dd800815 	stw	r22,32(sp)
     488:	dd400715 	stw	r21,28(sp)
     48c:	dd000615 	stw	r20,24(sp)
     490:	dc800415 	stw	r18,16(sp)
     494:	dc400315 	stw	r17,12(sp)
     498:	dc000215 	stw	r16,8(sp)
     49c:	3027883a 	mov	r19,r6
     4a0:	10001d26 	beq	r2,zero,518 <__sfvwrite_r+0xac>
     4a4:	2880030b 	ldhu	r2,12(r5)
     4a8:	202b883a 	mov	r21,r4
     4ac:	2821883a 	mov	r16,r5
     4b0:	10c0020c 	andi	r3,r2,8
     4b4:	18002526 	beq	r3,zero,54c <__sfvwrite_r+0xe0>
     4b8:	28c00417 	ldw	r3,16(r5)
     4bc:	18002326 	beq	r3,zero,54c <__sfvwrite_r+0xe0>
     4c0:	10c0008c 	andi	r3,r2,2
     4c4:	9c400017 	ldw	r17,0(r19)
     4c8:	18002826 	beq	r3,zero,56c <__sfvwrite_r+0x100>
     4cc:	0029883a 	mov	r20,zero
     4d0:	0025883a 	mov	r18,zero
     4d4:	05810004 	movi	r22,1024
     4d8:	a00d883a 	mov	r6,r20
     4dc:	a809883a 	mov	r4,r21
     4e0:	90004726 	beq	r18,zero,600 <__sfvwrite_r+0x194>
     4e4:	900f883a 	mov	r7,r18
     4e8:	81400717 	ldw	r5,28(r16)
     4ec:	b480012e 	bgeu	r22,r18,4f4 <__sfvwrite_r+0x88>
     4f0:	01c10004 	movi	r7,1024
     4f4:	80800917 	ldw	r2,36(r16)
     4f8:	103ee83a 	callr	r2
     4fc:	00804c0e 	bge	zero,r2,630 <__sfvwrite_r+0x1c4>
     500:	98c00217 	ldw	r3,8(r19)
     504:	a0a9883a 	add	r20,r20,r2
     508:	90a5c83a 	sub	r18,r18,r2
     50c:	1885c83a 	sub	r2,r3,r2
     510:	98800215 	stw	r2,8(r19)
     514:	103ff01e 	bne	r2,zero,4d8 <__alt_data_end+0xfc0004d8>
     518:	0005883a 	mov	r2,zero
     51c:	dfc00b17 	ldw	ra,44(sp)
     520:	df000a17 	ldw	fp,40(sp)
     524:	ddc00917 	ldw	r23,36(sp)
     528:	dd800817 	ldw	r22,32(sp)
     52c:	dd400717 	ldw	r21,28(sp)
     530:	dd000617 	ldw	r20,24(sp)
     534:	dcc00517 	ldw	r19,20(sp)
     538:	dc800417 	ldw	r18,16(sp)
     53c:	dc400317 	ldw	r17,12(sp)
     540:	dc000217 	ldw	r16,8(sp)
     544:	dec00c04 	addi	sp,sp,48
     548:	f800283a 	ret
     54c:	a809883a 	mov	r4,r21
     550:	800b883a 	mov	r5,r16
     554:	00019d40 	call	19d4 <__swsetup_r>
     558:	1000e81e 	bne	r2,zero,8fc <__sfvwrite_r+0x490>
     55c:	8080030b 	ldhu	r2,12(r16)
     560:	9c400017 	ldw	r17,0(r19)
     564:	10c0008c 	andi	r3,r2,2
     568:	183fd81e 	bne	r3,zero,4cc <__alt_data_end+0xfc0004cc>
     56c:	10c0004c 	andi	r3,r2,1
     570:	002d883a 	mov	r22,zero
     574:	1800331e 	bne	r3,zero,644 <__sfvwrite_r+0x1d8>
     578:	0025883a 	mov	r18,zero
     57c:	90001c26 	beq	r18,zero,5f0 <__sfvwrite_r+0x184>
     580:	10c0800c 	andi	r3,r2,512
     584:	85000217 	ldw	r20,8(r16)
     588:	18006f26 	beq	r3,zero,748 <__sfvwrite_r+0x2dc>
     58c:	95008936 	bltu	r18,r20,7b4 <__sfvwrite_r+0x348>
     590:	10c1200c 	andi	r3,r2,1152
     594:	1800a11e 	bne	r3,zero,81c <__sfvwrite_r+0x3b0>
     598:	81000017 	ldw	r4,0(r16)
     59c:	a02f883a 	mov	r23,r20
     5a0:	a039883a 	mov	fp,r20
     5a4:	9029883a 	mov	r20,r18
     5a8:	b00b883a 	mov	r5,r22
     5ac:	b80d883a 	mov	r6,r23
     5b0:	00012d00 	call	12d0 <memmove>
     5b4:	81400217 	ldw	r5,8(r16)
     5b8:	81000017 	ldw	r4,0(r16)
     5bc:	9005883a 	mov	r2,r18
     5c0:	2f39c83a 	sub	fp,r5,fp
     5c4:	25c7883a 	add	r3,r4,r23
     5c8:	87000215 	stw	fp,8(r16)
     5cc:	80c00015 	stw	r3,0(r16)
     5d0:	98c00217 	ldw	r3,8(r19)
     5d4:	b0ad883a 	add	r22,r22,r2
     5d8:	90a5c83a 	sub	r18,r18,r2
     5dc:	1d29c83a 	sub	r20,r3,r20
     5e0:	9d000215 	stw	r20,8(r19)
     5e4:	a03fcc26 	beq	r20,zero,518 <__alt_data_end+0xfc000518>
     5e8:	8080030b 	ldhu	r2,12(r16)
     5ec:	903fe41e 	bne	r18,zero,580 <__alt_data_end+0xfc000580>
     5f0:	8d800017 	ldw	r22,0(r17)
     5f4:	8c800117 	ldw	r18,4(r17)
     5f8:	8c400204 	addi	r17,r17,8
     5fc:	003fdf06 	br	57c <__alt_data_end+0xfc00057c>
     600:	8d000017 	ldw	r20,0(r17)
     604:	8c800117 	ldw	r18,4(r17)
     608:	8c400204 	addi	r17,r17,8
     60c:	003fb206 	br	4d8 <__alt_data_end+0xfc0004d8>
     610:	000140c0 	call	140c <_realloc_r>
     614:	1039883a 	mov	fp,r2
     618:	10009d1e 	bne	r2,zero,890 <__sfvwrite_r+0x424>
     61c:	81400417 	ldw	r5,16(r16)
     620:	a809883a 	mov	r4,r21
     624:	000224c0 	call	224c <_free_r>
     628:	00800304 	movi	r2,12
     62c:	a8800015 	stw	r2,0(r21)
     630:	80c0030b 	ldhu	r3,12(r16)
     634:	00bfffc4 	movi	r2,-1
     638:	18c01014 	ori	r3,r3,64
     63c:	80c0030d 	sth	r3,12(r16)
     640:	003fb606 	br	51c <__alt_data_end+0xfc00051c>
     644:	0007883a 	mov	r3,zero
     648:	0039883a 	mov	fp,zero
     64c:	0025883a 	mov	r18,zero
     650:	90001f26 	beq	r18,zero,6d0 <__sfvwrite_r+0x264>
     654:	18006826 	beq	r3,zero,7f8 <__sfvwrite_r+0x38c>
     658:	b02f883a 	mov	r23,r22
     65c:	9580012e 	bgeu	r18,r22,664 <__sfvwrite_r+0x1f8>
     660:	902f883a 	mov	r23,r18
     664:	81000017 	ldw	r4,0(r16)
     668:	80800417 	ldw	r2,16(r16)
     66c:	b829883a 	mov	r20,r23
     670:	81800217 	ldw	r6,8(r16)
     674:	81c00517 	ldw	r7,20(r16)
     678:	1100022e 	bgeu	r2,r4,684 <__sfvwrite_r+0x218>
     67c:	31d1883a 	add	r8,r6,r7
     680:	45c01816 	blt	r8,r23,6e4 <__sfvwrite_r+0x278>
     684:	b9c03f16 	blt	r23,r7,784 <__sfvwrite_r+0x318>
     688:	80800917 	ldw	r2,36(r16)
     68c:	81400717 	ldw	r5,28(r16)
     690:	a809883a 	mov	r4,r21
     694:	d8c00115 	stw	r3,4(sp)
     698:	e00d883a 	mov	r6,fp
     69c:	103ee83a 	callr	r2
     6a0:	1029883a 	mov	r20,r2
     6a4:	d8c00117 	ldw	r3,4(sp)
     6a8:	00bfe10e 	bge	zero,r2,630 <__alt_data_end+0xfc000630>
     6ac:	b52dc83a 	sub	r22,r22,r20
     6b0:	b0001f26 	beq	r22,zero,730 <__sfvwrite_r+0x2c4>
     6b4:	98800217 	ldw	r2,8(r19)
     6b8:	e539883a 	add	fp,fp,r20
     6bc:	9525c83a 	sub	r18,r18,r20
     6c0:	1529c83a 	sub	r20,r2,r20
     6c4:	9d000215 	stw	r20,8(r19)
     6c8:	a03f9326 	beq	r20,zero,518 <__alt_data_end+0xfc000518>
     6cc:	903fe11e 	bne	r18,zero,654 <__alt_data_end+0xfc000654>
     6d0:	8f000017 	ldw	fp,0(r17)
     6d4:	8c800117 	ldw	r18,4(r17)
     6d8:	0007883a 	mov	r3,zero
     6dc:	8c400204 	addi	r17,r17,8
     6e0:	003fdb06 	br	650 <__alt_data_end+0xfc000650>
     6e4:	400d883a 	mov	r6,r8
     6e8:	e00b883a 	mov	r5,fp
     6ec:	d8c00115 	stw	r3,4(sp)
     6f0:	da000015 	stw	r8,0(sp)
     6f4:	00012d00 	call	12d0 <memmove>
     6f8:	da000017 	ldw	r8,0(sp)
     6fc:	80800017 	ldw	r2,0(r16)
     700:	a809883a 	mov	r4,r21
     704:	800b883a 	mov	r5,r16
     708:	1205883a 	add	r2,r2,r8
     70c:	80800015 	stw	r2,0(r16)
     710:	da000015 	stw	r8,0(sp)
     714:	0001b0c0 	call	1b0c <_fflush_r>
     718:	d8c00117 	ldw	r3,4(sp)
     71c:	da000017 	ldw	r8,0(sp)
     720:	103fc31e 	bne	r2,zero,630 <__alt_data_end+0xfc000630>
     724:	4029883a 	mov	r20,r8
     728:	b52dc83a 	sub	r22,r22,r20
     72c:	b03fe11e 	bne	r22,zero,6b4 <__alt_data_end+0xfc0006b4>
     730:	a809883a 	mov	r4,r21
     734:	800b883a 	mov	r5,r16
     738:	0001b0c0 	call	1b0c <_fflush_r>
     73c:	103fbc1e 	bne	r2,zero,630 <__alt_data_end+0xfc000630>
     740:	0007883a 	mov	r3,zero
     744:	003fdb06 	br	6b4 <__alt_data_end+0xfc0006b4>
     748:	81000017 	ldw	r4,0(r16)
     74c:	80800417 	ldw	r2,16(r16)
     750:	1100012e 	bgeu	r2,r4,758 <__sfvwrite_r+0x2ec>
     754:	a4805836 	bltu	r20,r18,8b8 <__sfvwrite_r+0x44c>
     758:	81c00517 	ldw	r7,20(r16)
     75c:	91c01a36 	bltu	r18,r7,7c8 <__sfvwrite_r+0x35c>
     760:	80800917 	ldw	r2,36(r16)
     764:	81400717 	ldw	r5,28(r16)
     768:	a809883a 	mov	r4,r21
     76c:	b00d883a 	mov	r6,r22
     770:	103ee83a 	callr	r2
     774:	1029883a 	mov	r20,r2
     778:	00bfad0e 	bge	zero,r2,630 <__alt_data_end+0xfc000630>
     77c:	a005883a 	mov	r2,r20
     780:	003f9306 	br	5d0 <__alt_data_end+0xfc0005d0>
     784:	b80d883a 	mov	r6,r23
     788:	e00b883a 	mov	r5,fp
     78c:	d8c00115 	stw	r3,4(sp)
     790:	00012d00 	call	12d0 <memmove>
     794:	80800217 	ldw	r2,8(r16)
     798:	81000017 	ldw	r4,0(r16)
     79c:	d8c00117 	ldw	r3,4(sp)
     7a0:	15c5c83a 	sub	r2,r2,r23
     7a4:	25ef883a 	add	r23,r4,r23
     7a8:	80800215 	stw	r2,8(r16)
     7ac:	85c00015 	stw	r23,0(r16)
     7b0:	003fbe06 	br	6ac <__alt_data_end+0xfc0006ac>
     7b4:	81000017 	ldw	r4,0(r16)
     7b8:	9039883a 	mov	fp,r18
     7bc:	9029883a 	mov	r20,r18
     7c0:	902f883a 	mov	r23,r18
     7c4:	003f7806 	br	5a8 <__alt_data_end+0xfc0005a8>
     7c8:	b00b883a 	mov	r5,r22
     7cc:	900d883a 	mov	r6,r18
     7d0:	00012d00 	call	12d0 <memmove>
     7d4:	80c00217 	ldw	r3,8(r16)
     7d8:	80800017 	ldw	r2,0(r16)
     7dc:	9029883a 	mov	r20,r18
     7e0:	1c87c83a 	sub	r3,r3,r18
     7e4:	1485883a 	add	r2,r2,r18
     7e8:	80800015 	stw	r2,0(r16)
     7ec:	80c00215 	stw	r3,8(r16)
     7f0:	9005883a 	mov	r2,r18
     7f4:	003f7606 	br	5d0 <__alt_data_end+0xfc0005d0>
     7f8:	e009883a 	mov	r4,fp
     7fc:	01400284 	movi	r5,10
     800:	900d883a 	mov	r6,r18
     804:	00010dc0 	call	10dc <memchr>
     808:	10003926 	beq	r2,zero,8f0 <__sfvwrite_r+0x484>
     80c:	15800044 	addi	r22,r2,1
     810:	b72dc83a 	sub	r22,r22,fp
     814:	00c00044 	movi	r3,1
     818:	003f8f06 	br	658 <__alt_data_end+0xfc000658>
     81c:	81000517 	ldw	r4,20(r16)
     820:	81400417 	ldw	r5,16(r16)
     824:	80c00017 	ldw	r3,0(r16)
     828:	210d883a 	add	r6,r4,r4
     82c:	3109883a 	add	r4,r6,r4
     830:	2028d7fa 	srli	r20,r4,31
     834:	196fc83a 	sub	r23,r3,r5
     838:	b9800044 	addi	r6,r23,1
     83c:	a109883a 	add	r4,r20,r4
     840:	2029d07a 	srai	r20,r4,1
     844:	348d883a 	add	r6,r6,r18
     848:	a180272e 	bgeu	r20,r6,8e8 <__sfvwrite_r+0x47c>
     84c:	3029883a 	mov	r20,r6
     850:	1081000c 	andi	r2,r2,1024
     854:	a809883a 	mov	r4,r21
     858:	103f6d26 	beq	r2,zero,610 <__alt_data_end+0xfc000610>
     85c:	300b883a 	mov	r5,r6
     860:	00009180 	call	918 <_malloc_r>
     864:	1039883a 	mov	fp,r2
     868:	103f6f26 	beq	r2,zero,628 <__alt_data_end+0xfc000628>
     86c:	81400417 	ldw	r5,16(r16)
     870:	1009883a 	mov	r4,r2
     874:	b80d883a 	mov	r6,r23
     878:	00011c40 	call	11c4 <memcpy>
     87c:	8080030b 	ldhu	r2,12(r16)
     880:	00fedfc4 	movi	r3,-1153
     884:	10c4703a 	and	r2,r2,r3
     888:	10802014 	ori	r2,r2,128
     88c:	8080030d 	sth	r2,12(r16)
     890:	e5c9883a 	add	r4,fp,r23
     894:	a5c7c83a 	sub	r3,r20,r23
     898:	87000415 	stw	fp,16(r16)
     89c:	85000515 	stw	r20,20(r16)
     8a0:	81000015 	stw	r4,0(r16)
     8a4:	9039883a 	mov	fp,r18
     8a8:	80c00215 	stw	r3,8(r16)
     8ac:	9029883a 	mov	r20,r18
     8b0:	902f883a 	mov	r23,r18
     8b4:	003f3c06 	br	5a8 <__alt_data_end+0xfc0005a8>
     8b8:	b00b883a 	mov	r5,r22
     8bc:	a00d883a 	mov	r6,r20
     8c0:	00012d00 	call	12d0 <memmove>
     8c4:	80800017 	ldw	r2,0(r16)
     8c8:	a809883a 	mov	r4,r21
     8cc:	800b883a 	mov	r5,r16
     8d0:	1505883a 	add	r2,r2,r20
     8d4:	80800015 	stw	r2,0(r16)
     8d8:	0001b0c0 	call	1b0c <_fflush_r>
     8dc:	103f541e 	bne	r2,zero,630 <__alt_data_end+0xfc000630>
     8e0:	a005883a 	mov	r2,r20
     8e4:	003f3a06 	br	5d0 <__alt_data_end+0xfc0005d0>
     8e8:	a00d883a 	mov	r6,r20
     8ec:	003fd806 	br	850 <__alt_data_end+0xfc000850>
     8f0:	95800044 	addi	r22,r18,1
     8f4:	00c00044 	movi	r3,1
     8f8:	003f5706 	br	658 <__alt_data_end+0xfc000658>
     8fc:	80c0030b 	ldhu	r3,12(r16)
     900:	00bfffc4 	movi	r2,-1
     904:	18c01014 	ori	r3,r3,64
     908:	80c0030d 	sth	r3,12(r16)
     90c:	00c00244 	movi	r3,9
     910:	a8c00015 	stw	r3,0(r21)
     914:	003f0106 	br	51c <__alt_data_end+0xfc00051c>

00000918 <_malloc_r>:
     918:	defff504 	addi	sp,sp,-44
     91c:	dc800315 	stw	r18,12(sp)
     920:	dfc00a15 	stw	ra,40(sp)
     924:	df000915 	stw	fp,36(sp)
     928:	ddc00815 	stw	r23,32(sp)
     92c:	dd800715 	stw	r22,28(sp)
     930:	dd400615 	stw	r21,24(sp)
     934:	dd000515 	stw	r20,20(sp)
     938:	dcc00415 	stw	r19,16(sp)
     93c:	dc400215 	stw	r17,8(sp)
     940:	dc000115 	stw	r16,4(sp)
     944:	288002c4 	addi	r2,r5,11
     948:	00c00584 	movi	r3,22
     94c:	2025883a 	mov	r18,r4
     950:	18802b2e 	bgeu	r3,r2,a00 <_malloc_r+0xe8>
     954:	047ffe04 	movi	r17,-8
     958:	1462703a 	and	r17,r2,r17
     95c:	88002a16 	blt	r17,zero,a08 <_malloc_r+0xf0>
     960:	89402936 	bltu	r17,r5,a08 <_malloc_r+0xf0>
     964:	9009883a 	mov	r4,r18
     968:	00038e00 	call	38e0 <__malloc_lock>
     96c:	00807dc4 	movi	r2,503
     970:	14402936 	bltu	r2,r17,a18 <_malloc_r+0x100>
     974:	8808d0fa 	srli	r4,r17,3
     978:	04c00074 	movhi	r19,1
     97c:	9cf9c504 	addi	r19,r19,-6380
     980:	2105883a 	add	r2,r4,r4
     984:	1085883a 	add	r2,r2,r2
     988:	1085883a 	add	r2,r2,r2
     98c:	9885883a 	add	r2,r19,r2
     990:	14000317 	ldw	r16,12(r2)
     994:	80815226 	beq	r16,r2,ee0 <_malloc_r+0x5c8>
     998:	81000117 	ldw	r4,4(r16)
     99c:	00bfff04 	movi	r2,-4
     9a0:	80c00317 	ldw	r3,12(r16)
     9a4:	2084703a 	and	r2,r4,r2
     9a8:	8085883a 	add	r2,r16,r2
     9ac:	81000217 	ldw	r4,8(r16)
     9b0:	11400117 	ldw	r5,4(r2)
     9b4:	20c00315 	stw	r3,12(r4)
     9b8:	19000215 	stw	r4,8(r3)
     9bc:	28c00054 	ori	r3,r5,1
     9c0:	10c00115 	stw	r3,4(r2)
     9c4:	9009883a 	mov	r4,r18
     9c8:	0003a000 	call	3a00 <__malloc_unlock>
     9cc:	80800204 	addi	r2,r16,8
     9d0:	dfc00a17 	ldw	ra,40(sp)
     9d4:	df000917 	ldw	fp,36(sp)
     9d8:	ddc00817 	ldw	r23,32(sp)
     9dc:	dd800717 	ldw	r22,28(sp)
     9e0:	dd400617 	ldw	r21,24(sp)
     9e4:	dd000517 	ldw	r20,20(sp)
     9e8:	dcc00417 	ldw	r19,16(sp)
     9ec:	dc800317 	ldw	r18,12(sp)
     9f0:	dc400217 	ldw	r17,8(sp)
     9f4:	dc000117 	ldw	r16,4(sp)
     9f8:	dec00b04 	addi	sp,sp,44
     9fc:	f800283a 	ret
     a00:	04400404 	movi	r17,16
     a04:	897fd72e 	bgeu	r17,r5,964 <__alt_data_end+0xfc000964>
     a08:	00800304 	movi	r2,12
     a0c:	90800015 	stw	r2,0(r18)
     a10:	0005883a 	mov	r2,zero
     a14:	003fee06 	br	9d0 <__alt_data_end+0xfc0009d0>
     a18:	8808d27a 	srli	r4,r17,9
     a1c:	20007126 	beq	r4,zero,be4 <_malloc_r+0x2cc>
     a20:	00800104 	movi	r2,4
     a24:	1100f536 	bltu	r2,r4,dfc <_malloc_r+0x4e4>
     a28:	8808d1ba 	srli	r4,r17,6
     a2c:	21000e04 	addi	r4,r4,56
     a30:	210b883a 	add	r5,r4,r4
     a34:	294b883a 	add	r5,r5,r5
     a38:	294b883a 	add	r5,r5,r5
     a3c:	04c00074 	movhi	r19,1
     a40:	9cf9c504 	addi	r19,r19,-6380
     a44:	994b883a 	add	r5,r19,r5
     a48:	2c000317 	ldw	r16,12(r5)
     a4c:	2c000e26 	beq	r5,r16,a88 <_malloc_r+0x170>
     a50:	80c00117 	ldw	r3,4(r16)
     a54:	01ffff04 	movi	r7,-4
     a58:	018003c4 	movi	r6,15
     a5c:	19c6703a 	and	r3,r3,r7
     a60:	1c45c83a 	sub	r2,r3,r17
     a64:	30800716 	blt	r6,r2,a84 <_malloc_r+0x16c>
     a68:	1000610e 	bge	r2,zero,bf0 <_malloc_r+0x2d8>
     a6c:	84000317 	ldw	r16,12(r16)
     a70:	2c000526 	beq	r5,r16,a88 <_malloc_r+0x170>
     a74:	80c00117 	ldw	r3,4(r16)
     a78:	19c6703a 	and	r3,r3,r7
     a7c:	1c45c83a 	sub	r2,r3,r17
     a80:	30bff90e 	bge	r6,r2,a68 <__alt_data_end+0xfc000a68>
     a84:	213fffc4 	addi	r4,r4,-1
     a88:	21000044 	addi	r4,r4,1
     a8c:	9c000417 	ldw	r16,16(r19)
     a90:	00c00074 	movhi	r3,1
     a94:	18f9c504 	addi	r3,r3,-6380
     a98:	1a400204 	addi	r9,r3,8
     a9c:	82410926 	beq	r16,r9,ec4 <_malloc_r+0x5ac>
     aa0:	81400117 	ldw	r5,4(r16)
     aa4:	00bfff04 	movi	r2,-4
     aa8:	018003c4 	movi	r6,15
     aac:	2884703a 	and	r2,r5,r2
     ab0:	144bc83a 	sub	r5,r2,r17
     ab4:	3140f416 	blt	r6,r5,e88 <_malloc_r+0x570>
     ab8:	1a400515 	stw	r9,20(r3)
     abc:	1a400415 	stw	r9,16(r3)
     ac0:	2800570e 	bge	r5,zero,c20 <_malloc_r+0x308>
     ac4:	01407fc4 	movi	r5,511
     ac8:	2880d436 	bltu	r5,r2,e1c <_malloc_r+0x504>
     acc:	1004d0fa 	srli	r2,r2,3
     ad0:	02000044 	movi	r8,1
     ad4:	19c00117 	ldw	r7,4(r3)
     ad8:	108b883a 	add	r5,r2,r2
     adc:	294b883a 	add	r5,r5,r5
     ae0:	1005d0ba 	srai	r2,r2,2
     ae4:	294b883a 	add	r5,r5,r5
     ae8:	28cb883a 	add	r5,r5,r3
     aec:	29800217 	ldw	r6,8(r5)
     af0:	4084983a 	sll	r2,r8,r2
     af4:	81400315 	stw	r5,12(r16)
     af8:	81800215 	stw	r6,8(r16)
     afc:	11c4b03a 	or	r2,r2,r7
     b00:	2c000215 	stw	r16,8(r5)
     b04:	18800115 	stw	r2,4(r3)
     b08:	34000315 	stw	r16,12(r6)
     b0c:	2007d0ba 	srai	r3,r4,2
     b10:	01400044 	movi	r5,1
     b14:	28ca983a 	sll	r5,r5,r3
     b18:	11404936 	bltu	r2,r5,c40 <_malloc_r+0x328>
     b1c:	1146703a 	and	r3,r2,r5
     b20:	18000a1e 	bne	r3,zero,b4c <_malloc_r+0x234>
     b24:	00ffff04 	movi	r3,-4
     b28:	294b883a 	add	r5,r5,r5
     b2c:	20c8703a 	and	r4,r4,r3
     b30:	1146703a 	and	r3,r2,r5
     b34:	21000104 	addi	r4,r4,4
     b38:	1800041e 	bne	r3,zero,b4c <_malloc_r+0x234>
     b3c:	294b883a 	add	r5,r5,r5
     b40:	1146703a 	and	r3,r2,r5
     b44:	21000104 	addi	r4,r4,4
     b48:	183ffc26 	beq	r3,zero,b3c <__alt_data_end+0xfc000b3c>
     b4c:	023fff04 	movi	r8,-4
     b50:	01c003c4 	movi	r7,15
     b54:	2105883a 	add	r2,r4,r4
     b58:	1085883a 	add	r2,r2,r2
     b5c:	1085883a 	add	r2,r2,r2
     b60:	9897883a 	add	r11,r19,r2
     b64:	5a800304 	addi	r10,r11,12
     b68:	2019883a 	mov	r12,r4
     b6c:	54000017 	ldw	r16,0(r10)
     b70:	51bffd04 	addi	r6,r10,-12
     b74:	8180041e 	bne	r16,r6,b88 <_malloc_r+0x270>
     b78:	0000d406 	br	ecc <_malloc_r+0x5b4>
     b7c:	1000dd0e 	bge	r2,zero,ef4 <_malloc_r+0x5dc>
     b80:	84000317 	ldw	r16,12(r16)
     b84:	8180d126 	beq	r16,r6,ecc <_malloc_r+0x5b4>
     b88:	80c00117 	ldw	r3,4(r16)
     b8c:	1a06703a 	and	r3,r3,r8
     b90:	1c45c83a 	sub	r2,r3,r17
     b94:	38bff90e 	bge	r7,r2,b7c <__alt_data_end+0xfc000b7c>
     b98:	80c00317 	ldw	r3,12(r16)
     b9c:	81000217 	ldw	r4,8(r16)
     ba0:	89400054 	ori	r5,r17,1
     ba4:	81400115 	stw	r5,4(r16)
     ba8:	20c00315 	stw	r3,12(r4)
     bac:	19000215 	stw	r4,8(r3)
     bb0:	8463883a 	add	r17,r16,r17
     bb4:	9c400515 	stw	r17,20(r19)
     bb8:	9c400415 	stw	r17,16(r19)
     bbc:	10c00054 	ori	r3,r2,1
     bc0:	8a400315 	stw	r9,12(r17)
     bc4:	8a400215 	stw	r9,8(r17)
     bc8:	88c00115 	stw	r3,4(r17)
     bcc:	88a3883a 	add	r17,r17,r2
     bd0:	88800015 	stw	r2,0(r17)
     bd4:	9009883a 	mov	r4,r18
     bd8:	0003a000 	call	3a00 <__malloc_unlock>
     bdc:	80800204 	addi	r2,r16,8
     be0:	003f7b06 	br	9d0 <__alt_data_end+0xfc0009d0>
     be4:	01401f84 	movi	r5,126
     be8:	01000fc4 	movi	r4,63
     bec:	003f9106 	br	a34 <__alt_data_end+0xfc000a34>
     bf0:	80800317 	ldw	r2,12(r16)
     bf4:	81000217 	ldw	r4,8(r16)
     bf8:	80c7883a 	add	r3,r16,r3
     bfc:	19400117 	ldw	r5,4(r3)
     c00:	20800315 	stw	r2,12(r4)
     c04:	11000215 	stw	r4,8(r2)
     c08:	28800054 	ori	r2,r5,1
     c0c:	18800115 	stw	r2,4(r3)
     c10:	9009883a 	mov	r4,r18
     c14:	0003a000 	call	3a00 <__malloc_unlock>
     c18:	80800204 	addi	r2,r16,8
     c1c:	003f6c06 	br	9d0 <__alt_data_end+0xfc0009d0>
     c20:	8085883a 	add	r2,r16,r2
     c24:	10c00117 	ldw	r3,4(r2)
     c28:	9009883a 	mov	r4,r18
     c2c:	18c00054 	ori	r3,r3,1
     c30:	10c00115 	stw	r3,4(r2)
     c34:	0003a000 	call	3a00 <__malloc_unlock>
     c38:	80800204 	addi	r2,r16,8
     c3c:	003f6406 	br	9d0 <__alt_data_end+0xfc0009d0>
     c40:	9c000217 	ldw	r16,8(r19)
     c44:	00bfff04 	movi	r2,-4
     c48:	85400117 	ldw	r21,4(r16)
     c4c:	a8aa703a 	and	r21,r21,r2
     c50:	ac400336 	bltu	r21,r17,c60 <_malloc_r+0x348>
     c54:	ac45c83a 	sub	r2,r21,r17
     c58:	00c003c4 	movi	r3,15
     c5c:	18805d16 	blt	r3,r2,dd4 <_malloc_r+0x4bc>
     c60:	00800074 	movhi	r2,1
     c64:	10864e04 	addi	r2,r2,6456
     c68:	00c00074 	movhi	r3,1
     c6c:	18ff5904 	addi	r3,r3,-668
     c70:	15c00017 	ldw	r23,0(r2)
     c74:	19000017 	ldw	r4,0(r3)
     c78:	00bfffc4 	movi	r2,-1
     c7c:	8579883a 	add	fp,r16,r21
     c80:	8def883a 	add	r23,r17,r23
     c84:	2080e426 	beq	r4,r2,1018 <_malloc_r+0x700>
     c88:	bdc403c4 	addi	r23,r23,4111
     c8c:	00bc0004 	movi	r2,-4096
     c90:	b8ae703a 	and	r23,r23,r2
     c94:	9009883a 	mov	r4,r18
     c98:	b80b883a 	mov	r5,r23
     c9c:	d8c00015 	stw	r3,0(sp)
     ca0:	00019700 	call	1970 <_sbrk_r>
     ca4:	1029883a 	mov	r20,r2
     ca8:	00bfffc4 	movi	r2,-1
     cac:	d8c00017 	ldw	r3,0(sp)
     cb0:	a080a426 	beq	r20,r2,f44 <_malloc_r+0x62c>
     cb4:	a700a236 	bltu	r20,fp,f40 <_malloc_r+0x628>
     cb8:	05800074 	movhi	r22,1
     cbc:	b5866f04 	addi	r22,r22,6588
     cc0:	b0800017 	ldw	r2,0(r22)
     cc4:	b885883a 	add	r2,r23,r2
     cc8:	b0800015 	stw	r2,0(r22)
     ccc:	e500da26 	beq	fp,r20,1038 <_malloc_r+0x720>
     cd0:	19000017 	ldw	r4,0(r3)
     cd4:	00ffffc4 	movi	r3,-1
     cd8:	20c0e426 	beq	r4,r3,106c <_malloc_r+0x754>
     cdc:	a739c83a 	sub	fp,r20,fp
     ce0:	1705883a 	add	r2,r2,fp
     ce4:	b0800015 	stw	r2,0(r22)
     ce8:	a08001cc 	andi	r2,r20,7
     cec:	1000b526 	beq	r2,zero,fc4 <_malloc_r+0x6ac>
     cf0:	a0a9c83a 	sub	r20,r20,r2
     cf4:	00c40204 	movi	r3,4104
     cf8:	a5000204 	addi	r20,r20,8
     cfc:	1885c83a 	sub	r2,r3,r2
     d00:	a5c7883a 	add	r3,r20,r23
     d04:	18c3ffcc 	andi	r3,r3,4095
     d08:	10efc83a 	sub	r23,r2,r3
     d0c:	9009883a 	mov	r4,r18
     d10:	b80b883a 	mov	r5,r23
     d14:	00019700 	call	1970 <_sbrk_r>
     d18:	00ffffc4 	movi	r3,-1
     d1c:	10c0d026 	beq	r2,r3,1060 <_malloc_r+0x748>
     d20:	1505c83a 	sub	r2,r2,r20
     d24:	b887883a 	add	r3,r23,r2
     d28:	18c00054 	ori	r3,r3,1
     d2c:	b0800017 	ldw	r2,0(r22)
     d30:	9d000215 	stw	r20,8(r19)
     d34:	a0c00115 	stw	r3,4(r20)
     d38:	b885883a 	add	r2,r23,r2
     d3c:	b0800015 	stw	r2,0(r22)
     d40:	84c00e26 	beq	r16,r19,d7c <_malloc_r+0x464>
     d44:	00c003c4 	movi	r3,15
     d48:	1d40a02e 	bgeu	r3,r21,fcc <_malloc_r+0x6b4>
     d4c:	81400117 	ldw	r5,4(r16)
     d50:	ad7ffd04 	addi	r21,r21,-12
     d54:	013ffe04 	movi	r4,-8
     d58:	a908703a 	and	r4,r21,r4
     d5c:	2940004c 	andi	r5,r5,1
     d60:	214ab03a 	or	r5,r4,r5
     d64:	81400115 	stw	r5,4(r16)
     d68:	01800144 	movi	r6,5
     d6c:	810b883a 	add	r5,r16,r4
     d70:	29800115 	stw	r6,4(r5)
     d74:	29800215 	stw	r6,8(r5)
     d78:	1900c036 	bltu	r3,r4,107c <_malloc_r+0x764>
     d7c:	00c00074 	movhi	r3,1
     d80:	18c64d04 	addi	r3,r3,6452
     d84:	19000017 	ldw	r4,0(r3)
     d88:	2080012e 	bgeu	r4,r2,d90 <_malloc_r+0x478>
     d8c:	18800015 	stw	r2,0(r3)
     d90:	00c00074 	movhi	r3,1
     d94:	18c64c04 	addi	r3,r3,6448
     d98:	19000017 	ldw	r4,0(r3)
     d9c:	9c000217 	ldw	r16,8(r19)
     da0:	2080012e 	bgeu	r4,r2,da8 <_malloc_r+0x490>
     da4:	18800015 	stw	r2,0(r3)
     da8:	80c00117 	ldw	r3,4(r16)
     dac:	00bfff04 	movi	r2,-4
     db0:	1886703a 	and	r3,r3,r2
     db4:	1c45c83a 	sub	r2,r3,r17
     db8:	1c400236 	bltu	r3,r17,dc4 <_malloc_r+0x4ac>
     dbc:	00c003c4 	movi	r3,15
     dc0:	18800416 	blt	r3,r2,dd4 <_malloc_r+0x4bc>
     dc4:	9009883a 	mov	r4,r18
     dc8:	0003a000 	call	3a00 <__malloc_unlock>
     dcc:	0005883a 	mov	r2,zero
     dd0:	003eff06 	br	9d0 <__alt_data_end+0xfc0009d0>
     dd4:	88c00054 	ori	r3,r17,1
     dd8:	80c00115 	stw	r3,4(r16)
     ddc:	8463883a 	add	r17,r16,r17
     de0:	10800054 	ori	r2,r2,1
     de4:	9c400215 	stw	r17,8(r19)
     de8:	88800115 	stw	r2,4(r17)
     dec:	9009883a 	mov	r4,r18
     df0:	0003a000 	call	3a00 <__malloc_unlock>
     df4:	80800204 	addi	r2,r16,8
     df8:	003ef506 	br	9d0 <__alt_data_end+0xfc0009d0>
     dfc:	00800504 	movi	r2,20
     e00:	1100482e 	bgeu	r2,r4,f24 <_malloc_r+0x60c>
     e04:	00801504 	movi	r2,84
     e08:	11006836 	bltu	r2,r4,fac <_malloc_r+0x694>
     e0c:	8808d33a 	srli	r4,r17,12
     e10:	21001b84 	addi	r4,r4,110
     e14:	210b883a 	add	r5,r4,r4
     e18:	003f0606 	br	a34 <__alt_data_end+0xfc000a34>
     e1c:	1006d27a 	srli	r3,r2,9
     e20:	01400104 	movi	r5,4
     e24:	28c0422e 	bgeu	r5,r3,f30 <_malloc_r+0x618>
     e28:	01400504 	movi	r5,20
     e2c:	28c07c36 	bltu	r5,r3,1020 <_malloc_r+0x708>
     e30:	194016c4 	addi	r5,r3,91
     e34:	294d883a 	add	r6,r5,r5
     e38:	318d883a 	add	r6,r6,r6
     e3c:	318d883a 	add	r6,r6,r6
     e40:	998d883a 	add	r6,r19,r6
     e44:	30c00217 	ldw	r3,8(r6)
     e48:	01c00074 	movhi	r7,1
     e4c:	39f9c504 	addi	r7,r7,-6380
     e50:	19806326 	beq	r3,r6,fe0 <_malloc_r+0x6c8>
     e54:	01ffff04 	movi	r7,-4
     e58:	19400117 	ldw	r5,4(r3)
     e5c:	29ca703a 	and	r5,r5,r7
     e60:	1140022e 	bgeu	r2,r5,e6c <_malloc_r+0x554>
     e64:	18c00217 	ldw	r3,8(r3)
     e68:	30fffb1e 	bne	r6,r3,e58 <__alt_data_end+0xfc000e58>
     e6c:	19400317 	ldw	r5,12(r3)
     e70:	98800117 	ldw	r2,4(r19)
     e74:	81400315 	stw	r5,12(r16)
     e78:	80c00215 	stw	r3,8(r16)
     e7c:	2c000215 	stw	r16,8(r5)
     e80:	1c000315 	stw	r16,12(r3)
     e84:	003f2106 	br	b0c <__alt_data_end+0xfc000b0c>
     e88:	88800054 	ori	r2,r17,1
     e8c:	80800115 	stw	r2,4(r16)
     e90:	8463883a 	add	r17,r16,r17
     e94:	1c400515 	stw	r17,20(r3)
     e98:	1c400415 	stw	r17,16(r3)
     e9c:	28800054 	ori	r2,r5,1
     ea0:	88800115 	stw	r2,4(r17)
     ea4:	8a400315 	stw	r9,12(r17)
     ea8:	8a400215 	stw	r9,8(r17)
     eac:	8963883a 	add	r17,r17,r5
     eb0:	89400015 	stw	r5,0(r17)
     eb4:	9009883a 	mov	r4,r18
     eb8:	0003a000 	call	3a00 <__malloc_unlock>
     ebc:	80800204 	addi	r2,r16,8
     ec0:	003ec306 	br	9d0 <__alt_data_end+0xfc0009d0>
     ec4:	18800117 	ldw	r2,4(r3)
     ec8:	003f1006 	br	b0c <__alt_data_end+0xfc000b0c>
     ecc:	63000044 	addi	r12,r12,1
     ed0:	608000cc 	andi	r2,r12,3
     ed4:	52800204 	addi	r10,r10,8
     ed8:	103f241e 	bne	r2,zero,b6c <__alt_data_end+0xfc000b6c>
     edc:	00002106 	br	f64 <_malloc_r+0x64c>
     ee0:	80800204 	addi	r2,r16,8
     ee4:	84000517 	ldw	r16,20(r16)
     ee8:	143eab1e 	bne	r2,r16,998 <__alt_data_end+0xfc000998>
     eec:	21000084 	addi	r4,r4,2
     ef0:	003ee606 	br	a8c <__alt_data_end+0xfc000a8c>
     ef4:	80c7883a 	add	r3,r16,r3
     ef8:	19400117 	ldw	r5,4(r3)
     efc:	80800317 	ldw	r2,12(r16)
     f00:	81000217 	ldw	r4,8(r16)
     f04:	29400054 	ori	r5,r5,1
     f08:	19400115 	stw	r5,4(r3)
     f0c:	20800315 	stw	r2,12(r4)
     f10:	11000215 	stw	r4,8(r2)
     f14:	9009883a 	mov	r4,r18
     f18:	0003a000 	call	3a00 <__malloc_unlock>
     f1c:	80800204 	addi	r2,r16,8
     f20:	003eab06 	br	9d0 <__alt_data_end+0xfc0009d0>
     f24:	210016c4 	addi	r4,r4,91
     f28:	210b883a 	add	r5,r4,r4
     f2c:	003ec106 	br	a34 <__alt_data_end+0xfc000a34>
     f30:	100ad1ba 	srli	r5,r2,6
     f34:	29400e04 	addi	r5,r5,56
     f38:	294d883a 	add	r6,r5,r5
     f3c:	003fbe06 	br	e38 <__alt_data_end+0xfc000e38>
     f40:	84ff5d26 	beq	r16,r19,cb8 <__alt_data_end+0xfc000cb8>
     f44:	9c000217 	ldw	r16,8(r19)
     f48:	00bfff04 	movi	r2,-4
     f4c:	80c00117 	ldw	r3,4(r16)
     f50:	1886703a 	and	r3,r3,r2
     f54:	003f9706 	br	db4 <__alt_data_end+0xfc000db4>
     f58:	5ac00017 	ldw	r11,0(r11)
     f5c:	213fffc4 	addi	r4,r4,-1
     f60:	58805c1e 	bne	r11,r2,10d4 <_malloc_r+0x7bc>
     f64:	20c000cc 	andi	r3,r4,3
     f68:	58bffe04 	addi	r2,r11,-8
     f6c:	183ffa1e 	bne	r3,zero,f58 <__alt_data_end+0xfc000f58>
     f70:	98800117 	ldw	r2,4(r19)
     f74:	0146303a 	nor	r3,zero,r5
     f78:	1884703a 	and	r2,r3,r2
     f7c:	98800115 	stw	r2,4(r19)
     f80:	294b883a 	add	r5,r5,r5
     f84:	117f2e36 	bltu	r2,r5,c40 <__alt_data_end+0xfc000c40>
     f88:	283f2d26 	beq	r5,zero,c40 <__alt_data_end+0xfc000c40>
     f8c:	1146703a 	and	r3,r2,r5
     f90:	6009883a 	mov	r4,r12
     f94:	183eef1e 	bne	r3,zero,b54 <__alt_data_end+0xfc000b54>
     f98:	294b883a 	add	r5,r5,r5
     f9c:	1146703a 	and	r3,r2,r5
     fa0:	21000104 	addi	r4,r4,4
     fa4:	183ffc26 	beq	r3,zero,f98 <__alt_data_end+0xfc000f98>
     fa8:	003eea06 	br	b54 <__alt_data_end+0xfc000b54>
     fac:	00805504 	movi	r2,340
     fb0:	11001336 	bltu	r2,r4,1000 <_malloc_r+0x6e8>
     fb4:	8808d3fa 	srli	r4,r17,15
     fb8:	21001dc4 	addi	r4,r4,119
     fbc:	210b883a 	add	r5,r4,r4
     fc0:	003e9c06 	br	a34 <__alt_data_end+0xfc000a34>
     fc4:	00840004 	movi	r2,4096
     fc8:	003f4d06 	br	d00 <__alt_data_end+0xfc000d00>
     fcc:	00800044 	movi	r2,1
     fd0:	a0800115 	stw	r2,4(r20)
     fd4:	a021883a 	mov	r16,r20
     fd8:	0007883a 	mov	r3,zero
     fdc:	003f7506 	br	db4 <__alt_data_end+0xfc000db4>
     fe0:	280bd0ba 	srai	r5,r5,2
     fe4:	01800044 	movi	r6,1
     fe8:	38800117 	ldw	r2,4(r7)
     fec:	314c983a 	sll	r6,r6,r5
     ff0:	180b883a 	mov	r5,r3
     ff4:	3084b03a 	or	r2,r6,r2
     ff8:	38800115 	stw	r2,4(r7)
     ffc:	003f9d06 	br	e74 <__alt_data_end+0xfc000e74>
    1000:	00815504 	movi	r2,1364
    1004:	11001336 	bltu	r2,r4,1054 <_malloc_r+0x73c>
    1008:	8808d4ba 	srli	r4,r17,18
    100c:	21001f04 	addi	r4,r4,124
    1010:	210b883a 	add	r5,r4,r4
    1014:	003e8706 	br	a34 <__alt_data_end+0xfc000a34>
    1018:	bdc00404 	addi	r23,r23,16
    101c:	003f1d06 	br	c94 <__alt_data_end+0xfc000c94>
    1020:	01401504 	movi	r5,84
    1024:	28c01c36 	bltu	r5,r3,1098 <_malloc_r+0x780>
    1028:	100ad33a 	srli	r5,r2,12
    102c:	29401b84 	addi	r5,r5,110
    1030:	294d883a 	add	r6,r5,r5
    1034:	003f8006 	br	e38 <__alt_data_end+0xfc000e38>
    1038:	e103ffcc 	andi	r4,fp,4095
    103c:	203f241e 	bne	r4,zero,cd0 <__alt_data_end+0xfc000cd0>
    1040:	98c00217 	ldw	r3,8(r19)
    1044:	bd49883a 	add	r4,r23,r21
    1048:	21000054 	ori	r4,r4,1
    104c:	19000115 	stw	r4,4(r3)
    1050:	003f4a06 	br	d7c <__alt_data_end+0xfc000d7c>
    1054:	01403f04 	movi	r5,252
    1058:	01001f84 	movi	r4,126
    105c:	003e7506 	br	a34 <__alt_data_end+0xfc000a34>
    1060:	00c00044 	movi	r3,1
    1064:	002f883a 	mov	r23,zero
    1068:	003f3006 	br	d2c <__alt_data_end+0xfc000d2c>
    106c:	00800074 	movhi	r2,1
    1070:	10bf5904 	addi	r2,r2,-668
    1074:	15000015 	stw	r20,0(r2)
    1078:	003f1b06 	br	ce8 <__alt_data_end+0xfc000ce8>
    107c:	9009883a 	mov	r4,r18
    1080:	81400204 	addi	r5,r16,8
    1084:	000224c0 	call	224c <_free_r>
    1088:	00800074 	movhi	r2,1
    108c:	10866f04 	addi	r2,r2,6588
    1090:	10800017 	ldw	r2,0(r2)
    1094:	003f3906 	br	d7c <__alt_data_end+0xfc000d7c>
    1098:	01405504 	movi	r5,340
    109c:	28c00436 	bltu	r5,r3,10b0 <_malloc_r+0x798>
    10a0:	100ad3fa 	srli	r5,r2,15
    10a4:	29401dc4 	addi	r5,r5,119
    10a8:	294d883a 	add	r6,r5,r5
    10ac:	003f6206 	br	e38 <__alt_data_end+0xfc000e38>
    10b0:	01415504 	movi	r5,1364
    10b4:	28c00436 	bltu	r5,r3,10c8 <_malloc_r+0x7b0>
    10b8:	100ad4ba 	srli	r5,r2,18
    10bc:	29401f04 	addi	r5,r5,124
    10c0:	294d883a 	add	r6,r5,r5
    10c4:	003f5c06 	br	e38 <__alt_data_end+0xfc000e38>
    10c8:	01803f04 	movi	r6,252
    10cc:	01401f84 	movi	r5,126
    10d0:	003f5906 	br	e38 <__alt_data_end+0xfc000e38>
    10d4:	98800117 	ldw	r2,4(r19)
    10d8:	003fa906 	br	f80 <__alt_data_end+0xfc000f80>

000010dc <memchr>:
    10dc:	208000cc 	andi	r2,r4,3
    10e0:	2811883a 	mov	r8,r5
    10e4:	10003526 	beq	r2,zero,11bc <memchr+0xe0>
    10e8:	30bfffc4 	addi	r2,r6,-1
    10ec:	30001b26 	beq	r6,zero,115c <memchr+0x80>
    10f0:	21800003 	ldbu	r6,0(r4)
    10f4:	28c03fcc 	andi	r3,r5,255
    10f8:	30c01a26 	beq	r6,r3,1164 <memchr+0x88>
    10fc:	180d883a 	mov	r6,r3
    1100:	00000406 	br	1114 <memchr+0x38>
    1104:	10001526 	beq	r2,zero,115c <memchr+0x80>
    1108:	20c00003 	ldbu	r3,0(r4)
    110c:	10bfffc4 	addi	r2,r2,-1
    1110:	19801426 	beq	r3,r6,1164 <memchr+0x88>
    1114:	21000044 	addi	r4,r4,1
    1118:	20c000cc 	andi	r3,r4,3
    111c:	183ff91e 	bne	r3,zero,1104 <__alt_data_end+0xfc001104>
    1120:	02c000c4 	movi	r11,3
    1124:	58801136 	bltu	r11,r2,116c <memchr+0x90>
    1128:	10000c26 	beq	r2,zero,115c <memchr+0x80>
    112c:	20c00003 	ldbu	r3,0(r4)
    1130:	29403fcc 	andi	r5,r5,255
    1134:	19400b26 	beq	r3,r5,1164 <memchr+0x88>
    1138:	20c00044 	addi	r3,r4,1
    113c:	2085883a 	add	r2,r4,r2
    1140:	41803fcc 	andi	r6,r8,255
    1144:	00000306 	br	1154 <memchr+0x78>
    1148:	18c00044 	addi	r3,r3,1
    114c:	197fffc3 	ldbu	r5,-1(r3)
    1150:	29800426 	beq	r5,r6,1164 <memchr+0x88>
    1154:	1809883a 	mov	r4,r3
    1158:	18bffb1e 	bne	r3,r2,1148 <__alt_data_end+0xfc001148>
    115c:	0005883a 	mov	r2,zero
    1160:	f800283a 	ret
    1164:	2005883a 	mov	r2,r4
    1168:	f800283a 	ret
    116c:	28c03fcc 	andi	r3,r5,255
    1170:	180c923a 	slli	r6,r3,8
    1174:	02bfbff4 	movhi	r10,65279
    1178:	52bfbfc4 	addi	r10,r10,-257
    117c:	02602074 	movhi	r9,32897
    1180:	4a602004 	addi	r9,r9,-32640
    1184:	30c6b03a 	or	r3,r6,r3
    1188:	180c943a 	slli	r6,r3,16
    118c:	30ccb03a 	or	r6,r6,r3
    1190:	20c00017 	ldw	r3,0(r4)
    1194:	30c6f03a 	xor	r3,r6,r3
    1198:	1a8f883a 	add	r7,r3,r10
    119c:	00c6303a 	nor	r3,zero,r3
    11a0:	38c6703a 	and	r3,r7,r3
    11a4:	1a46703a 	and	r3,r3,r9
    11a8:	183fdf1e 	bne	r3,zero,1128 <__alt_data_end+0xfc001128>
    11ac:	10bfff04 	addi	r2,r2,-4
    11b0:	21000104 	addi	r4,r4,4
    11b4:	58bff636 	bltu	r11,r2,1190 <__alt_data_end+0xfc001190>
    11b8:	003fdb06 	br	1128 <__alt_data_end+0xfc001128>
    11bc:	3005883a 	mov	r2,r6
    11c0:	003fd706 	br	1120 <__alt_data_end+0xfc001120>

000011c4 <memcpy>:
    11c4:	00c003c4 	movi	r3,15
    11c8:	2005883a 	mov	r2,r4
    11cc:	1980372e 	bgeu	r3,r6,12ac <memcpy+0xe8>
    11d0:	2146b03a 	or	r3,r4,r5
    11d4:	18c000cc 	andi	r3,r3,3
    11d8:	1800371e 	bne	r3,zero,12b8 <memcpy+0xf4>
    11dc:	327ffc04 	addi	r9,r6,-16
    11e0:	4812d13a 	srli	r9,r9,4
    11e4:	2007883a 	mov	r3,r4
    11e8:	280f883a 	mov	r7,r5
    11ec:	4808913a 	slli	r4,r9,4
    11f0:	1109883a 	add	r4,r2,r4
    11f4:	21000404 	addi	r4,r4,16
    11f8:	3a000017 	ldw	r8,0(r7)
    11fc:	18c00404 	addi	r3,r3,16
    1200:	39c00404 	addi	r7,r7,16
    1204:	1a3ffc15 	stw	r8,-16(r3)
    1208:	3a3ffd17 	ldw	r8,-12(r7)
    120c:	1a3ffd15 	stw	r8,-12(r3)
    1210:	3a3ffe17 	ldw	r8,-8(r7)
    1214:	1a3ffe15 	stw	r8,-8(r3)
    1218:	3a3fff17 	ldw	r8,-4(r7)
    121c:	1a3fff15 	stw	r8,-4(r3)
    1220:	193ff51e 	bne	r3,r4,11f8 <__alt_data_end+0xfc0011f8>
    1224:	49000044 	addi	r4,r9,1
    1228:	2008913a 	slli	r4,r4,4
    122c:	328003cc 	andi	r10,r6,15
    1230:	1107883a 	add	r3,r2,r4
    1234:	290b883a 	add	r5,r5,r4
    1238:	010000c4 	movi	r4,3
    123c:	2280212e 	bgeu	r4,r10,12c4 <memcpy+0x100>
    1240:	52bfff04 	addi	r10,r10,-4
    1244:	5014d0ba 	srli	r10,r10,2
    1248:	180f883a 	mov	r7,r3
    124c:	2811883a 	mov	r8,r5
    1250:	5289883a 	add	r4,r10,r10
    1254:	2109883a 	add	r4,r4,r4
    1258:	21000104 	addi	r4,r4,4
    125c:	1909883a 	add	r4,r3,r4
    1260:	42400017 	ldw	r9,0(r8)
    1264:	39c00104 	addi	r7,r7,4
    1268:	42000104 	addi	r8,r8,4
    126c:	3a7fff15 	stw	r9,-4(r7)
    1270:	393ffb1e 	bne	r7,r4,1260 <__alt_data_end+0xfc001260>
    1274:	51000044 	addi	r4,r10,1
    1278:	2109883a 	add	r4,r4,r4
    127c:	2109883a 	add	r4,r4,r4
    1280:	318000cc 	andi	r6,r6,3
    1284:	1907883a 	add	r3,r3,r4
    1288:	290b883a 	add	r5,r5,r4
    128c:	30000c26 	beq	r6,zero,12c0 <memcpy+0xfc>
    1290:	298d883a 	add	r6,r5,r6
    1294:	29c00003 	ldbu	r7,0(r5)
    1298:	18c00044 	addi	r3,r3,1
    129c:	29400044 	addi	r5,r5,1
    12a0:	19ffffc5 	stb	r7,-1(r3)
    12a4:	29bffb1e 	bne	r5,r6,1294 <__alt_data_end+0xfc001294>
    12a8:	f800283a 	ret
    12ac:	2007883a 	mov	r3,r4
    12b0:	303ff71e 	bne	r6,zero,1290 <__alt_data_end+0xfc001290>
    12b4:	00000206 	br	12c0 <memcpy+0xfc>
    12b8:	2007883a 	mov	r3,r4
    12bc:	003ff406 	br	1290 <__alt_data_end+0xfc001290>
    12c0:	f800283a 	ret
    12c4:	500d883a 	mov	r6,r10
    12c8:	303ff11e 	bne	r6,zero,1290 <__alt_data_end+0xfc001290>
    12cc:	003ffc06 	br	12c0 <__alt_data_end+0xfc0012c0>

000012d0 <memmove>:
    12d0:	2005883a 	mov	r2,r4
    12d4:	29000b2e 	bgeu	r5,r4,1304 <memmove+0x34>
    12d8:	298f883a 	add	r7,r5,r6
    12dc:	21c0092e 	bgeu	r4,r7,1304 <memmove+0x34>
    12e0:	2187883a 	add	r3,r4,r6
    12e4:	198bc83a 	sub	r5,r3,r6
    12e8:	30003e26 	beq	r6,zero,13e4 <memmove+0x114>
    12ec:	39ffffc4 	addi	r7,r7,-1
    12f0:	39000003 	ldbu	r4,0(r7)
    12f4:	18ffffc4 	addi	r3,r3,-1
    12f8:	19000005 	stb	r4,0(r3)
    12fc:	197ffb1e 	bne	r3,r5,12ec <__alt_data_end+0xfc0012ec>
    1300:	f800283a 	ret
    1304:	00c003c4 	movi	r3,15
    1308:	1980372e 	bgeu	r3,r6,13e8 <memmove+0x118>
    130c:	1146b03a 	or	r3,r2,r5
    1310:	18c000cc 	andi	r3,r3,3
    1314:	1800371e 	bne	r3,zero,13f4 <memmove+0x124>
    1318:	327ffc04 	addi	r9,r6,-16
    131c:	4812d13a 	srli	r9,r9,4
    1320:	280f883a 	mov	r7,r5
    1324:	1007883a 	mov	r3,r2
    1328:	4810913a 	slli	r8,r9,4
    132c:	1211883a 	add	r8,r2,r8
    1330:	42000404 	addi	r8,r8,16
    1334:	39000017 	ldw	r4,0(r7)
    1338:	18c00404 	addi	r3,r3,16
    133c:	39c00404 	addi	r7,r7,16
    1340:	193ffc15 	stw	r4,-16(r3)
    1344:	393ffd17 	ldw	r4,-12(r7)
    1348:	193ffd15 	stw	r4,-12(r3)
    134c:	393ffe17 	ldw	r4,-8(r7)
    1350:	193ffe15 	stw	r4,-8(r3)
    1354:	393fff17 	ldw	r4,-4(r7)
    1358:	193fff15 	stw	r4,-4(r3)
    135c:	1a3ff51e 	bne	r3,r8,1334 <__alt_data_end+0xfc001334>
    1360:	49000044 	addi	r4,r9,1
    1364:	2008913a 	slli	r4,r4,4
    1368:	328003cc 	andi	r10,r6,15
    136c:	1107883a 	add	r3,r2,r4
    1370:	290b883a 	add	r5,r5,r4
    1374:	010000c4 	movi	r4,3
    1378:	2280212e 	bgeu	r4,r10,1400 <memmove+0x130>
    137c:	52bfff04 	addi	r10,r10,-4
    1380:	5014d0ba 	srli	r10,r10,2
    1384:	180f883a 	mov	r7,r3
    1388:	2809883a 	mov	r4,r5
    138c:	5291883a 	add	r8,r10,r10
    1390:	4211883a 	add	r8,r8,r8
    1394:	42400104 	addi	r9,r8,4
    1398:	1a53883a 	add	r9,r3,r9
    139c:	22000017 	ldw	r8,0(r4)
    13a0:	39c00104 	addi	r7,r7,4
    13a4:	21000104 	addi	r4,r4,4
    13a8:	3a3fff15 	stw	r8,-4(r7)
    13ac:	3a7ffb1e 	bne	r7,r9,139c <__alt_data_end+0xfc00139c>
    13b0:	51000044 	addi	r4,r10,1
    13b4:	2109883a 	add	r4,r4,r4
    13b8:	2109883a 	add	r4,r4,r4
    13bc:	318000cc 	andi	r6,r6,3
    13c0:	1907883a 	add	r3,r3,r4
    13c4:	290b883a 	add	r5,r5,r4
    13c8:	30000c26 	beq	r6,zero,13fc <memmove+0x12c>
    13cc:	198d883a 	add	r6,r3,r6
    13d0:	29c00003 	ldbu	r7,0(r5)
    13d4:	18c00044 	addi	r3,r3,1
    13d8:	29400044 	addi	r5,r5,1
    13dc:	19ffffc5 	stb	r7,-1(r3)
    13e0:	19bffb1e 	bne	r3,r6,13d0 <__alt_data_end+0xfc0013d0>
    13e4:	f800283a 	ret
    13e8:	1007883a 	mov	r3,r2
    13ec:	303ff71e 	bne	r6,zero,13cc <__alt_data_end+0xfc0013cc>
    13f0:	00000206 	br	13fc <memmove+0x12c>
    13f4:	1007883a 	mov	r3,r2
    13f8:	003ff406 	br	13cc <__alt_data_end+0xfc0013cc>
    13fc:	f800283a 	ret
    1400:	500d883a 	mov	r6,r10
    1404:	303ff11e 	bne	r6,zero,13cc <__alt_data_end+0xfc0013cc>
    1408:	003ffc06 	br	13fc <__alt_data_end+0xfc0013fc>

0000140c <_realloc_r>:
    140c:	defff604 	addi	sp,sp,-40
    1410:	dd000415 	stw	r20,16(sp)
    1414:	dc000015 	stw	r16,0(sp)
    1418:	dfc00915 	stw	ra,36(sp)
    141c:	df000815 	stw	fp,32(sp)
    1420:	ddc00715 	stw	r23,28(sp)
    1424:	dd800615 	stw	r22,24(sp)
    1428:	dd400515 	stw	r21,20(sp)
    142c:	dcc00315 	stw	r19,12(sp)
    1430:	dc800215 	stw	r18,8(sp)
    1434:	dc400115 	stw	r17,4(sp)
    1438:	2821883a 	mov	r16,r5
    143c:	3029883a 	mov	r20,r6
    1440:	28009a26 	beq	r5,zero,16ac <_realloc_r+0x2a0>
    1444:	202b883a 	mov	r21,r4
    1448:	00038e00 	call	38e0 <__malloc_lock>
    144c:	80ffff17 	ldw	r3,-4(r16)
    1450:	047fff04 	movi	r17,-4
    1454:	a08002c4 	addi	r2,r20,11
    1458:	01000584 	movi	r4,22
    145c:	84fffe04 	addi	r19,r16,-8
    1460:	1c62703a 	and	r17,r3,r17
    1464:	2080372e 	bgeu	r4,r2,1544 <_realloc_r+0x138>
    1468:	04bffe04 	movi	r18,-8
    146c:	14a4703a 	and	r18,r2,r18
    1470:	9005883a 	mov	r2,r18
    1474:	90005b16 	blt	r18,zero,15e4 <_realloc_r+0x1d8>
    1478:	95005a36 	bltu	r18,r20,15e4 <_realloc_r+0x1d8>
    147c:	8880340e 	bge	r17,r2,1550 <_realloc_r+0x144>
    1480:	05c00074 	movhi	r23,1
    1484:	bdf9c504 	addi	r23,r23,-6380
    1488:	b9000217 	ldw	r4,8(r23)
    148c:	9c4b883a 	add	r5,r19,r17
    1490:	21409626 	beq	r4,r5,16ec <_realloc_r+0x2e0>
    1494:	29800117 	ldw	r6,4(r5)
    1498:	01ffff84 	movi	r7,-2
    149c:	31ce703a 	and	r7,r6,r7
    14a0:	29cf883a 	add	r7,r5,r7
    14a4:	39c00117 	ldw	r7,4(r7)
    14a8:	39c0004c 	andi	r7,r7,1
    14ac:	38004226 	beq	r7,zero,15b8 <_realloc_r+0x1ac>
    14b0:	000d883a 	mov	r6,zero
    14b4:	000b883a 	mov	r5,zero
    14b8:	18c0004c 	andi	r3,r3,1
    14bc:	18005c1e 	bne	r3,zero,1630 <_realloc_r+0x224>
    14c0:	85bffe17 	ldw	r22,-8(r16)
    14c4:	00ffff04 	movi	r3,-4
    14c8:	9dadc83a 	sub	r22,r19,r22
    14cc:	b1c00117 	ldw	r7,4(r22)
    14d0:	38c6703a 	and	r3,r7,r3
    14d4:	28005426 	beq	r5,zero,1628 <_realloc_r+0x21c>
    14d8:	1c47883a 	add	r3,r3,r17
    14dc:	2900bf26 	beq	r5,r4,17dc <_realloc_r+0x3d0>
    14e0:	30ef883a 	add	r23,r6,r3
    14e4:	b8807e16 	blt	r23,r2,16e0 <_realloc_r+0x2d4>
    14e8:	28800317 	ldw	r2,12(r5)
    14ec:	28c00217 	ldw	r3,8(r5)
    14f0:	89bfff04 	addi	r6,r17,-4
    14f4:	01000904 	movi	r4,36
    14f8:	18800315 	stw	r2,12(r3)
    14fc:	10c00215 	stw	r3,8(r2)
    1500:	b1400217 	ldw	r5,8(r22)
    1504:	b0c00317 	ldw	r3,12(r22)
    1508:	b5000204 	addi	r20,r22,8
    150c:	28c00315 	stw	r3,12(r5)
    1510:	19400215 	stw	r5,8(r3)
    1514:	21808536 	bltu	r4,r6,172c <_realloc_r+0x320>
    1518:	008004c4 	movi	r2,19
    151c:	1180932e 	bgeu	r2,r6,176c <_realloc_r+0x360>
    1520:	80800017 	ldw	r2,0(r16)
    1524:	b0800215 	stw	r2,8(r22)
    1528:	80800117 	ldw	r2,4(r16)
    152c:	b0800315 	stw	r2,12(r22)
    1530:	008006c4 	movi	r2,27
    1534:	1180df36 	bltu	r2,r6,18b4 <_realloc_r+0x4a8>
    1538:	b0c00404 	addi	r3,r22,16
    153c:	84000204 	addi	r16,r16,8
    1540:	00008b06 	br	1770 <_realloc_r+0x364>
    1544:	00800404 	movi	r2,16
    1548:	1025883a 	mov	r18,r2
    154c:	003fca06 	br	1478 <__alt_data_end+0xfc001478>
    1550:	8029883a 	mov	r20,r16
    1554:	8c8dc83a 	sub	r6,r17,r18
    1558:	008003c4 	movi	r2,15
    155c:	18c0004c 	andi	r3,r3,1
    1560:	11802436 	bltu	r2,r6,15f4 <_realloc_r+0x1e8>
    1564:	1c46b03a 	or	r3,r3,r17
    1568:	98c00115 	stw	r3,4(r19)
    156c:	9c63883a 	add	r17,r19,r17
    1570:	88800117 	ldw	r2,4(r17)
    1574:	10800054 	ori	r2,r2,1
    1578:	88800115 	stw	r2,4(r17)
    157c:	a809883a 	mov	r4,r21
    1580:	0003a000 	call	3a00 <__malloc_unlock>
    1584:	a005883a 	mov	r2,r20
    1588:	dfc00917 	ldw	ra,36(sp)
    158c:	df000817 	ldw	fp,32(sp)
    1590:	ddc00717 	ldw	r23,28(sp)
    1594:	dd800617 	ldw	r22,24(sp)
    1598:	dd400517 	ldw	r21,20(sp)
    159c:	dd000417 	ldw	r20,16(sp)
    15a0:	dcc00317 	ldw	r19,12(sp)
    15a4:	dc800217 	ldw	r18,8(sp)
    15a8:	dc400117 	ldw	r17,4(sp)
    15ac:	dc000017 	ldw	r16,0(sp)
    15b0:	dec00a04 	addi	sp,sp,40
    15b4:	f800283a 	ret
    15b8:	01ffff04 	movi	r7,-4
    15bc:	31cc703a 	and	r6,r6,r7
    15c0:	344f883a 	add	r7,r6,r17
    15c4:	38bfbc16 	blt	r7,r2,14b8 <__alt_data_end+0xfc0014b8>
    15c8:	28800317 	ldw	r2,12(r5)
    15cc:	29000217 	ldw	r4,8(r5)
    15d0:	8029883a 	mov	r20,r16
    15d4:	3823883a 	mov	r17,r7
    15d8:	20800315 	stw	r2,12(r4)
    15dc:	11000215 	stw	r4,8(r2)
    15e0:	003fdc06 	br	1554 <__alt_data_end+0xfc001554>
    15e4:	00800304 	movi	r2,12
    15e8:	a8800015 	stw	r2,0(r21)
    15ec:	0005883a 	mov	r2,zero
    15f0:	003fe506 	br	1588 <__alt_data_end+0xfc001588>
    15f4:	1c86b03a 	or	r3,r3,r18
    15f8:	9c8b883a 	add	r5,r19,r18
    15fc:	98c00115 	stw	r3,4(r19)
    1600:	30800054 	ori	r2,r6,1
    1604:	28800115 	stw	r2,4(r5)
    1608:	298d883a 	add	r6,r5,r6
    160c:	30800117 	ldw	r2,4(r6)
    1610:	a809883a 	mov	r4,r21
    1614:	29400204 	addi	r5,r5,8
    1618:	10800054 	ori	r2,r2,1
    161c:	30800115 	stw	r2,4(r6)
    1620:	000224c0 	call	224c <_free_r>
    1624:	003fd506 	br	157c <__alt_data_end+0xfc00157c>
    1628:	1c6f883a 	add	r23,r3,r17
    162c:	b880370e 	bge	r23,r2,170c <_realloc_r+0x300>
    1630:	a00b883a 	mov	r5,r20
    1634:	a809883a 	mov	r4,r21
    1638:	00009180 	call	918 <_malloc_r>
    163c:	1029883a 	mov	r20,r2
    1640:	1000c026 	beq	r2,zero,1944 <_realloc_r+0x538>
    1644:	80ffff17 	ldw	r3,-4(r16)
    1648:	113ffe04 	addi	r4,r2,-8
    164c:	00bfff84 	movi	r2,-2
    1650:	1884703a 	and	r2,r3,r2
    1654:	9885883a 	add	r2,r19,r2
    1658:	20809026 	beq	r4,r2,189c <_realloc_r+0x490>
    165c:	89bfff04 	addi	r6,r17,-4
    1660:	00800904 	movi	r2,36
    1664:	11805936 	bltu	r2,r6,17cc <_realloc_r+0x3c0>
    1668:	00c004c4 	movi	r3,19
    166c:	19803636 	bltu	r3,r6,1748 <_realloc_r+0x33c>
    1670:	a005883a 	mov	r2,r20
    1674:	8007883a 	mov	r3,r16
    1678:	19000017 	ldw	r4,0(r3)
    167c:	11000015 	stw	r4,0(r2)
    1680:	19000117 	ldw	r4,4(r3)
    1684:	11000115 	stw	r4,4(r2)
    1688:	18c00217 	ldw	r3,8(r3)
    168c:	10c00215 	stw	r3,8(r2)
    1690:	800b883a 	mov	r5,r16
    1694:	a809883a 	mov	r4,r21
    1698:	000224c0 	call	224c <_free_r>
    169c:	a809883a 	mov	r4,r21
    16a0:	0003a000 	call	3a00 <__malloc_unlock>
    16a4:	a005883a 	mov	r2,r20
    16a8:	003fb706 	br	1588 <__alt_data_end+0xfc001588>
    16ac:	300b883a 	mov	r5,r6
    16b0:	dfc00917 	ldw	ra,36(sp)
    16b4:	df000817 	ldw	fp,32(sp)
    16b8:	ddc00717 	ldw	r23,28(sp)
    16bc:	dd800617 	ldw	r22,24(sp)
    16c0:	dd400517 	ldw	r21,20(sp)
    16c4:	dd000417 	ldw	r20,16(sp)
    16c8:	dcc00317 	ldw	r19,12(sp)
    16cc:	dc800217 	ldw	r18,8(sp)
    16d0:	dc400117 	ldw	r17,4(sp)
    16d4:	dc000017 	ldw	r16,0(sp)
    16d8:	dec00a04 	addi	sp,sp,40
    16dc:	00009181 	jmpi	918 <_malloc_r>
    16e0:	182f883a 	mov	r23,r3
    16e4:	b8bfd216 	blt	r23,r2,1630 <__alt_data_end+0xfc001630>
    16e8:	00000806 	br	170c <_realloc_r+0x300>
    16ec:	21800117 	ldw	r6,4(r4)
    16f0:	017fff04 	movi	r5,-4
    16f4:	91c00404 	addi	r7,r18,16
    16f8:	314c703a 	and	r6,r6,r5
    16fc:	344b883a 	add	r5,r6,r17
    1700:	29c0250e 	bge	r5,r7,1798 <_realloc_r+0x38c>
    1704:	200b883a 	mov	r5,r4
    1708:	003f6b06 	br	14b8 <__alt_data_end+0xfc0014b8>
    170c:	b0800317 	ldw	r2,12(r22)
    1710:	b0c00217 	ldw	r3,8(r22)
    1714:	89bfff04 	addi	r6,r17,-4
    1718:	01000904 	movi	r4,36
    171c:	18800315 	stw	r2,12(r3)
    1720:	10c00215 	stw	r3,8(r2)
    1724:	b5000204 	addi	r20,r22,8
    1728:	21bf7b2e 	bgeu	r4,r6,1518 <__alt_data_end+0xfc001518>
    172c:	a009883a 	mov	r4,r20
    1730:	800b883a 	mov	r5,r16
    1734:	00012d00 	call	12d0 <memmove>
    1738:	b0c00117 	ldw	r3,4(r22)
    173c:	b823883a 	mov	r17,r23
    1740:	b027883a 	mov	r19,r22
    1744:	003f8306 	br	1554 <__alt_data_end+0xfc001554>
    1748:	80c00017 	ldw	r3,0(r16)
    174c:	a0c00015 	stw	r3,0(r20)
    1750:	80c00117 	ldw	r3,4(r16)
    1754:	a0c00115 	stw	r3,4(r20)
    1758:	00c006c4 	movi	r3,27
    175c:	19804736 	bltu	r3,r6,187c <_realloc_r+0x470>
    1760:	a0800204 	addi	r2,r20,8
    1764:	80c00204 	addi	r3,r16,8
    1768:	003fc306 	br	1678 <__alt_data_end+0xfc001678>
    176c:	a007883a 	mov	r3,r20
    1770:	80800017 	ldw	r2,0(r16)
    1774:	b823883a 	mov	r17,r23
    1778:	b027883a 	mov	r19,r22
    177c:	18800015 	stw	r2,0(r3)
    1780:	80800117 	ldw	r2,4(r16)
    1784:	18800115 	stw	r2,4(r3)
    1788:	80800217 	ldw	r2,8(r16)
    178c:	18800215 	stw	r2,8(r3)
    1790:	b0c00117 	ldw	r3,4(r22)
    1794:	003f6f06 	br	1554 <__alt_data_end+0xfc001554>
    1798:	9ca7883a 	add	r19,r19,r18
    179c:	2c85c83a 	sub	r2,r5,r18
    17a0:	bcc00215 	stw	r19,8(r23)
    17a4:	10800054 	ori	r2,r2,1
    17a8:	98800115 	stw	r2,4(r19)
    17ac:	80bfff17 	ldw	r2,-4(r16)
    17b0:	a809883a 	mov	r4,r21
    17b4:	1080004c 	andi	r2,r2,1
    17b8:	90a4b03a 	or	r18,r18,r2
    17bc:	84bfff15 	stw	r18,-4(r16)
    17c0:	0003a000 	call	3a00 <__malloc_unlock>
    17c4:	8005883a 	mov	r2,r16
    17c8:	003f6f06 	br	1588 <__alt_data_end+0xfc001588>
    17cc:	a009883a 	mov	r4,r20
    17d0:	800b883a 	mov	r5,r16
    17d4:	00012d00 	call	12d0 <memmove>
    17d8:	003fad06 	br	1690 <__alt_data_end+0xfc001690>
    17dc:	30f9883a 	add	fp,r6,r3
    17e0:	91000404 	addi	r4,r18,16
    17e4:	e13fbe16 	blt	fp,r4,16e0 <__alt_data_end+0xfc0016e0>
    17e8:	b0800317 	ldw	r2,12(r22)
    17ec:	b0c00217 	ldw	r3,8(r22)
    17f0:	89bfff04 	addi	r6,r17,-4
    17f4:	01000904 	movi	r4,36
    17f8:	18800315 	stw	r2,12(r3)
    17fc:	10c00215 	stw	r3,8(r2)
    1800:	b4400204 	addi	r17,r22,8
    1804:	21804336 	bltu	r4,r6,1914 <_realloc_r+0x508>
    1808:	008004c4 	movi	r2,19
    180c:	11803f2e 	bgeu	r2,r6,190c <_realloc_r+0x500>
    1810:	80800017 	ldw	r2,0(r16)
    1814:	b0800215 	stw	r2,8(r22)
    1818:	80800117 	ldw	r2,4(r16)
    181c:	b0800315 	stw	r2,12(r22)
    1820:	008006c4 	movi	r2,27
    1824:	11803f36 	bltu	r2,r6,1924 <_realloc_r+0x518>
    1828:	b0c00404 	addi	r3,r22,16
    182c:	84000204 	addi	r16,r16,8
    1830:	80800017 	ldw	r2,0(r16)
    1834:	18800015 	stw	r2,0(r3)
    1838:	80800117 	ldw	r2,4(r16)
    183c:	18800115 	stw	r2,4(r3)
    1840:	80800217 	ldw	r2,8(r16)
    1844:	18800215 	stw	r2,8(r3)
    1848:	b487883a 	add	r3,r22,r18
    184c:	e485c83a 	sub	r2,fp,r18
    1850:	b8c00215 	stw	r3,8(r23)
    1854:	10800054 	ori	r2,r2,1
    1858:	18800115 	stw	r2,4(r3)
    185c:	b0800117 	ldw	r2,4(r22)
    1860:	a809883a 	mov	r4,r21
    1864:	1080004c 	andi	r2,r2,1
    1868:	90a4b03a 	or	r18,r18,r2
    186c:	b4800115 	stw	r18,4(r22)
    1870:	0003a000 	call	3a00 <__malloc_unlock>
    1874:	8805883a 	mov	r2,r17
    1878:	003f4306 	br	1588 <__alt_data_end+0xfc001588>
    187c:	80c00217 	ldw	r3,8(r16)
    1880:	a0c00215 	stw	r3,8(r20)
    1884:	80c00317 	ldw	r3,12(r16)
    1888:	a0c00315 	stw	r3,12(r20)
    188c:	30801126 	beq	r6,r2,18d4 <_realloc_r+0x4c8>
    1890:	a0800404 	addi	r2,r20,16
    1894:	80c00404 	addi	r3,r16,16
    1898:	003f7706 	br	1678 <__alt_data_end+0xfc001678>
    189c:	a13fff17 	ldw	r4,-4(r20)
    18a0:	00bfff04 	movi	r2,-4
    18a4:	8029883a 	mov	r20,r16
    18a8:	2084703a 	and	r2,r4,r2
    18ac:	88a3883a 	add	r17,r17,r2
    18b0:	003f2806 	br	1554 <__alt_data_end+0xfc001554>
    18b4:	80800217 	ldw	r2,8(r16)
    18b8:	b0800415 	stw	r2,16(r22)
    18bc:	80800317 	ldw	r2,12(r16)
    18c0:	b0800515 	stw	r2,20(r22)
    18c4:	31000a26 	beq	r6,r4,18f0 <_realloc_r+0x4e4>
    18c8:	b0c00604 	addi	r3,r22,24
    18cc:	84000404 	addi	r16,r16,16
    18d0:	003fa706 	br	1770 <__alt_data_end+0xfc001770>
    18d4:	81000417 	ldw	r4,16(r16)
    18d8:	a0800604 	addi	r2,r20,24
    18dc:	80c00604 	addi	r3,r16,24
    18e0:	a1000415 	stw	r4,16(r20)
    18e4:	81000517 	ldw	r4,20(r16)
    18e8:	a1000515 	stw	r4,20(r20)
    18ec:	003f6206 	br	1678 <__alt_data_end+0xfc001678>
    18f0:	80800417 	ldw	r2,16(r16)
    18f4:	84000604 	addi	r16,r16,24
    18f8:	b0c00804 	addi	r3,r22,32
    18fc:	b0800615 	stw	r2,24(r22)
    1900:	80bfff17 	ldw	r2,-4(r16)
    1904:	b0800715 	stw	r2,28(r22)
    1908:	003f9906 	br	1770 <__alt_data_end+0xfc001770>
    190c:	8807883a 	mov	r3,r17
    1910:	003fc706 	br	1830 <__alt_data_end+0xfc001830>
    1914:	8809883a 	mov	r4,r17
    1918:	800b883a 	mov	r5,r16
    191c:	00012d00 	call	12d0 <memmove>
    1920:	003fc906 	br	1848 <__alt_data_end+0xfc001848>
    1924:	80800217 	ldw	r2,8(r16)
    1928:	b0800415 	stw	r2,16(r22)
    192c:	80800317 	ldw	r2,12(r16)
    1930:	b0800515 	stw	r2,20(r22)
    1934:	31000726 	beq	r6,r4,1954 <_realloc_r+0x548>
    1938:	b0c00604 	addi	r3,r22,24
    193c:	84000404 	addi	r16,r16,16
    1940:	003fbb06 	br	1830 <__alt_data_end+0xfc001830>
    1944:	a809883a 	mov	r4,r21
    1948:	0003a000 	call	3a00 <__malloc_unlock>
    194c:	0005883a 	mov	r2,zero
    1950:	003f0d06 	br	1588 <__alt_data_end+0xfc001588>
    1954:	80800417 	ldw	r2,16(r16)
    1958:	84000604 	addi	r16,r16,24
    195c:	b0c00804 	addi	r3,r22,32
    1960:	b0800615 	stw	r2,24(r22)
    1964:	80bfff17 	ldw	r2,-4(r16)
    1968:	b0800715 	stw	r2,28(r22)
    196c:	003fb006 	br	1830 <__alt_data_end+0xfc001830>

00001970 <_sbrk_r>:
    1970:	defffd04 	addi	sp,sp,-12
    1974:	dc400115 	stw	r17,4(sp)
    1978:	dc000015 	stw	r16,0(sp)
    197c:	2023883a 	mov	r17,r4
    1980:	04000074 	movhi	r16,1
    1984:	84064f04 	addi	r16,r16,6460
    1988:	2809883a 	mov	r4,r5
    198c:	dfc00215 	stw	ra,8(sp)
    1990:	80000015 	stw	zero,0(r16)
    1994:	00035d80 	call	35d8 <sbrk>
    1998:	00ffffc4 	movi	r3,-1
    199c:	10c00526 	beq	r2,r3,19b4 <_sbrk_r+0x44>
    19a0:	dfc00217 	ldw	ra,8(sp)
    19a4:	dc400117 	ldw	r17,4(sp)
    19a8:	dc000017 	ldw	r16,0(sp)
    19ac:	dec00304 	addi	sp,sp,12
    19b0:	f800283a 	ret
    19b4:	80c00017 	ldw	r3,0(r16)
    19b8:	183ff926 	beq	r3,zero,19a0 <__alt_data_end+0xfc0019a0>
    19bc:	88c00015 	stw	r3,0(r17)
    19c0:	dfc00217 	ldw	ra,8(sp)
    19c4:	dc400117 	ldw	r17,4(sp)
    19c8:	dc000017 	ldw	r16,0(sp)
    19cc:	dec00304 	addi	sp,sp,12
    19d0:	f800283a 	ret

000019d4 <__swsetup_r>:
    19d4:	00800074 	movhi	r2,1
    19d8:	10bf5804 	addi	r2,r2,-672
    19dc:	10800017 	ldw	r2,0(r2)
    19e0:	defffd04 	addi	sp,sp,-12
    19e4:	dc400115 	stw	r17,4(sp)
    19e8:	dc000015 	stw	r16,0(sp)
    19ec:	dfc00215 	stw	ra,8(sp)
    19f0:	2023883a 	mov	r17,r4
    19f4:	2821883a 	mov	r16,r5
    19f8:	10000226 	beq	r2,zero,1a04 <__swsetup_r+0x30>
    19fc:	10c00e17 	ldw	r3,56(r2)
    1a00:	18002e26 	beq	r3,zero,1abc <__swsetup_r+0xe8>
    1a04:	8080030b 	ldhu	r2,12(r16)
    1a08:	10c0020c 	andi	r3,r2,8
    1a0c:	100d883a 	mov	r6,r2
    1a10:	18000f26 	beq	r3,zero,1a50 <__swsetup_r+0x7c>
    1a14:	80c00417 	ldw	r3,16(r16)
    1a18:	18001526 	beq	r3,zero,1a70 <__swsetup_r+0x9c>
    1a1c:	1100004c 	andi	r4,r2,1
    1a20:	20001c1e 	bne	r4,zero,1a94 <__swsetup_r+0xc0>
    1a24:	1080008c 	andi	r2,r2,2
    1a28:	1000271e 	bne	r2,zero,1ac8 <__swsetup_r+0xf4>
    1a2c:	80800517 	ldw	r2,20(r16)
    1a30:	80800215 	stw	r2,8(r16)
    1a34:	18001c26 	beq	r3,zero,1aa8 <__swsetup_r+0xd4>
    1a38:	0005883a 	mov	r2,zero
    1a3c:	dfc00217 	ldw	ra,8(sp)
    1a40:	dc400117 	ldw	r17,4(sp)
    1a44:	dc000017 	ldw	r16,0(sp)
    1a48:	dec00304 	addi	sp,sp,12
    1a4c:	f800283a 	ret
    1a50:	3080040c 	andi	r2,r6,16
    1a54:	10001726 	beq	r2,zero,1ab4 <__swsetup_r+0xe0>
    1a58:	3080010c 	andi	r2,r6,4
    1a5c:	10001d1e 	bne	r2,zero,1ad4 <__swsetup_r+0x100>
    1a60:	80c00417 	ldw	r3,16(r16)
    1a64:	30800214 	ori	r2,r6,8
    1a68:	8080030d 	sth	r2,12(r16)
    1a6c:	183feb1e 	bne	r3,zero,1a1c <__alt_data_end+0xfc001a1c>
    1a70:	1140a00c 	andi	r5,r2,640
    1a74:	01008004 	movi	r4,512
    1a78:	293fe826 	beq	r5,r4,1a1c <__alt_data_end+0xfc001a1c>
    1a7c:	8809883a 	mov	r4,r17
    1a80:	800b883a 	mov	r5,r16
    1a84:	000267c0 	call	267c <__smakebuf_r>
    1a88:	8080030b 	ldhu	r2,12(r16)
    1a8c:	80c00417 	ldw	r3,16(r16)
    1a90:	003fe206 	br	1a1c <__alt_data_end+0xfc001a1c>
    1a94:	80800517 	ldw	r2,20(r16)
    1a98:	80000215 	stw	zero,8(r16)
    1a9c:	0085c83a 	sub	r2,zero,r2
    1aa0:	80800615 	stw	r2,24(r16)
    1aa4:	183fe41e 	bne	r3,zero,1a38 <__alt_data_end+0xfc001a38>
    1aa8:	8080030b 	ldhu	r2,12(r16)
    1aac:	1080200c 	andi	r2,r2,128
    1ab0:	103fe226 	beq	r2,zero,1a3c <__alt_data_end+0xfc001a3c>
    1ab4:	00bfffc4 	movi	r2,-1
    1ab8:	003fe006 	br	1a3c <__alt_data_end+0xfc001a3c>
    1abc:	1009883a 	mov	r4,r2
    1ac0:	0001e180 	call	1e18 <__sinit>
    1ac4:	003fcf06 	br	1a04 <__alt_data_end+0xfc001a04>
    1ac8:	0005883a 	mov	r2,zero
    1acc:	80800215 	stw	r2,8(r16)
    1ad0:	003fd806 	br	1a34 <__alt_data_end+0xfc001a34>
    1ad4:	81400c17 	ldw	r5,48(r16)
    1ad8:	28000626 	beq	r5,zero,1af4 <__swsetup_r+0x120>
    1adc:	80801004 	addi	r2,r16,64
    1ae0:	28800326 	beq	r5,r2,1af0 <__swsetup_r+0x11c>
    1ae4:	8809883a 	mov	r4,r17
    1ae8:	000224c0 	call	224c <_free_r>
    1aec:	8180030b 	ldhu	r6,12(r16)
    1af0:	80000c15 	stw	zero,48(r16)
    1af4:	80c00417 	ldw	r3,16(r16)
    1af8:	00bff6c4 	movi	r2,-37
    1afc:	118c703a 	and	r6,r2,r6
    1b00:	80000115 	stw	zero,4(r16)
    1b04:	80c00015 	stw	r3,0(r16)
    1b08:	003fd606 	br	1a64 <__alt_data_end+0xfc001a64>

00001b0c <_fflush_r>:
    1b0c:	defffb04 	addi	sp,sp,-20
    1b10:	dcc00315 	stw	r19,12(sp)
    1b14:	dc400115 	stw	r17,4(sp)
    1b18:	dfc00415 	stw	ra,16(sp)
    1b1c:	dc800215 	stw	r18,8(sp)
    1b20:	dc000015 	stw	r16,0(sp)
    1b24:	2027883a 	mov	r19,r4
    1b28:	2823883a 	mov	r17,r5
    1b2c:	20000226 	beq	r4,zero,1b38 <_fflush_r+0x2c>
    1b30:	20800e17 	ldw	r2,56(r4)
    1b34:	10005826 	beq	r2,zero,1c98 <_fflush_r+0x18c>
    1b38:	8880030b 	ldhu	r2,12(r17)
    1b3c:	10ffffcc 	andi	r3,r2,65535
    1b40:	18e0001c 	xori	r3,r3,32768
    1b44:	18e00004 	addi	r3,r3,-32768
    1b48:	18002b26 	beq	r3,zero,1bf8 <_fflush_r+0xec>
    1b4c:	10c0020c 	andi	r3,r2,8
    1b50:	1800311e 	bne	r3,zero,1c18 <_fflush_r+0x10c>
    1b54:	88c00117 	ldw	r3,4(r17)
    1b58:	10820014 	ori	r2,r2,2048
    1b5c:	8880030d 	sth	r2,12(r17)
    1b60:	00c05c0e 	bge	zero,r3,1cd4 <_fflush_r+0x1c8>
    1b64:	88c00a17 	ldw	r3,40(r17)
    1b68:	18002326 	beq	r3,zero,1bf8 <_fflush_r+0xec>
    1b6c:	9c000017 	ldw	r16,0(r19)
    1b70:	1104000c 	andi	r4,r2,4096
    1b74:	98000015 	stw	zero,0(r19)
    1b78:	20004b26 	beq	r4,zero,1ca8 <_fflush_r+0x19c>
    1b7c:	89801417 	ldw	r6,80(r17)
    1b80:	1080010c 	andi	r2,r2,4
    1b84:	10000626 	beq	r2,zero,1ba0 <_fflush_r+0x94>
    1b88:	89000117 	ldw	r4,4(r17)
    1b8c:	88800c17 	ldw	r2,48(r17)
    1b90:	310dc83a 	sub	r6,r6,r4
    1b94:	10000226 	beq	r2,zero,1ba0 <_fflush_r+0x94>
    1b98:	88800f17 	ldw	r2,60(r17)
    1b9c:	308dc83a 	sub	r6,r6,r2
    1ba0:	89400717 	ldw	r5,28(r17)
    1ba4:	9809883a 	mov	r4,r19
    1ba8:	000f883a 	mov	r7,zero
    1bac:	183ee83a 	callr	r3
    1bb0:	00ffffc4 	movi	r3,-1
    1bb4:	10c04a26 	beq	r2,r3,1ce0 <_fflush_r+0x1d4>
    1bb8:	88c0030b 	ldhu	r3,12(r17)
    1bbc:	89000417 	ldw	r4,16(r17)
    1bc0:	88000115 	stw	zero,4(r17)
    1bc4:	197dffcc 	andi	r5,r3,63487
    1bc8:	8940030d 	sth	r5,12(r17)
    1bcc:	89000015 	stw	r4,0(r17)
    1bd0:	18c4000c 	andi	r3,r3,4096
    1bd4:	1800581e 	bne	r3,zero,1d38 <_fflush_r+0x22c>
    1bd8:	89400c17 	ldw	r5,48(r17)
    1bdc:	9c000015 	stw	r16,0(r19)
    1be0:	28000526 	beq	r5,zero,1bf8 <_fflush_r+0xec>
    1be4:	88801004 	addi	r2,r17,64
    1be8:	28800226 	beq	r5,r2,1bf4 <_fflush_r+0xe8>
    1bec:	9809883a 	mov	r4,r19
    1bf0:	000224c0 	call	224c <_free_r>
    1bf4:	88000c15 	stw	zero,48(r17)
    1bf8:	0005883a 	mov	r2,zero
    1bfc:	dfc00417 	ldw	ra,16(sp)
    1c00:	dcc00317 	ldw	r19,12(sp)
    1c04:	dc800217 	ldw	r18,8(sp)
    1c08:	dc400117 	ldw	r17,4(sp)
    1c0c:	dc000017 	ldw	r16,0(sp)
    1c10:	dec00504 	addi	sp,sp,20
    1c14:	f800283a 	ret
    1c18:	8c800417 	ldw	r18,16(r17)
    1c1c:	903ff626 	beq	r18,zero,1bf8 <__alt_data_end+0xfc001bf8>
    1c20:	8c000017 	ldw	r16,0(r17)
    1c24:	108000cc 	andi	r2,r2,3
    1c28:	8c800015 	stw	r18,0(r17)
    1c2c:	84a1c83a 	sub	r16,r16,r18
    1c30:	10001b26 	beq	r2,zero,1ca0 <_fflush_r+0x194>
    1c34:	0005883a 	mov	r2,zero
    1c38:	88800215 	stw	r2,8(r17)
    1c3c:	04000316 	blt	zero,r16,1c4c <_fflush_r+0x140>
    1c40:	003fed06 	br	1bf8 <__alt_data_end+0xfc001bf8>
    1c44:	90a5883a 	add	r18,r18,r2
    1c48:	043feb0e 	bge	zero,r16,1bf8 <__alt_data_end+0xfc001bf8>
    1c4c:	88800917 	ldw	r2,36(r17)
    1c50:	89400717 	ldw	r5,28(r17)
    1c54:	800f883a 	mov	r7,r16
    1c58:	900d883a 	mov	r6,r18
    1c5c:	9809883a 	mov	r4,r19
    1c60:	103ee83a 	callr	r2
    1c64:	80a1c83a 	sub	r16,r16,r2
    1c68:	00bff616 	blt	zero,r2,1c44 <__alt_data_end+0xfc001c44>
    1c6c:	88c0030b 	ldhu	r3,12(r17)
    1c70:	00bfffc4 	movi	r2,-1
    1c74:	18c01014 	ori	r3,r3,64
    1c78:	88c0030d 	sth	r3,12(r17)
    1c7c:	dfc00417 	ldw	ra,16(sp)
    1c80:	dcc00317 	ldw	r19,12(sp)
    1c84:	dc800217 	ldw	r18,8(sp)
    1c88:	dc400117 	ldw	r17,4(sp)
    1c8c:	dc000017 	ldw	r16,0(sp)
    1c90:	dec00504 	addi	sp,sp,20
    1c94:	f800283a 	ret
    1c98:	0001e180 	call	1e18 <__sinit>
    1c9c:	003fa606 	br	1b38 <__alt_data_end+0xfc001b38>
    1ca0:	88800517 	ldw	r2,20(r17)
    1ca4:	003fe406 	br	1c38 <__alt_data_end+0xfc001c38>
    1ca8:	89400717 	ldw	r5,28(r17)
    1cac:	000d883a 	mov	r6,zero
    1cb0:	9809883a 	mov	r4,r19
    1cb4:	01c00044 	movi	r7,1
    1cb8:	183ee83a 	callr	r3
    1cbc:	100d883a 	mov	r6,r2
    1cc0:	00bfffc4 	movi	r2,-1
    1cc4:	30801326 	beq	r6,r2,1d14 <_fflush_r+0x208>
    1cc8:	8880030b 	ldhu	r2,12(r17)
    1ccc:	88c00a17 	ldw	r3,40(r17)
    1cd0:	003fab06 	br	1b80 <__alt_data_end+0xfc001b80>
    1cd4:	88c00f17 	ldw	r3,60(r17)
    1cd8:	00ffa216 	blt	zero,r3,1b64 <__alt_data_end+0xfc001b64>
    1cdc:	003fc606 	br	1bf8 <__alt_data_end+0xfc001bf8>
    1ce0:	98c00017 	ldw	r3,0(r19)
    1ce4:	183fb426 	beq	r3,zero,1bb8 <__alt_data_end+0xfc001bb8>
    1ce8:	01000744 	movi	r4,29
    1cec:	19000226 	beq	r3,r4,1cf8 <_fflush_r+0x1ec>
    1cf0:	01000584 	movi	r4,22
    1cf4:	1900121e 	bne	r3,r4,1d40 <_fflush_r+0x234>
    1cf8:	88c0030b 	ldhu	r3,12(r17)
    1cfc:	88800417 	ldw	r2,16(r17)
    1d00:	88000115 	stw	zero,4(r17)
    1d04:	18fdffcc 	andi	r3,r3,63487
    1d08:	88c0030d 	sth	r3,12(r17)
    1d0c:	88800015 	stw	r2,0(r17)
    1d10:	003fb106 	br	1bd8 <__alt_data_end+0xfc001bd8>
    1d14:	98800017 	ldw	r2,0(r19)
    1d18:	103feb26 	beq	r2,zero,1cc8 <__alt_data_end+0xfc001cc8>
    1d1c:	00c00744 	movi	r3,29
    1d20:	10c00226 	beq	r2,r3,1d2c <_fflush_r+0x220>
    1d24:	00c00584 	movi	r3,22
    1d28:	10ffd01e 	bne	r2,r3,1c6c <__alt_data_end+0xfc001c6c>
    1d2c:	9c000015 	stw	r16,0(r19)
    1d30:	0005883a 	mov	r2,zero
    1d34:	003fb106 	br	1bfc <__alt_data_end+0xfc001bfc>
    1d38:	88801415 	stw	r2,80(r17)
    1d3c:	003fa606 	br	1bd8 <__alt_data_end+0xfc001bd8>
    1d40:	88c0030b 	ldhu	r3,12(r17)
    1d44:	18c01014 	ori	r3,r3,64
    1d48:	88c0030d 	sth	r3,12(r17)
    1d4c:	003fab06 	br	1bfc <__alt_data_end+0xfc001bfc>

00001d50 <fflush>:
    1d50:	200b883a 	mov	r5,r4
    1d54:	20000426 	beq	r4,zero,1d68 <fflush+0x18>
    1d58:	00800074 	movhi	r2,1
    1d5c:	10bf5804 	addi	r2,r2,-672
    1d60:	11000017 	ldw	r4,0(r2)
    1d64:	0001b0c1 	jmpi	1b0c <_fflush_r>
    1d68:	00800074 	movhi	r2,1
    1d6c:	10bf5704 	addi	r2,r2,-676
    1d70:	11000017 	ldw	r4,0(r2)
    1d74:	01400034 	movhi	r5,0
    1d78:	2946c304 	addi	r5,r5,6924
    1d7c:	00025c41 	jmpi	25c4 <_fwalk_reent>

00001d80 <__fp_lock>:
    1d80:	0005883a 	mov	r2,zero
    1d84:	f800283a 	ret

00001d88 <__fp_unlock>:
    1d88:	0005883a 	mov	r2,zero
    1d8c:	f800283a 	ret

00001d90 <_cleanup_r>:
    1d90:	01400034 	movhi	r5,0
    1d94:	294b1e04 	addi	r5,r5,11384
    1d98:	000251c1 	jmpi	251c <_fwalk>

00001d9c <__sfmoreglue>:
    1d9c:	defffc04 	addi	sp,sp,-16
    1da0:	dc400115 	stw	r17,4(sp)
    1da4:	2c401a24 	muli	r17,r5,104
    1da8:	dc800215 	stw	r18,8(sp)
    1dac:	2825883a 	mov	r18,r5
    1db0:	89400304 	addi	r5,r17,12
    1db4:	dc000015 	stw	r16,0(sp)
    1db8:	dfc00315 	stw	ra,12(sp)
    1dbc:	00009180 	call	918 <_malloc_r>
    1dc0:	1021883a 	mov	r16,r2
    1dc4:	10000726 	beq	r2,zero,1de4 <__sfmoreglue+0x48>
    1dc8:	11000304 	addi	r4,r2,12
    1dcc:	10000015 	stw	zero,0(r2)
    1dd0:	14800115 	stw	r18,4(r2)
    1dd4:	11000215 	stw	r4,8(r2)
    1dd8:	000b883a 	mov	r5,zero
    1ddc:	880d883a 	mov	r6,r17
    1de0:	00028300 	call	2830 <memset>
    1de4:	8005883a 	mov	r2,r16
    1de8:	dfc00317 	ldw	ra,12(sp)
    1dec:	dc800217 	ldw	r18,8(sp)
    1df0:	dc400117 	ldw	r17,4(sp)
    1df4:	dc000017 	ldw	r16,0(sp)
    1df8:	dec00404 	addi	sp,sp,16
    1dfc:	f800283a 	ret

00001e00 <_cleanup>:
    1e00:	00800074 	movhi	r2,1
    1e04:	10bf5704 	addi	r2,r2,-676
    1e08:	11000017 	ldw	r4,0(r2)
    1e0c:	01400034 	movhi	r5,0
    1e10:	294b1e04 	addi	r5,r5,11384
    1e14:	000251c1 	jmpi	251c <_fwalk>

00001e18 <__sinit>:
    1e18:	20800e17 	ldw	r2,56(r4)
    1e1c:	defff704 	addi	sp,sp,-36
    1e20:	dc800215 	stw	r18,8(sp)
    1e24:	dfc00815 	stw	ra,32(sp)
    1e28:	ddc00715 	stw	r23,28(sp)
    1e2c:	dd800615 	stw	r22,24(sp)
    1e30:	dd400515 	stw	r21,20(sp)
    1e34:	dd000415 	stw	r20,16(sp)
    1e38:	dcc00315 	stw	r19,12(sp)
    1e3c:	dc400115 	stw	r17,4(sp)
    1e40:	dc000015 	stw	r16,0(sp)
    1e44:	2025883a 	mov	r18,r4
    1e48:	10004f1e 	bne	r2,zero,1f88 <__sinit+0x170>
    1e4c:	24000117 	ldw	r16,4(r4)
    1e50:	00c00034 	movhi	r3,0
    1e54:	18c76404 	addi	r3,r3,7568
    1e58:	20c00f15 	stw	r3,60(r4)
    1e5c:	2080bb04 	addi	r2,r4,748
    1e60:	00c000c4 	movi	r3,3
    1e64:	05c00044 	movi	r23,1
    1e68:	20c0b915 	stw	r3,740(r4)
    1e6c:	2080ba15 	stw	r2,744(r4)
    1e70:	25c00e15 	stw	r23,56(r4)
    1e74:	2000b815 	stw	zero,736(r4)
    1e78:	00800104 	movi	r2,4
    1e7c:	81001704 	addi	r4,r16,92
    1e80:	000b883a 	mov	r5,zero
    1e84:	01800204 	movi	r6,8
    1e88:	80000015 	stw	zero,0(r16)
    1e8c:	80000115 	stw	zero,4(r16)
    1e90:	80000215 	stw	zero,8(r16)
    1e94:	8080030d 	sth	r2,12(r16)
    1e98:	80001915 	stw	zero,100(r16)
    1e9c:	8000038d 	sth	zero,14(r16)
    1ea0:	80000415 	stw	zero,16(r16)
    1ea4:	80000515 	stw	zero,20(r16)
    1ea8:	80000615 	stw	zero,24(r16)
    1eac:	00028300 	call	2830 <memset>
    1eb0:	94400217 	ldw	r17,8(r18)
    1eb4:	05800034 	movhi	r22,0
    1eb8:	b58a5104 	addi	r22,r22,10564
    1ebc:	05400034 	movhi	r21,0
    1ec0:	ad4a6804 	addi	r21,r21,10656
    1ec4:	05000034 	movhi	r20,0
    1ec8:	a50a8704 	addi	r20,r20,10780
    1ecc:	04c00034 	movhi	r19,0
    1ed0:	9cca9e04 	addi	r19,r19,10872
    1ed4:	84000715 	stw	r16,28(r16)
    1ed8:	85800815 	stw	r22,32(r16)
    1edc:	85400915 	stw	r21,36(r16)
    1ee0:	85000a15 	stw	r20,40(r16)
    1ee4:	84c00b15 	stw	r19,44(r16)
    1ee8:	00800284 	movi	r2,10
    1eec:	89001704 	addi	r4,r17,92
    1ef0:	000b883a 	mov	r5,zero
    1ef4:	01800204 	movi	r6,8
    1ef8:	88000015 	stw	zero,0(r17)
    1efc:	88000115 	stw	zero,4(r17)
    1f00:	88000215 	stw	zero,8(r17)
    1f04:	8880030d 	sth	r2,12(r17)
    1f08:	88001915 	stw	zero,100(r17)
    1f0c:	8dc0038d 	sth	r23,14(r17)
    1f10:	88000415 	stw	zero,16(r17)
    1f14:	88000515 	stw	zero,20(r17)
    1f18:	88000615 	stw	zero,24(r17)
    1f1c:	00028300 	call	2830 <memset>
    1f20:	94000317 	ldw	r16,12(r18)
    1f24:	00800484 	movi	r2,18
    1f28:	8c400715 	stw	r17,28(r17)
    1f2c:	8d800815 	stw	r22,32(r17)
    1f30:	8d400915 	stw	r21,36(r17)
    1f34:	8d000a15 	stw	r20,40(r17)
    1f38:	8cc00b15 	stw	r19,44(r17)
    1f3c:	8080030d 	sth	r2,12(r16)
    1f40:	00800084 	movi	r2,2
    1f44:	80000015 	stw	zero,0(r16)
    1f48:	80000115 	stw	zero,4(r16)
    1f4c:	80000215 	stw	zero,8(r16)
    1f50:	80001915 	stw	zero,100(r16)
    1f54:	8080038d 	sth	r2,14(r16)
    1f58:	80000415 	stw	zero,16(r16)
    1f5c:	80000515 	stw	zero,20(r16)
    1f60:	80000615 	stw	zero,24(r16)
    1f64:	81001704 	addi	r4,r16,92
    1f68:	000b883a 	mov	r5,zero
    1f6c:	01800204 	movi	r6,8
    1f70:	00028300 	call	2830 <memset>
    1f74:	84000715 	stw	r16,28(r16)
    1f78:	85800815 	stw	r22,32(r16)
    1f7c:	85400915 	stw	r21,36(r16)
    1f80:	85000a15 	stw	r20,40(r16)
    1f84:	84c00b15 	stw	r19,44(r16)
    1f88:	dfc00817 	ldw	ra,32(sp)
    1f8c:	ddc00717 	ldw	r23,28(sp)
    1f90:	dd800617 	ldw	r22,24(sp)
    1f94:	dd400517 	ldw	r21,20(sp)
    1f98:	dd000417 	ldw	r20,16(sp)
    1f9c:	dcc00317 	ldw	r19,12(sp)
    1fa0:	dc800217 	ldw	r18,8(sp)
    1fa4:	dc400117 	ldw	r17,4(sp)
    1fa8:	dc000017 	ldw	r16,0(sp)
    1fac:	dec00904 	addi	sp,sp,36
    1fb0:	f800283a 	ret

00001fb4 <__sfp>:
    1fb4:	defffb04 	addi	sp,sp,-20
    1fb8:	00800074 	movhi	r2,1
    1fbc:	10bf5704 	addi	r2,r2,-676
    1fc0:	dc800215 	stw	r18,8(sp)
    1fc4:	14800017 	ldw	r18,0(r2)
    1fc8:	dcc00315 	stw	r19,12(sp)
    1fcc:	dfc00415 	stw	ra,16(sp)
    1fd0:	90800e17 	ldw	r2,56(r18)
    1fd4:	dc400115 	stw	r17,4(sp)
    1fd8:	dc000015 	stw	r16,0(sp)
    1fdc:	2027883a 	mov	r19,r4
    1fe0:	10002f26 	beq	r2,zero,20a0 <__sfp+0xec>
    1fe4:	9480b804 	addi	r18,r18,736
    1fe8:	047fffc4 	movi	r17,-1
    1fec:	91400117 	ldw	r5,4(r18)
    1ff0:	94000217 	ldw	r16,8(r18)
    1ff4:	297fffc4 	addi	r5,r5,-1
    1ff8:	28000a16 	blt	r5,zero,2024 <__sfp+0x70>
    1ffc:	8080030f 	ldh	r2,12(r16)
    2000:	10000c26 	beq	r2,zero,2034 <__sfp+0x80>
    2004:	80c01d04 	addi	r3,r16,116
    2008:	00000206 	br	2014 <__sfp+0x60>
    200c:	18bfe60f 	ldh	r2,-104(r3)
    2010:	10000826 	beq	r2,zero,2034 <__sfp+0x80>
    2014:	297fffc4 	addi	r5,r5,-1
    2018:	1c3ffd04 	addi	r16,r3,-12
    201c:	18c01a04 	addi	r3,r3,104
    2020:	2c7ffa1e 	bne	r5,r17,200c <__alt_data_end+0xfc00200c>
    2024:	90800017 	ldw	r2,0(r18)
    2028:	10002026 	beq	r2,zero,20ac <__sfp+0xf8>
    202c:	1025883a 	mov	r18,r2
    2030:	003fee06 	br	1fec <__alt_data_end+0xfc001fec>
    2034:	00bfffc4 	movi	r2,-1
    2038:	8080038d 	sth	r2,14(r16)
    203c:	00800044 	movi	r2,1
    2040:	8080030d 	sth	r2,12(r16)
    2044:	80001915 	stw	zero,100(r16)
    2048:	80000015 	stw	zero,0(r16)
    204c:	80000215 	stw	zero,8(r16)
    2050:	80000115 	stw	zero,4(r16)
    2054:	80000415 	stw	zero,16(r16)
    2058:	80000515 	stw	zero,20(r16)
    205c:	80000615 	stw	zero,24(r16)
    2060:	81001704 	addi	r4,r16,92
    2064:	000b883a 	mov	r5,zero
    2068:	01800204 	movi	r6,8
    206c:	00028300 	call	2830 <memset>
    2070:	8005883a 	mov	r2,r16
    2074:	80000c15 	stw	zero,48(r16)
    2078:	80000d15 	stw	zero,52(r16)
    207c:	80001115 	stw	zero,68(r16)
    2080:	80001215 	stw	zero,72(r16)
    2084:	dfc00417 	ldw	ra,16(sp)
    2088:	dcc00317 	ldw	r19,12(sp)
    208c:	dc800217 	ldw	r18,8(sp)
    2090:	dc400117 	ldw	r17,4(sp)
    2094:	dc000017 	ldw	r16,0(sp)
    2098:	dec00504 	addi	sp,sp,20
    209c:	f800283a 	ret
    20a0:	9009883a 	mov	r4,r18
    20a4:	0001e180 	call	1e18 <__sinit>
    20a8:	003fce06 	br	1fe4 <__alt_data_end+0xfc001fe4>
    20ac:	9809883a 	mov	r4,r19
    20b0:	01400104 	movi	r5,4
    20b4:	0001d9c0 	call	1d9c <__sfmoreglue>
    20b8:	90800015 	stw	r2,0(r18)
    20bc:	103fdb1e 	bne	r2,zero,202c <__alt_data_end+0xfc00202c>
    20c0:	00800304 	movi	r2,12
    20c4:	98800015 	stw	r2,0(r19)
    20c8:	0005883a 	mov	r2,zero
    20cc:	003fed06 	br	2084 <__alt_data_end+0xfc002084>

000020d0 <__sfp_lock_acquire>:
    20d0:	f800283a 	ret

000020d4 <__sfp_lock_release>:
    20d4:	f800283a 	ret

000020d8 <__sinit_lock_acquire>:
    20d8:	f800283a 	ret

000020dc <__sinit_lock_release>:
    20dc:	f800283a 	ret

000020e0 <__fp_lock_all>:
    20e0:	00800074 	movhi	r2,1
    20e4:	10bf5804 	addi	r2,r2,-672
    20e8:	11000017 	ldw	r4,0(r2)
    20ec:	01400034 	movhi	r5,0
    20f0:	29476004 	addi	r5,r5,7552
    20f4:	000251c1 	jmpi	251c <_fwalk>

000020f8 <__fp_unlock_all>:
    20f8:	00800074 	movhi	r2,1
    20fc:	10bf5804 	addi	r2,r2,-672
    2100:	11000017 	ldw	r4,0(r2)
    2104:	01400034 	movhi	r5,0
    2108:	29476204 	addi	r5,r5,7560
    210c:	000251c1 	jmpi	251c <_fwalk>

00002110 <_malloc_trim_r>:
    2110:	defffb04 	addi	sp,sp,-20
    2114:	dcc00315 	stw	r19,12(sp)
    2118:	dc800215 	stw	r18,8(sp)
    211c:	dc400115 	stw	r17,4(sp)
    2120:	dc000015 	stw	r16,0(sp)
    2124:	2827883a 	mov	r19,r5
    2128:	dfc00415 	stw	ra,16(sp)
    212c:	04400074 	movhi	r17,1
    2130:	8c79c504 	addi	r17,r17,-6380
    2134:	2021883a 	mov	r16,r4
    2138:	00038e00 	call	38e0 <__malloc_lock>
    213c:	88800217 	ldw	r2,8(r17)
    2140:	14800117 	ldw	r18,4(r2)
    2144:	00bfff04 	movi	r2,-4
    2148:	90a4703a 	and	r18,r18,r2
    214c:	94e7c83a 	sub	r19,r18,r19
    2150:	9cc3fbc4 	addi	r19,r19,4079
    2154:	9826d33a 	srli	r19,r19,12
    2158:	0083ffc4 	movi	r2,4095
    215c:	9cffffc4 	addi	r19,r19,-1
    2160:	9826933a 	slli	r19,r19,12
    2164:	14c0060e 	bge	r2,r19,2180 <_malloc_trim_r+0x70>
    2168:	8009883a 	mov	r4,r16
    216c:	000b883a 	mov	r5,zero
    2170:	00019700 	call	1970 <_sbrk_r>
    2174:	88c00217 	ldw	r3,8(r17)
    2178:	1c87883a 	add	r3,r3,r18
    217c:	10c00a26 	beq	r2,r3,21a8 <_malloc_trim_r+0x98>
    2180:	8009883a 	mov	r4,r16
    2184:	0003a000 	call	3a00 <__malloc_unlock>
    2188:	0005883a 	mov	r2,zero
    218c:	dfc00417 	ldw	ra,16(sp)
    2190:	dcc00317 	ldw	r19,12(sp)
    2194:	dc800217 	ldw	r18,8(sp)
    2198:	dc400117 	ldw	r17,4(sp)
    219c:	dc000017 	ldw	r16,0(sp)
    21a0:	dec00504 	addi	sp,sp,20
    21a4:	f800283a 	ret
    21a8:	8009883a 	mov	r4,r16
    21ac:	04cbc83a 	sub	r5,zero,r19
    21b0:	00019700 	call	1970 <_sbrk_r>
    21b4:	00ffffc4 	movi	r3,-1
    21b8:	10c01326 	beq	r2,r3,2208 <_malloc_trim_r+0xf8>
    21bc:	00800074 	movhi	r2,1
    21c0:	10866f04 	addi	r2,r2,6588
    21c4:	11000017 	ldw	r4,0(r2)
    21c8:	88c00217 	ldw	r3,8(r17)
    21cc:	94e5c83a 	sub	r18,r18,r19
    21d0:	94800054 	ori	r18,r18,1
    21d4:	24e7c83a 	sub	r19,r4,r19
    21d8:	1c800115 	stw	r18,4(r3)
    21dc:	8009883a 	mov	r4,r16
    21e0:	14c00015 	stw	r19,0(r2)
    21e4:	0003a000 	call	3a00 <__malloc_unlock>
    21e8:	00800044 	movi	r2,1
    21ec:	dfc00417 	ldw	ra,16(sp)
    21f0:	dcc00317 	ldw	r19,12(sp)
    21f4:	dc800217 	ldw	r18,8(sp)
    21f8:	dc400117 	ldw	r17,4(sp)
    21fc:	dc000017 	ldw	r16,0(sp)
    2200:	dec00504 	addi	sp,sp,20
    2204:	f800283a 	ret
    2208:	8009883a 	mov	r4,r16
    220c:	000b883a 	mov	r5,zero
    2210:	00019700 	call	1970 <_sbrk_r>
    2214:	88c00217 	ldw	r3,8(r17)
    2218:	014003c4 	movi	r5,15
    221c:	10c9c83a 	sub	r4,r2,r3
    2220:	293fd70e 	bge	r5,r4,2180 <__alt_data_end+0xfc002180>
    2224:	01400074 	movhi	r5,1
    2228:	297f5904 	addi	r5,r5,-668
    222c:	29400017 	ldw	r5,0(r5)
    2230:	21000054 	ori	r4,r4,1
    2234:	19000115 	stw	r4,4(r3)
    2238:	1145c83a 	sub	r2,r2,r5
    223c:	01400074 	movhi	r5,1
    2240:	29466f04 	addi	r5,r5,6588
    2244:	28800015 	stw	r2,0(r5)
    2248:	003fcd06 	br	2180 <__alt_data_end+0xfc002180>

0000224c <_free_r>:
    224c:	defffd04 	addi	sp,sp,-12
    2250:	dc000015 	stw	r16,0(sp)
    2254:	dfc00215 	stw	ra,8(sp)
    2258:	dc400115 	stw	r17,4(sp)
    225c:	2821883a 	mov	r16,r5
    2260:	28004c26 	beq	r5,zero,2394 <_free_r+0x148>
    2264:	2023883a 	mov	r17,r4
    2268:	00038e00 	call	38e0 <__malloc_lock>
    226c:	823fff17 	ldw	r8,-4(r16)
    2270:	00bfff84 	movi	r2,-2
    2274:	81bffe04 	addi	r6,r16,-8
    2278:	4084703a 	and	r2,r8,r2
    227c:	3087883a 	add	r3,r6,r2
    2280:	01400074 	movhi	r5,1
    2284:	2979c504 	addi	r5,r5,-6380
    2288:	1a400117 	ldw	r9,4(r3)
    228c:	29000217 	ldw	r4,8(r5)
    2290:	01ffff04 	movi	r7,-4
    2294:	49ce703a 	and	r7,r9,r7
    2298:	20c06526 	beq	r4,r3,2430 <_free_r+0x1e4>
    229c:	19c00115 	stw	r7,4(r3)
    22a0:	4200004c 	andi	r8,r8,1
    22a4:	40003026 	beq	r8,zero,2368 <_free_r+0x11c>
    22a8:	0009883a 	mov	r4,zero
    22ac:	19d1883a 	add	r8,r3,r7
    22b0:	42000117 	ldw	r8,4(r8)
    22b4:	4200004c 	andi	r8,r8,1
    22b8:	4000061e 	bne	r8,zero,22d4 <_free_r+0x88>
    22bc:	11c5883a 	add	r2,r2,r7
    22c0:	19c00217 	ldw	r7,8(r3)
    22c4:	20004e26 	beq	r4,zero,2400 <_free_r+0x1b4>
    22c8:	18c00317 	ldw	r3,12(r3)
    22cc:	38c00315 	stw	r3,12(r7)
    22d0:	19c00215 	stw	r7,8(r3)
    22d4:	10c00054 	ori	r3,r2,1
    22d8:	30c00115 	stw	r3,4(r6)
    22dc:	3087883a 	add	r3,r6,r2
    22e0:	18800015 	stw	r2,0(r3)
    22e4:	20001a1e 	bne	r4,zero,2350 <_free_r+0x104>
    22e8:	00c07fc4 	movi	r3,511
    22ec:	18802e2e 	bgeu	r3,r2,23a8 <_free_r+0x15c>
    22f0:	1006d27a 	srli	r3,r2,9
    22f4:	01000104 	movi	r4,4
    22f8:	20c06636 	bltu	r4,r3,2494 <_free_r+0x248>
    22fc:	1008d1ba 	srli	r4,r2,6
    2300:	21000e04 	addi	r4,r4,56
    2304:	210f883a 	add	r7,r4,r4
    2308:	39cf883a 	add	r7,r7,r7
    230c:	39cf883a 	add	r7,r7,r7
    2310:	29cf883a 	add	r7,r5,r7
    2314:	38c00217 	ldw	r3,8(r7)
    2318:	01400074 	movhi	r5,1
    231c:	2979c504 	addi	r5,r5,-6380
    2320:	19c06126 	beq	r3,r7,24a8 <_free_r+0x25c>
    2324:	013fff04 	movi	r4,-4
    2328:	19400117 	ldw	r5,4(r3)
    232c:	290a703a 	and	r5,r5,r4
    2330:	1140022e 	bgeu	r2,r5,233c <_free_r+0xf0>
    2334:	18c00217 	ldw	r3,8(r3)
    2338:	38fffb1e 	bne	r7,r3,2328 <__alt_data_end+0xfc002328>
    233c:	18800317 	ldw	r2,12(r3)
    2340:	30800315 	stw	r2,12(r6)
    2344:	30c00215 	stw	r3,8(r6)
    2348:	11800215 	stw	r6,8(r2)
    234c:	19800315 	stw	r6,12(r3)
    2350:	8809883a 	mov	r4,r17
    2354:	dfc00217 	ldw	ra,8(sp)
    2358:	dc400117 	ldw	r17,4(sp)
    235c:	dc000017 	ldw	r16,0(sp)
    2360:	dec00304 	addi	sp,sp,12
    2364:	0003a001 	jmpi	3a00 <__malloc_unlock>
    2368:	813ffe17 	ldw	r4,-8(r16)
    236c:	2a400204 	addi	r9,r5,8
    2370:	310dc83a 	sub	r6,r6,r4
    2374:	32000217 	ldw	r8,8(r6)
    2378:	1105883a 	add	r2,r2,r4
    237c:	42404326 	beq	r8,r9,248c <_free_r+0x240>
    2380:	32400317 	ldw	r9,12(r6)
    2384:	0009883a 	mov	r4,zero
    2388:	42400315 	stw	r9,12(r8)
    238c:	4a000215 	stw	r8,8(r9)
    2390:	003fc606 	br	22ac <__alt_data_end+0xfc0022ac>
    2394:	dfc00217 	ldw	ra,8(sp)
    2398:	dc400117 	ldw	r17,4(sp)
    239c:	dc000017 	ldw	r16,0(sp)
    23a0:	dec00304 	addi	sp,sp,12
    23a4:	f800283a 	ret
    23a8:	1004d0fa 	srli	r2,r2,3
    23ac:	02000044 	movi	r8,1
    23b0:	29c00117 	ldw	r7,4(r5)
    23b4:	1087883a 	add	r3,r2,r2
    23b8:	18c7883a 	add	r3,r3,r3
    23bc:	18c7883a 	add	r3,r3,r3
    23c0:	28c7883a 	add	r3,r5,r3
    23c4:	1005d0ba 	srai	r2,r2,2
    23c8:	19000217 	ldw	r4,8(r3)
    23cc:	30c00315 	stw	r3,12(r6)
    23d0:	4084983a 	sll	r2,r8,r2
    23d4:	31000215 	stw	r4,8(r6)
    23d8:	19800215 	stw	r6,8(r3)
    23dc:	11c4b03a 	or	r2,r2,r7
    23e0:	21800315 	stw	r6,12(r4)
    23e4:	8809883a 	mov	r4,r17
    23e8:	28800115 	stw	r2,4(r5)
    23ec:	dfc00217 	ldw	ra,8(sp)
    23f0:	dc400117 	ldw	r17,4(sp)
    23f4:	dc000017 	ldw	r16,0(sp)
    23f8:	dec00304 	addi	sp,sp,12
    23fc:	0003a001 	jmpi	3a00 <__malloc_unlock>
    2400:	02000074 	movhi	r8,1
    2404:	4239c704 	addi	r8,r8,-6372
    2408:	3a3faf1e 	bne	r7,r8,22c8 <__alt_data_end+0xfc0022c8>
    240c:	29800515 	stw	r6,20(r5)
    2410:	29800415 	stw	r6,16(r5)
    2414:	10c00054 	ori	r3,r2,1
    2418:	31c00315 	stw	r7,12(r6)
    241c:	31c00215 	stw	r7,8(r6)
    2420:	30c00115 	stw	r3,4(r6)
    2424:	308d883a 	add	r6,r6,r2
    2428:	30800015 	stw	r2,0(r6)
    242c:	003fc806 	br	2350 <__alt_data_end+0xfc002350>
    2430:	4200004c 	andi	r8,r8,1
    2434:	3885883a 	add	r2,r7,r2
    2438:	4000071e 	bne	r8,zero,2458 <_free_r+0x20c>
    243c:	81fffe17 	ldw	r7,-8(r16)
    2440:	31cdc83a 	sub	r6,r6,r7
    2444:	30c00317 	ldw	r3,12(r6)
    2448:	31000217 	ldw	r4,8(r6)
    244c:	11c5883a 	add	r2,r2,r7
    2450:	20c00315 	stw	r3,12(r4)
    2454:	19000215 	stw	r4,8(r3)
    2458:	00c00074 	movhi	r3,1
    245c:	18ff5a04 	addi	r3,r3,-664
    2460:	11000054 	ori	r4,r2,1
    2464:	18c00017 	ldw	r3,0(r3)
    2468:	31000115 	stw	r4,4(r6)
    246c:	29800215 	stw	r6,8(r5)
    2470:	10ffb736 	bltu	r2,r3,2350 <__alt_data_end+0xfc002350>
    2474:	00800074 	movhi	r2,1
    2478:	10864e04 	addi	r2,r2,6456
    247c:	11400017 	ldw	r5,0(r2)
    2480:	8809883a 	mov	r4,r17
    2484:	00021100 	call	2110 <_malloc_trim_r>
    2488:	003fb106 	br	2350 <__alt_data_end+0xfc002350>
    248c:	01000044 	movi	r4,1
    2490:	003f8606 	br	22ac <__alt_data_end+0xfc0022ac>
    2494:	01000504 	movi	r4,20
    2498:	20c00b36 	bltu	r4,r3,24c8 <_free_r+0x27c>
    249c:	190016c4 	addi	r4,r3,91
    24a0:	210f883a 	add	r7,r4,r4
    24a4:	003f9806 	br	2308 <__alt_data_end+0xfc002308>
    24a8:	2009d0ba 	srai	r4,r4,2
    24ac:	00800044 	movi	r2,1
    24b0:	29c00117 	ldw	r7,4(r5)
    24b4:	1108983a 	sll	r4,r2,r4
    24b8:	1805883a 	mov	r2,r3
    24bc:	21c8b03a 	or	r4,r4,r7
    24c0:	29000115 	stw	r4,4(r5)
    24c4:	003f9e06 	br	2340 <__alt_data_end+0xfc002340>
    24c8:	01001504 	movi	r4,84
    24cc:	20c00436 	bltu	r4,r3,24e0 <_free_r+0x294>
    24d0:	1008d33a 	srli	r4,r2,12
    24d4:	21001b84 	addi	r4,r4,110
    24d8:	210f883a 	add	r7,r4,r4
    24dc:	003f8a06 	br	2308 <__alt_data_end+0xfc002308>
    24e0:	01005504 	movi	r4,340
    24e4:	20c00436 	bltu	r4,r3,24f8 <_free_r+0x2ac>
    24e8:	1008d3fa 	srli	r4,r2,15
    24ec:	21001dc4 	addi	r4,r4,119
    24f0:	210f883a 	add	r7,r4,r4
    24f4:	003f8406 	br	2308 <__alt_data_end+0xfc002308>
    24f8:	01015504 	movi	r4,1364
    24fc:	20c00436 	bltu	r4,r3,2510 <_free_r+0x2c4>
    2500:	1008d4ba 	srli	r4,r2,18
    2504:	21001f04 	addi	r4,r4,124
    2508:	210f883a 	add	r7,r4,r4
    250c:	003f7e06 	br	2308 <__alt_data_end+0xfc002308>
    2510:	01c03f04 	movi	r7,252
    2514:	01001f84 	movi	r4,126
    2518:	003f7b06 	br	2308 <__alt_data_end+0xfc002308>

0000251c <_fwalk>:
    251c:	defff904 	addi	sp,sp,-28
    2520:	dcc00315 	stw	r19,12(sp)
    2524:	24c0b804 	addi	r19,r4,736
    2528:	dd400515 	stw	r21,20(sp)
    252c:	dd000415 	stw	r20,16(sp)
    2530:	dfc00615 	stw	ra,24(sp)
    2534:	dc800215 	stw	r18,8(sp)
    2538:	dc400115 	stw	r17,4(sp)
    253c:	dc000015 	stw	r16,0(sp)
    2540:	282b883a 	mov	r21,r5
    2544:	0029883a 	mov	r20,zero
    2548:	00020d00 	call	20d0 <__sfp_lock_acquire>
    254c:	98001226 	beq	r19,zero,2598 <_fwalk+0x7c>
    2550:	04bfffc4 	movi	r18,-1
    2554:	9c400117 	ldw	r17,4(r19)
    2558:	9c000217 	ldw	r16,8(r19)
    255c:	8c7fffc4 	addi	r17,r17,-1
    2560:	88000b16 	blt	r17,zero,2590 <_fwalk+0x74>
    2564:	84000304 	addi	r16,r16,12
    2568:	80c0000f 	ldh	r3,0(r16)
    256c:	8c7fffc4 	addi	r17,r17,-1
    2570:	813ffd04 	addi	r4,r16,-12
    2574:	18000426 	beq	r3,zero,2588 <_fwalk+0x6c>
    2578:	80c0008f 	ldh	r3,2(r16)
    257c:	1c800226 	beq	r3,r18,2588 <_fwalk+0x6c>
    2580:	a83ee83a 	callr	r21
    2584:	a0a8b03a 	or	r20,r20,r2
    2588:	84001a04 	addi	r16,r16,104
    258c:	8cbff61e 	bne	r17,r18,2568 <__alt_data_end+0xfc002568>
    2590:	9cc00017 	ldw	r19,0(r19)
    2594:	983fef1e 	bne	r19,zero,2554 <__alt_data_end+0xfc002554>
    2598:	00020d40 	call	20d4 <__sfp_lock_release>
    259c:	a005883a 	mov	r2,r20
    25a0:	dfc00617 	ldw	ra,24(sp)
    25a4:	dd400517 	ldw	r21,20(sp)
    25a8:	dd000417 	ldw	r20,16(sp)
    25ac:	dcc00317 	ldw	r19,12(sp)
    25b0:	dc800217 	ldw	r18,8(sp)
    25b4:	dc400117 	ldw	r17,4(sp)
    25b8:	dc000017 	ldw	r16,0(sp)
    25bc:	dec00704 	addi	sp,sp,28
    25c0:	f800283a 	ret

000025c4 <_fwalk_reent>:
    25c4:	defff804 	addi	sp,sp,-32
    25c8:	dcc00315 	stw	r19,12(sp)
    25cc:	24c0b804 	addi	r19,r4,736
    25d0:	dd800615 	stw	r22,24(sp)
    25d4:	dd400515 	stw	r21,20(sp)
    25d8:	dd000415 	stw	r20,16(sp)
    25dc:	dfc00715 	stw	ra,28(sp)
    25e0:	dc800215 	stw	r18,8(sp)
    25e4:	dc400115 	stw	r17,4(sp)
    25e8:	dc000015 	stw	r16,0(sp)
    25ec:	2029883a 	mov	r20,r4
    25f0:	282b883a 	mov	r21,r5
    25f4:	002d883a 	mov	r22,zero
    25f8:	00020d00 	call	20d0 <__sfp_lock_acquire>
    25fc:	98001326 	beq	r19,zero,264c <_fwalk_reent+0x88>
    2600:	04bfffc4 	movi	r18,-1
    2604:	9c400117 	ldw	r17,4(r19)
    2608:	9c000217 	ldw	r16,8(r19)
    260c:	8c7fffc4 	addi	r17,r17,-1
    2610:	88000c16 	blt	r17,zero,2644 <_fwalk_reent+0x80>
    2614:	84000304 	addi	r16,r16,12
    2618:	80c0000f 	ldh	r3,0(r16)
    261c:	8c7fffc4 	addi	r17,r17,-1
    2620:	817ffd04 	addi	r5,r16,-12
    2624:	18000526 	beq	r3,zero,263c <_fwalk_reent+0x78>
    2628:	80c0008f 	ldh	r3,2(r16)
    262c:	a009883a 	mov	r4,r20
    2630:	1c800226 	beq	r3,r18,263c <_fwalk_reent+0x78>
    2634:	a83ee83a 	callr	r21
    2638:	b0acb03a 	or	r22,r22,r2
    263c:	84001a04 	addi	r16,r16,104
    2640:	8cbff51e 	bne	r17,r18,2618 <__alt_data_end+0xfc002618>
    2644:	9cc00017 	ldw	r19,0(r19)
    2648:	983fee1e 	bne	r19,zero,2604 <__alt_data_end+0xfc002604>
    264c:	00020d40 	call	20d4 <__sfp_lock_release>
    2650:	b005883a 	mov	r2,r22
    2654:	dfc00717 	ldw	ra,28(sp)
    2658:	dd800617 	ldw	r22,24(sp)
    265c:	dd400517 	ldw	r21,20(sp)
    2660:	dd000417 	ldw	r20,16(sp)
    2664:	dcc00317 	ldw	r19,12(sp)
    2668:	dc800217 	ldw	r18,8(sp)
    266c:	dc400117 	ldw	r17,4(sp)
    2670:	dc000017 	ldw	r16,0(sp)
    2674:	dec00804 	addi	sp,sp,32
    2678:	f800283a 	ret

0000267c <__smakebuf_r>:
    267c:	2880030b 	ldhu	r2,12(r5)
    2680:	deffec04 	addi	sp,sp,-80
    2684:	dc000f15 	stw	r16,60(sp)
    2688:	dfc01315 	stw	ra,76(sp)
    268c:	dcc01215 	stw	r19,72(sp)
    2690:	dc801115 	stw	r18,68(sp)
    2694:	dc401015 	stw	r17,64(sp)
    2698:	10c0008c 	andi	r3,r2,2
    269c:	2821883a 	mov	r16,r5
    26a0:	18003a1e 	bne	r3,zero,278c <__smakebuf_r+0x110>
    26a4:	2940038f 	ldh	r5,14(r5)
    26a8:	2023883a 	mov	r17,r4
    26ac:	28001b16 	blt	r5,zero,271c <__smakebuf_r+0xa0>
    26b0:	d80d883a 	mov	r6,sp
    26b4:	0002c8c0 	call	2c8c <_fstat_r>
    26b8:	10001716 	blt	r2,zero,2718 <__smakebuf_r+0x9c>
    26bc:	d8800117 	ldw	r2,4(sp)
    26c0:	00e00014 	movui	r3,32768
    26c4:	10bc000c 	andi	r2,r2,61440
    26c8:	10c03e26 	beq	r2,r3,27c4 <__smakebuf_r+0x148>
    26cc:	80c0030b 	ldhu	r3,12(r16)
    26d0:	18c20014 	ori	r3,r3,2048
    26d4:	80c0030d 	sth	r3,12(r16)
    26d8:	00c80004 	movi	r3,8192
    26dc:	10c0431e 	bne	r2,r3,27ec <__smakebuf_r+0x170>
    26e0:	8140038f 	ldh	r5,14(r16)
    26e4:	8809883a 	mov	r4,r17
    26e8:	0002cf40 	call	2cf4 <_isatty_r>
    26ec:	10004d26 	beq	r2,zero,2824 <__smakebuf_r+0x1a8>
    26f0:	80c0030b 	ldhu	r3,12(r16)
    26f4:	04c00044 	movi	r19,1
    26f8:	808010c4 	addi	r2,r16,67
    26fc:	1cc6b03a 	or	r3,r3,r19
    2700:	80c0030d 	sth	r3,12(r16)
    2704:	80800015 	stw	r2,0(r16)
    2708:	80800415 	stw	r2,16(r16)
    270c:	84c00515 	stw	r19,20(r16)
    2710:	04810004 	movi	r18,1024
    2714:	00000706 	br	2734 <__smakebuf_r+0xb8>
    2718:	8080030b 	ldhu	r2,12(r16)
    271c:	10c0200c 	andi	r3,r2,128
    2720:	1800261e 	bne	r3,zero,27bc <__smakebuf_r+0x140>
    2724:	04810004 	movi	r18,1024
    2728:	10820014 	ori	r2,r2,2048
    272c:	8080030d 	sth	r2,12(r16)
    2730:	0027883a 	mov	r19,zero
    2734:	8809883a 	mov	r4,r17
    2738:	900b883a 	mov	r5,r18
    273c:	00009180 	call	918 <_malloc_r>
    2740:	10002d26 	beq	r2,zero,27f8 <__smakebuf_r+0x17c>
    2744:	80c0030b 	ldhu	r3,12(r16)
    2748:	01000034 	movhi	r4,0
    274c:	21076404 	addi	r4,r4,7568
    2750:	89000f15 	stw	r4,60(r17)
    2754:	18c02014 	ori	r3,r3,128
    2758:	80c0030d 	sth	r3,12(r16)
    275c:	80800015 	stw	r2,0(r16)
    2760:	80800415 	stw	r2,16(r16)
    2764:	84800515 	stw	r18,20(r16)
    2768:	98000d26 	beq	r19,zero,27a0 <__smakebuf_r+0x124>
    276c:	8140038f 	ldh	r5,14(r16)
    2770:	8809883a 	mov	r4,r17
    2774:	0002cf40 	call	2cf4 <_isatty_r>
    2778:	10000926 	beq	r2,zero,27a0 <__smakebuf_r+0x124>
    277c:	8080030b 	ldhu	r2,12(r16)
    2780:	10800054 	ori	r2,r2,1
    2784:	8080030d 	sth	r2,12(r16)
    2788:	00000506 	br	27a0 <__smakebuf_r+0x124>
    278c:	288010c4 	addi	r2,r5,67
    2790:	28800015 	stw	r2,0(r5)
    2794:	28800415 	stw	r2,16(r5)
    2798:	00800044 	movi	r2,1
    279c:	28800515 	stw	r2,20(r5)
    27a0:	dfc01317 	ldw	ra,76(sp)
    27a4:	dcc01217 	ldw	r19,72(sp)
    27a8:	dc801117 	ldw	r18,68(sp)
    27ac:	dc401017 	ldw	r17,64(sp)
    27b0:	dc000f17 	ldw	r16,60(sp)
    27b4:	dec01404 	addi	sp,sp,80
    27b8:	f800283a 	ret
    27bc:	04801004 	movi	r18,64
    27c0:	003fd906 	br	2728 <__alt_data_end+0xfc002728>
    27c4:	81000a17 	ldw	r4,40(r16)
    27c8:	00c00034 	movhi	r3,0
    27cc:	18ca8704 	addi	r3,r3,10780
    27d0:	20ffbe1e 	bne	r4,r3,26cc <__alt_data_end+0xfc0026cc>
    27d4:	80c0030b 	ldhu	r3,12(r16)
    27d8:	01010004 	movi	r4,1024
    27dc:	81001315 	stw	r4,76(r16)
    27e0:	1906b03a 	or	r3,r3,r4
    27e4:	80c0030d 	sth	r3,12(r16)
    27e8:	003fbb06 	br	26d8 <__alt_data_end+0xfc0026d8>
    27ec:	0027883a 	mov	r19,zero
    27f0:	04810004 	movi	r18,1024
    27f4:	003fcf06 	br	2734 <__alt_data_end+0xfc002734>
    27f8:	8080030b 	ldhu	r2,12(r16)
    27fc:	10c0800c 	andi	r3,r2,512
    2800:	183fe71e 	bne	r3,zero,27a0 <__alt_data_end+0xfc0027a0>
    2804:	10800094 	ori	r2,r2,2
    2808:	80c010c4 	addi	r3,r16,67
    280c:	8080030d 	sth	r2,12(r16)
    2810:	00800044 	movi	r2,1
    2814:	80c00015 	stw	r3,0(r16)
    2818:	80c00415 	stw	r3,16(r16)
    281c:	80800515 	stw	r2,20(r16)
    2820:	003fdf06 	br	27a0 <__alt_data_end+0xfc0027a0>
    2824:	04c00044 	movi	r19,1
    2828:	04810004 	movi	r18,1024
    282c:	003fc106 	br	2734 <__alt_data_end+0xfc002734>

00002830 <memset>:
    2830:	20c000cc 	andi	r3,r4,3
    2834:	2005883a 	mov	r2,r4
    2838:	18003f26 	beq	r3,zero,2938 <memset+0x108>
    283c:	31ffffc4 	addi	r7,r6,-1
    2840:	30003b26 	beq	r6,zero,2930 <memset+0x100>
    2844:	2813883a 	mov	r9,r5
    2848:	200d883a 	mov	r6,r4
    284c:	2007883a 	mov	r3,r4
    2850:	00000406 	br	2864 <memset+0x34>
    2854:	3a3fffc4 	addi	r8,r7,-1
    2858:	31800044 	addi	r6,r6,1
    285c:	38003426 	beq	r7,zero,2930 <memset+0x100>
    2860:	400f883a 	mov	r7,r8
    2864:	18c00044 	addi	r3,r3,1
    2868:	32400005 	stb	r9,0(r6)
    286c:	1a0000cc 	andi	r8,r3,3
    2870:	403ff81e 	bne	r8,zero,2854 <__alt_data_end+0xfc002854>
    2874:	010000c4 	movi	r4,3
    2878:	21c0282e 	bgeu	r4,r7,291c <memset+0xec>
    287c:	29003fcc 	andi	r4,r5,255
    2880:	2010923a 	slli	r8,r4,8
    2884:	4108b03a 	or	r4,r8,r4
    2888:	2010943a 	slli	r8,r4,16
    288c:	4110b03a 	or	r8,r8,r4
    2890:	010003c4 	movi	r4,15
    2894:	21c0122e 	bgeu	r4,r7,28e0 <memset+0xb0>
    2898:	3a7ffc04 	addi	r9,r7,-16
    289c:	4812d13a 	srli	r9,r9,4
    28a0:	19000404 	addi	r4,r3,16
    28a4:	180d883a 	mov	r6,r3
    28a8:	4814913a 	slli	r10,r9,4
    28ac:	2289883a 	add	r4,r4,r10
    28b0:	32000015 	stw	r8,0(r6)
    28b4:	32000115 	stw	r8,4(r6)
    28b8:	32000215 	stw	r8,8(r6)
    28bc:	32000315 	stw	r8,12(r6)
    28c0:	31800404 	addi	r6,r6,16
    28c4:	313ffa1e 	bne	r6,r4,28b0 <__alt_data_end+0xfc0028b0>
    28c8:	4a400044 	addi	r9,r9,1
    28cc:	4812913a 	slli	r9,r9,4
    28d0:	39c003cc 	andi	r7,r7,15
    28d4:	010000c4 	movi	r4,3
    28d8:	1a47883a 	add	r3,r3,r9
    28dc:	21c00f2e 	bgeu	r4,r7,291c <memset+0xec>
    28e0:	3a7fff04 	addi	r9,r7,-4
    28e4:	4812d0ba 	srli	r9,r9,2
    28e8:	19000104 	addi	r4,r3,4
    28ec:	180d883a 	mov	r6,r3
    28f0:	4a55883a 	add	r10,r9,r9
    28f4:	5295883a 	add	r10,r10,r10
    28f8:	2289883a 	add	r4,r4,r10
    28fc:	32000015 	stw	r8,0(r6)
    2900:	31800104 	addi	r6,r6,4
    2904:	313ffd1e 	bne	r6,r4,28fc <__alt_data_end+0xfc0028fc>
    2908:	4a400044 	addi	r9,r9,1
    290c:	4a53883a 	add	r9,r9,r9
    2910:	4a53883a 	add	r9,r9,r9
    2914:	1a47883a 	add	r3,r3,r9
    2918:	39c000cc 	andi	r7,r7,3
    291c:	38000526 	beq	r7,zero,2934 <memset+0x104>
    2920:	19cf883a 	add	r7,r3,r7
    2924:	19400005 	stb	r5,0(r3)
    2928:	18c00044 	addi	r3,r3,1
    292c:	19fffd1e 	bne	r3,r7,2924 <__alt_data_end+0xfc002924>
    2930:	f800283a 	ret
    2934:	f800283a 	ret
    2938:	2007883a 	mov	r3,r4
    293c:	300f883a 	mov	r7,r6
    2940:	003fcc06 	br	2874 <__alt_data_end+0xfc002874>

00002944 <__sread>:
    2944:	defffe04 	addi	sp,sp,-8
    2948:	dc000015 	stw	r16,0(sp)
    294c:	2821883a 	mov	r16,r5
    2950:	2940038f 	ldh	r5,14(r5)
    2954:	dfc00115 	stw	ra,4(sp)
    2958:	0002dc40 	call	2dc4 <_read_r>
    295c:	10000716 	blt	r2,zero,297c <__sread+0x38>
    2960:	80c01417 	ldw	r3,80(r16)
    2964:	1887883a 	add	r3,r3,r2
    2968:	80c01415 	stw	r3,80(r16)
    296c:	dfc00117 	ldw	ra,4(sp)
    2970:	dc000017 	ldw	r16,0(sp)
    2974:	dec00204 	addi	sp,sp,8
    2978:	f800283a 	ret
    297c:	80c0030b 	ldhu	r3,12(r16)
    2980:	18fbffcc 	andi	r3,r3,61439
    2984:	80c0030d 	sth	r3,12(r16)
    2988:	dfc00117 	ldw	ra,4(sp)
    298c:	dc000017 	ldw	r16,0(sp)
    2990:	dec00204 	addi	sp,sp,8
    2994:	f800283a 	ret

00002998 <__seofread>:
    2998:	0005883a 	mov	r2,zero
    299c:	f800283a 	ret

000029a0 <__swrite>:
    29a0:	2880030b 	ldhu	r2,12(r5)
    29a4:	defffb04 	addi	sp,sp,-20
    29a8:	dcc00315 	stw	r19,12(sp)
    29ac:	dc800215 	stw	r18,8(sp)
    29b0:	dc400115 	stw	r17,4(sp)
    29b4:	dc000015 	stw	r16,0(sp)
    29b8:	dfc00415 	stw	ra,16(sp)
    29bc:	10c0400c 	andi	r3,r2,256
    29c0:	2821883a 	mov	r16,r5
    29c4:	2027883a 	mov	r19,r4
    29c8:	3025883a 	mov	r18,r6
    29cc:	3823883a 	mov	r17,r7
    29d0:	18000526 	beq	r3,zero,29e8 <__swrite+0x48>
    29d4:	2940038f 	ldh	r5,14(r5)
    29d8:	000d883a 	mov	r6,zero
    29dc:	01c00084 	movi	r7,2
    29e0:	0002d580 	call	2d58 <_lseek_r>
    29e4:	8080030b 	ldhu	r2,12(r16)
    29e8:	8140038f 	ldh	r5,14(r16)
    29ec:	10bbffcc 	andi	r2,r2,61439
    29f0:	9809883a 	mov	r4,r19
    29f4:	900d883a 	mov	r6,r18
    29f8:	880f883a 	mov	r7,r17
    29fc:	8080030d 	sth	r2,12(r16)
    2a00:	dfc00417 	ldw	ra,16(sp)
    2a04:	dcc00317 	ldw	r19,12(sp)
    2a08:	dc800217 	ldw	r18,8(sp)
    2a0c:	dc400117 	ldw	r17,4(sp)
    2a10:	dc000017 	ldw	r16,0(sp)
    2a14:	dec00504 	addi	sp,sp,20
    2a18:	0002a801 	jmpi	2a80 <_write_r>

00002a1c <__sseek>:
    2a1c:	defffe04 	addi	sp,sp,-8
    2a20:	dc000015 	stw	r16,0(sp)
    2a24:	2821883a 	mov	r16,r5
    2a28:	2940038f 	ldh	r5,14(r5)
    2a2c:	dfc00115 	stw	ra,4(sp)
    2a30:	0002d580 	call	2d58 <_lseek_r>
    2a34:	00ffffc4 	movi	r3,-1
    2a38:	10c00826 	beq	r2,r3,2a5c <__sseek+0x40>
    2a3c:	80c0030b 	ldhu	r3,12(r16)
    2a40:	80801415 	stw	r2,80(r16)
    2a44:	18c40014 	ori	r3,r3,4096
    2a48:	80c0030d 	sth	r3,12(r16)
    2a4c:	dfc00117 	ldw	ra,4(sp)
    2a50:	dc000017 	ldw	r16,0(sp)
    2a54:	dec00204 	addi	sp,sp,8
    2a58:	f800283a 	ret
    2a5c:	80c0030b 	ldhu	r3,12(r16)
    2a60:	18fbffcc 	andi	r3,r3,61439
    2a64:	80c0030d 	sth	r3,12(r16)
    2a68:	dfc00117 	ldw	ra,4(sp)
    2a6c:	dc000017 	ldw	r16,0(sp)
    2a70:	dec00204 	addi	sp,sp,8
    2a74:	f800283a 	ret

00002a78 <__sclose>:
    2a78:	2940038f 	ldh	r5,14(r5)
    2a7c:	0002aec1 	jmpi	2aec <_close_r>

00002a80 <_write_r>:
    2a80:	defffd04 	addi	sp,sp,-12
    2a84:	dc400115 	stw	r17,4(sp)
    2a88:	dc000015 	stw	r16,0(sp)
    2a8c:	2023883a 	mov	r17,r4
    2a90:	04000074 	movhi	r16,1
    2a94:	84064f04 	addi	r16,r16,6460
    2a98:	2809883a 	mov	r4,r5
    2a9c:	300b883a 	mov	r5,r6
    2aa0:	380d883a 	mov	r6,r7
    2aa4:	dfc00215 	stw	ra,8(sp)
    2aa8:	80000015 	stw	zero,0(r16)
    2aac:	00036d80 	call	36d8 <write>
    2ab0:	00ffffc4 	movi	r3,-1
    2ab4:	10c00526 	beq	r2,r3,2acc <_write_r+0x4c>
    2ab8:	dfc00217 	ldw	ra,8(sp)
    2abc:	dc400117 	ldw	r17,4(sp)
    2ac0:	dc000017 	ldw	r16,0(sp)
    2ac4:	dec00304 	addi	sp,sp,12
    2ac8:	f800283a 	ret
    2acc:	80c00017 	ldw	r3,0(r16)
    2ad0:	183ff926 	beq	r3,zero,2ab8 <__alt_data_end+0xfc002ab8>
    2ad4:	88c00015 	stw	r3,0(r17)
    2ad8:	dfc00217 	ldw	ra,8(sp)
    2adc:	dc400117 	ldw	r17,4(sp)
    2ae0:	dc000017 	ldw	r16,0(sp)
    2ae4:	dec00304 	addi	sp,sp,12
    2ae8:	f800283a 	ret

00002aec <_close_r>:
    2aec:	defffd04 	addi	sp,sp,-12
    2af0:	dc400115 	stw	r17,4(sp)
    2af4:	dc000015 	stw	r16,0(sp)
    2af8:	2023883a 	mov	r17,r4
    2afc:	04000074 	movhi	r16,1
    2b00:	84064f04 	addi	r16,r16,6460
    2b04:	2809883a 	mov	r4,r5
    2b08:	dfc00215 	stw	ra,8(sp)
    2b0c:	80000015 	stw	zero,0(r16)
    2b10:	0002e800 	call	2e80 <close>
    2b14:	00ffffc4 	movi	r3,-1
    2b18:	10c00526 	beq	r2,r3,2b30 <_close_r+0x44>
    2b1c:	dfc00217 	ldw	ra,8(sp)
    2b20:	dc400117 	ldw	r17,4(sp)
    2b24:	dc000017 	ldw	r16,0(sp)
    2b28:	dec00304 	addi	sp,sp,12
    2b2c:	f800283a 	ret
    2b30:	80c00017 	ldw	r3,0(r16)
    2b34:	183ff926 	beq	r3,zero,2b1c <__alt_data_end+0xfc002b1c>
    2b38:	88c00015 	stw	r3,0(r17)
    2b3c:	dfc00217 	ldw	ra,8(sp)
    2b40:	dc400117 	ldw	r17,4(sp)
    2b44:	dc000017 	ldw	r16,0(sp)
    2b48:	dec00304 	addi	sp,sp,12
    2b4c:	f800283a 	ret

00002b50 <_fclose_r>:
    2b50:	defffc04 	addi	sp,sp,-16
    2b54:	dc000015 	stw	r16,0(sp)
    2b58:	dfc00315 	stw	ra,12(sp)
    2b5c:	dc800215 	stw	r18,8(sp)
    2b60:	dc400115 	stw	r17,4(sp)
    2b64:	2821883a 	mov	r16,r5
    2b68:	28003126 	beq	r5,zero,2c30 <_fclose_r+0xe0>
    2b6c:	2023883a 	mov	r17,r4
    2b70:	00020d00 	call	20d0 <__sfp_lock_acquire>
    2b74:	88000226 	beq	r17,zero,2b80 <_fclose_r+0x30>
    2b78:	88800e17 	ldw	r2,56(r17)
    2b7c:	10003326 	beq	r2,zero,2c4c <_fclose_r+0xfc>
    2b80:	8080030f 	ldh	r2,12(r16)
    2b84:	10002226 	beq	r2,zero,2c10 <_fclose_r+0xc0>
    2b88:	8809883a 	mov	r4,r17
    2b8c:	800b883a 	mov	r5,r16
    2b90:	0001b0c0 	call	1b0c <_fflush_r>
    2b94:	80c00b17 	ldw	r3,44(r16)
    2b98:	1025883a 	mov	r18,r2
    2b9c:	18000426 	beq	r3,zero,2bb0 <_fclose_r+0x60>
    2ba0:	81400717 	ldw	r5,28(r16)
    2ba4:	8809883a 	mov	r4,r17
    2ba8:	183ee83a 	callr	r3
    2bac:	10003016 	blt	r2,zero,2c70 <_fclose_r+0x120>
    2bb0:	8080030b 	ldhu	r2,12(r16)
    2bb4:	1080200c 	andi	r2,r2,128
    2bb8:	1000291e 	bne	r2,zero,2c60 <_fclose_r+0x110>
    2bbc:	81400c17 	ldw	r5,48(r16)
    2bc0:	28000526 	beq	r5,zero,2bd8 <_fclose_r+0x88>
    2bc4:	80801004 	addi	r2,r16,64
    2bc8:	28800226 	beq	r5,r2,2bd4 <_fclose_r+0x84>
    2bcc:	8809883a 	mov	r4,r17
    2bd0:	000224c0 	call	224c <_free_r>
    2bd4:	80000c15 	stw	zero,48(r16)
    2bd8:	81401117 	ldw	r5,68(r16)
    2bdc:	28000326 	beq	r5,zero,2bec <_fclose_r+0x9c>
    2be0:	8809883a 	mov	r4,r17
    2be4:	000224c0 	call	224c <_free_r>
    2be8:	80001115 	stw	zero,68(r16)
    2bec:	8000030d 	sth	zero,12(r16)
    2bf0:	00020d40 	call	20d4 <__sfp_lock_release>
    2bf4:	9005883a 	mov	r2,r18
    2bf8:	dfc00317 	ldw	ra,12(sp)
    2bfc:	dc800217 	ldw	r18,8(sp)
    2c00:	dc400117 	ldw	r17,4(sp)
    2c04:	dc000017 	ldw	r16,0(sp)
    2c08:	dec00404 	addi	sp,sp,16
    2c0c:	f800283a 	ret
    2c10:	00020d40 	call	20d4 <__sfp_lock_release>
    2c14:	0005883a 	mov	r2,zero
    2c18:	dfc00317 	ldw	ra,12(sp)
    2c1c:	dc800217 	ldw	r18,8(sp)
    2c20:	dc400117 	ldw	r17,4(sp)
    2c24:	dc000017 	ldw	r16,0(sp)
    2c28:	dec00404 	addi	sp,sp,16
    2c2c:	f800283a 	ret
    2c30:	0005883a 	mov	r2,zero
    2c34:	dfc00317 	ldw	ra,12(sp)
    2c38:	dc800217 	ldw	r18,8(sp)
    2c3c:	dc400117 	ldw	r17,4(sp)
    2c40:	dc000017 	ldw	r16,0(sp)
    2c44:	dec00404 	addi	sp,sp,16
    2c48:	f800283a 	ret
    2c4c:	8809883a 	mov	r4,r17
    2c50:	0001e180 	call	1e18 <__sinit>
    2c54:	8080030f 	ldh	r2,12(r16)
    2c58:	103fcb1e 	bne	r2,zero,2b88 <__alt_data_end+0xfc002b88>
    2c5c:	003fec06 	br	2c10 <__alt_data_end+0xfc002c10>
    2c60:	81400417 	ldw	r5,16(r16)
    2c64:	8809883a 	mov	r4,r17
    2c68:	000224c0 	call	224c <_free_r>
    2c6c:	003fd306 	br	2bbc <__alt_data_end+0xfc002bbc>
    2c70:	04bfffc4 	movi	r18,-1
    2c74:	003fce06 	br	2bb0 <__alt_data_end+0xfc002bb0>

00002c78 <fclose>:
    2c78:	00800074 	movhi	r2,1
    2c7c:	10bf5804 	addi	r2,r2,-672
    2c80:	200b883a 	mov	r5,r4
    2c84:	11000017 	ldw	r4,0(r2)
    2c88:	0002b501 	jmpi	2b50 <_fclose_r>

00002c8c <_fstat_r>:
    2c8c:	defffd04 	addi	sp,sp,-12
    2c90:	dc400115 	stw	r17,4(sp)
    2c94:	dc000015 	stw	r16,0(sp)
    2c98:	2023883a 	mov	r17,r4
    2c9c:	04000074 	movhi	r16,1
    2ca0:	84064f04 	addi	r16,r16,6460
    2ca4:	2809883a 	mov	r4,r5
    2ca8:	300b883a 	mov	r5,r6
    2cac:	dfc00215 	stw	ra,8(sp)
    2cb0:	80000015 	stw	zero,0(r16)
    2cb4:	0002fc40 	call	2fc4 <fstat>
    2cb8:	00ffffc4 	movi	r3,-1
    2cbc:	10c00526 	beq	r2,r3,2cd4 <_fstat_r+0x48>
    2cc0:	dfc00217 	ldw	ra,8(sp)
    2cc4:	dc400117 	ldw	r17,4(sp)
    2cc8:	dc000017 	ldw	r16,0(sp)
    2ccc:	dec00304 	addi	sp,sp,12
    2cd0:	f800283a 	ret
    2cd4:	80c00017 	ldw	r3,0(r16)
    2cd8:	183ff926 	beq	r3,zero,2cc0 <__alt_data_end+0xfc002cc0>
    2cdc:	88c00015 	stw	r3,0(r17)
    2ce0:	dfc00217 	ldw	ra,8(sp)
    2ce4:	dc400117 	ldw	r17,4(sp)
    2ce8:	dc000017 	ldw	r16,0(sp)
    2cec:	dec00304 	addi	sp,sp,12
    2cf0:	f800283a 	ret

00002cf4 <_isatty_r>:
    2cf4:	defffd04 	addi	sp,sp,-12
    2cf8:	dc400115 	stw	r17,4(sp)
    2cfc:	dc000015 	stw	r16,0(sp)
    2d00:	2023883a 	mov	r17,r4
    2d04:	04000074 	movhi	r16,1
    2d08:	84064f04 	addi	r16,r16,6460
    2d0c:	2809883a 	mov	r4,r5
    2d10:	dfc00215 	stw	ra,8(sp)
    2d14:	80000015 	stw	zero,0(r16)
    2d18:	00030c00 	call	30c0 <isatty>
    2d1c:	00ffffc4 	movi	r3,-1
    2d20:	10c00526 	beq	r2,r3,2d38 <_isatty_r+0x44>
    2d24:	dfc00217 	ldw	ra,8(sp)
    2d28:	dc400117 	ldw	r17,4(sp)
    2d2c:	dc000017 	ldw	r16,0(sp)
    2d30:	dec00304 	addi	sp,sp,12
    2d34:	f800283a 	ret
    2d38:	80c00017 	ldw	r3,0(r16)
    2d3c:	183ff926 	beq	r3,zero,2d24 <__alt_data_end+0xfc002d24>
    2d40:	88c00015 	stw	r3,0(r17)
    2d44:	dfc00217 	ldw	ra,8(sp)
    2d48:	dc400117 	ldw	r17,4(sp)
    2d4c:	dc000017 	ldw	r16,0(sp)
    2d50:	dec00304 	addi	sp,sp,12
    2d54:	f800283a 	ret

00002d58 <_lseek_r>:
    2d58:	defffd04 	addi	sp,sp,-12
    2d5c:	dc400115 	stw	r17,4(sp)
    2d60:	dc000015 	stw	r16,0(sp)
    2d64:	2023883a 	mov	r17,r4
    2d68:	04000074 	movhi	r16,1
    2d6c:	84064f04 	addi	r16,r16,6460
    2d70:	2809883a 	mov	r4,r5
    2d74:	300b883a 	mov	r5,r6
    2d78:	380d883a 	mov	r6,r7
    2d7c:	dfc00215 	stw	ra,8(sp)
    2d80:	80000015 	stw	zero,0(r16)
    2d84:	00032940 	call	3294 <lseek>
    2d88:	00ffffc4 	movi	r3,-1
    2d8c:	10c00526 	beq	r2,r3,2da4 <_lseek_r+0x4c>
    2d90:	dfc00217 	ldw	ra,8(sp)
    2d94:	dc400117 	ldw	r17,4(sp)
    2d98:	dc000017 	ldw	r16,0(sp)
    2d9c:	dec00304 	addi	sp,sp,12
    2da0:	f800283a 	ret
    2da4:	80c00017 	ldw	r3,0(r16)
    2da8:	183ff926 	beq	r3,zero,2d90 <__alt_data_end+0xfc002d90>
    2dac:	88c00015 	stw	r3,0(r17)
    2db0:	dfc00217 	ldw	ra,8(sp)
    2db4:	dc400117 	ldw	r17,4(sp)
    2db8:	dc000017 	ldw	r16,0(sp)
    2dbc:	dec00304 	addi	sp,sp,12
    2dc0:	f800283a 	ret

00002dc4 <_read_r>:
    2dc4:	defffd04 	addi	sp,sp,-12
    2dc8:	dc400115 	stw	r17,4(sp)
    2dcc:	dc000015 	stw	r16,0(sp)
    2dd0:	2023883a 	mov	r17,r4
    2dd4:	04000074 	movhi	r16,1
    2dd8:	84064f04 	addi	r16,r16,6460
    2ddc:	2809883a 	mov	r4,r5
    2de0:	300b883a 	mov	r5,r6
    2de4:	380d883a 	mov	r6,r7
    2de8:	dfc00215 	stw	ra,8(sp)
    2dec:	80000015 	stw	zero,0(r16)
    2df0:	00034880 	call	3488 <read>
    2df4:	00ffffc4 	movi	r3,-1
    2df8:	10c00526 	beq	r2,r3,2e10 <_read_r+0x4c>
    2dfc:	dfc00217 	ldw	ra,8(sp)
    2e00:	dc400117 	ldw	r17,4(sp)
    2e04:	dc000017 	ldw	r16,0(sp)
    2e08:	dec00304 	addi	sp,sp,12
    2e0c:	f800283a 	ret
    2e10:	80c00017 	ldw	r3,0(r16)
    2e14:	183ff926 	beq	r3,zero,2dfc <__alt_data_end+0xfc002dfc>
    2e18:	88c00015 	stw	r3,0(r17)
    2e1c:	dfc00217 	ldw	ra,8(sp)
    2e20:	dc400117 	ldw	r17,4(sp)
    2e24:	dc000017 	ldw	r16,0(sp)
    2e28:	dec00304 	addi	sp,sp,12
    2e2c:	f800283a 	ret

00002e30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2e30:	defffe04 	addi	sp,sp,-8
    2e34:	dfc00115 	stw	ra,4(sp)
    2e38:	df000015 	stw	fp,0(sp)
    2e3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2e40:	00800074 	movhi	r2,1
    2e44:	10bf6004 	addi	r2,r2,-640
    2e48:	10800017 	ldw	r2,0(r2)
    2e4c:	10000526 	beq	r2,zero,2e64 <alt_get_errno+0x34>
    2e50:	00800074 	movhi	r2,1
    2e54:	10bf6004 	addi	r2,r2,-640
    2e58:	10800017 	ldw	r2,0(r2)
    2e5c:	103ee83a 	callr	r2
    2e60:	00000206 	br	2e6c <alt_get_errno+0x3c>
    2e64:	00800074 	movhi	r2,1
    2e68:	10864f04 	addi	r2,r2,6460
}
    2e6c:	e037883a 	mov	sp,fp
    2e70:	dfc00117 	ldw	ra,4(sp)
    2e74:	df000017 	ldw	fp,0(sp)
    2e78:	dec00204 	addi	sp,sp,8
    2e7c:	f800283a 	ret

00002e80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2e80:	defffb04 	addi	sp,sp,-20
    2e84:	dfc00415 	stw	ra,16(sp)
    2e88:	df000315 	stw	fp,12(sp)
    2e8c:	df000304 	addi	fp,sp,12
    2e90:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2e94:	e0bfff17 	ldw	r2,-4(fp)
    2e98:	10000616 	blt	r2,zero,2eb4 <close+0x34>
    2e9c:	e0bfff17 	ldw	r2,-4(fp)
    2ea0:	10c00324 	muli	r3,r2,12
    2ea4:	00800074 	movhi	r2,1
    2ea8:	10bad104 	addi	r2,r2,-5308
    2eac:	1885883a 	add	r2,r3,r2
    2eb0:	00000106 	br	2eb8 <close+0x38>
    2eb4:	0005883a 	mov	r2,zero
    2eb8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    2ebc:	e0bffd17 	ldw	r2,-12(fp)
    2ec0:	10001826 	beq	r2,zero,2f24 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2ec4:	e0bffd17 	ldw	r2,-12(fp)
    2ec8:	10800017 	ldw	r2,0(r2)
    2ecc:	10800417 	ldw	r2,16(r2)
    2ed0:	10000626 	beq	r2,zero,2eec <close+0x6c>
    2ed4:	e0bffd17 	ldw	r2,-12(fp)
    2ed8:	10800017 	ldw	r2,0(r2)
    2edc:	10800417 	ldw	r2,16(r2)
    2ee0:	e13ffd17 	ldw	r4,-12(fp)
    2ee4:	103ee83a 	callr	r2
    2ee8:	00000106 	br	2ef0 <close+0x70>
    2eec:	0005883a 	mov	r2,zero
    2ef0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2ef4:	e13fff17 	ldw	r4,-4(fp)
    2ef8:	00035780 	call	3578 <alt_release_fd>
    if (rval < 0)
    2efc:	e0bffe17 	ldw	r2,-8(fp)
    2f00:	1000060e 	bge	r2,zero,2f1c <close+0x9c>
    {
      ALT_ERRNO = -rval;
    2f04:	0002e300 	call	2e30 <alt_get_errno>
    2f08:	e0fffe17 	ldw	r3,-8(fp)
    2f0c:	00c7c83a 	sub	r3,zero,r3
    2f10:	10c00015 	stw	r3,0(r2)
      return -1;
    2f14:	00bfffc4 	movi	r2,-1
    2f18:	00000606 	br	2f34 <close+0xb4>
    }
    return 0;
    2f1c:	0005883a 	mov	r2,zero
    2f20:	00000406 	br	2f34 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2f24:	0002e300 	call	2e30 <alt_get_errno>
    2f28:	00c01444 	movi	r3,81
    2f2c:	10c00015 	stw	r3,0(r2)
    return -1;
    2f30:	00bfffc4 	movi	r2,-1
  }
}
    2f34:	e037883a 	mov	sp,fp
    2f38:	dfc00117 	ldw	ra,4(sp)
    2f3c:	df000017 	ldw	fp,0(sp)
    2f40:	dec00204 	addi	sp,sp,8
    2f44:	f800283a 	ret

00002f48 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2f48:	defffc04 	addi	sp,sp,-16
    2f4c:	df000315 	stw	fp,12(sp)
    2f50:	df000304 	addi	fp,sp,12
    2f54:	e13ffd15 	stw	r4,-12(fp)
    2f58:	e17ffe15 	stw	r5,-8(fp)
    2f5c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2f60:	e0bfff17 	ldw	r2,-4(fp)
}
    2f64:	e037883a 	mov	sp,fp
    2f68:	df000017 	ldw	fp,0(sp)
    2f6c:	dec00104 	addi	sp,sp,4
    2f70:	f800283a 	ret

00002f74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2f74:	defffe04 	addi	sp,sp,-8
    2f78:	dfc00115 	stw	ra,4(sp)
    2f7c:	df000015 	stw	fp,0(sp)
    2f80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2f84:	00800074 	movhi	r2,1
    2f88:	10bf6004 	addi	r2,r2,-640
    2f8c:	10800017 	ldw	r2,0(r2)
    2f90:	10000526 	beq	r2,zero,2fa8 <alt_get_errno+0x34>
    2f94:	00800074 	movhi	r2,1
    2f98:	10bf6004 	addi	r2,r2,-640
    2f9c:	10800017 	ldw	r2,0(r2)
    2fa0:	103ee83a 	callr	r2
    2fa4:	00000206 	br	2fb0 <alt_get_errno+0x3c>
    2fa8:	00800074 	movhi	r2,1
    2fac:	10864f04 	addi	r2,r2,6460
}
    2fb0:	e037883a 	mov	sp,fp
    2fb4:	dfc00117 	ldw	ra,4(sp)
    2fb8:	df000017 	ldw	fp,0(sp)
    2fbc:	dec00204 	addi	sp,sp,8
    2fc0:	f800283a 	ret

00002fc4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    2fc4:	defffb04 	addi	sp,sp,-20
    2fc8:	dfc00415 	stw	ra,16(sp)
    2fcc:	df000315 	stw	fp,12(sp)
    2fd0:	df000304 	addi	fp,sp,12
    2fd4:	e13ffe15 	stw	r4,-8(fp)
    2fd8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2fdc:	e0bffe17 	ldw	r2,-8(fp)
    2fe0:	10000616 	blt	r2,zero,2ffc <fstat+0x38>
    2fe4:	e0bffe17 	ldw	r2,-8(fp)
    2fe8:	10c00324 	muli	r3,r2,12
    2fec:	00800074 	movhi	r2,1
    2ff0:	10bad104 	addi	r2,r2,-5308
    2ff4:	1885883a 	add	r2,r3,r2
    2ff8:	00000106 	br	3000 <fstat+0x3c>
    2ffc:	0005883a 	mov	r2,zero
    3000:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3004:	e0bffd17 	ldw	r2,-12(fp)
    3008:	10001026 	beq	r2,zero,304c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    300c:	e0bffd17 	ldw	r2,-12(fp)
    3010:	10800017 	ldw	r2,0(r2)
    3014:	10800817 	ldw	r2,32(r2)
    3018:	10000726 	beq	r2,zero,3038 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    301c:	e0bffd17 	ldw	r2,-12(fp)
    3020:	10800017 	ldw	r2,0(r2)
    3024:	10800817 	ldw	r2,32(r2)
    3028:	e13ffd17 	ldw	r4,-12(fp)
    302c:	e17fff17 	ldw	r5,-4(fp)
    3030:	103ee83a 	callr	r2
    3034:	00000906 	br	305c <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3038:	e0bfff17 	ldw	r2,-4(fp)
    303c:	00c80004 	movi	r3,8192
    3040:	10c00115 	stw	r3,4(r2)
      return 0;
    3044:	0005883a 	mov	r2,zero
    3048:	00000406 	br	305c <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    304c:	0002f740 	call	2f74 <alt_get_errno>
    3050:	00c01444 	movi	r3,81
    3054:	10c00015 	stw	r3,0(r2)
    return -1;
    3058:	00bfffc4 	movi	r2,-1
  }
}
    305c:	e037883a 	mov	sp,fp
    3060:	dfc00117 	ldw	ra,4(sp)
    3064:	df000017 	ldw	fp,0(sp)
    3068:	dec00204 	addi	sp,sp,8
    306c:	f800283a 	ret

00003070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3070:	defffe04 	addi	sp,sp,-8
    3074:	dfc00115 	stw	ra,4(sp)
    3078:	df000015 	stw	fp,0(sp)
    307c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3080:	00800074 	movhi	r2,1
    3084:	10bf6004 	addi	r2,r2,-640
    3088:	10800017 	ldw	r2,0(r2)
    308c:	10000526 	beq	r2,zero,30a4 <alt_get_errno+0x34>
    3090:	00800074 	movhi	r2,1
    3094:	10bf6004 	addi	r2,r2,-640
    3098:	10800017 	ldw	r2,0(r2)
    309c:	103ee83a 	callr	r2
    30a0:	00000206 	br	30ac <alt_get_errno+0x3c>
    30a4:	00800074 	movhi	r2,1
    30a8:	10864f04 	addi	r2,r2,6460
}
    30ac:	e037883a 	mov	sp,fp
    30b0:	dfc00117 	ldw	ra,4(sp)
    30b4:	df000017 	ldw	fp,0(sp)
    30b8:	dec00204 	addi	sp,sp,8
    30bc:	f800283a 	ret

000030c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    30c0:	deffed04 	addi	sp,sp,-76
    30c4:	dfc01215 	stw	ra,72(sp)
    30c8:	df001115 	stw	fp,68(sp)
    30cc:	df001104 	addi	fp,sp,68
    30d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    30d4:	e0bfff17 	ldw	r2,-4(fp)
    30d8:	10000616 	blt	r2,zero,30f4 <isatty+0x34>
    30dc:	e0bfff17 	ldw	r2,-4(fp)
    30e0:	10c00324 	muli	r3,r2,12
    30e4:	00800074 	movhi	r2,1
    30e8:	10bad104 	addi	r2,r2,-5308
    30ec:	1885883a 	add	r2,r3,r2
    30f0:	00000106 	br	30f8 <isatty+0x38>
    30f4:	0005883a 	mov	r2,zero
    30f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    30fc:	e0bfef17 	ldw	r2,-68(fp)
    3100:	10000e26 	beq	r2,zero,313c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3104:	e0bfef17 	ldw	r2,-68(fp)
    3108:	10800017 	ldw	r2,0(r2)
    310c:	10800817 	ldw	r2,32(r2)
    3110:	1000021e 	bne	r2,zero,311c <isatty+0x5c>
    {
      return 1;
    3114:	00800044 	movi	r2,1
    3118:	00000c06 	br	314c <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    311c:	e0bff004 	addi	r2,fp,-64
    3120:	e13fff17 	ldw	r4,-4(fp)
    3124:	100b883a 	mov	r5,r2
    3128:	0002fc40 	call	2fc4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    312c:	e0bff117 	ldw	r2,-60(fp)
    3130:	10880020 	cmpeqi	r2,r2,8192
    3134:	10803fcc 	andi	r2,r2,255
    3138:	00000406 	br	314c <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    313c:	00030700 	call	3070 <alt_get_errno>
    3140:	00c01444 	movi	r3,81
    3144:	10c00015 	stw	r3,0(r2)
    return 0;
    3148:	0005883a 	mov	r2,zero
  }
}
    314c:	e037883a 	mov	sp,fp
    3150:	dfc00117 	ldw	ra,4(sp)
    3154:	df000017 	ldw	fp,0(sp)
    3158:	dec00204 	addi	sp,sp,8
    315c:	f800283a 	ret

00003160 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3160:	defffc04 	addi	sp,sp,-16
    3164:	df000315 	stw	fp,12(sp)
    3168:	df000304 	addi	fp,sp,12
    316c:	e13ffd15 	stw	r4,-12(fp)
    3170:	e17ffe15 	stw	r5,-8(fp)
    3174:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3178:	e0fffe17 	ldw	r3,-8(fp)
    317c:	e0bffd17 	ldw	r2,-12(fp)
    3180:	18800c26 	beq	r3,r2,31b4 <alt_load_section+0x54>
  {
    while( to != end )
    3184:	00000806 	br	31a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    3188:	e0bffe17 	ldw	r2,-8(fp)
    318c:	10c00104 	addi	r3,r2,4
    3190:	e0fffe15 	stw	r3,-8(fp)
    3194:	e0fffd17 	ldw	r3,-12(fp)
    3198:	19000104 	addi	r4,r3,4
    319c:	e13ffd15 	stw	r4,-12(fp)
    31a0:	18c00017 	ldw	r3,0(r3)
    31a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    31a8:	e0fffe17 	ldw	r3,-8(fp)
    31ac:	e0bfff17 	ldw	r2,-4(fp)
    31b0:	18bff51e 	bne	r3,r2,3188 <__alt_data_end+0xfc003188>
    {
      *to++ = *from++;
    }
  }
}
    31b4:	e037883a 	mov	sp,fp
    31b8:	df000017 	ldw	fp,0(sp)
    31bc:	dec00104 	addi	sp,sp,4
    31c0:	f800283a 	ret

000031c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    31c4:	defffe04 	addi	sp,sp,-8
    31c8:	dfc00115 	stw	ra,4(sp)
    31cc:	df000015 	stw	fp,0(sp)
    31d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    31d4:	01000074 	movhi	r4,1
    31d8:	213f8404 	addi	r4,r4,-496
    31dc:	01400074 	movhi	r5,1
    31e0:	2978bc04 	addi	r5,r5,-7440
    31e4:	01800074 	movhi	r6,1
    31e8:	31bf8404 	addi	r6,r6,-496
    31ec:	00031600 	call	3160 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    31f0:	01000034 	movhi	r4,0
    31f4:	21000804 	addi	r4,r4,32
    31f8:	01400034 	movhi	r5,0
    31fc:	29400804 	addi	r5,r5,32
    3200:	01800034 	movhi	r6,0
    3204:	31806f04 	addi	r6,r6,444
    3208:	00031600 	call	3160 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    320c:	01000074 	movhi	r4,1
    3210:	21385504 	addi	r4,r4,-7852
    3214:	01400074 	movhi	r5,1
    3218:	29785504 	addi	r5,r5,-7852
    321c:	01800074 	movhi	r6,1
    3220:	31b8bc04 	addi	r6,r6,-7440
    3224:	00031600 	call	3160 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3228:	000ca640 	call	ca64 <alt_dcache_flush_all>
  alt_icache_flush_all();
    322c:	000cc280 	call	cc28 <alt_icache_flush_all>
}
    3230:	e037883a 	mov	sp,fp
    3234:	dfc00117 	ldw	ra,4(sp)
    3238:	df000017 	ldw	fp,0(sp)
    323c:	dec00204 	addi	sp,sp,8
    3240:	f800283a 	ret

00003244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3244:	defffe04 	addi	sp,sp,-8
    3248:	dfc00115 	stw	ra,4(sp)
    324c:	df000015 	stw	fp,0(sp)
    3250:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3254:	00800074 	movhi	r2,1
    3258:	10bf6004 	addi	r2,r2,-640
    325c:	10800017 	ldw	r2,0(r2)
    3260:	10000526 	beq	r2,zero,3278 <alt_get_errno+0x34>
    3264:	00800074 	movhi	r2,1
    3268:	10bf6004 	addi	r2,r2,-640
    326c:	10800017 	ldw	r2,0(r2)
    3270:	103ee83a 	callr	r2
    3274:	00000206 	br	3280 <alt_get_errno+0x3c>
    3278:	00800074 	movhi	r2,1
    327c:	10864f04 	addi	r2,r2,6460
}
    3280:	e037883a 	mov	sp,fp
    3284:	dfc00117 	ldw	ra,4(sp)
    3288:	df000017 	ldw	fp,0(sp)
    328c:	dec00204 	addi	sp,sp,8
    3290:	f800283a 	ret

00003294 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3294:	defff904 	addi	sp,sp,-28
    3298:	dfc00615 	stw	ra,24(sp)
    329c:	df000515 	stw	fp,20(sp)
    32a0:	df000504 	addi	fp,sp,20
    32a4:	e13ffd15 	stw	r4,-12(fp)
    32a8:	e17ffe15 	stw	r5,-8(fp)
    32ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    32b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    32b4:	e0bffd17 	ldw	r2,-12(fp)
    32b8:	10000616 	blt	r2,zero,32d4 <lseek+0x40>
    32bc:	e0bffd17 	ldw	r2,-12(fp)
    32c0:	10c00324 	muli	r3,r2,12
    32c4:	00800074 	movhi	r2,1
    32c8:	10bad104 	addi	r2,r2,-5308
    32cc:	1885883a 	add	r2,r3,r2
    32d0:	00000106 	br	32d8 <lseek+0x44>
    32d4:	0005883a 	mov	r2,zero
    32d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    32dc:	e0bffc17 	ldw	r2,-16(fp)
    32e0:	10001026 	beq	r2,zero,3324 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    32e4:	e0bffc17 	ldw	r2,-16(fp)
    32e8:	10800017 	ldw	r2,0(r2)
    32ec:	10800717 	ldw	r2,28(r2)
    32f0:	10000926 	beq	r2,zero,3318 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    32f4:	e0bffc17 	ldw	r2,-16(fp)
    32f8:	10800017 	ldw	r2,0(r2)
    32fc:	10800717 	ldw	r2,28(r2)
    3300:	e13ffc17 	ldw	r4,-16(fp)
    3304:	e17ffe17 	ldw	r5,-8(fp)
    3308:	e1bfff17 	ldw	r6,-4(fp)
    330c:	103ee83a 	callr	r2
    3310:	e0bffb15 	stw	r2,-20(fp)
    3314:	00000506 	br	332c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3318:	00bfde84 	movi	r2,-134
    331c:	e0bffb15 	stw	r2,-20(fp)
    3320:	00000206 	br	332c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    3324:	00bfebc4 	movi	r2,-81
    3328:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    332c:	e0bffb17 	ldw	r2,-20(fp)
    3330:	1000060e 	bge	r2,zero,334c <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
    3334:	00032440 	call	3244 <alt_get_errno>
    3338:	e0fffb17 	ldw	r3,-20(fp)
    333c:	00c7c83a 	sub	r3,zero,r3
    3340:	10c00015 	stw	r3,0(r2)
    rc = -1;
    3344:	00bfffc4 	movi	r2,-1
    3348:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    334c:	e0bffb17 	ldw	r2,-20(fp)
}
    3350:	e037883a 	mov	sp,fp
    3354:	dfc00117 	ldw	ra,4(sp)
    3358:	df000017 	ldw	fp,0(sp)
    335c:	dec00204 	addi	sp,sp,8
    3360:	f800283a 	ret

00003364 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3364:	defff904 	addi	sp,sp,-28
    3368:	dfc00615 	stw	ra,24(sp)
    336c:	df000515 	stw	fp,20(sp)
    3370:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3374:	0009883a 	mov	r4,zero
    3378:	000b76c0 	call	b76c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    337c:	000433c0 	call	433c <OSInit>
    3380:	01000044 	movi	r4,1
    3384:	0008e9c0 	call	8e9c <OSSemCreate>
    3388:	1007883a 	mov	r3,r2
    338c:	00800074 	movhi	r2,1
    3390:	10865504 	addi	r2,r2,6484
    3394:	10c00015 	stw	r3,0(r2)
    3398:	01000044 	movi	r4,1
    339c:	0008e9c0 	call	8e9c <OSSemCreate>
    33a0:	1007883a 	mov	r3,r2
    33a4:	00800074 	movhi	r2,1
    33a8:	10865704 	addi	r2,r2,6492
    33ac:	10c00015 	stw	r3,0(r2)
    33b0:	00800074 	movhi	r2,1
    33b4:	10865004 	addi	r2,r2,6464
    33b8:	e0bffc15 	stw	r2,-16(fp)
    33bc:	00800044 	movi	r2,1
    33c0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    33c4:	e0bffd0b 	ldhu	r2,-12(fp)
    33c8:	1009883a 	mov	r4,r2
    33cc:	0008e9c0 	call	8e9c <OSSemCreate>
    33d0:	1007883a 	mov	r3,r2
    33d4:	e0bffc17 	ldw	r2,-16(fp)
    33d8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    33dc:	000b7a00 	call	b7a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    33e0:	01000074 	movhi	r4,1
    33e4:	21386404 	addi	r4,r4,-7792
    33e8:	01400074 	movhi	r5,1
    33ec:	29786404 	addi	r5,r5,-7792
    33f0:	01800074 	movhi	r6,1
    33f4:	31b86404 	addi	r6,r6,-7792
    33f8:	000cfe00 	call	cfe0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    33fc:	000cb700 	call	cb70 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3400:	01000074 	movhi	r4,1
    3404:	2132f304 	addi	r4,r4,-13364
    3408:	000dc7c0 	call	dc7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    340c:	d126fa17 	ldw	r4,-25624(gp)
    3410:	d0e6fb17 	ldw	r3,-25620(gp)
    3414:	d0a6fc17 	ldw	r2,-25616(gp)
    3418:	180b883a 	mov	r5,r3
    341c:	100d883a 	mov	r6,r2
    3420:	00002680 	call	268 <main>
    3424:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    3428:	01000044 	movi	r4,1
    342c:	0002e800 	call	2e80 <close>
  exit (result);
    3430:	e13ffb17 	ldw	r4,-20(fp)
    3434:	000dc900 	call	dc90 <exit>

00003438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3438:	defffe04 	addi	sp,sp,-8
    343c:	dfc00115 	stw	ra,4(sp)
    3440:	df000015 	stw	fp,0(sp)
    3444:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3448:	00800074 	movhi	r2,1
    344c:	10bf6004 	addi	r2,r2,-640
    3450:	10800017 	ldw	r2,0(r2)
    3454:	10000526 	beq	r2,zero,346c <alt_get_errno+0x34>
    3458:	00800074 	movhi	r2,1
    345c:	10bf6004 	addi	r2,r2,-640
    3460:	10800017 	ldw	r2,0(r2)
    3464:	103ee83a 	callr	r2
    3468:	00000206 	br	3474 <alt_get_errno+0x3c>
    346c:	00800074 	movhi	r2,1
    3470:	10864f04 	addi	r2,r2,6460
}
    3474:	e037883a 	mov	sp,fp
    3478:	dfc00117 	ldw	ra,4(sp)
    347c:	df000017 	ldw	fp,0(sp)
    3480:	dec00204 	addi	sp,sp,8
    3484:	f800283a 	ret

00003488 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3488:	defff904 	addi	sp,sp,-28
    348c:	dfc00615 	stw	ra,24(sp)
    3490:	df000515 	stw	fp,20(sp)
    3494:	df000504 	addi	fp,sp,20
    3498:	e13ffd15 	stw	r4,-12(fp)
    349c:	e17ffe15 	stw	r5,-8(fp)
    34a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    34a4:	e0bffd17 	ldw	r2,-12(fp)
    34a8:	10000616 	blt	r2,zero,34c4 <read+0x3c>
    34ac:	e0bffd17 	ldw	r2,-12(fp)
    34b0:	10c00324 	muli	r3,r2,12
    34b4:	00800074 	movhi	r2,1
    34b8:	10bad104 	addi	r2,r2,-5308
    34bc:	1885883a 	add	r2,r3,r2
    34c0:	00000106 	br	34c8 <read+0x40>
    34c4:	0005883a 	mov	r2,zero
    34c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    34cc:	e0bffb17 	ldw	r2,-20(fp)
    34d0:	10002026 	beq	r2,zero,3554 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    34d4:	e0bffb17 	ldw	r2,-20(fp)
    34d8:	10800217 	ldw	r2,8(r2)
    34dc:	108000cc 	andi	r2,r2,3
    34e0:	10800060 	cmpeqi	r2,r2,1
    34e4:	1000171e 	bne	r2,zero,3544 <read+0xbc>
        (fd->dev->read))
    34e8:	e0bffb17 	ldw	r2,-20(fp)
    34ec:	10800017 	ldw	r2,0(r2)
    34f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    34f4:	10001326 	beq	r2,zero,3544 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    34f8:	e0bffb17 	ldw	r2,-20(fp)
    34fc:	10800017 	ldw	r2,0(r2)
    3500:	10800517 	ldw	r2,20(r2)
    3504:	e0ffff17 	ldw	r3,-4(fp)
    3508:	e13ffb17 	ldw	r4,-20(fp)
    350c:	e17ffe17 	ldw	r5,-8(fp)
    3510:	180d883a 	mov	r6,r3
    3514:	103ee83a 	callr	r2
    3518:	e0bffc15 	stw	r2,-16(fp)
    351c:	e0bffc17 	ldw	r2,-16(fp)
    3520:	1000060e 	bge	r2,zero,353c <read+0xb4>
        {
          ALT_ERRNO = -rval;
    3524:	00034380 	call	3438 <alt_get_errno>
    3528:	e0fffc17 	ldw	r3,-16(fp)
    352c:	00c7c83a 	sub	r3,zero,r3
    3530:	10c00015 	stw	r3,0(r2)
          return -1;
    3534:	00bfffc4 	movi	r2,-1
    3538:	00000a06 	br	3564 <read+0xdc>
        }
        return rval;
    353c:	e0bffc17 	ldw	r2,-16(fp)
    3540:	00000806 	br	3564 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3544:	00034380 	call	3438 <alt_get_errno>
    3548:	00c00344 	movi	r3,13
    354c:	10c00015 	stw	r3,0(r2)
    3550:	00000306 	br	3560 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3554:	00034380 	call	3438 <alt_get_errno>
    3558:	00c01444 	movi	r3,81
    355c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    3560:	00bfffc4 	movi	r2,-1
}
    3564:	e037883a 	mov	sp,fp
    3568:	dfc00117 	ldw	ra,4(sp)
    356c:	df000017 	ldw	fp,0(sp)
    3570:	dec00204 	addi	sp,sp,8
    3574:	f800283a 	ret

00003578 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3578:	defffe04 	addi	sp,sp,-8
    357c:	df000115 	stw	fp,4(sp)
    3580:	df000104 	addi	fp,sp,4
    3584:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3588:	e0bfff17 	ldw	r2,-4(fp)
    358c:	108000d0 	cmplti	r2,r2,3
    3590:	10000d1e 	bne	r2,zero,35c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3594:	00c00074 	movhi	r3,1
    3598:	18fad104 	addi	r3,r3,-5308
    359c:	e0bfff17 	ldw	r2,-4(fp)
    35a0:	10800324 	muli	r2,r2,12
    35a4:	1885883a 	add	r2,r3,r2
    35a8:	10800204 	addi	r2,r2,8
    35ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    35b0:	00c00074 	movhi	r3,1
    35b4:	18fad104 	addi	r3,r3,-5308
    35b8:	e0bfff17 	ldw	r2,-4(fp)
    35bc:	10800324 	muli	r2,r2,12
    35c0:	1885883a 	add	r2,r3,r2
    35c4:	10000015 	stw	zero,0(r2)
  }
}
    35c8:	e037883a 	mov	sp,fp
    35cc:	df000017 	ldw	fp,0(sp)
    35d0:	dec00104 	addi	sp,sp,4
    35d4:	f800283a 	ret

000035d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    35d8:	defff904 	addi	sp,sp,-28
    35dc:	df000615 	stw	fp,24(sp)
    35e0:	df000604 	addi	fp,sp,24
    35e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    35e8:	0005303a 	rdctl	r2,status
    35ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    35f0:	e0fffc17 	ldw	r3,-16(fp)
    35f4:	00bfff84 	movi	r2,-2
    35f8:	1884703a 	and	r2,r3,r2
    35fc:	1001703a 	wrctl	status,r2
  
  return context;
    3600:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3604:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3608:	d0a00a17 	ldw	r2,-32728(gp)
    360c:	10c000c4 	addi	r3,r2,3
    3610:	00bfff04 	movi	r2,-4
    3614:	1884703a 	and	r2,r3,r2
    3618:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    361c:	d0e00a17 	ldw	r3,-32728(gp)
    3620:	e0bfff17 	ldw	r2,-4(fp)
    3624:	1885883a 	add	r2,r3,r2
    3628:	00c10034 	movhi	r3,1024
    362c:	18c00004 	addi	r3,r3,0
    3630:	1880062e 	bgeu	r3,r2,364c <sbrk+0x74>
    3634:	e0bffa17 	ldw	r2,-24(fp)
    3638:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    363c:	e0bffd17 	ldw	r2,-12(fp)
    3640:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3644:	00bfffc4 	movi	r2,-1
    3648:	00000b06 	br	3678 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    364c:	d0a00a17 	ldw	r2,-32728(gp)
    3650:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    3654:	d0e00a17 	ldw	r3,-32728(gp)
    3658:	e0bfff17 	ldw	r2,-4(fp)
    365c:	1885883a 	add	r2,r3,r2
    3660:	d0a00a15 	stw	r2,-32728(gp)
    3664:	e0bffa17 	ldw	r2,-24(fp)
    3668:	e0bffe15 	stw	r2,-8(fp)
    366c:	e0bffe17 	ldw	r2,-8(fp)
    3670:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3674:	e0bffb17 	ldw	r2,-20(fp)
} 
    3678:	e037883a 	mov	sp,fp
    367c:	df000017 	ldw	fp,0(sp)
    3680:	dec00104 	addi	sp,sp,4
    3684:	f800283a 	ret

00003688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3688:	defffe04 	addi	sp,sp,-8
    368c:	dfc00115 	stw	ra,4(sp)
    3690:	df000015 	stw	fp,0(sp)
    3694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3698:	00800074 	movhi	r2,1
    369c:	10bf6004 	addi	r2,r2,-640
    36a0:	10800017 	ldw	r2,0(r2)
    36a4:	10000526 	beq	r2,zero,36bc <alt_get_errno+0x34>
    36a8:	00800074 	movhi	r2,1
    36ac:	10bf6004 	addi	r2,r2,-640
    36b0:	10800017 	ldw	r2,0(r2)
    36b4:	103ee83a 	callr	r2
    36b8:	00000206 	br	36c4 <alt_get_errno+0x3c>
    36bc:	00800074 	movhi	r2,1
    36c0:	10864f04 	addi	r2,r2,6460
}
    36c4:	e037883a 	mov	sp,fp
    36c8:	dfc00117 	ldw	ra,4(sp)
    36cc:	df000017 	ldw	fp,0(sp)
    36d0:	dec00204 	addi	sp,sp,8
    36d4:	f800283a 	ret

000036d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    36d8:	defff904 	addi	sp,sp,-28
    36dc:	dfc00615 	stw	ra,24(sp)
    36e0:	df000515 	stw	fp,20(sp)
    36e4:	df000504 	addi	fp,sp,20
    36e8:	e13ffd15 	stw	r4,-12(fp)
    36ec:	e17ffe15 	stw	r5,-8(fp)
    36f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    36f4:	e0bffd17 	ldw	r2,-12(fp)
    36f8:	10000616 	blt	r2,zero,3714 <write+0x3c>
    36fc:	e0bffd17 	ldw	r2,-12(fp)
    3700:	10c00324 	muli	r3,r2,12
    3704:	00800074 	movhi	r2,1
    3708:	10bad104 	addi	r2,r2,-5308
    370c:	1885883a 	add	r2,r3,r2
    3710:	00000106 	br	3718 <write+0x40>
    3714:	0005883a 	mov	r2,zero
    3718:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    371c:	e0bffb17 	ldw	r2,-20(fp)
    3720:	10001f26 	beq	r2,zero,37a0 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3724:	e0bffb17 	ldw	r2,-20(fp)
    3728:	10800217 	ldw	r2,8(r2)
    372c:	108000cc 	andi	r2,r2,3
    3730:	10001726 	beq	r2,zero,3790 <write+0xb8>
    3734:	e0bffb17 	ldw	r2,-20(fp)
    3738:	10800017 	ldw	r2,0(r2)
    373c:	10800617 	ldw	r2,24(r2)
    3740:	10001326 	beq	r2,zero,3790 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3744:	e0bffb17 	ldw	r2,-20(fp)
    3748:	10800017 	ldw	r2,0(r2)
    374c:	10800617 	ldw	r2,24(r2)
    3750:	e0ffff17 	ldw	r3,-4(fp)
    3754:	e13ffb17 	ldw	r4,-20(fp)
    3758:	e17ffe17 	ldw	r5,-8(fp)
    375c:	180d883a 	mov	r6,r3
    3760:	103ee83a 	callr	r2
    3764:	e0bffc15 	stw	r2,-16(fp)
    3768:	e0bffc17 	ldw	r2,-16(fp)
    376c:	1000060e 	bge	r2,zero,3788 <write+0xb0>
      {
        ALT_ERRNO = -rval;
    3770:	00036880 	call	3688 <alt_get_errno>
    3774:	e0fffc17 	ldw	r3,-16(fp)
    3778:	00c7c83a 	sub	r3,zero,r3
    377c:	10c00015 	stw	r3,0(r2)
        return -1;
    3780:	00bfffc4 	movi	r2,-1
    3784:	00000a06 	br	37b0 <write+0xd8>
      }
      return rval;
    3788:	e0bffc17 	ldw	r2,-16(fp)
    378c:	00000806 	br	37b0 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3790:	00036880 	call	3688 <alt_get_errno>
    3794:	00c00344 	movi	r3,13
    3798:	10c00015 	stw	r3,0(r2)
    379c:	00000306 	br	37ac <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    37a0:	00036880 	call	3688 <alt_get_errno>
    37a4:	00c01444 	movi	r3,81
    37a8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    37ac:	00bfffc4 	movi	r2,-1
}
    37b0:	e037883a 	mov	sp,fp
    37b4:	dfc00117 	ldw	ra,4(sp)
    37b8:	df000017 	ldw	fp,0(sp)
    37bc:	dec00204 	addi	sp,sp,8
    37c0:	f800283a 	ret

000037c4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    37c4:	deffdf04 	addi	sp,sp,-132
    37c8:	dfc02015 	stw	ra,128(sp)
    37cc:	df001f15 	stw	fp,124(sp)
    37d0:	df001f04 	addi	fp,sp,124
    37d4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    37d8:	e0bfe204 	addi	r2,fp,-120
    37dc:	01003fc4 	movi	r4,255
    37e0:	100b883a 	mov	r5,r2
    37e4:	000b0440 	call	b044 <OSTaskQuery>
    37e8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    37ec:	e0bffe83 	ldbu	r2,-6(fp)
    37f0:	10803fcc 	andi	r2,r2,255
    37f4:	10000126 	beq	r2,zero,37fc <__env_lock+0x38>
    return;
    37f8:	00001d06 	br	3870 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    37fc:	e0bfee83 	ldbu	r2,-70(fp)
    3800:	10803fcc 	andi	r2,r2,255
    3804:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    3808:	d0e6fe17 	ldw	r3,-25608(gp)
    380c:	e0bffd04 	addi	r2,fp,-12
    3810:	1809883a 	mov	r4,r3
    3814:	100b883a 	mov	r5,r2
    3818:	00096f80 	call	96f8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    381c:	e0bffe43 	ldbu	r2,-7(fp)
    3820:	10803fcc 	andi	r2,r2,255
    3824:	10000726 	beq	r2,zero,3844 <__env_lock+0x80>
    3828:	d0a00b17 	ldw	r2,-32724(gp)
    382c:	e0ffe117 	ldw	r3,-124(fp)
    3830:	1880041e 	bne	r3,r2,3844 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    3834:	d0a6fd17 	ldw	r2,-25612(gp)
    3838:	10800044 	addi	r2,r2,1
    383c:	d0a6fd15 	stw	r2,-25612(gp)
    3840:	00000a06 	br	386c <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    3844:	d0e6fe17 	ldw	r3,-25608(gp)
    3848:	e0bffe84 	addi	r2,fp,-6
    384c:	1809883a 	mov	r4,r3
    3850:	000b883a 	mov	r5,zero
    3854:	100d883a 	mov	r6,r2
    3858:	000920c0 	call	920c <OSSemPend>
    locks  = 1;
    385c:	00800044 	movi	r2,1
    3860:	d0a6fd15 	stw	r2,-25612(gp)
    lockid = id;
    3864:	e0bfe117 	ldw	r2,-124(fp)
    3868:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    386c:	0001883a 	nop
}
    3870:	e037883a 	mov	sp,fp
    3874:	dfc00117 	ldw	ra,4(sp)
    3878:	df000017 	ldw	fp,0(sp)
    387c:	dec00204 	addi	sp,sp,8
    3880:	f800283a 	ret

00003884 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    3884:	defffd04 	addi	sp,sp,-12
    3888:	dfc00215 	stw	ra,8(sp)
    388c:	df000115 	stw	fp,4(sp)
    3890:	df000104 	addi	fp,sp,4
    3894:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    3898:	d0a6fd17 	ldw	r2,-25612(gp)
    389c:	1000011e 	bne	r2,zero,38a4 <__env_unlock+0x20>
    return;
    38a0:	00000a06 	br	38cc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    38a4:	d0a6fd17 	ldw	r2,-25612(gp)
    38a8:	10bfffc4 	addi	r2,r2,-1
    38ac:	d0a6fd15 	stw	r2,-25612(gp)
    38b0:	d0a6fd17 	ldw	r2,-25612(gp)
    38b4:	1000051e 	bne	r2,zero,38cc <__env_unlock+0x48>
  {
    lockid = -1;
    38b8:	00bfffc4 	movi	r2,-1
    38bc:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
    38c0:	d0a6fe17 	ldw	r2,-25608(gp)
    38c4:	1009883a 	mov	r4,r2
    38c8:	00095e80 	call	95e8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    38cc:	e037883a 	mov	sp,fp
    38d0:	dfc00117 	ldw	ra,4(sp)
    38d4:	df000017 	ldw	fp,0(sp)
    38d8:	dec00204 	addi	sp,sp,8
    38dc:	f800283a 	ret

000038e0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    38e0:	deffdb04 	addi	sp,sp,-148
    38e4:	dfc02415 	stw	ra,144(sp)
    38e8:	df002315 	stw	fp,140(sp)
    38ec:	df002304 	addi	fp,sp,140
    38f0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    38f4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    38f8:	00800074 	movhi	r2,1
    38fc:	10865844 	addi	r2,r2,6497
    3900:	10800003 	ldbu	r2,0(r2)
    3904:	10803fcc 	andi	r2,r2,255
    3908:	10800060 	cmpeqi	r2,r2,1
    390c:	1000011e 	bne	r2,zero,3914 <__malloc_lock+0x34>
      return;
    3910:	00003606 	br	39ec <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3914:	e0bfe204 	addi	r2,fp,-120
    3918:	01003fc4 	movi	r4,255
    391c:	100b883a 	mov	r5,r2
    3920:	000b0440 	call	b044 <OSTaskQuery>
    3924:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    3928:	e0bffe83 	ldbu	r2,-6(fp)
    392c:	10803fcc 	andi	r2,r2,255
    3930:	10000126 	beq	r2,zero,3938 <__malloc_lock+0x58>
    return;
    3934:	00002d06 	br	39ec <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    3938:	e0bfee83 	ldbu	r2,-70(fp)
    393c:	10803fcc 	andi	r2,r2,255
    3940:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    3944:	d0e70017 	ldw	r3,-25600(gp)
    3948:	e0bffd04 	addi	r2,fp,-12
    394c:	1809883a 	mov	r4,r3
    3950:	100b883a 	mov	r5,r2
    3954:	00096f80 	call	96f8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3958:	0005303a 	rdctl	r2,status
    395c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3960:	e0ffdf17 	ldw	r3,-132(fp)
    3964:	00bfff84 	movi	r2,-2
    3968:	1884703a 	and	r2,r3,r2
    396c:	1001703a 	wrctl	status,r2
  
  return context;
    3970:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    3974:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    3978:	e0bffd0b 	ldhu	r2,-12(fp)
    397c:	10bfffcc 	andi	r2,r2,65535
    3980:	10000b1e 	bne	r2,zero,39b0 <__malloc_lock+0xd0>
    3984:	d0a00c17 	ldw	r2,-32720(gp)
    3988:	e0ffde17 	ldw	r3,-136(fp)
    398c:	1880081e 	bne	r3,r2,39b0 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    3990:	d0a6ff17 	ldw	r2,-25604(gp)
    3994:	10800044 	addi	r2,r2,1
    3998:	d0a6ff15 	stw	r2,-25604(gp)
    399c:	e0bfdd17 	ldw	r2,-140(fp)
    39a0:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    39a4:	e0bfe017 	ldw	r2,-128(fp)
    39a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    39ac:	00000e06 	br	39e8 <__malloc_lock+0x108>
    39b0:	e0bfdd17 	ldw	r2,-140(fp)
    39b4:	e0bfe115 	stw	r2,-124(fp)
    39b8:	e0bfe117 	ldw	r2,-124(fp)
    39bc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    39c0:	d0e70017 	ldw	r3,-25600(gp)
    39c4:	e0bffe84 	addi	r2,fp,-6
    39c8:	1809883a 	mov	r4,r3
    39cc:	000b883a 	mov	r5,zero
    39d0:	100d883a 	mov	r6,r2
    39d4:	000920c0 	call	920c <OSSemPend>
    locks  = 1;
    39d8:	00800044 	movi	r2,1
    39dc:	d0a6ff15 	stw	r2,-25604(gp)
    lockid = id;
    39e0:	e0bfde17 	ldw	r2,-136(fp)
    39e4:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    39e8:	0001883a 	nop
}
    39ec:	e037883a 	mov	sp,fp
    39f0:	dfc00117 	ldw	ra,4(sp)
    39f4:	df000017 	ldw	fp,0(sp)
    39f8:	dec00204 	addi	sp,sp,8
    39fc:	f800283a 	ret

00003a00 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3a00:	defff804 	addi	sp,sp,-32
    3a04:	dfc00715 	stw	ra,28(sp)
    3a08:	df000615 	stw	fp,24(sp)
    3a0c:	df000604 	addi	fp,sp,24
    3a10:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3a14:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    3a18:	00800074 	movhi	r2,1
    3a1c:	10865844 	addi	r2,r2,6497
    3a20:	10800003 	ldbu	r2,0(r2)
    3a24:	10803fcc 	andi	r2,r2,255
    3a28:	10800060 	cmpeqi	r2,r2,1
    3a2c:	1000011e 	bne	r2,zero,3a34 <__malloc_unlock+0x34>
      return;
    3a30:	00002206 	br	3abc <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3a34:	0005303a 	rdctl	r2,status
    3a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a3c:	e0fffb17 	ldw	r3,-20(fp)
    3a40:	00bfff84 	movi	r2,-2
    3a44:	1884703a 	and	r2,r3,r2
    3a48:	1001703a 	wrctl	status,r2
  
  return context;
    3a4c:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    3a50:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    3a54:	d0a6ff17 	ldw	r2,-25604(gp)
    3a58:	1000051e 	bne	r2,zero,3a70 <__malloc_unlock+0x70>
    3a5c:	e0bffa17 	ldw	r2,-24(fp)
    3a60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3a64:	e0bffc17 	ldw	r2,-16(fp)
    3a68:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    3a6c:	00001306 	br	3abc <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    3a70:	d0a6ff17 	ldw	r2,-25604(gp)
    3a74:	10bfffc4 	addi	r2,r2,-1
    3a78:	d0a6ff15 	stw	r2,-25604(gp)
    3a7c:	d0a6ff17 	ldw	r2,-25604(gp)
    3a80:	10000a1e 	bne	r2,zero,3aac <__malloc_unlock+0xac>
  {
    lockid = -1;
    3a84:	00bfffc4 	movi	r2,-1
    3a88:	d0a00c15 	stw	r2,-32720(gp)
    3a8c:	e0bffa17 	ldw	r2,-24(fp)
    3a90:	e0bffd15 	stw	r2,-12(fp)
    3a94:	e0bffd17 	ldw	r2,-12(fp)
    3a98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    3a9c:	d0a70017 	ldw	r2,-25600(gp)
    3aa0:	1009883a 	mov	r4,r2
    3aa4:	00095e80 	call	95e8 <OSSemPost>
    3aa8:	00000406 	br	3abc <__malloc_unlock+0xbc>
    3aac:	e0bffa17 	ldw	r2,-24(fp)
    3ab0:	e0bffe15 	stw	r2,-8(fp)
    3ab4:	e0bffe17 	ldw	r2,-8(fp)
    3ab8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3abc:	e037883a 	mov	sp,fp
    3ac0:	dfc00117 	ldw	ra,4(sp)
    3ac4:	df000017 	ldw	fp,0(sp)
    3ac8:	dec00204 	addi	sp,sp,8
    3acc:	f800283a 	ret

00003ad0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3ad0:	defff704 	addi	sp,sp,-36
    3ad4:	dfc00815 	stw	ra,32(sp)
    3ad8:	df000715 	stw	fp,28(sp)
    3adc:	df000704 	addi	fp,sp,28
    3ae0:	e13ffd15 	stw	r4,-12(fp)
    3ae4:	e17ffe15 	stw	r5,-8(fp)
    3ae8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3aec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3af0:	e0bfff17 	ldw	r2,-4(fp)
    3af4:	1000021e 	bne	r2,zero,3b00 <OSEventNameGet+0x30>
        return (0);
    3af8:	0005883a 	mov	r2,zero
    3afc:	00003706 	br	3bdc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3b00:	e0bffd17 	ldw	r2,-12(fp)
    3b04:	1000051e 	bne	r2,zero,3b1c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    3b08:	e0bfff17 	ldw	r2,-4(fp)
    3b0c:	00c00104 	movi	r3,4
    3b10:	10c00005 	stb	r3,0(r2)
        return (0);
    3b14:	0005883a 	mov	r2,zero
    3b18:	00003006 	br	3bdc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3b1c:	e0bffe17 	ldw	r2,-8(fp)
    3b20:	1000051e 	bne	r2,zero,3b38 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3b24:	e0bfff17 	ldw	r2,-4(fp)
    3b28:	00c00304 	movi	r3,12
    3b2c:	10c00005 	stb	r3,0(r2)
        return (0);
    3b30:	0005883a 	mov	r2,zero
    3b34:	00002906 	br	3bdc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3b38:	d0a70f03 	ldbu	r2,-25540(gp)
    3b3c:	10803fcc 	andi	r2,r2,255
    3b40:	10000526 	beq	r2,zero,3b58 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    3b44:	e0bfff17 	ldw	r2,-4(fp)
    3b48:	00c00444 	movi	r3,17
    3b4c:	10c00005 	stb	r3,0(r2)
        return (0);
    3b50:	0005883a 	mov	r2,zero
    3b54:	00002106 	br	3bdc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    3b58:	e0bffd17 	ldw	r2,-12(fp)
    3b5c:	10800003 	ldbu	r2,0(r2)
    3b60:	10803fcc 	andi	r2,r2,255
    3b64:	10bfffc4 	addi	r2,r2,-1
    3b68:	10800128 	cmpgeui	r2,r2,4
    3b6c:	10000526 	beq	r2,zero,3b84 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3b70:	e0bfff17 	ldw	r2,-4(fp)
    3b74:	00c00044 	movi	r3,1
    3b78:	10c00005 	stb	r3,0(r2)
             return (0);
    3b7c:	0005883a 	mov	r2,zero
    3b80:	00001606 	br	3bdc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    3b84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3b88:	0005303a 	rdctl	r2,status
    3b8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3b90:	e0fffb17 	ldw	r3,-20(fp)
    3b94:	00bfff84 	movi	r2,-2
    3b98:	1884703a 	and	r2,r3,r2
    3b9c:	1001703a 	wrctl	status,r2
  
  return context;
    3ba0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    3ba4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    3ba8:	e0bffd17 	ldw	r2,-12(fp)
    3bac:	10800384 	addi	r2,r2,14
    3bb0:	e13ffe17 	ldw	r4,-8(fp)
    3bb4:	100b883a 	mov	r5,r2
    3bb8:	00055140 	call	5514 <OS_StrCopy>
    3bbc:	e0bffa05 	stb	r2,-24(fp)
    3bc0:	e0bff917 	ldw	r2,-28(fp)
    3bc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3bc8:	e0bffc17 	ldw	r2,-16(fp)
    3bcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3bd0:	e0bfff17 	ldw	r2,-4(fp)
    3bd4:	10000005 	stb	zero,0(r2)
    return (len);
    3bd8:	e0bffa03 	ldbu	r2,-24(fp)
}
    3bdc:	e037883a 	mov	sp,fp
    3be0:	dfc00117 	ldw	ra,4(sp)
    3be4:	df000017 	ldw	fp,0(sp)
    3be8:	dec00204 	addi	sp,sp,8
    3bec:	f800283a 	ret

00003bf0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3bf0:	defff604 	addi	sp,sp,-40
    3bf4:	dfc00915 	stw	ra,36(sp)
    3bf8:	df000815 	stw	fp,32(sp)
    3bfc:	df000804 	addi	fp,sp,32
    3c00:	e13ffd15 	stw	r4,-12(fp)
    3c04:	e17ffe15 	stw	r5,-8(fp)
    3c08:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3c0c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3c10:	e0bfff17 	ldw	r2,-4(fp)
    3c14:	1000011e 	bne	r2,zero,3c1c <OSEventNameSet+0x2c>
        return;
    3c18:	00003f06 	br	3d18 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3c1c:	e0bffd17 	ldw	r2,-12(fp)
    3c20:	1000041e 	bne	r2,zero,3c34 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    3c24:	e0bfff17 	ldw	r2,-4(fp)
    3c28:	00c00104 	movi	r3,4
    3c2c:	10c00005 	stb	r3,0(r2)
        return;
    3c30:	00003906 	br	3d18 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3c34:	e0bffe17 	ldw	r2,-8(fp)
    3c38:	1000041e 	bne	r2,zero,3c4c <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    3c3c:	e0bfff17 	ldw	r2,-4(fp)
    3c40:	00c00304 	movi	r3,12
    3c44:	10c00005 	stb	r3,0(r2)
        return;
    3c48:	00003306 	br	3d18 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3c4c:	d0a70f03 	ldbu	r2,-25540(gp)
    3c50:	10803fcc 	andi	r2,r2,255
    3c54:	10000426 	beq	r2,zero,3c68 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	00c00484 	movi	r3,18
    3c60:	10c00005 	stb	r3,0(r2)
        return;
    3c64:	00002c06 	br	3d18 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    3c68:	e0bffd17 	ldw	r2,-12(fp)
    3c6c:	10800003 	ldbu	r2,0(r2)
    3c70:	10803fcc 	andi	r2,r2,255
    3c74:	10bfffc4 	addi	r2,r2,-1
    3c78:	10800128 	cmpgeui	r2,r2,4
    3c7c:	10000426 	beq	r2,zero,3c90 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3c80:	e0bfff17 	ldw	r2,-4(fp)
    3c84:	00c00044 	movi	r3,1
    3c88:	10c00005 	stb	r3,0(r2)
             return;
    3c8c:	00002206 	br	3d18 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    3c90:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3c94:	0005303a 	rdctl	r2,status
    3c98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3c9c:	e0fffa17 	ldw	r3,-24(fp)
    3ca0:	00bfff84 	movi	r2,-2
    3ca4:	1884703a 	and	r2,r3,r2
    3ca8:	1001703a 	wrctl	status,r2
  
  return context;
    3cac:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    3cb0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    3cb4:	e13ffe17 	ldw	r4,-8(fp)
    3cb8:	00055880 	call	5588 <OS_StrLen>
    3cbc:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    3cc0:	e0bff903 	ldbu	r2,-28(fp)
    3cc4:	10800830 	cmpltui	r2,r2,32
    3cc8:	1000081e 	bne	r2,zero,3cec <OSEventNameSet+0xfc>
    3ccc:	e0bff817 	ldw	r2,-32(fp)
    3cd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3cd4:	e0bffb17 	ldw	r2,-20(fp)
    3cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    3cdc:	e0bfff17 	ldw	r2,-4(fp)
    3ce0:	00c002c4 	movi	r3,11
    3ce4:	10c00005 	stb	r3,0(r2)
        return;
    3ce8:	00000b06 	br	3d18 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    3cec:	e0bffd17 	ldw	r2,-12(fp)
    3cf0:	10800384 	addi	r2,r2,14
    3cf4:	1009883a 	mov	r4,r2
    3cf8:	e17ffe17 	ldw	r5,-8(fp)
    3cfc:	00055140 	call	5514 <OS_StrCopy>
    3d00:	e0bff817 	ldw	r2,-32(fp)
    3d04:	e0bffc15 	stw	r2,-16(fp)
    3d08:	e0bffc17 	ldw	r2,-16(fp)
    3d0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3d10:	e0bfff17 	ldw	r2,-4(fp)
    3d14:	10000005 	stb	zero,0(r2)
}
    3d18:	e037883a 	mov	sp,fp
    3d1c:	dfc00117 	ldw	ra,4(sp)
    3d20:	df000017 	ldw	fp,0(sp)
    3d24:	dec00204 	addi	sp,sp,8
    3d28:	f800283a 	ret

00003d2c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    3d2c:	deffed04 	addi	sp,sp,-76
    3d30:	dfc01215 	stw	ra,72(sp)
    3d34:	df001115 	stw	fp,68(sp)
    3d38:	df001104 	addi	fp,sp,68
    3d3c:	e13ffc15 	stw	r4,-16(fp)
    3d40:	e17ffd15 	stw	r5,-12(fp)
    3d44:	e1bffe15 	stw	r6,-8(fp)
    3d48:	3805883a 	mov	r2,r7
    3d4c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    3d50:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    3d54:	e0800217 	ldw	r2,8(fp)
    3d58:	1000021e 	bne	r2,zero,3d64 <OSEventPendMulti+0x38>
        return (0);
    3d5c:	0005883a 	mov	r2,zero
    3d60:	00017106 	br	4328 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    3d64:	e0bffc17 	ldw	r2,-16(fp)
    3d68:	1000051e 	bne	r2,zero,3d80 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    3d6c:	e0800217 	ldw	r2,8(fp)
    3d70:	00c00104 	movi	r3,4
    3d74:	10c00005 	stb	r3,0(r2)
        return (0);
    3d78:	0005883a 	mov	r2,zero
    3d7c:	00016a06 	br	4328 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    3d80:	e0bffd17 	ldw	r2,-12(fp)
    3d84:	1000051e 	bne	r2,zero,3d9c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    3d88:	e0800217 	ldw	r2,8(fp)
    3d8c:	00c00104 	movi	r3,4
    3d90:	10c00005 	stb	r3,0(r2)
        return (0);
    3d94:	0005883a 	mov	r2,zero
    3d98:	00016306 	br	4328 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    3d9c:	e0bffe17 	ldw	r2,-8(fp)
    3da0:	1000051e 	bne	r2,zero,3db8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    3da4:	e0800217 	ldw	r2,8(fp)
    3da8:	00c00104 	movi	r3,4
    3dac:	10c00005 	stb	r3,0(r2)
        return (0);
    3db0:	0005883a 	mov	r2,zero
    3db4:	00015c06 	br	4328 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    3db8:	e0bffd17 	ldw	r2,-12(fp)
    3dbc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    3dc0:	e0bffc17 	ldw	r2,-16(fp)
    3dc4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    3dc8:	e0bfef17 	ldw	r2,-68(fp)
    3dcc:	10800017 	ldw	r2,0(r2)
    3dd0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    3dd4:	00001906 	br	3e3c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    3dd8:	e0bff017 	ldw	r2,-64(fp)
    3ddc:	10800003 	ldbu	r2,0(r2)
    3de0:	10803fcc 	andi	r2,r2,255
    3de4:	10c000a0 	cmpeqi	r3,r2,2
    3de8:	1800091e 	bne	r3,zero,3e10 <OSEventPendMulti+0xe4>
    3dec:	10c000e0 	cmpeqi	r3,r2,3
    3df0:	1800091e 	bne	r3,zero,3e18 <OSEventPendMulti+0xec>
    3df4:	10800060 	cmpeqi	r2,r2,1
    3df8:	1000091e 	bne	r2,zero,3e20 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    3dfc:	e0800217 	ldw	r2,8(fp)
    3e00:	00c00044 	movi	r3,1
    3e04:	10c00005 	stb	r3,0(r2)
                 return (0);
    3e08:	0005883a 	mov	r2,zero
    3e0c:	00014606 	br	4328 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    3e10:	0001883a 	nop
    3e14:	00000306 	br	3e24 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    3e18:	0001883a 	nop
    3e1c:	00000106 	br	3e24 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    3e20:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    3e24:	e0bfef17 	ldw	r2,-68(fp)
    3e28:	10800104 	addi	r2,r2,4
    3e2c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    3e30:	e0bfef17 	ldw	r2,-68(fp)
    3e34:	10800017 	ldw	r2,0(r2)
    3e38:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    3e3c:	e0bff017 	ldw	r2,-64(fp)
    3e40:	103fe51e 	bne	r2,zero,3dd8 <__alt_data_end+0xfc003dd8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    3e44:	d0a70f03 	ldbu	r2,-25540(gp)
    3e48:	10803fcc 	andi	r2,r2,255
    3e4c:	10000526 	beq	r2,zero,3e64 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    3e50:	e0800217 	ldw	r2,8(fp)
    3e54:	00c00084 	movi	r3,2
    3e58:	10c00005 	stb	r3,0(r2)
        return (0);
    3e5c:	0005883a 	mov	r2,zero
    3e60:	00013106 	br	4328 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    3e64:	d0a70103 	ldbu	r2,-25596(gp)
    3e68:	10803fcc 	andi	r2,r2,255
    3e6c:	10000526 	beq	r2,zero,3e84 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    3e70:	e0800217 	ldw	r2,8(fp)
    3e74:	00c00344 	movi	r3,13
    3e78:	10c00005 	stb	r3,0(r2)
        return (0);
    3e7c:	0005883a 	mov	r2,zero
    3e80:	00012906 	br	4328 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3e84:	0005303a 	rdctl	r2,status
    3e88:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e8c:	e0fff517 	ldw	r3,-44(fp)
    3e90:	00bfff84 	movi	r2,-2
    3e94:	1884703a 	and	r2,r3,r2
    3e98:	1001703a 	wrctl	status,r2
  
  return context;
    3e9c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    3ea0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    3ea4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    3ea8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    3eac:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    3eb0:	e0bffc17 	ldw	r2,-16(fp)
    3eb4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    3eb8:	e0bfef17 	ldw	r2,-68(fp)
    3ebc:	10800017 	ldw	r2,0(r2)
    3ec0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    3ec4:	00008106 	br	40cc <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    3ec8:	e0bff017 	ldw	r2,-64(fp)
    3ecc:	10800003 	ldbu	r2,0(r2)
    3ed0:	10803fcc 	andi	r2,r2,255
    3ed4:	10c000a0 	cmpeqi	r3,r2,2
    3ed8:	18003c1e 	bne	r3,zero,3fcc <OSEventPendMulti+0x2a0>
    3edc:	10c000e0 	cmpeqi	r3,r2,3
    3ee0:	1800031e 	bne	r3,zero,3ef0 <OSEventPendMulti+0x1c4>
    3ee4:	10800060 	cmpeqi	r2,r2,1
    3ee8:	10001e1e 	bne	r2,zero,3f64 <OSEventPendMulti+0x238>
    3eec:	00006606 	br	4088 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    3ef0:	e0bff017 	ldw	r2,-64(fp)
    3ef4:	1080020b 	ldhu	r2,8(r2)
    3ef8:	10bfffcc 	andi	r2,r2,65535
    3efc:	10001526 	beq	r2,zero,3f54 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    3f00:	e0bff017 	ldw	r2,-64(fp)
    3f04:	1080020b 	ldhu	r2,8(r2)
    3f08:	10bfffc4 	addi	r2,r2,-1
    3f0c:	1007883a 	mov	r3,r2
    3f10:	e0bff017 	ldw	r2,-64(fp)
    3f14:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    3f18:	e0bffd17 	ldw	r2,-12(fp)
    3f1c:	10c00104 	addi	r3,r2,4
    3f20:	e0fffd15 	stw	r3,-12(fp)
    3f24:	e0fff017 	ldw	r3,-64(fp)
    3f28:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    3f2c:	00800044 	movi	r2,1
    3f30:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    3f34:	e0bffe17 	ldw	r2,-8(fp)
    3f38:	10c00104 	addi	r3,r2,4
    3f3c:	e0fffe15 	stw	r3,-8(fp)
    3f40:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    3f44:	e0bff18b 	ldhu	r2,-58(fp)
    3f48:	10800044 	addi	r2,r2,1
    3f4c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    3f50:	00005806 	br	40b4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    3f54:	e0bff203 	ldbu	r2,-56(fp)
    3f58:	10800054 	ori	r2,r2,1
    3f5c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    3f60:	00005406 	br	40b4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    3f64:	e0bff017 	ldw	r2,-64(fp)
    3f68:	10800117 	ldw	r2,4(r2)
    3f6c:	10001326 	beq	r2,zero,3fbc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    3f70:	e0bffe17 	ldw	r2,-8(fp)
    3f74:	10c00104 	addi	r3,r2,4
    3f78:	e0fffe15 	stw	r3,-8(fp)
    3f7c:	e0fff017 	ldw	r3,-64(fp)
    3f80:	18c00117 	ldw	r3,4(r3)
    3f84:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    3f88:	e0bff017 	ldw	r2,-64(fp)
    3f8c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    3f90:	e0bffd17 	ldw	r2,-12(fp)
    3f94:	10c00104 	addi	r3,r2,4
    3f98:	e0fffd15 	stw	r3,-12(fp)
    3f9c:	e0fff017 	ldw	r3,-64(fp)
    3fa0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    3fa4:	00800044 	movi	r2,1
    3fa8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    3fac:	e0bff18b 	ldhu	r2,-58(fp)
    3fb0:	10800044 	addi	r2,r2,1
    3fb4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    3fb8:	00003e06 	br	40b4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    3fbc:	e0bff203 	ldbu	r2,-56(fp)
    3fc0:	10800094 	ori	r2,r2,2
    3fc4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    3fc8:	00003a06 	br	40b4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    3fcc:	e0bff017 	ldw	r2,-64(fp)
    3fd0:	10800117 	ldw	r2,4(r2)
    3fd4:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    3fd8:	e0bff417 	ldw	r2,-48(fp)
    3fdc:	1080058b 	ldhu	r2,22(r2)
    3fe0:	10bfffcc 	andi	r2,r2,65535
    3fe4:	10002426 	beq	r2,zero,4078 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    3fe8:	e0bffe17 	ldw	r2,-8(fp)
    3fec:	10c00104 	addi	r3,r2,4
    3ff0:	e0fffe15 	stw	r3,-8(fp)
    3ff4:	e0fff417 	ldw	r3,-48(fp)
    3ff8:	18c00417 	ldw	r3,16(r3)
    3ffc:	19400104 	addi	r5,r3,4
    4000:	e13ff417 	ldw	r4,-48(fp)
    4004:	21400415 	stw	r5,16(r4)
    4008:	18c00017 	ldw	r3,0(r3)
    400c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    4010:	e0bff417 	ldw	r2,-48(fp)
    4014:	10c00417 	ldw	r3,16(r2)
    4018:	e0bff417 	ldw	r2,-48(fp)
    401c:	10800217 	ldw	r2,8(r2)
    4020:	1880041e 	bne	r3,r2,4034 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    4024:	e0bff417 	ldw	r2,-48(fp)
    4028:	10c00117 	ldw	r3,4(r2)
    402c:	e0bff417 	ldw	r2,-48(fp)
    4030:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    4034:	e0bff417 	ldw	r2,-48(fp)
    4038:	1080058b 	ldhu	r2,22(r2)
    403c:	10bfffc4 	addi	r2,r2,-1
    4040:	1007883a 	mov	r3,r2
    4044:	e0bff417 	ldw	r2,-48(fp)
    4048:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    404c:	e0bffd17 	ldw	r2,-12(fp)
    4050:	10c00104 	addi	r3,r2,4
    4054:	e0fffd15 	stw	r3,-12(fp)
    4058:	e0fff017 	ldw	r3,-64(fp)
    405c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    4060:	00800044 	movi	r2,1
    4064:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    4068:	e0bff18b 	ldhu	r2,-58(fp)
    406c:	10800044 	addi	r2,r2,1
    4070:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    4074:	00000f06 	br	40b4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    4078:	e0bff203 	ldbu	r2,-56(fp)
    407c:	10800114 	ori	r2,r2,4
    4080:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    4084:	00000b06 	br	40b4 <OSEventPendMulti+0x388>
    4088:	e0bff317 	ldw	r2,-52(fp)
    408c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4090:	e0bff617 	ldw	r2,-40(fp)
    4094:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    4098:	e0bffd17 	ldw	r2,-12(fp)
    409c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    40a0:	e0800217 	ldw	r2,8(fp)
    40a4:	00c00044 	movi	r3,1
    40a8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    40ac:	e0bff18b 	ldhu	r2,-58(fp)
    40b0:	00009d06 	br	4328 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    40b4:	e0bfef17 	ldw	r2,-68(fp)
    40b8:	10800104 	addi	r2,r2,4
    40bc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    40c0:	e0bfef17 	ldw	r2,-68(fp)
    40c4:	10800017 	ldw	r2,0(r2)
    40c8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    40cc:	e0bff017 	ldw	r2,-64(fp)
    40d0:	103f7d1e 	bne	r2,zero,3ec8 <__alt_data_end+0xfc003ec8>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    40d4:	e0bff103 	ldbu	r2,-60(fp)
    40d8:	10800058 	cmpnei	r2,r2,1
    40dc:	10000a1e 	bne	r2,zero,4108 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    40e0:	e0bffd17 	ldw	r2,-12(fp)
    40e4:	10000015 	stw	zero,0(r2)
    40e8:	e0bff317 	ldw	r2,-52(fp)
    40ec:	e0bff715 	stw	r2,-36(fp)
    40f0:	e0bff717 	ldw	r2,-36(fp)
    40f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    40f8:	e0800217 	ldw	r2,8(fp)
    40fc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    4100:	e0bff18b 	ldhu	r2,-58(fp)
    4104:	00008806 	br	4328 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    4108:	d0a71017 	ldw	r2,-25536(gp)
    410c:	d0e71017 	ldw	r3,-25536(gp)
    4110:	19000c03 	ldbu	r4,48(r3)
    4114:	e0fff203 	ldbu	r3,-56(fp)
    4118:	20c6b03a 	or	r3,r4,r3
    411c:	1809883a 	mov	r4,r3
    4120:	00ffe004 	movi	r3,-128
    4124:	20c6b03a 	or	r3,r4,r3
    4128:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    412c:	d0a71017 	ldw	r2,-25536(gp)
    4130:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    4134:	d0a71017 	ldw	r2,-25536(gp)
    4138:	e0ffff0b 	ldhu	r3,-4(fp)
    413c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    4140:	e13ffc17 	ldw	r4,-16(fp)
    4144:	0004c700 	call	4c70 <OS_EventTaskWaitMulti>
    4148:	e0bff317 	ldw	r2,-52(fp)
    414c:	e0bff815 	stw	r2,-32(fp)
    4150:	e0bff817 	ldw	r2,-32(fp)
    4154:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    4158:	00053d80 	call	53d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    415c:	0005303a 	rdctl	r2,status
    4160:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4164:	e0fff917 	ldw	r3,-28(fp)
    4168:	00bfff84 	movi	r2,-2
    416c:	1884703a 	and	r2,r3,r2
    4170:	1001703a 	wrctl	status,r2
  
  return context;
    4174:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    4178:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    417c:	d0a71017 	ldw	r2,-25536(gp)
    4180:	10800c43 	ldbu	r2,49(r2)
    4184:	10803fcc 	andi	r2,r2,255
    4188:	10000226 	beq	r2,zero,4194 <OSEventPendMulti+0x468>
    418c:	108000a0 	cmpeqi	r2,r2,2
    4190:	10001826 	beq	r2,zero,41f4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    4194:	d0a71017 	ldw	r2,-25536(gp)
    4198:	10800717 	ldw	r2,28(r2)
    419c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    41a0:	e0bff017 	ldw	r2,-64(fp)
    41a4:	10000b26 	beq	r2,zero,41d4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    41a8:	e0bffd17 	ldw	r2,-12(fp)
    41ac:	10c00104 	addi	r3,r2,4
    41b0:	e0fffd15 	stw	r3,-12(fp)
    41b4:	e0fff017 	ldw	r3,-64(fp)
    41b8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    41bc:	e0bffd17 	ldw	r2,-12(fp)
    41c0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    41c4:	e0bff18b 	ldhu	r2,-58(fp)
    41c8:	10800044 	addi	r2,r2,1
    41cc:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    41d0:	00000d06 	br	4208 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    41d4:	d0a71017 	ldw	r2,-25536(gp)
    41d8:	00c00044 	movi	r3,1
    41dc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    41e0:	d0a71017 	ldw	r2,-25536(gp)
    41e4:	1009883a 	mov	r4,r2
    41e8:	e17ffc17 	ldw	r5,-16(fp)
    41ec:	0004e680 	call	4e68 <OS_EventTaskRemoveMulti>
             }
			 break;
    41f0:	00000506 	br	4208 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    41f4:	d0a71017 	ldw	r2,-25536(gp)
    41f8:	1009883a 	mov	r4,r2
    41fc:	e17ffc17 	ldw	r5,-16(fp)
    4200:	0004e680 	call	4e68 <OS_EventTaskRemoveMulti>
             break;
    4204:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    4208:	d0a71017 	ldw	r2,-25536(gp)
    420c:	10800c43 	ldbu	r2,49(r2)
    4210:	10803fcc 	andi	r2,r2,255
    4214:	10000326 	beq	r2,zero,4224 <OSEventPendMulti+0x4f8>
    4218:	108000a0 	cmpeqi	r2,r2,2
    421c:	1000231e 	bne	r2,zero,42ac <OSEventPendMulti+0x580>
    4220:	00002a06 	br	42cc <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    4224:	e0bff017 	ldw	r2,-64(fp)
    4228:	10800003 	ldbu	r2,0(r2)
    422c:	10803fcc 	andi	r2,r2,255
    4230:	0080100e 	bge	zero,r2,4274 <OSEventPendMulti+0x548>
    4234:	10c000d0 	cmplti	r3,r2,3
    4238:	1800071e 	bne	r3,zero,4258 <OSEventPendMulti+0x52c>
    423c:	108000e0 	cmpeqi	r2,r2,3
    4240:	10000c26 	beq	r2,zero,4274 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    4244:	e0bffe17 	ldw	r2,-8(fp)
    4248:	10c00104 	addi	r3,r2,4
    424c:	e0fffe15 	stw	r3,-8(fp)
    4250:	10000015 	stw	zero,0(r2)
                      break;
    4254:	00001206 	br	42a0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    4258:	e0bffe17 	ldw	r2,-8(fp)
    425c:	10c00104 	addi	r3,r2,4
    4260:	e0fffe15 	stw	r3,-8(fp)
    4264:	d0e71017 	ldw	r3,-25536(gp)
    4268:	18c00917 	ldw	r3,36(r3)
    426c:	10c00015 	stw	r3,0(r2)
                      break;
    4270:	00000b06 	br	42a0 <OSEventPendMulti+0x574>
    4274:	e0bff317 	ldw	r2,-52(fp)
    4278:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    427c:	e0bffa17 	ldw	r2,-24(fp)
    4280:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    4284:	e0bffd17 	ldw	r2,-12(fp)
    4288:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    428c:	e0800217 	ldw	r2,8(fp)
    4290:	00c00044 	movi	r3,1
    4294:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    4298:	e0bff18b 	ldhu	r2,-58(fp)
    429c:	00002206 	br	4328 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    42a0:	e0800217 	ldw	r2,8(fp)
    42a4:	10000005 	stb	zero,0(r2)
             break;
    42a8:	00001006 	br	42ec <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    42ac:	e0bffe17 	ldw	r2,-8(fp)
    42b0:	10c00104 	addi	r3,r2,4
    42b4:	e0fffe15 	stw	r3,-8(fp)
    42b8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    42bc:	e0800217 	ldw	r2,8(fp)
    42c0:	00c00384 	movi	r3,14
    42c4:	10c00005 	stb	r3,0(r2)
             break;
    42c8:	00000806 	br	42ec <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    42cc:	e0bffe17 	ldw	r2,-8(fp)
    42d0:	10c00104 	addi	r3,r2,4
    42d4:	e0fffe15 	stw	r3,-8(fp)
    42d8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    42dc:	e0800217 	ldw	r2,8(fp)
    42e0:	00c00284 	movi	r3,10
    42e4:	10c00005 	stb	r3,0(r2)
             break;
    42e8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    42ec:	d0a71017 	ldw	r2,-25536(gp)
    42f0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    42f4:	d0a71017 	ldw	r2,-25536(gp)
    42f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    42fc:	d0a71017 	ldw	r2,-25536(gp)
    4300:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    4304:	d0a71017 	ldw	r2,-25536(gp)
    4308:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    430c:	d0a71017 	ldw	r2,-25536(gp)
    4310:	10000915 	stw	zero,36(r2)
    4314:	e0bff317 	ldw	r2,-52(fp)
    4318:	e0bffb15 	stw	r2,-20(fp)
    431c:	e0bffb17 	ldw	r2,-20(fp)
    4320:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    4324:	e0bff18b 	ldhu	r2,-58(fp)
}
    4328:	e037883a 	mov	sp,fp
    432c:	dfc00117 	ldw	ra,4(sp)
    4330:	df000017 	ldw	fp,0(sp)
    4334:	dec00204 	addi	sp,sp,8
    4338:	f800283a 	ret

0000433c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    433c:	defffe04 	addi	sp,sp,-8
    4340:	dfc00115 	stw	ra,4(sp)
    4344:	df000015 	stw	fp,0(sp)
    4348:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    434c:	000d8dc0 	call	d8dc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    4350:	00050a00 	call	50a0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    4354:	00050e40 	call	50e4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    4358:	00052440 	call	5244 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    435c:	0004fc40 	call	4fc4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    4360:	00071bc0 	call	71bc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    4364:	0007b000 	call	7b00 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    4368:	0008d400 	call	8d40 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    436c:	000514c0 	call	514c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    4370:	00051c80 	call	51c8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    4374:	000d8f80 	call	d8f8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    4378:	0005a9c0 	call	5a9c <OSDebugInit>
#endif
}
    437c:	e037883a 	mov	sp,fp
    4380:	dfc00117 	ldw	ra,4(sp)
    4384:	df000017 	ldw	fp,0(sp)
    4388:	dec00204 	addi	sp,sp,8
    438c:	f800283a 	ret

00004390 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    4390:	defffc04 	addi	sp,sp,-16
    4394:	df000315 	stw	fp,12(sp)
    4398:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    439c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    43a0:	d0a70143 	ldbu	r2,-25595(gp)
    43a4:	10803fcc 	andi	r2,r2,255
    43a8:	10800058 	cmpnei	r2,r2,1
    43ac:	1000131e 	bne	r2,zero,43fc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    43b0:	0005303a 	rdctl	r2,status
    43b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    43b8:	e0fffe17 	ldw	r3,-8(fp)
    43bc:	00bfff84 	movi	r2,-2
    43c0:	1884703a 	and	r2,r3,r2
    43c4:	1001703a 	wrctl	status,r2
  
  return context;
    43c8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    43cc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    43d0:	d0a70f03 	ldbu	r2,-25540(gp)
    43d4:	10803fcc 	andi	r2,r2,255
    43d8:	10803fe0 	cmpeqi	r2,r2,255
    43dc:	1000031e 	bne	r2,zero,43ec <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    43e0:	d0a70f03 	ldbu	r2,-25540(gp)
    43e4:	10800044 	addi	r2,r2,1
    43e8:	d0a70f05 	stb	r2,-25540(gp)
    43ec:	e0bffd17 	ldw	r2,-12(fp)
    43f0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    43f4:	e0bfff17 	ldw	r2,-4(fp)
    43f8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    43fc:	e037883a 	mov	sp,fp
    4400:	df000017 	ldw	fp,0(sp)
    4404:	dec00104 	addi	sp,sp,4
    4408:	f800283a 	ret

0000440c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    440c:	defffb04 	addi	sp,sp,-20
    4410:	dfc00415 	stw	ra,16(sp)
    4414:	df000315 	stw	fp,12(sp)
    4418:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    441c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    4420:	d0a70143 	ldbu	r2,-25595(gp)
    4424:	10803fcc 	andi	r2,r2,255
    4428:	10800058 	cmpnei	r2,r2,1
    442c:	10002f1e 	bne	r2,zero,44ec <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4430:	0005303a 	rdctl	r2,status
    4434:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4438:	e0fffe17 	ldw	r3,-8(fp)
    443c:	00bfff84 	movi	r2,-2
    4440:	1884703a 	and	r2,r3,r2
    4444:	1001703a 	wrctl	status,r2
  
  return context;
    4448:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    444c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    4450:	d0a70f03 	ldbu	r2,-25540(gp)
    4454:	10803fcc 	andi	r2,r2,255
    4458:	10000326 	beq	r2,zero,4468 <OSIntExit+0x5c>
            OSIntNesting--;
    445c:	d0a70f03 	ldbu	r2,-25540(gp)
    4460:	10bfffc4 	addi	r2,r2,-1
    4464:	d0a70f05 	stb	r2,-25540(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    4468:	d0a70f03 	ldbu	r2,-25540(gp)
    446c:	10803fcc 	andi	r2,r2,255
    4470:	10001a1e 	bne	r2,zero,44dc <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    4474:	d0a70103 	ldbu	r2,-25596(gp)
    4478:	10803fcc 	andi	r2,r2,255
    447c:	1000171e 	bne	r2,zero,44dc <OSIntExit+0xd0>
                OS_SchedNew();
    4480:	00054a40 	call	54a4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    4484:	d0e70303 	ldbu	r3,-25588(gp)
    4488:	d0a70343 	ldbu	r2,-25587(gp)
    448c:	18c03fcc 	andi	r3,r3,255
    4490:	10803fcc 	andi	r2,r2,255
    4494:	18801126 	beq	r3,r2,44dc <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    4498:	d0a70303 	ldbu	r2,-25588(gp)
    449c:	10803fcc 	andi	r2,r2,255
    44a0:	00c000b4 	movhi	r3,2
    44a4:	18e2ed04 	addi	r3,r3,-29772
    44a8:	1085883a 	add	r2,r2,r2
    44ac:	1085883a 	add	r2,r2,r2
    44b0:	1885883a 	add	r2,r3,r2
    44b4:	10800017 	ldw	r2,0(r2)
    44b8:	d0a70b15 	stw	r2,-25556(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    44bc:	d0a70b17 	ldw	r2,-25556(gp)
    44c0:	10c00e17 	ldw	r3,56(r2)
    44c4:	18c00044 	addi	r3,r3,1
    44c8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    44cc:	d0a70617 	ldw	r2,-25576(gp)
    44d0:	10800044 	addi	r2,r2,1
    44d4:	d0a70615 	stw	r2,-25576(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    44d8:	000d4840 	call	d484 <OSCtxSw>
    44dc:	e0bffd17 	ldw	r2,-12(fp)
    44e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    44e4:	e0bfff17 	ldw	r2,-4(fp)
    44e8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    44ec:	e037883a 	mov	sp,fp
    44f0:	dfc00117 	ldw	ra,4(sp)
    44f4:	df000017 	ldw	fp,0(sp)
    44f8:	dec00204 	addi	sp,sp,8
    44fc:	f800283a 	ret

00004500 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    4500:	defffc04 	addi	sp,sp,-16
    4504:	df000315 	stw	fp,12(sp)
    4508:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    450c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    4510:	d0a70143 	ldbu	r2,-25595(gp)
    4514:	10803fcc 	andi	r2,r2,255
    4518:	10800058 	cmpnei	r2,r2,1
    451c:	1000161e 	bne	r2,zero,4578 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4520:	0005303a 	rdctl	r2,status
    4524:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4528:	e0fffe17 	ldw	r3,-8(fp)
    452c:	00bfff84 	movi	r2,-2
    4530:	1884703a 	and	r2,r3,r2
    4534:	1001703a 	wrctl	status,r2
  
  return context;
    4538:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    453c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    4540:	d0a70f03 	ldbu	r2,-25540(gp)
    4544:	10803fcc 	andi	r2,r2,255
    4548:	1000071e 	bne	r2,zero,4568 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    454c:	d0a70103 	ldbu	r2,-25596(gp)
    4550:	10803fcc 	andi	r2,r2,255
    4554:	10803fe0 	cmpeqi	r2,r2,255
    4558:	1000031e 	bne	r2,zero,4568 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    455c:	d0a70103 	ldbu	r2,-25596(gp)
    4560:	10800044 	addi	r2,r2,1
    4564:	d0a70105 	stb	r2,-25596(gp)
    4568:	e0bffd17 	ldw	r2,-12(fp)
    456c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4570:	e0bfff17 	ldw	r2,-4(fp)
    4574:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    4578:	e037883a 	mov	sp,fp
    457c:	df000017 	ldw	fp,0(sp)
    4580:	dec00104 	addi	sp,sp,4
    4584:	f800283a 	ret

00004588 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    4588:	defff804 	addi	sp,sp,-32
    458c:	dfc00715 	stw	ra,28(sp)
    4590:	df000615 	stw	fp,24(sp)
    4594:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4598:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    459c:	d0a70143 	ldbu	r2,-25595(gp)
    45a0:	10803fcc 	andi	r2,r2,255
    45a4:	10800058 	cmpnei	r2,r2,1
    45a8:	1000281e 	bne	r2,zero,464c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    45ac:	0005303a 	rdctl	r2,status
    45b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    45b4:	e0fffb17 	ldw	r3,-20(fp)
    45b8:	00bfff84 	movi	r2,-2
    45bc:	1884703a 	and	r2,r3,r2
    45c0:	1001703a 	wrctl	status,r2
  
  return context;
    45c4:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    45c8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    45cc:	d0a70103 	ldbu	r2,-25596(gp)
    45d0:	10803fcc 	andi	r2,r2,255
    45d4:	10001926 	beq	r2,zero,463c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    45d8:	d0a70103 	ldbu	r2,-25596(gp)
    45dc:	10bfffc4 	addi	r2,r2,-1
    45e0:	d0a70105 	stb	r2,-25596(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    45e4:	d0a70103 	ldbu	r2,-25596(gp)
    45e8:	10803fcc 	andi	r2,r2,255
    45ec:	10000e1e 	bne	r2,zero,4628 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    45f0:	d0a70f03 	ldbu	r2,-25540(gp)
    45f4:	10803fcc 	andi	r2,r2,255
    45f8:	1000061e 	bne	r2,zero,4614 <OSSchedUnlock+0x8c>
    45fc:	e0bffa17 	ldw	r2,-24(fp)
    4600:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4604:	e0bffc17 	ldw	r2,-16(fp)
    4608:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    460c:	00053d80 	call	53d8 <OS_Sched>
    4610:	00000e06 	br	464c <OSSchedUnlock+0xc4>
    4614:	e0bffa17 	ldw	r2,-24(fp)
    4618:	e0bffd15 	stw	r2,-12(fp)
    461c:	e0bffd17 	ldw	r2,-12(fp)
    4620:	1001703a 	wrctl	status,r2
    4624:	00000906 	br	464c <OSSchedUnlock+0xc4>
    4628:	e0bffa17 	ldw	r2,-24(fp)
    462c:	e0bffe15 	stw	r2,-8(fp)
    4630:	e0bffe17 	ldw	r2,-8(fp)
    4634:	1001703a 	wrctl	status,r2
    4638:	00000406 	br	464c <OSSchedUnlock+0xc4>
    463c:	e0bffa17 	ldw	r2,-24(fp)
    4640:	e0bfff15 	stw	r2,-4(fp)
    4644:	e0bfff17 	ldw	r2,-4(fp)
    4648:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    464c:	e037883a 	mov	sp,fp
    4650:	dfc00117 	ldw	ra,4(sp)
    4654:	df000017 	ldw	fp,0(sp)
    4658:	dec00204 	addi	sp,sp,8
    465c:	f800283a 	ret

00004660 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    4660:	defffe04 	addi	sp,sp,-8
    4664:	dfc00115 	stw	ra,4(sp)
    4668:	df000015 	stw	fp,0(sp)
    466c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    4670:	d0a70143 	ldbu	r2,-25595(gp)
    4674:	10803fcc 	andi	r2,r2,255
    4678:	10000f1e 	bne	r2,zero,46b8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    467c:	00054a40 	call	54a4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    4680:	d0a70303 	ldbu	r2,-25588(gp)
    4684:	d0a70345 	stb	r2,-25587(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    4688:	d0a70303 	ldbu	r2,-25588(gp)
    468c:	10803fcc 	andi	r2,r2,255
    4690:	00c000b4 	movhi	r3,2
    4694:	18e2ed04 	addi	r3,r3,-29772
    4698:	1085883a 	add	r2,r2,r2
    469c:	1085883a 	add	r2,r2,r2
    46a0:	1885883a 	add	r2,r3,r2
    46a4:	10800017 	ldw	r2,0(r2)
    46a8:	d0a70b15 	stw	r2,-25556(gp)
        OSTCBCur      = OSTCBHighRdy;
    46ac:	d0a70b17 	ldw	r2,-25556(gp)
    46b0:	d0a71015 	stw	r2,-25536(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    46b4:	000d5100 	call	d510 <OSStartHighRdy>
    }
}
    46b8:	e037883a 	mov	sp,fp
    46bc:	dfc00117 	ldw	ra,4(sp)
    46c0:	df000017 	ldw	fp,0(sp)
    46c4:	dec00204 	addi	sp,sp,8
    46c8:	f800283a 	ret

000046cc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    46cc:	defff904 	addi	sp,sp,-28
    46d0:	dfc00615 	stw	ra,24(sp)
    46d4:	df000515 	stw	fp,20(sp)
    46d8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    46dc:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    46e0:	01000084 	movi	r4,2
    46e4:	000b1dc0 	call	b1dc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46e8:	0005303a 	rdctl	r2,status
    46ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46f0:	e0fffc17 	ldw	r3,-16(fp)
    46f4:	00bfff84 	movi	r2,-2
    46f8:	1884703a 	and	r2,r3,r2
    46fc:	1001703a 	wrctl	status,r2
  
  return context;
    4700:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    4704:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    4708:	d0270215 	stw	zero,-25592(gp)
    470c:	e0bffb17 	ldw	r2,-20(fp)
    4710:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4714:	e0bffd17 	ldw	r2,-12(fp)
    4718:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    471c:	01000284 	movi	r4,10
    4720:	000b1dc0 	call	b1dc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4724:	0005303a 	rdctl	r2,status
    4728:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    472c:	e0fffe17 	ldw	r3,-8(fp)
    4730:	00bfff84 	movi	r2,-2
    4734:	1884703a 	and	r2,r3,r2
    4738:	1001703a 	wrctl	status,r2
  
  return context;
    473c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    4740:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    4744:	d0a70217 	ldw	r2,-25592(gp)
    4748:	d0a70715 	stw	r2,-25572(gp)
    OSStatRdy    = OS_TRUE;
    474c:	00800044 	movi	r2,1
    4750:	d0a71305 	stb	r2,-25524(gp)
    4754:	e0bffb17 	ldw	r2,-20(fp)
    4758:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    475c:	e0bfff17 	ldw	r2,-4(fp)
    4760:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    4764:	e037883a 	mov	sp,fp
    4768:	dfc00117 	ldw	ra,4(sp)
    476c:	df000017 	ldw	fp,0(sp)
    4770:	dec00204 	addi	sp,sp,8
    4774:	f800283a 	ret

00004778 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    4778:	defff704 	addi	sp,sp,-36
    477c:	dfc00815 	stw	ra,32(sp)
    4780:	df000715 	stw	fp,28(sp)
    4784:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    4788:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    478c:	000d8c00 	call	d8c0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4790:	0005303a 	rdctl	r2,status
    4794:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4798:	e0fffc17 	ldw	r3,-16(fp)
    479c:	00bfff84 	movi	r2,-2
    47a0:	1884703a 	and	r2,r3,r2
    47a4:	1001703a 	wrctl	status,r2
  
  return context;
    47a8:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    47ac:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    47b0:	d0a71117 	ldw	r2,-25532(gp)
    47b4:	10800044 	addi	r2,r2,1
    47b8:	d0a71115 	stw	r2,-25532(gp)
    47bc:	e0bffb17 	ldw	r2,-20(fp)
    47c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    47c4:	e0bffd17 	ldw	r2,-12(fp)
    47c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    47cc:	d0a70143 	ldbu	r2,-25595(gp)
    47d0:	10803fcc 	andi	r2,r2,255
    47d4:	10800058 	cmpnei	r2,r2,1
    47d8:	1000691e 	bne	r2,zero,4980 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    47dc:	d0a70503 	ldbu	r2,-25580(gp)
    47e0:	10803fcc 	andi	r2,r2,255
    47e4:	10c00060 	cmpeqi	r3,r2,1
    47e8:	1800061e 	bne	r3,zero,4804 <OSTimeTick+0x8c>
    47ec:	10c000a0 	cmpeqi	r3,r2,2
    47f0:	1800061e 	bne	r3,zero,480c <OSTimeTick+0x94>
    47f4:	10000a1e 	bne	r2,zero,4820 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    47f8:	00800044 	movi	r2,1
    47fc:	e0bffa05 	stb	r2,-24(fp)
                 break;
    4800:	00000b06 	br	4830 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    4804:	e03ffa05 	stb	zero,-24(fp)
                 break;
    4808:	00000906 	br	4830 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    480c:	00800044 	movi	r2,1
    4810:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    4814:	00800044 	movi	r2,1
    4818:	d0a70505 	stb	r2,-25580(gp)
                 break;
    481c:	00000406 	br	4830 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    4820:	00800044 	movi	r2,1
    4824:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    4828:	d0270505 	stb	zero,-25580(gp)
                 break;
    482c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    4830:	e0bffa03 	ldbu	r2,-24(fp)
    4834:	1000011e 	bne	r2,zero,483c <OSTimeTick+0xc4>
            return;
    4838:	00005106 	br	4980 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    483c:	d0a70417 	ldw	r2,-25584(gp)
    4840:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4844:	00004906 	br	496c <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4848:	0005303a 	rdctl	r2,status
    484c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4850:	e0fffe17 	ldw	r3,-8(fp)
    4854:	00bfff84 	movi	r2,-2
    4858:	1884703a 	and	r2,r3,r2
    485c:	1001703a 	wrctl	status,r2
  
  return context;
    4860:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    4864:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    4868:	e0bff917 	ldw	r2,-28(fp)
    486c:	10800b8b 	ldhu	r2,46(r2)
    4870:	10bfffcc 	andi	r2,r2,65535
    4874:	10003626 	beq	r2,zero,4950 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    4878:	e0bff917 	ldw	r2,-28(fp)
    487c:	10800b8b 	ldhu	r2,46(r2)
    4880:	10bfffc4 	addi	r2,r2,-1
    4884:	1007883a 	mov	r3,r2
    4888:	e0bff917 	ldw	r2,-28(fp)
    488c:	10c00b8d 	sth	r3,46(r2)
    4890:	e0bff917 	ldw	r2,-28(fp)
    4894:	10800b8b 	ldhu	r2,46(r2)
    4898:	10bfffcc 	andi	r2,r2,65535
    489c:	10002c1e 	bne	r2,zero,4950 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    48a0:	e0bff917 	ldw	r2,-28(fp)
    48a4:	10800c03 	ldbu	r2,48(r2)
    48a8:	10803fcc 	andi	r2,r2,255
    48ac:	10800dcc 	andi	r2,r2,55
    48b0:	10000b26 	beq	r2,zero,48e0 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    48b4:	e0bff917 	ldw	r2,-28(fp)
    48b8:	10c00c03 	ldbu	r3,48(r2)
    48bc:	00bff204 	movi	r2,-56
    48c0:	1884703a 	and	r2,r3,r2
    48c4:	1007883a 	mov	r3,r2
    48c8:	e0bff917 	ldw	r2,-28(fp)
    48cc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    48d0:	e0bff917 	ldw	r2,-28(fp)
    48d4:	00c00044 	movi	r3,1
    48d8:	10c00c45 	stb	r3,49(r2)
    48dc:	00000206 	br	48e8 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    48e0:	e0bff917 	ldw	r2,-28(fp)
    48e4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    48e8:	e0bff917 	ldw	r2,-28(fp)
    48ec:	10800c03 	ldbu	r2,48(r2)
    48f0:	10803fcc 	andi	r2,r2,255
    48f4:	1080020c 	andi	r2,r2,8
    48f8:	1000151e 	bne	r2,zero,4950 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    48fc:	e0bff917 	ldw	r2,-28(fp)
    4900:	10c00d83 	ldbu	r3,54(r2)
    4904:	d0a70d03 	ldbu	r2,-25548(gp)
    4908:	1884b03a 	or	r2,r3,r2
    490c:	d0a70d05 	stb	r2,-25548(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4910:	e0bff917 	ldw	r2,-28(fp)
    4914:	10800d03 	ldbu	r2,52(r2)
    4918:	11003fcc 	andi	r4,r2,255
    491c:	e0bff917 	ldw	r2,-28(fp)
    4920:	10800d03 	ldbu	r2,52(r2)
    4924:	10c03fcc 	andi	r3,r2,255
    4928:	d0a70d44 	addi	r2,gp,-25547
    492c:	1885883a 	add	r2,r3,r2
    4930:	10c00003 	ldbu	r3,0(r2)
    4934:	e0bff917 	ldw	r2,-28(fp)
    4938:	10800d43 	ldbu	r2,53(r2)
    493c:	1884b03a 	or	r2,r3,r2
    4940:	1007883a 	mov	r3,r2
    4944:	d0a70d44 	addi	r2,gp,-25547
    4948:	2085883a 	add	r2,r4,r2
    494c:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    4950:	e0bff917 	ldw	r2,-28(fp)
    4954:	10800517 	ldw	r2,20(r2)
    4958:	e0bff915 	stw	r2,-28(fp)
    495c:	e0bffb17 	ldw	r2,-20(fp)
    4960:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4964:	e0bfff17 	ldw	r2,-4(fp)
    4968:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    496c:	e0bff917 	ldw	r2,-28(fp)
    4970:	10800c83 	ldbu	r2,50(r2)
    4974:	10803fcc 	andi	r2,r2,255
    4978:	10800518 	cmpnei	r2,r2,20
    497c:	103fb21e 	bne	r2,zero,4848 <__alt_data_end+0xfc004848>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    4980:	e037883a 	mov	sp,fp
    4984:	dfc00117 	ldw	ra,4(sp)
    4988:	df000017 	ldw	fp,0(sp)
    498c:	dec00204 	addi	sp,sp,8
    4990:	f800283a 	ret

00004994 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    4994:	deffff04 	addi	sp,sp,-4
    4998:	df000015 	stw	fp,0(sp)
    499c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    49a0:	00804784 	movi	r2,286
}
    49a4:	e037883a 	mov	sp,fp
    49a8:	df000017 	ldw	fp,0(sp)
    49ac:	dec00104 	addi	sp,sp,4
    49b0:	f800283a 	ret

000049b4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    49b4:	deffff04 	addi	sp,sp,-4
    49b8:	df000015 	stw	fp,0(sp)
    49bc:	d839883a 	mov	fp,sp
}
    49c0:	e037883a 	mov	sp,fp
    49c4:	df000017 	ldw	fp,0(sp)
    49c8:	dec00104 	addi	sp,sp,4
    49cc:	f800283a 	ret

000049d0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    49d0:	defff804 	addi	sp,sp,-32
    49d4:	dfc00715 	stw	ra,28(sp)
    49d8:	df000615 	stw	fp,24(sp)
    49dc:	df000604 	addi	fp,sp,24
    49e0:	e13ffc15 	stw	r4,-16(fp)
    49e4:	e17ffd15 	stw	r5,-12(fp)
    49e8:	3007883a 	mov	r3,r6
    49ec:	3805883a 	mov	r2,r7
    49f0:	e0fffe05 	stb	r3,-8(fp)
    49f4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    49f8:	e0bffc17 	ldw	r2,-16(fp)
    49fc:	10800283 	ldbu	r2,10(r2)
    4a00:	10803fcc 	andi	r2,r2,255
    4a04:	00c00074 	movhi	r3,1
    4a08:	18f86a04 	addi	r3,r3,-7768
    4a0c:	1885883a 	add	r2,r3,r2
    4a10:	10800003 	ldbu	r2,0(r2)
    4a14:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    4a18:	e0bffa03 	ldbu	r2,-24(fp)
    4a1c:	e0fffc17 	ldw	r3,-16(fp)
    4a20:	1885883a 	add	r2,r3,r2
    4a24:	10800204 	addi	r2,r2,8
    4a28:	108000c3 	ldbu	r2,3(r2)
    4a2c:	10803fcc 	andi	r2,r2,255
    4a30:	00c00074 	movhi	r3,1
    4a34:	18f86a04 	addi	r3,r3,-7768
    4a38:	1885883a 	add	r2,r3,r2
    4a3c:	10800003 	ldbu	r2,0(r2)
    4a40:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    4a44:	e0bffa03 	ldbu	r2,-24(fp)
    4a48:	100490fa 	slli	r2,r2,3
    4a4c:	1007883a 	mov	r3,r2
    4a50:	e0bffa43 	ldbu	r2,-23(fp)
    4a54:	1885883a 	add	r2,r3,r2
    4a58:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    4a5c:	e0bffa83 	ldbu	r2,-22(fp)
    4a60:	00c000b4 	movhi	r3,2
    4a64:	18e2ed04 	addi	r3,r3,-29772
    4a68:	1085883a 	add	r2,r2,r2
    4a6c:	1085883a 	add	r2,r2,r2
    4a70:	1885883a 	add	r2,r3,r2
    4a74:	10800017 	ldw	r2,0(r2)
    4a78:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    4a7c:	e0bffb17 	ldw	r2,-20(fp)
    4a80:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    4a84:	e0bffb17 	ldw	r2,-20(fp)
    4a88:	e0fffd17 	ldw	r3,-12(fp)
    4a8c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    4a90:	e0bffb17 	ldw	r2,-20(fp)
    4a94:	10800c03 	ldbu	r2,48(r2)
    4a98:	1007883a 	mov	r3,r2
    4a9c:	e0bffe03 	ldbu	r2,-8(fp)
    4aa0:	0084303a 	nor	r2,zero,r2
    4aa4:	1884703a 	and	r2,r3,r2
    4aa8:	1007883a 	mov	r3,r2
    4aac:	e0bffb17 	ldw	r2,-20(fp)
    4ab0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    4ab4:	e0bffb17 	ldw	r2,-20(fp)
    4ab8:	e0ffff03 	ldbu	r3,-4(fp)
    4abc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    4ac0:	e0bffb17 	ldw	r2,-20(fp)
    4ac4:	10800c03 	ldbu	r2,48(r2)
    4ac8:	10803fcc 	andi	r2,r2,255
    4acc:	1080020c 	andi	r2,r2,8
    4ad0:	1000111e 	bne	r2,zero,4b18 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    4ad4:	e0bffb17 	ldw	r2,-20(fp)
    4ad8:	10c00d83 	ldbu	r3,54(r2)
    4adc:	d0a70d03 	ldbu	r2,-25548(gp)
    4ae0:	1884b03a 	or	r2,r3,r2
    4ae4:	d0a70d05 	stb	r2,-25548(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    4ae8:	e13ffa03 	ldbu	r4,-24(fp)
    4aec:	e0fffa03 	ldbu	r3,-24(fp)
    4af0:	d0a70d44 	addi	r2,gp,-25547
    4af4:	1885883a 	add	r2,r3,r2
    4af8:	10c00003 	ldbu	r3,0(r2)
    4afc:	e0bffb17 	ldw	r2,-20(fp)
    4b00:	10800d43 	ldbu	r2,53(r2)
    4b04:	1884b03a 	or	r2,r3,r2
    4b08:	1007883a 	mov	r3,r2
    4b0c:	d0a70d44 	addi	r2,gp,-25547
    4b10:	2085883a 	add	r2,r4,r2
    4b14:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    4b18:	e13ffb17 	ldw	r4,-20(fp)
    4b1c:	e17ffc17 	ldw	r5,-16(fp)
    4b20:	0004db80 	call	4db8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    4b24:	e0bffb17 	ldw	r2,-20(fp)
    4b28:	10800817 	ldw	r2,32(r2)
    4b2c:	10000826 	beq	r2,zero,4b50 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    4b30:	e0bffb17 	ldw	r2,-20(fp)
    4b34:	10800817 	ldw	r2,32(r2)
    4b38:	e13ffb17 	ldw	r4,-20(fp)
    4b3c:	100b883a 	mov	r5,r2
    4b40:	0004e680 	call	4e68 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    4b44:	e0bffb17 	ldw	r2,-20(fp)
    4b48:	e0fffc17 	ldw	r3,-16(fp)
    4b4c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    4b50:	e0bffa83 	ldbu	r2,-22(fp)
}
    4b54:	e037883a 	mov	sp,fp
    4b58:	dfc00117 	ldw	ra,4(sp)
    4b5c:	df000017 	ldw	fp,0(sp)
    4b60:	dec00204 	addi	sp,sp,8
    4b64:	f800283a 	ret

00004b68 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    4b68:	defffd04 	addi	sp,sp,-12
    4b6c:	df000215 	stw	fp,8(sp)
    4b70:	df000204 	addi	fp,sp,8
    4b74:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    4b78:	d0a71017 	ldw	r2,-25536(gp)
    4b7c:	e0ffff17 	ldw	r3,-4(fp)
    4b80:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    4b84:	d0a71017 	ldw	r2,-25536(gp)
    4b88:	10800d03 	ldbu	r2,52(r2)
    4b8c:	10803fcc 	andi	r2,r2,255
    4b90:	d0e71017 	ldw	r3,-25536(gp)
    4b94:	18c00d03 	ldbu	r3,52(r3)
    4b98:	18c03fcc 	andi	r3,r3,255
    4b9c:	e13fff17 	ldw	r4,-4(fp)
    4ba0:	20c7883a 	add	r3,r4,r3
    4ba4:	18c00204 	addi	r3,r3,8
    4ba8:	190000c3 	ldbu	r4,3(r3)
    4bac:	d0e71017 	ldw	r3,-25536(gp)
    4bb0:	18c00d43 	ldbu	r3,53(r3)
    4bb4:	20c6b03a 	or	r3,r4,r3
    4bb8:	e13fff17 	ldw	r4,-4(fp)
    4bbc:	2085883a 	add	r2,r4,r2
    4bc0:	10800204 	addi	r2,r2,8
    4bc4:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4bc8:	e0bfff17 	ldw	r2,-4(fp)
    4bcc:	10c00283 	ldbu	r3,10(r2)
    4bd0:	d0a71017 	ldw	r2,-25536(gp)
    4bd4:	10800d83 	ldbu	r2,54(r2)
    4bd8:	1884b03a 	or	r2,r3,r2
    4bdc:	1007883a 	mov	r3,r2
    4be0:	e0bfff17 	ldw	r2,-4(fp)
    4be4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    4be8:	d0a71017 	ldw	r2,-25536(gp)
    4bec:	10800d03 	ldbu	r2,52(r2)
    4bf0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4bf4:	e13ffe03 	ldbu	r4,-8(fp)
    4bf8:	e0fffe03 	ldbu	r3,-8(fp)
    4bfc:	d0a70d44 	addi	r2,gp,-25547
    4c00:	1885883a 	add	r2,r3,r2
    4c04:	10800003 	ldbu	r2,0(r2)
    4c08:	1007883a 	mov	r3,r2
    4c0c:	d0a71017 	ldw	r2,-25536(gp)
    4c10:	10800d43 	ldbu	r2,53(r2)
    4c14:	0084303a 	nor	r2,zero,r2
    4c18:	1884703a 	and	r2,r3,r2
    4c1c:	1007883a 	mov	r3,r2
    4c20:	d0a70d44 	addi	r2,gp,-25547
    4c24:	2085883a 	add	r2,r4,r2
    4c28:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    4c2c:	e0fffe03 	ldbu	r3,-8(fp)
    4c30:	d0a70d44 	addi	r2,gp,-25547
    4c34:	1885883a 	add	r2,r3,r2
    4c38:	10800003 	ldbu	r2,0(r2)
    4c3c:	10803fcc 	andi	r2,r2,255
    4c40:	1000071e 	bne	r2,zero,4c60 <OS_EventTaskWait+0xf8>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    4c44:	d0a71017 	ldw	r2,-25536(gp)
    4c48:	10800d83 	ldbu	r2,54(r2)
    4c4c:	0084303a 	nor	r2,zero,r2
    4c50:	1007883a 	mov	r3,r2
    4c54:	d0a70d03 	ldbu	r2,-25548(gp)
    4c58:	1884703a 	and	r2,r3,r2
    4c5c:	d0a70d05 	stb	r2,-25548(gp)
    }
}
    4c60:	e037883a 	mov	sp,fp
    4c64:	df000017 	ldw	fp,0(sp)
    4c68:	dec00104 	addi	sp,sp,4
    4c6c:	f800283a 	ret

00004c70 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    4c70:	defffb04 	addi	sp,sp,-20
    4c74:	df000415 	stw	fp,16(sp)
    4c78:	df000404 	addi	fp,sp,16
    4c7c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    4c80:	d0a71017 	ldw	r2,-25536(gp)
    4c84:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    4c88:	d0a71017 	ldw	r2,-25536(gp)
    4c8c:	e0ffff17 	ldw	r3,-4(fp)
    4c90:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    4c94:	e0bfff17 	ldw	r2,-4(fp)
    4c98:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    4c9c:	e0bffc17 	ldw	r2,-16(fp)
    4ca0:	10800017 	ldw	r2,0(r2)
    4ca4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    4ca8:	00001f06 	br	4d28 <OS_EventTaskWaitMulti+0xb8>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    4cac:	d0a71017 	ldw	r2,-25536(gp)
    4cb0:	10800d03 	ldbu	r2,52(r2)
    4cb4:	10803fcc 	andi	r2,r2,255
    4cb8:	d0e71017 	ldw	r3,-25536(gp)
    4cbc:	18c00d03 	ldbu	r3,52(r3)
    4cc0:	18c03fcc 	andi	r3,r3,255
    4cc4:	e13ffd17 	ldw	r4,-12(fp)
    4cc8:	20c7883a 	add	r3,r4,r3
    4ccc:	18c00204 	addi	r3,r3,8
    4cd0:	190000c3 	ldbu	r4,3(r3)
    4cd4:	d0e71017 	ldw	r3,-25536(gp)
    4cd8:	18c00d43 	ldbu	r3,53(r3)
    4cdc:	20c6b03a 	or	r3,r4,r3
    4ce0:	e13ffd17 	ldw	r4,-12(fp)
    4ce4:	2085883a 	add	r2,r4,r2
    4ce8:	10800204 	addi	r2,r2,8
    4cec:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4cf0:	e0bffd17 	ldw	r2,-12(fp)
    4cf4:	10c00283 	ldbu	r3,10(r2)
    4cf8:	d0a71017 	ldw	r2,-25536(gp)
    4cfc:	10800d83 	ldbu	r2,54(r2)
    4d00:	1884b03a 	or	r2,r3,r2
    4d04:	1007883a 	mov	r3,r2
    4d08:	e0bffd17 	ldw	r2,-12(fp)
    4d0c:	10c00285 	stb	r3,10(r2)
        pevents++;
    4d10:	e0bffc17 	ldw	r2,-16(fp)
    4d14:	10800104 	addi	r2,r2,4
    4d18:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	10800017 	ldw	r2,0(r2)
    4d24:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    4d28:	e0bffd17 	ldw	r2,-12(fp)
    4d2c:	103fdf1e 	bne	r2,zero,4cac <__alt_data_end+0xfc004cac>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    4d30:	d0a71017 	ldw	r2,-25536(gp)
    4d34:	10800d03 	ldbu	r2,52(r2)
    4d38:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4d3c:	e13ffe03 	ldbu	r4,-8(fp)
    4d40:	e0fffe03 	ldbu	r3,-8(fp)
    4d44:	d0a70d44 	addi	r2,gp,-25547
    4d48:	1885883a 	add	r2,r3,r2
    4d4c:	10800003 	ldbu	r2,0(r2)
    4d50:	1007883a 	mov	r3,r2
    4d54:	d0a71017 	ldw	r2,-25536(gp)
    4d58:	10800d43 	ldbu	r2,53(r2)
    4d5c:	0084303a 	nor	r2,zero,r2
    4d60:	1884703a 	and	r2,r3,r2
    4d64:	1007883a 	mov	r3,r2
    4d68:	d0a70d44 	addi	r2,gp,-25547
    4d6c:	2085883a 	add	r2,r4,r2
    4d70:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    4d74:	e0fffe03 	ldbu	r3,-8(fp)
    4d78:	d0a70d44 	addi	r2,gp,-25547
    4d7c:	1885883a 	add	r2,r3,r2
    4d80:	10800003 	ldbu	r2,0(r2)
    4d84:	10803fcc 	andi	r2,r2,255
    4d88:	1000071e 	bne	r2,zero,4da8 <OS_EventTaskWaitMulti+0x138>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    4d8c:	d0a71017 	ldw	r2,-25536(gp)
    4d90:	10800d83 	ldbu	r2,54(r2)
    4d94:	0084303a 	nor	r2,zero,r2
    4d98:	1007883a 	mov	r3,r2
    4d9c:	d0a70d03 	ldbu	r2,-25548(gp)
    4da0:	1884703a 	and	r2,r3,r2
    4da4:	d0a70d05 	stb	r2,-25548(gp)
    }
}
    4da8:	e037883a 	mov	sp,fp
    4dac:	df000017 	ldw	fp,0(sp)
    4db0:	dec00104 	addi	sp,sp,4
    4db4:	f800283a 	ret

00004db8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    4db8:	defffc04 	addi	sp,sp,-16
    4dbc:	df000315 	stw	fp,12(sp)
    4dc0:	df000304 	addi	fp,sp,12
    4dc4:	e13ffe15 	stw	r4,-8(fp)
    4dc8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    4dcc:	e0bffe17 	ldw	r2,-8(fp)
    4dd0:	10800d03 	ldbu	r2,52(r2)
    4dd4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    4dd8:	e0bffd03 	ldbu	r2,-12(fp)
    4ddc:	e0fffd03 	ldbu	r3,-12(fp)
    4de0:	e13fff17 	ldw	r4,-4(fp)
    4de4:	20c7883a 	add	r3,r4,r3
    4de8:	18c00204 	addi	r3,r3,8
    4dec:	18c000c3 	ldbu	r3,3(r3)
    4df0:	1809883a 	mov	r4,r3
    4df4:	e0fffe17 	ldw	r3,-8(fp)
    4df8:	18c00d43 	ldbu	r3,53(r3)
    4dfc:	00c6303a 	nor	r3,zero,r3
    4e00:	20c6703a 	and	r3,r4,r3
    4e04:	e13fff17 	ldw	r4,-4(fp)
    4e08:	2085883a 	add	r2,r4,r2
    4e0c:	10800204 	addi	r2,r2,8
    4e10:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    4e14:	e0bffd03 	ldbu	r2,-12(fp)
    4e18:	e0ffff17 	ldw	r3,-4(fp)
    4e1c:	1885883a 	add	r2,r3,r2
    4e20:	10800204 	addi	r2,r2,8
    4e24:	108000c3 	ldbu	r2,3(r2)
    4e28:	10803fcc 	andi	r2,r2,255
    4e2c:	10000a1e 	bne	r2,zero,4e58 <OS_EventTaskRemove+0xa0>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    4e30:	e0bfff17 	ldw	r2,-4(fp)
    4e34:	10800283 	ldbu	r2,10(r2)
    4e38:	1007883a 	mov	r3,r2
    4e3c:	e0bffe17 	ldw	r2,-8(fp)
    4e40:	10800d83 	ldbu	r2,54(r2)
    4e44:	0084303a 	nor	r2,zero,r2
    4e48:	1884703a 	and	r2,r3,r2
    4e4c:	1007883a 	mov	r3,r2
    4e50:	e0bfff17 	ldw	r2,-4(fp)
    4e54:	10c00285 	stb	r3,10(r2)
    }
}
    4e58:	e037883a 	mov	sp,fp
    4e5c:	df000017 	ldw	fp,0(sp)
    4e60:	dec00104 	addi	sp,sp,4
    4e64:	f800283a 	ret

00004e68 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    4e68:	defffa04 	addi	sp,sp,-24
    4e6c:	df000515 	stw	fp,20(sp)
    4e70:	df000504 	addi	fp,sp,20
    4e74:	e13ffe15 	stw	r4,-8(fp)
    4e78:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    4e7c:	e0bffe17 	ldw	r2,-8(fp)
    4e80:	10800d03 	ldbu	r2,52(r2)
    4e84:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    4e88:	e0bffe17 	ldw	r2,-8(fp)
    4e8c:	10800d83 	ldbu	r2,54(r2)
    4e90:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    4e94:	e0bffe17 	ldw	r2,-8(fp)
    4e98:	10800d43 	ldbu	r2,53(r2)
    4e9c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    4ea0:	e0bfff17 	ldw	r2,-4(fp)
    4ea4:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    4ea8:	e0bffb17 	ldw	r2,-20(fp)
    4eac:	10800017 	ldw	r2,0(r2)
    4eb0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    4eb4:	00002406 	br	4f48 <OS_EventTaskRemoveMulti+0xe0>
        pevent->OSEventTbl[y]  &= ~bitx;
    4eb8:	e0bffd03 	ldbu	r2,-12(fp)
    4ebc:	e0fffd03 	ldbu	r3,-12(fp)
    4ec0:	e13ffc17 	ldw	r4,-16(fp)
    4ec4:	20c7883a 	add	r3,r4,r3
    4ec8:	18c00204 	addi	r3,r3,8
    4ecc:	18c000c3 	ldbu	r3,3(r3)
    4ed0:	1809883a 	mov	r4,r3
    4ed4:	e0fffd83 	ldbu	r3,-10(fp)
    4ed8:	00c6303a 	nor	r3,zero,r3
    4edc:	20c6703a 	and	r3,r4,r3
    4ee0:	e13ffc17 	ldw	r4,-16(fp)
    4ee4:	2085883a 	add	r2,r4,r2
    4ee8:	10800204 	addi	r2,r2,8
    4eec:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    4ef0:	e0bffd03 	ldbu	r2,-12(fp)
    4ef4:	e0fffc17 	ldw	r3,-16(fp)
    4ef8:	1885883a 	add	r2,r3,r2
    4efc:	10800204 	addi	r2,r2,8
    4f00:	108000c3 	ldbu	r2,3(r2)
    4f04:	10803fcc 	andi	r2,r2,255
    4f08:	1000091e 	bne	r2,zero,4f30 <OS_EventTaskRemoveMulti+0xc8>
            pevent->OSEventGrp &= ~bity;
    4f0c:	e0bffc17 	ldw	r2,-16(fp)
    4f10:	10800283 	ldbu	r2,10(r2)
    4f14:	1007883a 	mov	r3,r2
    4f18:	e0bffd43 	ldbu	r2,-11(fp)
    4f1c:	0084303a 	nor	r2,zero,r2
    4f20:	1884703a 	and	r2,r3,r2
    4f24:	1007883a 	mov	r3,r2
    4f28:	e0bffc17 	ldw	r2,-16(fp)
    4f2c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    4f30:	e0bffb17 	ldw	r2,-20(fp)
    4f34:	10800104 	addi	r2,r2,4
    4f38:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    4f3c:	e0bffb17 	ldw	r2,-20(fp)
    4f40:	10800017 	ldw	r2,0(r2)
    4f44:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    4f48:	e0bffc17 	ldw	r2,-16(fp)
    4f4c:	103fda1e 	bne	r2,zero,4eb8 <__alt_data_end+0xfc004eb8>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    4f50:	e037883a 	mov	sp,fp
    4f54:	df000017 	ldw	fp,0(sp)
    4f58:	dec00104 	addi	sp,sp,4
    4f5c:	f800283a 	ret

00004f60 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    4f60:	defffc04 	addi	sp,sp,-16
    4f64:	df000315 	stw	fp,12(sp)
    4f68:	df000304 	addi	fp,sp,12
    4f6c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    4f70:	e0bfff17 	ldw	r2,-4(fp)
    4f74:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    4f78:	e0bfff17 	ldw	r2,-4(fp)
    4f7c:	108002c4 	addi	r2,r2,11
    4f80:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    4f84:	e03ffe05 	stb	zero,-8(fp)
    4f88:	00000706 	br	4fa8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    4f8c:	e0bffd17 	ldw	r2,-12(fp)
    4f90:	10c00044 	addi	r3,r2,1
    4f94:	e0fffd15 	stw	r3,-12(fp)
    4f98:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    4f9c:	e0bffe03 	ldbu	r2,-8(fp)
    4fa0:	10800044 	addi	r2,r2,1
    4fa4:	e0bffe05 	stb	r2,-8(fp)
    4fa8:	e0bffe03 	ldbu	r2,-8(fp)
    4fac:	108000f0 	cmpltui	r2,r2,3
    4fb0:	103ff61e 	bne	r2,zero,4f8c <__alt_data_end+0xfc004f8c>
        *ptbl++ = 0;
    }
}
    4fb4:	e037883a 	mov	sp,fp
    4fb8:	df000017 	ldw	fp,0(sp)
    4fbc:	dec00104 	addi	sp,sp,4
    4fc0:	f800283a 	ret

00004fc4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    4fc4:	defffb04 	addi	sp,sp,-20
    4fc8:	dfc00415 	stw	ra,16(sp)
    4fcc:	df000315 	stw	fp,12(sp)
    4fd0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    4fd4:	01000074 	movhi	r4,1
    4fd8:	211ed904 	addi	r4,r4,31588
    4fdc:	0142d004 	movi	r5,2880
    4fe0:	00053240 	call	5324 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    4fe4:	00800074 	movhi	r2,1
    4fe8:	109ed904 	addi	r2,r2,31588
    4fec:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    4ff0:	00800074 	movhi	r2,1
    4ff4:	109ee504 	addi	r2,r2,31636
    4ff8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    4ffc:	e03ffd0d 	sth	zero,-12(fp)
    5000:	00001306 	br	5050 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    5004:	e0bffe17 	ldw	r2,-8(fp)
    5008:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    500c:	e0bffe17 	ldw	r2,-8(fp)
    5010:	e0ffff17 	ldw	r3,-4(fp)
    5014:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    5018:	e0bffe17 	ldw	r2,-8(fp)
    501c:	00c00fc4 	movi	r3,63
    5020:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    5024:	e0bffe17 	ldw	r2,-8(fp)
    5028:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    502c:	e0bffe17 	ldw	r2,-8(fp)
    5030:	10800c04 	addi	r2,r2,48
    5034:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    5038:	e0bfff17 	ldw	r2,-4(fp)
    503c:	10800c04 	addi	r2,r2,48
    5040:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    5044:	e0bffd0b 	ldhu	r2,-12(fp)
    5048:	10800044 	addi	r2,r2,1
    504c:	e0bffd0d 	sth	r2,-12(fp)
    5050:	e0bffd0b 	ldhu	r2,-12(fp)
    5054:	10800ef0 	cmpltui	r2,r2,59
    5058:	103fea1e 	bne	r2,zero,5004 <__alt_data_end+0xfc005004>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    505c:	e0bffe17 	ldw	r2,-8(fp)
    5060:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    5064:	e0bffe17 	ldw	r2,-8(fp)
    5068:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    506c:	e0bffe17 	ldw	r2,-8(fp)
    5070:	00c00fc4 	movi	r3,63
    5074:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    5078:	e0bffe17 	ldw	r2,-8(fp)
    507c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    5080:	00800074 	movhi	r2,1
    5084:	109ed904 	addi	r2,r2,31588
    5088:	d0a70e15 	stw	r2,-25544(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    508c:	e037883a 	mov	sp,fp
    5090:	dfc00117 	ldw	ra,4(sp)
    5094:	df000017 	ldw	fp,0(sp)
    5098:	dec00204 	addi	sp,sp,8
    509c:	f800283a 	ret

000050a0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    50a0:	deffff04 	addi	sp,sp,-4
    50a4:	df000015 	stw	fp,0(sp)
    50a8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    50ac:	d0271115 	stw	zero,-25532(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    50b0:	d0270f05 	stb	zero,-25540(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    50b4:	d0270105 	stb	zero,-25596(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    50b8:	d0270945 	stb	zero,-25563(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    50bc:	d0270145 	stb	zero,-25595(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    50c0:	d0270615 	stw	zero,-25576(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    50c4:	d0270215 	stw	zero,-25592(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    50c8:	d0271415 	stw	zero,-25520(gp)
    OSIdleCtrMax  = 0L;
    50cc:	d0270715 	stw	zero,-25572(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    50d0:	d0271305 	stb	zero,-25524(gp)
#endif
}
    50d4:	e037883a 	mov	sp,fp
    50d8:	df000017 	ldw	fp,0(sp)
    50dc:	dec00104 	addi	sp,sp,4
    50e0:	f800283a 	ret

000050e4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    50e4:	defffd04 	addi	sp,sp,-12
    50e8:	df000215 	stw	fp,8(sp)
    50ec:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    50f0:	d0270d05 	stb	zero,-25548(gp)
    prdytbl       = &OSRdyTbl[0];
    50f4:	d0a70d44 	addi	r2,gp,-25547
    50f8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    50fc:	e03ffe05 	stb	zero,-8(fp)
    5100:	00000706 	br	5120 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    5104:	e0bfff17 	ldw	r2,-4(fp)
    5108:	10c00044 	addi	r3,r2,1
    510c:	e0ffff15 	stw	r3,-4(fp)
    5110:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    5114:	e0bffe03 	ldbu	r2,-8(fp)
    5118:	10800044 	addi	r2,r2,1
    511c:	e0bffe05 	stb	r2,-8(fp)
    5120:	e0bffe03 	ldbu	r2,-8(fp)
    5124:	108000f0 	cmpltui	r2,r2,3
    5128:	103ff61e 	bne	r2,zero,5104 <__alt_data_end+0xfc005104>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    512c:	d0270345 	stb	zero,-25587(gp)
    OSPrioHighRdy = 0;
    5130:	d0270305 	stb	zero,-25588(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    5134:	d0270b15 	stw	zero,-25556(gp)
    OSTCBCur      = (OS_TCB *)0;
    5138:	d0271015 	stw	zero,-25536(gp)
}
    513c:	e037883a 	mov	sp,fp
    5140:	df000017 	ldw	fp,0(sp)
    5144:	dec00104 	addi	sp,sp,4
    5148:	f800283a 	ret

0000514c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    514c:	defff804 	addi	sp,sp,-32
    5150:	dfc00715 	stw	ra,28(sp)
    5154:	df000615 	stw	fp,24(sp)
    5158:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    515c:	00bfffd4 	movui	r2,65535
    5160:	d8800015 	stw	r2,0(sp)
    5164:	00800074 	movhi	r2,1
    5168:	109cd904 	addi	r2,r2,29540
    516c:	d8800115 	stw	r2,4(sp)
    5170:	00808004 	movi	r2,512
    5174:	d8800215 	stw	r2,8(sp)
    5178:	d8000315 	stw	zero,12(sp)
    517c:	008000c4 	movi	r2,3
    5180:	d8800415 	stw	r2,16(sp)
    5184:	01000034 	movhi	r4,0
    5188:	21157704 	addi	r4,r4,21980
    518c:	000b883a 	mov	r5,zero
    5190:	01800074 	movhi	r6,1
    5194:	319ed804 	addi	r6,r6,31584
    5198:	01c00504 	movi	r7,20
    519c:	0009fe80 	call	9fe8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    51a0:	01000504 	movi	r4,20
    51a4:	01400074 	movhi	r5,1
    51a8:	2978aa04 	addi	r5,r5,-7512
    51ac:	e1bfff04 	addi	r6,fp,-4
    51b0:	000a8b80 	call	a8b8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    51b4:	e037883a 	mov	sp,fp
    51b8:	dfc00117 	ldw	ra,4(sp)
    51bc:	df000017 	ldw	fp,0(sp)
    51c0:	dec00204 	addi	sp,sp,8
    51c4:	f800283a 	ret

000051c8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    51c8:	defff804 	addi	sp,sp,-32
    51cc:	dfc00715 	stw	ra,28(sp)
    51d0:	df000615 	stw	fp,24(sp)
    51d4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    51d8:	00bfff94 	movui	r2,65534
    51dc:	d8800015 	stw	r2,0(sp)
    51e0:	00800074 	movhi	r2,1
    51e4:	109a6104 	addi	r2,r2,27012
    51e8:	d8800115 	stw	r2,4(sp)
    51ec:	00808004 	movi	r2,512
    51f0:	d8800215 	stw	r2,8(sp)
    51f4:	d8000315 	stw	zero,12(sp)
    51f8:	008000c4 	movi	r2,3
    51fc:	d8800415 	stw	r2,16(sp)
    5200:	01000034 	movhi	r4,0
    5204:	21158e04 	addi	r4,r4,22072
    5208:	000b883a 	mov	r5,zero
    520c:	01800074 	movhi	r6,1
    5210:	319c6004 	addi	r6,r6,29056
    5214:	01c004c4 	movi	r7,19
    5218:	0009fe80 	call	9fe8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    521c:	010004c4 	movi	r4,19
    5220:	01400074 	movhi	r5,1
    5224:	2978ae04 	addi	r5,r5,-7496
    5228:	e1bfff04 	addi	r6,fp,-4
    522c:	000a8b80 	call	a8b8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    5230:	e037883a 	mov	sp,fp
    5234:	dfc00117 	ldw	ra,4(sp)
    5238:	df000017 	ldw	fp,0(sp)
    523c:	dec00204 	addi	sp,sp,8
    5240:	f800283a 	ret

00005244 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    5244:	defffb04 	addi	sp,sp,-20
    5248:	dfc00415 	stw	ra,16(sp)
    524c:	df000315 	stw	fp,12(sp)
    5250:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    5254:	010000b4 	movhi	r4,2
    5258:	2121a904 	addi	r4,r4,-31068
    525c:	01414404 	movi	r5,1296
    5260:	00053240 	call	5324 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    5264:	010000b4 	movhi	r4,2
    5268:	2122ed04 	addi	r4,r4,-29772
    526c:	01401504 	movi	r5,84
    5270:	00053240 	call	5324 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    5274:	008000b4 	movhi	r2,2
    5278:	10a1a904 	addi	r2,r2,-31068
    527c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    5280:	008000b4 	movhi	r2,2
    5284:	10a1c404 	addi	r2,r2,-30960
    5288:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    528c:	e03ffd05 	stb	zero,-12(fp)
    5290:	00001106 	br	52d8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    5294:	e0bffe17 	ldw	r2,-8(fp)
    5298:	e0ffff17 	ldw	r3,-4(fp)
    529c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    52a0:	e0bffe17 	ldw	r2,-8(fp)
    52a4:	00c00fc4 	movi	r3,63
    52a8:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    52ac:	e0bffe17 	ldw	r2,-8(fp)
    52b0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    52b4:	e0bffe17 	ldw	r2,-8(fp)
    52b8:	10801b04 	addi	r2,r2,108
    52bc:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    52c0:	e0bfff17 	ldw	r2,-4(fp)
    52c4:	10801b04 	addi	r2,r2,108
    52c8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    52cc:	e0bffd03 	ldbu	r2,-12(fp)
    52d0:	10800044 	addi	r2,r2,1
    52d4:	e0bffd05 	stb	r2,-12(fp)
    52d8:	e0bffd03 	ldbu	r2,-12(fp)
    52dc:	108002f0 	cmpltui	r2,r2,11
    52e0:	103fec1e 	bne	r2,zero,5294 <__alt_data_end+0xfc005294>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    52e4:	e0bffe17 	ldw	r2,-8(fp)
    52e8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    52ec:	e0bffe17 	ldw	r2,-8(fp)
    52f0:	00c00fc4 	movi	r3,63
    52f4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    52f8:	e0bffe17 	ldw	r2,-8(fp)
    52fc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    5300:	d0270415 	stw	zero,-25584(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    5304:	008000b4 	movhi	r2,2
    5308:	10a1a904 	addi	r2,r2,-31068
    530c:	d0a70815 	stw	r2,-25568(gp)
}
    5310:	e037883a 	mov	sp,fp
    5314:	dfc00117 	ldw	ra,4(sp)
    5318:	df000017 	ldw	fp,0(sp)
    531c:	dec00204 	addi	sp,sp,8
    5320:	f800283a 	ret

00005324 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    5324:	defffd04 	addi	sp,sp,-12
    5328:	df000215 	stw	fp,8(sp)
    532c:	df000204 	addi	fp,sp,8
    5330:	e13ffe15 	stw	r4,-8(fp)
    5334:	2805883a 	mov	r2,r5
    5338:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    533c:	00000706 	br	535c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    5340:	e0bffe17 	ldw	r2,-8(fp)
    5344:	10c00044 	addi	r3,r2,1
    5348:	e0fffe15 	stw	r3,-8(fp)
    534c:	10000005 	stb	zero,0(r2)
        size--;
    5350:	e0bfff0b 	ldhu	r2,-4(fp)
    5354:	10bfffc4 	addi	r2,r2,-1
    5358:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    535c:	e0bfff0b 	ldhu	r2,-4(fp)
    5360:	103ff71e 	bne	r2,zero,5340 <__alt_data_end+0xfc005340>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    5364:	e037883a 	mov	sp,fp
    5368:	df000017 	ldw	fp,0(sp)
    536c:	dec00104 	addi	sp,sp,4
    5370:	f800283a 	ret

00005374 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    5374:	defffc04 	addi	sp,sp,-16
    5378:	df000315 	stw	fp,12(sp)
    537c:	df000304 	addi	fp,sp,12
    5380:	e13ffd15 	stw	r4,-12(fp)
    5384:	e17ffe15 	stw	r5,-8(fp)
    5388:	3005883a 	mov	r2,r6
    538c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    5390:	00000b06 	br	53c0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    5394:	e0bffd17 	ldw	r2,-12(fp)
    5398:	10c00044 	addi	r3,r2,1
    539c:	e0fffd15 	stw	r3,-12(fp)
    53a0:	e0fffe17 	ldw	r3,-8(fp)
    53a4:	19000044 	addi	r4,r3,1
    53a8:	e13ffe15 	stw	r4,-8(fp)
    53ac:	18c00003 	ldbu	r3,0(r3)
    53b0:	10c00005 	stb	r3,0(r2)
        size--;
    53b4:	e0bfff0b 	ldhu	r2,-4(fp)
    53b8:	10bfffc4 	addi	r2,r2,-1
    53bc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    53c0:	e0bfff0b 	ldhu	r2,-4(fp)
    53c4:	103ff31e 	bne	r2,zero,5394 <__alt_data_end+0xfc005394>
        *pdest++ = *psrc++;
        size--;
    }
}
    53c8:	e037883a 	mov	sp,fp
    53cc:	df000017 	ldw	fp,0(sp)
    53d0:	dec00104 	addi	sp,sp,4
    53d4:	f800283a 	ret

000053d8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    53d8:	defffb04 	addi	sp,sp,-20
    53dc:	dfc00415 	stw	ra,16(sp)
    53e0:	df000315 	stw	fp,12(sp)
    53e4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    53e8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    53ec:	0005303a 	rdctl	r2,status
    53f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    53f4:	e0fffe17 	ldw	r3,-8(fp)
    53f8:	00bfff84 	movi	r2,-2
    53fc:	1884703a 	and	r2,r3,r2
    5400:	1001703a 	wrctl	status,r2
  
  return context;
    5404:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    5408:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    540c:	d0a70f03 	ldbu	r2,-25540(gp)
    5410:	10803fcc 	andi	r2,r2,255
    5414:	10001a1e 	bne	r2,zero,5480 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    5418:	d0a70103 	ldbu	r2,-25596(gp)
    541c:	10803fcc 	andi	r2,r2,255
    5420:	1000171e 	bne	r2,zero,5480 <OS_Sched+0xa8>
            OS_SchedNew();
    5424:	00054a40 	call	54a4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    5428:	d0e70303 	ldbu	r3,-25588(gp)
    542c:	d0a70343 	ldbu	r2,-25587(gp)
    5430:	18c03fcc 	andi	r3,r3,255
    5434:	10803fcc 	andi	r2,r2,255
    5438:	18801126 	beq	r3,r2,5480 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    543c:	d0a70303 	ldbu	r2,-25588(gp)
    5440:	10803fcc 	andi	r2,r2,255
    5444:	00c000b4 	movhi	r3,2
    5448:	18e2ed04 	addi	r3,r3,-29772
    544c:	1085883a 	add	r2,r2,r2
    5450:	1085883a 	add	r2,r2,r2
    5454:	1885883a 	add	r2,r3,r2
    5458:	10800017 	ldw	r2,0(r2)
    545c:	d0a70b15 	stw	r2,-25556(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    5460:	d0a70b17 	ldw	r2,-25556(gp)
    5464:	10c00e17 	ldw	r3,56(r2)
    5468:	18c00044 	addi	r3,r3,1
    546c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    5470:	d0a70617 	ldw	r2,-25576(gp)
    5474:	10800044 	addi	r2,r2,1
    5478:	d0a70615 	stw	r2,-25576(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    547c:	000d4840 	call	d484 <OSCtxSw>
    5480:	e0bffd17 	ldw	r2,-12(fp)
    5484:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5488:	e0bfff17 	ldw	r2,-4(fp)
    548c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    5490:	e037883a 	mov	sp,fp
    5494:	dfc00117 	ldw	ra,4(sp)
    5498:	df000017 	ldw	fp,0(sp)
    549c:	dec00204 	addi	sp,sp,8
    54a0:	f800283a 	ret

000054a4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    54a4:	defffe04 	addi	sp,sp,-8
    54a8:	df000115 	stw	fp,4(sp)
    54ac:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    54b0:	d0a70d03 	ldbu	r2,-25548(gp)
    54b4:	10803fcc 	andi	r2,r2,255
    54b8:	00c00074 	movhi	r3,1
    54bc:	18f86a04 	addi	r3,r3,-7768
    54c0:	1885883a 	add	r2,r3,r2
    54c4:	10800003 	ldbu	r2,0(r2)
    54c8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    54cc:	e0bfff03 	ldbu	r2,-4(fp)
    54d0:	100490fa 	slli	r2,r2,3
    54d4:	1007883a 	mov	r3,r2
    54d8:	e13fff03 	ldbu	r4,-4(fp)
    54dc:	d0a70d44 	addi	r2,gp,-25547
    54e0:	2085883a 	add	r2,r4,r2
    54e4:	10800003 	ldbu	r2,0(r2)
    54e8:	10803fcc 	andi	r2,r2,255
    54ec:	01000074 	movhi	r4,1
    54f0:	21386a04 	addi	r4,r4,-7768
    54f4:	2085883a 	add	r2,r4,r2
    54f8:	10800003 	ldbu	r2,0(r2)
    54fc:	1885883a 	add	r2,r3,r2
    5500:	d0a70305 	stb	r2,-25588(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    5504:	e037883a 	mov	sp,fp
    5508:	df000017 	ldw	fp,0(sp)
    550c:	dec00104 	addi	sp,sp,4
    5510:	f800283a 	ret

00005514 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    5514:	defffc04 	addi	sp,sp,-16
    5518:	df000315 	stw	fp,12(sp)
    551c:	df000304 	addi	fp,sp,12
    5520:	e13ffe15 	stw	r4,-8(fp)
    5524:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    5528:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    552c:	00000b06 	br	555c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    5530:	e0bffe17 	ldw	r2,-8(fp)
    5534:	10c00044 	addi	r3,r2,1
    5538:	e0fffe15 	stw	r3,-8(fp)
    553c:	e0ffff17 	ldw	r3,-4(fp)
    5540:	19000044 	addi	r4,r3,1
    5544:	e13fff15 	stw	r4,-4(fp)
    5548:	18c00003 	ldbu	r3,0(r3)
    554c:	10c00005 	stb	r3,0(r2)
        len++;
    5550:	e0bffd03 	ldbu	r2,-12(fp)
    5554:	10800044 	addi	r2,r2,1
    5558:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    555c:	e0bfff17 	ldw	r2,-4(fp)
    5560:	10800003 	ldbu	r2,0(r2)
    5564:	10803fcc 	andi	r2,r2,255
    5568:	103ff11e 	bne	r2,zero,5530 <__alt_data_end+0xfc005530>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    556c:	e0bffe17 	ldw	r2,-8(fp)
    5570:	10000005 	stb	zero,0(r2)
    return (len);
    5574:	e0bffd03 	ldbu	r2,-12(fp)
}
    5578:	e037883a 	mov	sp,fp
    557c:	df000017 	ldw	fp,0(sp)
    5580:	dec00104 	addi	sp,sp,4
    5584:	f800283a 	ret

00005588 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    5588:	defffd04 	addi	sp,sp,-12
    558c:	df000215 	stw	fp,8(sp)
    5590:	df000204 	addi	fp,sp,8
    5594:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    5598:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    559c:	00000606 	br	55b8 <OS_StrLen+0x30>
        psrc++;
    55a0:	e0bfff17 	ldw	r2,-4(fp)
    55a4:	10800044 	addi	r2,r2,1
    55a8:	e0bfff15 	stw	r2,-4(fp)
        len++;
    55ac:	e0bffe03 	ldbu	r2,-8(fp)
    55b0:	10800044 	addi	r2,r2,1
    55b4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    55b8:	e0bfff17 	ldw	r2,-4(fp)
    55bc:	10800003 	ldbu	r2,0(r2)
    55c0:	10803fcc 	andi	r2,r2,255
    55c4:	103ff61e 	bne	r2,zero,55a0 <__alt_data_end+0xfc0055a0>
        psrc++;
        len++;
    }
    return (len);
    55c8:	e0bffe03 	ldbu	r2,-8(fp)
}
    55cc:	e037883a 	mov	sp,fp
    55d0:	df000017 	ldw	fp,0(sp)
    55d4:	dec00104 	addi	sp,sp,4
    55d8:	f800283a 	ret

000055dc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    55dc:	defffa04 	addi	sp,sp,-24
    55e0:	dfc00515 	stw	ra,20(sp)
    55e4:	df000415 	stw	fp,16(sp)
    55e8:	df000404 	addi	fp,sp,16
    55ec:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    55f0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55f4:	0005303a 	rdctl	r2,status
    55f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55fc:	e0fffd17 	ldw	r3,-12(fp)
    5600:	00bfff84 	movi	r2,-2
    5604:	1884703a 	and	r2,r3,r2
    5608:	1001703a 	wrctl	status,r2
  
  return context;
    560c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    5610:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    5614:	d0a70217 	ldw	r2,-25592(gp)
    5618:	10800044 	addi	r2,r2,1
    561c:	d0a70215 	stw	r2,-25592(gp)
    5620:	e0bffc17 	ldw	r2,-16(fp)
    5624:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5628:	e0bffe17 	ldw	r2,-8(fp)
    562c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    5630:	000d9140 	call	d914 <OSTaskIdleHook>
    }
    5634:	003fef06 	br	55f4 <__alt_data_end+0xfc0055f4>

00005638 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    5638:	defffa04 	addi	sp,sp,-24
    563c:	dfc00515 	stw	ra,20(sp)
    5640:	df000415 	stw	fp,16(sp)
    5644:	df000404 	addi	fp,sp,16
    5648:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    564c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    5650:	00000206 	br	565c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    5654:	01000504 	movi	r4,20
    5658:	000b1dc0 	call	b1dc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    565c:	d0a71303 	ldbu	r2,-25524(gp)
    5660:	10803fcc 	andi	r2,r2,255
    5664:	103ffb26 	beq	r2,zero,5654 <__alt_data_end+0xfc005654>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    5668:	d0a70717 	ldw	r2,-25572(gp)
    566c:	1009883a 	mov	r4,r2
    5670:	01401904 	movi	r5,100
    5674:	000e1080 	call	e108 <__udivsi3>
    5678:	d0a70715 	stw	r2,-25572(gp)
    if (OSIdleCtrMax == 0L) {
    567c:	d0a70717 	ldw	r2,-25572(gp)
    5680:	1000031e 	bne	r2,zero,5690 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    5684:	d0270905 	stb	zero,-25564(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    5688:	01003fc4 	movi	r4,255
    568c:	000ae340 	call	ae34 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5690:	0005303a 	rdctl	r2,status
    5694:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5698:	e0fffd17 	ldw	r3,-12(fp)
    569c:	00bfff84 	movi	r2,-2
    56a0:	1884703a 	and	r2,r3,r2
    56a4:	1001703a 	wrctl	status,r2
  
  return context;
    56a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    56ac:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    56b0:	d0a70217 	ldw	r2,-25592(gp)
    56b4:	d0a71415 	stw	r2,-25520(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    56b8:	d0270215 	stw	zero,-25592(gp)
    56bc:	e0bffc17 	ldw	r2,-16(fp)
    56c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56c4:	e0bffe17 	ldw	r2,-8(fp)
    56c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    56cc:	d0e71417 	ldw	r3,-25520(gp)
    56d0:	d0a70717 	ldw	r2,-25572(gp)
    56d4:	1809883a 	mov	r4,r3
    56d8:	100b883a 	mov	r5,r2
    56dc:	000e1080 	call	e108 <__udivsi3>
    56e0:	00c01904 	movi	r3,100
    56e4:	1885c83a 	sub	r2,r3,r2
    56e8:	d0a70905 	stb	r2,-25564(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    56ec:	000d8a40 	call	d8a4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    56f0:	00057000 	call	5700 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    56f4:	01000284 	movi	r4,10
    56f8:	000b1dc0 	call	b1dc <OSTimeDly>
    }
    56fc:	003fe406 	br	5690 <__alt_data_end+0xfc005690>

00005700 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    5700:	defffa04 	addi	sp,sp,-24
    5704:	dfc00515 	stw	ra,20(sp)
    5708:	df000415 	stw	fp,16(sp)
    570c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5710:	e03ffc05 	stb	zero,-16(fp)
    5714:	00002406 	br	57a8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    5718:	e0fffc03 	ldbu	r3,-16(fp)
    571c:	e0bffe04 	addi	r2,fp,-8
    5720:	1809883a 	mov	r4,r3
    5724:	100b883a 	mov	r5,r2
    5728:	000ac6c0 	call	ac6c <OSTaskStkChk>
    572c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    5730:	e0bffc43 	ldbu	r2,-15(fp)
    5734:	1000191e 	bne	r2,zero,579c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    5738:	e0bffc03 	ldbu	r2,-16(fp)
    573c:	00c000b4 	movhi	r3,2
    5740:	18e2ed04 	addi	r3,r3,-29772
    5744:	1085883a 	add	r2,r2,r2
    5748:	1085883a 	add	r2,r2,r2
    574c:	1885883a 	add	r2,r3,r2
    5750:	10800017 	ldw	r2,0(r2)
    5754:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    5758:	e0bffd17 	ldw	r2,-12(fp)
    575c:	10000f26 	beq	r2,zero,579c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    5760:	e0bffd17 	ldw	r2,-12(fp)
    5764:	10800060 	cmpeqi	r2,r2,1
    5768:	10000c1e 	bne	r2,zero,579c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    576c:	e0bffd17 	ldw	r2,-12(fp)
    5770:	10c00217 	ldw	r3,8(r2)
    5774:	e0bffd17 	ldw	r2,-12(fp)
    5778:	10800317 	ldw	r2,12(r2)
    577c:	1085883a 	add	r2,r2,r2
    5780:	1085883a 	add	r2,r2,r2
    5784:	1887883a 	add	r3,r3,r2
    5788:	e0bffd17 	ldw	r2,-12(fp)
    578c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    5790:	e0ffff17 	ldw	r3,-4(fp)
    5794:	e0bffd17 	ldw	r2,-12(fp)
    5798:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    579c:	e0bffc03 	ldbu	r2,-16(fp)
    57a0:	10800044 	addi	r2,r2,1
    57a4:	e0bffc05 	stb	r2,-16(fp)
    57a8:	e0bffc03 	ldbu	r2,-16(fp)
    57ac:	10800570 	cmpltui	r2,r2,21
    57b0:	103fd91e 	bne	r2,zero,5718 <__alt_data_end+0xfc005718>
#endif
                }
            }
        }
    }
}
    57b4:	e037883a 	mov	sp,fp
    57b8:	dfc00117 	ldw	ra,4(sp)
    57bc:	df000017 	ldw	fp,0(sp)
    57c0:	dec00204 	addi	sp,sp,8
    57c4:	f800283a 	ret

000057c8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    57c8:	defff204 	addi	sp,sp,-56
    57cc:	dfc00d15 	stw	ra,52(sp)
    57d0:	df000c15 	stw	fp,48(sp)
    57d4:	df000c04 	addi	fp,sp,48
    57d8:	e17ffc15 	stw	r5,-16(fp)
    57dc:	e1bffd15 	stw	r6,-12(fp)
    57e0:	3807883a 	mov	r3,r7
    57e4:	e0800417 	ldw	r2,16(fp)
    57e8:	e13ffb05 	stb	r4,-20(fp)
    57ec:	e0fffe0d 	sth	r3,-8(fp)
    57f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    57f4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    57f8:	0005303a 	rdctl	r2,status
    57fc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5800:	e0fff617 	ldw	r3,-40(fp)
    5804:	00bfff84 	movi	r2,-2
    5808:	1884703a 	and	r2,r3,r2
    580c:	1001703a 	wrctl	status,r2
  
  return context;
    5810:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    5814:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    5818:	d0a70817 	ldw	r2,-25568(gp)
    581c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    5820:	e0bff517 	ldw	r2,-44(fp)
    5824:	10009326 	beq	r2,zero,5a74 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    5828:	e0bff517 	ldw	r2,-44(fp)
    582c:	10800517 	ldw	r2,20(r2)
    5830:	d0a70815 	stw	r2,-25568(gp)
    5834:	e0bff417 	ldw	r2,-48(fp)
    5838:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    583c:	e0bff717 	ldw	r2,-36(fp)
    5840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    5844:	e0bff517 	ldw	r2,-44(fp)
    5848:	e0fffc17 	ldw	r3,-16(fp)
    584c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    5850:	e0bff517 	ldw	r2,-44(fp)
    5854:	e0fffb03 	ldbu	r3,-20(fp)
    5858:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    585c:	e0bff517 	ldw	r2,-44(fp)
    5860:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    5864:	e0bff517 	ldw	r2,-44(fp)
    5868:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    586c:	e0bff517 	ldw	r2,-44(fp)
    5870:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    5874:	e0bff517 	ldw	r2,-44(fp)
    5878:	e0c00317 	ldw	r3,12(fp)
    587c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    5880:	e0bff517 	ldw	r2,-44(fp)
    5884:	e0c00217 	ldw	r3,8(fp)
    5888:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    588c:	e0bff517 	ldw	r2,-44(fp)
    5890:	e0fffd17 	ldw	r3,-12(fp)
    5894:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    5898:	e0bff517 	ldw	r2,-44(fp)
    589c:	e0ffff0b 	ldhu	r3,-4(fp)
    58a0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    58a4:	e0bff517 	ldw	r2,-44(fp)
    58a8:	e0fffe0b 	ldhu	r3,-8(fp)
    58ac:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    58b0:	e0bff517 	ldw	r2,-44(fp)
    58b4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    58b8:	e0bffb03 	ldbu	r2,-20(fp)
    58bc:	1004d0fa 	srli	r2,r2,3
    58c0:	1007883a 	mov	r3,r2
    58c4:	e0bff517 	ldw	r2,-44(fp)
    58c8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    58cc:	e0bffb03 	ldbu	r2,-20(fp)
    58d0:	108001cc 	andi	r2,r2,7
    58d4:	1007883a 	mov	r3,r2
    58d8:	e0bff517 	ldw	r2,-44(fp)
    58dc:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    58e0:	e0bff517 	ldw	r2,-44(fp)
    58e4:	10800d03 	ldbu	r2,52(r2)
    58e8:	10803fcc 	andi	r2,r2,255
    58ec:	00c00044 	movi	r3,1
    58f0:	1884983a 	sll	r2,r3,r2
    58f4:	1007883a 	mov	r3,r2
    58f8:	e0bff517 	ldw	r2,-44(fp)
    58fc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    5900:	e0bff517 	ldw	r2,-44(fp)
    5904:	10800cc3 	ldbu	r2,51(r2)
    5908:	10803fcc 	andi	r2,r2,255
    590c:	00c00044 	movi	r3,1
    5910:	1884983a 	sll	r2,r3,r2
    5914:	1007883a 	mov	r3,r2
    5918:	e0bff517 	ldw	r2,-44(fp)
    591c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    5920:	e0bff517 	ldw	r2,-44(fp)
    5924:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    5928:	e0bff517 	ldw	r2,-44(fp)
    592c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    5930:	e0bff517 	ldw	r2,-44(fp)
    5934:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    5938:	e0bff517 	ldw	r2,-44(fp)
    593c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    5940:	e0bff517 	ldw	r2,-44(fp)
    5944:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    5948:	e0bff517 	ldw	r2,-44(fp)
    594c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    5950:	e0bff517 	ldw	r2,-44(fp)
    5954:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    5958:	e0bff517 	ldw	r2,-44(fp)
    595c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    5960:	e0bff517 	ldw	r2,-44(fp)
    5964:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    5968:	e0bff517 	ldw	r2,-44(fp)
    596c:	00c00fc4 	movi	r3,63
    5970:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    5974:	e0bff517 	ldw	r2,-44(fp)
    5978:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    597c:	e13ff517 	ldw	r4,-44(fp)
    5980:	000d9300 	call	d930 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    5984:	e13ff517 	ldw	r4,-44(fp)
    5988:	000d8480 	call	d848 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    598c:	0005303a 	rdctl	r2,status
    5990:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5994:	e0fff817 	ldw	r3,-32(fp)
    5998:	00bfff84 	movi	r2,-2
    599c:	1884703a 	and	r2,r3,r2
    59a0:	1001703a 	wrctl	status,r2
  
  return context;
    59a4:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    59a8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    59ac:	e0bffb03 	ldbu	r2,-20(fp)
    59b0:	00c000b4 	movhi	r3,2
    59b4:	18e2ed04 	addi	r3,r3,-29772
    59b8:	1085883a 	add	r2,r2,r2
    59bc:	1085883a 	add	r2,r2,r2
    59c0:	1885883a 	add	r2,r3,r2
    59c4:	e0fff517 	ldw	r3,-44(fp)
    59c8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    59cc:	d0e70417 	ldw	r3,-25584(gp)
    59d0:	e0bff517 	ldw	r2,-44(fp)
    59d4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    59d8:	e0bff517 	ldw	r2,-44(fp)
    59dc:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    59e0:	d0a70417 	ldw	r2,-25584(gp)
    59e4:	10000326 	beq	r2,zero,59f4 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    59e8:	d0a70417 	ldw	r2,-25584(gp)
    59ec:	e0fff517 	ldw	r3,-44(fp)
    59f0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    59f4:	e0bff517 	ldw	r2,-44(fp)
    59f8:	d0a70415 	stw	r2,-25584(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    59fc:	e0bff517 	ldw	r2,-44(fp)
    5a00:	10c00d83 	ldbu	r3,54(r2)
    5a04:	d0a70d03 	ldbu	r2,-25548(gp)
    5a08:	1884b03a 	or	r2,r3,r2
    5a0c:	d0a70d05 	stb	r2,-25548(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5a10:	e0bff517 	ldw	r2,-44(fp)
    5a14:	10800d03 	ldbu	r2,52(r2)
    5a18:	11003fcc 	andi	r4,r2,255
    5a1c:	e0bff517 	ldw	r2,-44(fp)
    5a20:	10800d03 	ldbu	r2,52(r2)
    5a24:	10c03fcc 	andi	r3,r2,255
    5a28:	d0a70d44 	addi	r2,gp,-25547
    5a2c:	1885883a 	add	r2,r3,r2
    5a30:	10c00003 	ldbu	r3,0(r2)
    5a34:	e0bff517 	ldw	r2,-44(fp)
    5a38:	10800d43 	ldbu	r2,53(r2)
    5a3c:	1884b03a 	or	r2,r3,r2
    5a40:	1007883a 	mov	r3,r2
    5a44:	d0a70d44 	addi	r2,gp,-25547
    5a48:	2085883a 	add	r2,r4,r2
    5a4c:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    5a50:	d0a70943 	ldbu	r2,-25563(gp)
    5a54:	10800044 	addi	r2,r2,1
    5a58:	d0a70945 	stb	r2,-25563(gp)
    5a5c:	e0bff417 	ldw	r2,-48(fp)
    5a60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a64:	e0bff917 	ldw	r2,-28(fp)
    5a68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    5a6c:	0005883a 	mov	r2,zero
    5a70:	00000506 	br	5a88 <OS_TCBInit+0x2c0>
    5a74:	e0bff417 	ldw	r2,-48(fp)
    5a78:	e0bffa15 	stw	r2,-24(fp)
    5a7c:	e0bffa17 	ldw	r2,-24(fp)
    5a80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    5a84:	00801084 	movi	r2,66
}
    5a88:	e037883a 	mov	sp,fp
    5a8c:	dfc00117 	ldw	ra,4(sp)
    5a90:	df000017 	ldw	fp,0(sp)
    5a94:	dec00204 	addi	sp,sp,8
    5a98:	f800283a 	ret

00005a9c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    5a9c:	defffe04 	addi	sp,sp,-8
    5aa0:	df000115 	stw	fp,4(sp)
    5aa4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    5aa8:	d0a00d04 	addi	r2,gp,-32716
    5aac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    5ab0:	d0a00e04 	addi	r2,gp,-32712
    5ab4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    5ab8:	d0a00f84 	addi	r2,gp,-32706
    5abc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    5ac0:	d0a01004 	addi	r2,gp,-32704
    5ac4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    5ac8:	d0a00f04 	addi	r2,gp,-32708
    5acc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    5ad0:	d0a01084 	addi	r2,gp,-32702
    5ad4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    5ad8:	d0a01104 	addi	r2,gp,-32700
    5adc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    5ae0:	d0a01184 	addi	r2,gp,-32698
    5ae4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    5ae8:	d0a01204 	addi	r2,gp,-32696
    5aec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    5af0:	d0a01284 	addi	r2,gp,-32694
    5af4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    5af8:	d0a01304 	addi	r2,gp,-32692
    5afc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    5b00:	d0a01384 	addi	r2,gp,-32690
    5b04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    5b08:	d0a01404 	addi	r2,gp,-32688
    5b0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    5b10:	d0a01484 	addi	r2,gp,-32686
    5b14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    5b18:	d0a01504 	addi	r2,gp,-32684
    5b1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    5b20:	d0a01584 	addi	r2,gp,-32682
    5b24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    5b28:	d0a01604 	addi	r2,gp,-32680
    5b2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    5b30:	d0a01684 	addi	r2,gp,-32678
    5b34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    5b38:	d0a01704 	addi	r2,gp,-32676
    5b3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    5b40:	d0a01784 	addi	r2,gp,-32674
    5b44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    5b48:	d0a01804 	addi	r2,gp,-32672
    5b4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    5b50:	d0a01884 	addi	r2,gp,-32670
    5b54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    5b58:	d0a01904 	addi	r2,gp,-32668
    5b5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    5b60:	d0a01984 	addi	r2,gp,-32666
    5b64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    5b68:	d0a01a04 	addi	r2,gp,-32664
    5b6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    5b70:	d0a01a84 	addi	r2,gp,-32662
    5b74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    5b78:	d0a01b04 	addi	r2,gp,-32660
    5b7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    5b80:	d0a01b84 	addi	r2,gp,-32658
    5b84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    5b88:	d0a01c04 	addi	r2,gp,-32656
    5b8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    5b90:	d0a01c84 	addi	r2,gp,-32654
    5b94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    5b98:	d0a01d04 	addi	r2,gp,-32652
    5b9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    5ba0:	d0a01d84 	addi	r2,gp,-32650
    5ba4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    5ba8:	d0a01e04 	addi	r2,gp,-32648
    5bac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    5bb0:	d0a01e84 	addi	r2,gp,-32646
    5bb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    5bb8:	d0a01f04 	addi	r2,gp,-32644
    5bbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    5bc0:	d0a01f84 	addi	r2,gp,-32642
    5bc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    5bc8:	d0a02004 	addi	r2,gp,-32640
    5bcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    5bd0:	d0a02084 	addi	r2,gp,-32638
    5bd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    5bd8:	d0a02104 	addi	r2,gp,-32636
    5bdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    5be0:	d0a02184 	addi	r2,gp,-32634
    5be4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    5be8:	d0a02204 	addi	r2,gp,-32632
    5bec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    5bf0:	d0a02284 	addi	r2,gp,-32630
    5bf4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    5bf8:	d0a02304 	addi	r2,gp,-32628
    5bfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    5c00:	d0a02384 	addi	r2,gp,-32626
    5c04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    5c08:	d0a02404 	addi	r2,gp,-32624
    5c0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    5c10:	d0a02904 	addi	r2,gp,-32604
    5c14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    5c18:	e037883a 	mov	sp,fp
    5c1c:	df000017 	ldw	fp,0(sp)
    5c20:	dec00104 	addi	sp,sp,4
    5c24:	f800283a 	ret

00005c28 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    5c28:	defff204 	addi	sp,sp,-56
    5c2c:	df000d15 	stw	fp,52(sp)
    5c30:	df000d04 	addi	fp,sp,52
    5c34:	e13ffc15 	stw	r4,-16(fp)
    5c38:	2807883a 	mov	r3,r5
    5c3c:	3005883a 	mov	r2,r6
    5c40:	e1ffff15 	stw	r7,-4(fp)
    5c44:	e0fffd0d 	sth	r3,-12(fp)
    5c48:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    5c4c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    5c50:	e0bfff17 	ldw	r2,-4(fp)
    5c54:	1000021e 	bne	r2,zero,5c60 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    5c58:	0005883a 	mov	r2,zero
    5c5c:	0000b006 	br	5f20 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    5c60:	e0bffc17 	ldw	r2,-16(fp)
    5c64:	1000051e 	bne	r2,zero,5c7c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5c68:	e0bfff17 	ldw	r2,-4(fp)
    5c6c:	00c01b84 	movi	r3,110
    5c70:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5c74:	0005883a 	mov	r2,zero
    5c78:	0000a906 	br	5f20 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    5c7c:	e0bffc17 	ldw	r2,-16(fp)
    5c80:	10800003 	ldbu	r2,0(r2)
    5c84:	10803fcc 	andi	r2,r2,255
    5c88:	10800160 	cmpeqi	r2,r2,5
    5c8c:	1000051e 	bne	r2,zero,5ca4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    5c90:	e0bfff17 	ldw	r2,-4(fp)
    5c94:	00c00044 	movi	r3,1
    5c98:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5c9c:	0005883a 	mov	r2,zero
    5ca0:	00009f06 	br	5f20 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    5ca4:	e0fffe03 	ldbu	r3,-8(fp)
    5ca8:	00bfe004 	movi	r2,-128
    5cac:	1884703a 	and	r2,r3,r2
    5cb0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    5cb4:	e0bff503 	ldbu	r2,-44(fp)
    5cb8:	10000626 	beq	r2,zero,5cd4 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    5cbc:	e0bffe03 	ldbu	r2,-8(fp)
    5cc0:	10801fcc 	andi	r2,r2,127
    5cc4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    5cc8:	00800044 	movi	r2,1
    5ccc:	e0bff385 	stb	r2,-50(fp)
    5cd0:	00000106 	br	5cd8 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    5cd4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    5cd8:	e0bfff17 	ldw	r2,-4(fp)
    5cdc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5ce0:	0005303a 	rdctl	r2,status
    5ce4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ce8:	e0fff617 	ldw	r3,-40(fp)
    5cec:	00bfff84 	movi	r2,-2
    5cf0:	1884703a 	and	r2,r3,r2
    5cf4:	1001703a 	wrctl	status,r2
  
  return context;
    5cf8:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    5cfc:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    5d00:	e0bffe03 	ldbu	r2,-8(fp)
    5d04:	10c00060 	cmpeqi	r3,r2,1
    5d08:	18005f1e 	bne	r3,zero,5e88 <OSFlagAccept+0x260>
    5d0c:	10c00088 	cmpgei	r3,r2,2
    5d10:	1800021e 	bne	r3,zero,5d1c <OSFlagAccept+0xf4>
    5d14:	10003f26 	beq	r2,zero,5e14 <OSFlagAccept+0x1ec>
    5d18:	00007706 	br	5ef8 <OSFlagAccept+0x2d0>
    5d1c:	10c000a0 	cmpeqi	r3,r2,2
    5d20:	1800031e 	bne	r3,zero,5d30 <OSFlagAccept+0x108>
    5d24:	108000e0 	cmpeqi	r2,r2,3
    5d28:	10001e1e 	bne	r2,zero,5da4 <OSFlagAccept+0x17c>
    5d2c:	00007206 	br	5ef8 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    5d30:	e0bffc17 	ldw	r2,-16(fp)
    5d34:	10c0020b 	ldhu	r3,8(r2)
    5d38:	e0bffd0b 	ldhu	r2,-12(fp)
    5d3c:	1884703a 	and	r2,r3,r2
    5d40:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    5d44:	e0fff30b 	ldhu	r3,-52(fp)
    5d48:	e0bffd0b 	ldhu	r2,-12(fp)
    5d4c:	18800d1e 	bne	r3,r2,5d84 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5d50:	e0bff383 	ldbu	r2,-50(fp)
    5d54:	10800058 	cmpnei	r2,r2,1
    5d58:	10000d1e 	bne	r2,zero,5d90 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    5d5c:	e0bffc17 	ldw	r2,-16(fp)
    5d60:	1080020b 	ldhu	r2,8(r2)
    5d64:	1007883a 	mov	r3,r2
    5d68:	e0bff30b 	ldhu	r2,-52(fp)
    5d6c:	0084303a 	nor	r2,zero,r2
    5d70:	1884703a 	and	r2,r3,r2
    5d74:	1007883a 	mov	r3,r2
    5d78:	e0bffc17 	ldw	r2,-16(fp)
    5d7c:	10c0020d 	sth	r3,8(r2)
    5d80:	00000306 	br	5d90 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5d84:	e0bfff17 	ldw	r2,-4(fp)
    5d88:	00c01c04 	movi	r3,112
    5d8c:	10c00005 	stb	r3,0(r2)
    5d90:	e0bff417 	ldw	r2,-48(fp)
    5d94:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d98:	e0bff717 	ldw	r2,-36(fp)
    5d9c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5da0:	00005e06 	br	5f1c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    5da4:	e0bffc17 	ldw	r2,-16(fp)
    5da8:	10c0020b 	ldhu	r3,8(r2)
    5dac:	e0bffd0b 	ldhu	r2,-12(fp)
    5db0:	1884703a 	and	r2,r3,r2
    5db4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    5db8:	e0bff30b 	ldhu	r2,-52(fp)
    5dbc:	10000d26 	beq	r2,zero,5df4 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5dc0:	e0bff383 	ldbu	r2,-50(fp)
    5dc4:	10800058 	cmpnei	r2,r2,1
    5dc8:	10000d1e 	bne	r2,zero,5e00 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    5dcc:	e0bffc17 	ldw	r2,-16(fp)
    5dd0:	1080020b 	ldhu	r2,8(r2)
    5dd4:	1007883a 	mov	r3,r2
    5dd8:	e0bff30b 	ldhu	r2,-52(fp)
    5ddc:	0084303a 	nor	r2,zero,r2
    5de0:	1884703a 	and	r2,r3,r2
    5de4:	1007883a 	mov	r3,r2
    5de8:	e0bffc17 	ldw	r2,-16(fp)
    5dec:	10c0020d 	sth	r3,8(r2)
    5df0:	00000306 	br	5e00 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5df4:	e0bfff17 	ldw	r2,-4(fp)
    5df8:	00c01c04 	movi	r3,112
    5dfc:	10c00005 	stb	r3,0(r2)
    5e00:	e0bff417 	ldw	r2,-48(fp)
    5e04:	e0bff815 	stw	r2,-32(fp)
    5e08:	e0bff817 	ldw	r2,-32(fp)
    5e0c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5e10:	00004206 	br	5f1c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    5e14:	e0bffc17 	ldw	r2,-16(fp)
    5e18:	1080020b 	ldhu	r2,8(r2)
    5e1c:	0084303a 	nor	r2,zero,r2
    5e20:	1007883a 	mov	r3,r2
    5e24:	e0bffd0b 	ldhu	r2,-12(fp)
    5e28:	1884703a 	and	r2,r3,r2
    5e2c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    5e30:	e0fff30b 	ldhu	r3,-52(fp)
    5e34:	e0bffd0b 	ldhu	r2,-12(fp)
    5e38:	18800b1e 	bne	r3,r2,5e68 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5e3c:	e0bff383 	ldbu	r2,-50(fp)
    5e40:	10800058 	cmpnei	r2,r2,1
    5e44:	10000b1e 	bne	r2,zero,5e74 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    5e48:	e0bffc17 	ldw	r2,-16(fp)
    5e4c:	10c0020b 	ldhu	r3,8(r2)
    5e50:	e0bff30b 	ldhu	r2,-52(fp)
    5e54:	1884b03a 	or	r2,r3,r2
    5e58:	1007883a 	mov	r3,r2
    5e5c:	e0bffc17 	ldw	r2,-16(fp)
    5e60:	10c0020d 	sth	r3,8(r2)
    5e64:	00000306 	br	5e74 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5e68:	e0bfff17 	ldw	r2,-4(fp)
    5e6c:	00c01c04 	movi	r3,112
    5e70:	10c00005 	stb	r3,0(r2)
    5e74:	e0bff417 	ldw	r2,-48(fp)
    5e78:	e0bff915 	stw	r2,-28(fp)
    5e7c:	e0bff917 	ldw	r2,-28(fp)
    5e80:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5e84:	00002506 	br	5f1c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    5e88:	e0bffc17 	ldw	r2,-16(fp)
    5e8c:	1080020b 	ldhu	r2,8(r2)
    5e90:	0084303a 	nor	r2,zero,r2
    5e94:	1007883a 	mov	r3,r2
    5e98:	e0bffd0b 	ldhu	r2,-12(fp)
    5e9c:	1884703a 	and	r2,r3,r2
    5ea0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    5ea4:	e0bff30b 	ldhu	r2,-52(fp)
    5ea8:	10000b26 	beq	r2,zero,5ed8 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5eac:	e0bff383 	ldbu	r2,-50(fp)
    5eb0:	10800058 	cmpnei	r2,r2,1
    5eb4:	10000b1e 	bne	r2,zero,5ee4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    5eb8:	e0bffc17 	ldw	r2,-16(fp)
    5ebc:	10c0020b 	ldhu	r3,8(r2)
    5ec0:	e0bff30b 	ldhu	r2,-52(fp)
    5ec4:	1884b03a 	or	r2,r3,r2
    5ec8:	1007883a 	mov	r3,r2
    5ecc:	e0bffc17 	ldw	r2,-16(fp)
    5ed0:	10c0020d 	sth	r3,8(r2)
    5ed4:	00000306 	br	5ee4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5ed8:	e0bfff17 	ldw	r2,-4(fp)
    5edc:	00c01c04 	movi	r3,112
    5ee0:	10c00005 	stb	r3,0(r2)
    5ee4:	e0bff417 	ldw	r2,-48(fp)
    5ee8:	e0bffa15 	stw	r2,-24(fp)
    5eec:	e0bffa17 	ldw	r2,-24(fp)
    5ef0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5ef4:	00000906 	br	5f1c <OSFlagAccept+0x2f4>
    5ef8:	e0bff417 	ldw	r2,-48(fp)
    5efc:	e0bffb15 	stw	r2,-20(fp)
    5f00:	e0bffb17 	ldw	r2,-20(fp)
    5f04:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    5f08:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    5f0c:	e0bfff17 	ldw	r2,-4(fp)
    5f10:	00c01bc4 	movi	r3,111
    5f14:	10c00005 	stb	r3,0(r2)
             break;
    5f18:	0001883a 	nop
    }
    return (flags_rdy);
    5f1c:	e0bff30b 	ldhu	r2,-52(fp)
}
    5f20:	e037883a 	mov	sp,fp
    5f24:	df000017 	ldw	fp,0(sp)
    5f28:	dec00104 	addi	sp,sp,4
    5f2c:	f800283a 	ret

00005f30 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    5f30:	defff804 	addi	sp,sp,-32
    5f34:	df000715 	stw	fp,28(sp)
    5f38:	df000704 	addi	fp,sp,28
    5f3c:	2005883a 	mov	r2,r4
    5f40:	e17fff15 	stw	r5,-4(fp)
    5f44:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    5f48:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    5f4c:	e0bfff17 	ldw	r2,-4(fp)
    5f50:	1000021e 	bne	r2,zero,5f5c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    5f54:	0005883a 	mov	r2,zero
    5f58:	00003b06 	br	6048 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    5f5c:	00800074 	movhi	r2,1
    5f60:	10866604 	addi	r2,r2,6552
    5f64:	10800003 	ldbu	r2,0(r2)
    5f68:	10803fcc 	andi	r2,r2,255
    5f6c:	10000526 	beq	r2,zero,5f84 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    5f70:	e0bfff17 	ldw	r2,-4(fp)
    5f74:	00c00404 	movi	r3,16
    5f78:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    5f7c:	0005883a 	mov	r2,zero
    5f80:	00003106 	br	6048 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5f84:	0005303a 	rdctl	r2,status
    5f88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f8c:	e0fffb17 	ldw	r3,-20(fp)
    5f90:	00bfff84 	movi	r2,-2
    5f94:	1884703a 	and	r2,r3,r2
    5f98:	1001703a 	wrctl	status,r2
  
  return context;
    5f9c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    5fa0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    5fa4:	00800074 	movhi	r2,1
    5fa8:	10866904 	addi	r2,r2,6564
    5fac:	10800017 	ldw	r2,0(r2)
    5fb0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    5fb4:	e0bffa17 	ldw	r2,-24(fp)
    5fb8:	10001b26 	beq	r2,zero,6028 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    5fbc:	00800074 	movhi	r2,1
    5fc0:	10866904 	addi	r2,r2,6564
    5fc4:	10800017 	ldw	r2,0(r2)
    5fc8:	10c00117 	ldw	r3,4(r2)
    5fcc:	00800074 	movhi	r2,1
    5fd0:	10866904 	addi	r2,r2,6564
    5fd4:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    5fd8:	e0bffa17 	ldw	r2,-24(fp)
    5fdc:	00c00144 	movi	r3,5
    5fe0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    5fe4:	e0bffa17 	ldw	r2,-24(fp)
    5fe8:	e0fffe0b 	ldhu	r3,-8(fp)
    5fec:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    5ff0:	e0bffa17 	ldw	r2,-24(fp)
    5ff4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    5ff8:	e0bffa17 	ldw	r2,-24(fp)
    5ffc:	00c00fc4 	movi	r3,63
    6000:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6004:	e0bffa17 	ldw	r2,-24(fp)
    6008:	100002c5 	stb	zero,11(r2)
    600c:	e0bff917 	ldw	r2,-28(fp)
    6010:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6014:	e0bffc17 	ldw	r2,-16(fp)
    6018:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    601c:	e0bfff17 	ldw	r2,-4(fp)
    6020:	10000005 	stb	zero,0(r2)
    6024:	00000706 	br	6044 <OSFlagCreate+0x114>
    6028:	e0bff917 	ldw	r2,-28(fp)
    602c:	e0bffd15 	stw	r2,-12(fp)
    6030:	e0bffd17 	ldw	r2,-12(fp)
    6034:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    6038:	e0bfff17 	ldw	r2,-4(fp)
    603c:	00c01c84 	movi	r3,114
    6040:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    6044:	e0bffa17 	ldw	r2,-24(fp)
}
    6048:	e037883a 	mov	sp,fp
    604c:	df000017 	ldw	fp,0(sp)
    6050:	dec00104 	addi	sp,sp,4
    6054:	f800283a 	ret

00006058 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    6058:	defff204 	addi	sp,sp,-56
    605c:	dfc00d15 	stw	ra,52(sp)
    6060:	df000c15 	stw	fp,48(sp)
    6064:	df000c04 	addi	fp,sp,48
    6068:	e13ffd15 	stw	r4,-12(fp)
    606c:	2805883a 	mov	r2,r5
    6070:	e1bfff15 	stw	r6,-4(fp)
    6074:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6078:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    607c:	e0bfff17 	ldw	r2,-4(fp)
    6080:	1000021e 	bne	r2,zero,608c <OSFlagDel+0x34>
        return (pgrp);
    6084:	e0bffd17 	ldw	r2,-12(fp)
    6088:	00008a06 	br	62b4 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    608c:	e0bffd17 	ldw	r2,-12(fp)
    6090:	1000051e 	bne	r2,zero,60a8 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6094:	e0bfff17 	ldw	r2,-4(fp)
    6098:	00c01b84 	movi	r3,110
    609c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    60a0:	e0bffd17 	ldw	r2,-12(fp)
    60a4:	00008306 	br	62b4 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    60a8:	00800074 	movhi	r2,1
    60ac:	10866604 	addi	r2,r2,6552
    60b0:	10800003 	ldbu	r2,0(r2)
    60b4:	10803fcc 	andi	r2,r2,255
    60b8:	10000526 	beq	r2,zero,60d0 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    60bc:	e0bfff17 	ldw	r2,-4(fp)
    60c0:	00c003c4 	movi	r3,15
    60c4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    60c8:	e0bffd17 	ldw	r2,-12(fp)
    60cc:	00007906 	br	62b4 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    60d0:	e0bffd17 	ldw	r2,-12(fp)
    60d4:	10800003 	ldbu	r2,0(r2)
    60d8:	10803fcc 	andi	r2,r2,255
    60dc:	10800160 	cmpeqi	r2,r2,5
    60e0:	1000051e 	bne	r2,zero,60f8 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    60e4:	e0bfff17 	ldw	r2,-4(fp)
    60e8:	00c00044 	movi	r3,1
    60ec:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    60f0:	e0bffd17 	ldw	r2,-12(fp)
    60f4:	00006f06 	br	62b4 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    60f8:	0005303a 	rdctl	r2,status
    60fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6100:	e0fff817 	ldw	r3,-32(fp)
    6104:	00bfff84 	movi	r2,-2
    6108:	1884703a 	and	r2,r3,r2
    610c:	1001703a 	wrctl	status,r2
  
  return context;
    6110:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    6114:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    6118:	e0bffd17 	ldw	r2,-12(fp)
    611c:	10800117 	ldw	r2,4(r2)
    6120:	10000326 	beq	r2,zero,6130 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    6124:	00800044 	movi	r2,1
    6128:	e0bff405 	stb	r2,-48(fp)
    612c:	00000106 	br	6134 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    6130:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    6134:	e0bffe03 	ldbu	r2,-8(fp)
    6138:	10000326 	beq	r2,zero,6148 <OSFlagDel+0xf0>
    613c:	10800060 	cmpeqi	r2,r2,1
    6140:	1000271e 	bne	r2,zero,61e0 <OSFlagDel+0x188>
    6144:	00005006 	br	6288 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    6148:	e0bff403 	ldbu	r2,-48(fp)
    614c:	10001a1e 	bne	r2,zero,61b8 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    6150:	e0bffd17 	ldw	r2,-12(fp)
    6154:	00c00fc4 	movi	r3,63
    6158:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    615c:	e0bffd17 	ldw	r2,-12(fp)
    6160:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6164:	e0bffd17 	ldw	r2,-12(fp)
    6168:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    616c:	00800074 	movhi	r2,1
    6170:	10866904 	addi	r2,r2,6564
    6174:	10c00017 	ldw	r3,0(r2)
    6178:	e0bffd17 	ldw	r2,-12(fp)
    617c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6180:	e0bffd17 	ldw	r2,-12(fp)
    6184:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    6188:	00800074 	movhi	r2,1
    618c:	10866904 	addi	r2,r2,6564
    6190:	e0fffd17 	ldw	r3,-12(fp)
    6194:	10c00015 	stw	r3,0(r2)
    6198:	e0bff717 	ldw	r2,-36(fp)
    619c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    61a0:	e0bff917 	ldw	r2,-28(fp)
    61a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    61a8:	e0bfff17 	ldw	r2,-4(fp)
    61ac:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    61b0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    61b4:	00003e06 	br	62b0 <OSFlagDel+0x258>
    61b8:	e0bff717 	ldw	r2,-36(fp)
    61bc:	e0bffa15 	stw	r2,-24(fp)
    61c0:	e0bffa17 	ldw	r2,-24(fp)
    61c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    61c8:	e0bfff17 	ldw	r2,-4(fp)
    61cc:	00c01244 	movi	r3,73
    61d0:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    61d4:	e0bffd17 	ldw	r2,-12(fp)
    61d8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    61dc:	00003406 	br	62b0 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    61e0:	e0bffd17 	ldw	r2,-12(fp)
    61e4:	10800117 	ldw	r2,4(r2)
    61e8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    61ec:	00000606 	br	6208 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    61f0:	e13ff517 	ldw	r4,-44(fp)
    61f4:	000b883a 	mov	r5,zero
    61f8:	00072a00 	call	72a0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    61fc:	e0bff517 	ldw	r2,-44(fp)
    6200:	10800017 	ldw	r2,0(r2)
    6204:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    6208:	e0bff517 	ldw	r2,-44(fp)
    620c:	103ff81e 	bne	r2,zero,61f0 <__alt_data_end+0xfc0061f0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    6210:	e0bffd17 	ldw	r2,-12(fp)
    6214:	00c00fc4 	movi	r3,63
    6218:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    621c:	e0bffd17 	ldw	r2,-12(fp)
    6220:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6224:	e0bffd17 	ldw	r2,-12(fp)
    6228:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    622c:	00800074 	movhi	r2,1
    6230:	10866904 	addi	r2,r2,6564
    6234:	10c00017 	ldw	r3,0(r2)
    6238:	e0bffd17 	ldw	r2,-12(fp)
    623c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6240:	e0bffd17 	ldw	r2,-12(fp)
    6244:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    6248:	00800074 	movhi	r2,1
    624c:	10866904 	addi	r2,r2,6564
    6250:	e0fffd17 	ldw	r3,-12(fp)
    6254:	10c00015 	stw	r3,0(r2)
    6258:	e0bff717 	ldw	r2,-36(fp)
    625c:	e0bffb15 	stw	r2,-20(fp)
    6260:	e0bffb17 	ldw	r2,-20(fp)
    6264:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6268:	e0bff403 	ldbu	r2,-48(fp)
    626c:	10800058 	cmpnei	r2,r2,1
    6270:	1000011e 	bne	r2,zero,6278 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    6274:	00053d80 	call	53d8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    6278:	e0bfff17 	ldw	r2,-4(fp)
    627c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    6280:	e03ff615 	stw	zero,-40(fp)
             break;
    6284:	00000a06 	br	62b0 <OSFlagDel+0x258>
    6288:	e0bff717 	ldw	r2,-36(fp)
    628c:	e0bffc15 	stw	r2,-16(fp)
    6290:	e0bffc17 	ldw	r2,-16(fp)
    6294:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    6298:	e0bfff17 	ldw	r2,-4(fp)
    629c:	00c001c4 	movi	r3,7
    62a0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    62a4:	e0bffd17 	ldw	r2,-12(fp)
    62a8:	e0bff615 	stw	r2,-40(fp)
             break;
    62ac:	0001883a 	nop
    }
    return (pgrp_return);
    62b0:	e0bff617 	ldw	r2,-40(fp)
}
    62b4:	e037883a 	mov	sp,fp
    62b8:	dfc00117 	ldw	ra,4(sp)
    62bc:	df000017 	ldw	fp,0(sp)
    62c0:	dec00204 	addi	sp,sp,8
    62c4:	f800283a 	ret

000062c8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    62c8:	defff604 	addi	sp,sp,-40
    62cc:	dfc00915 	stw	ra,36(sp)
    62d0:	df000815 	stw	fp,32(sp)
    62d4:	df000804 	addi	fp,sp,32
    62d8:	e13ffd15 	stw	r4,-12(fp)
    62dc:	e17ffe15 	stw	r5,-8(fp)
    62e0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    62e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    62e8:	e0bfff17 	ldw	r2,-4(fp)
    62ec:	1000021e 	bne	r2,zero,62f8 <OSFlagNameGet+0x30>
        return (0);
    62f0:	0005883a 	mov	r2,zero
    62f4:	00003b06 	br	63e4 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    62f8:	e0bffd17 	ldw	r2,-12(fp)
    62fc:	1000051e 	bne	r2,zero,6314 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6300:	e0bfff17 	ldw	r2,-4(fp)
    6304:	00c01b84 	movi	r3,110
    6308:	10c00005 	stb	r3,0(r2)
        return (0);
    630c:	0005883a 	mov	r2,zero
    6310:	00003406 	br	63e4 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6314:	e0bffe17 	ldw	r2,-8(fp)
    6318:	1000051e 	bne	r2,zero,6330 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    631c:	e0bfff17 	ldw	r2,-4(fp)
    6320:	00c00304 	movi	r3,12
    6324:	10c00005 	stb	r3,0(r2)
        return (0);
    6328:	0005883a 	mov	r2,zero
    632c:	00002d06 	br	63e4 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6330:	00800074 	movhi	r2,1
    6334:	10866604 	addi	r2,r2,6552
    6338:	10800003 	ldbu	r2,0(r2)
    633c:	10803fcc 	andi	r2,r2,255
    6340:	10000526 	beq	r2,zero,6358 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    6344:	e0bfff17 	ldw	r2,-4(fp)
    6348:	00c00444 	movi	r3,17
    634c:	10c00005 	stb	r3,0(r2)
        return (0);
    6350:	0005883a 	mov	r2,zero
    6354:	00002306 	br	63e4 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6358:	0005303a 	rdctl	r2,status
    635c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6360:	e0fffa17 	ldw	r3,-24(fp)
    6364:	00bfff84 	movi	r2,-2
    6368:	1884703a 	and	r2,r3,r2
    636c:	1001703a 	wrctl	status,r2
  
  return context;
    6370:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    6374:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    6378:	e0bffd17 	ldw	r2,-12(fp)
    637c:	10800003 	ldbu	r2,0(r2)
    6380:	10803fcc 	andi	r2,r2,255
    6384:	10800160 	cmpeqi	r2,r2,5
    6388:	1000091e 	bne	r2,zero,63b0 <OSFlagNameGet+0xe8>
    638c:	e0bff817 	ldw	r2,-32(fp)
    6390:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6394:	e0bffb17 	ldw	r2,-20(fp)
    6398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    639c:	e0bfff17 	ldw	r2,-4(fp)
    63a0:	00c00044 	movi	r3,1
    63a4:	10c00005 	stb	r3,0(r2)
        return (0);
    63a8:	0005883a 	mov	r2,zero
    63ac:	00000d06 	br	63e4 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    63b0:	e0bffd17 	ldw	r2,-12(fp)
    63b4:	10800284 	addi	r2,r2,10
    63b8:	e13ffe17 	ldw	r4,-8(fp)
    63bc:	100b883a 	mov	r5,r2
    63c0:	00055140 	call	5514 <OS_StrCopy>
    63c4:	e0bff905 	stb	r2,-28(fp)
    63c8:	e0bff817 	ldw	r2,-32(fp)
    63cc:	e0bffc15 	stw	r2,-16(fp)
    63d0:	e0bffc17 	ldw	r2,-16(fp)
    63d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    63d8:	e0bfff17 	ldw	r2,-4(fp)
    63dc:	10000005 	stb	zero,0(r2)
    return (len);
    63e0:	e0bff903 	ldbu	r2,-28(fp)
}
    63e4:	e037883a 	mov	sp,fp
    63e8:	dfc00117 	ldw	ra,4(sp)
    63ec:	df000017 	ldw	fp,0(sp)
    63f0:	dec00204 	addi	sp,sp,8
    63f4:	f800283a 	ret

000063f8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    63f8:	defff504 	addi	sp,sp,-44
    63fc:	dfc00a15 	stw	ra,40(sp)
    6400:	df000915 	stw	fp,36(sp)
    6404:	df000904 	addi	fp,sp,36
    6408:	e13ffd15 	stw	r4,-12(fp)
    640c:	e17ffe15 	stw	r5,-8(fp)
    6410:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6414:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6418:	e0bfff17 	ldw	r2,-4(fp)
    641c:	1000011e 	bne	r2,zero,6424 <OSFlagNameSet+0x2c>
        return;
    6420:	00004406 	br	6534 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    6424:	e0bffd17 	ldw	r2,-12(fp)
    6428:	1000041e 	bne	r2,zero,643c <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    642c:	e0bfff17 	ldw	r2,-4(fp)
    6430:	00c01b84 	movi	r3,110
    6434:	10c00005 	stb	r3,0(r2)
        return;
    6438:	00003e06 	br	6534 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    643c:	e0bffe17 	ldw	r2,-8(fp)
    6440:	1000041e 	bne	r2,zero,6454 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    6444:	e0bfff17 	ldw	r2,-4(fp)
    6448:	00c00304 	movi	r3,12
    644c:	10c00005 	stb	r3,0(r2)
        return;
    6450:	00003806 	br	6534 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6454:	00800074 	movhi	r2,1
    6458:	10866604 	addi	r2,r2,6552
    645c:	10800003 	ldbu	r2,0(r2)
    6460:	10803fcc 	andi	r2,r2,255
    6464:	10000426 	beq	r2,zero,6478 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    6468:	e0bfff17 	ldw	r2,-4(fp)
    646c:	00c00484 	movi	r3,18
    6470:	10c00005 	stb	r3,0(r2)
        return;
    6474:	00002f06 	br	6534 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6478:	0005303a 	rdctl	r2,status
    647c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6480:	e0fff917 	ldw	r3,-28(fp)
    6484:	00bfff84 	movi	r2,-2
    6488:	1884703a 	and	r2,r3,r2
    648c:	1001703a 	wrctl	status,r2
  
  return context;
    6490:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    6494:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    6498:	e0bffd17 	ldw	r2,-12(fp)
    649c:	10800003 	ldbu	r2,0(r2)
    64a0:	10803fcc 	andi	r2,r2,255
    64a4:	10800160 	cmpeqi	r2,r2,5
    64a8:	1000081e 	bne	r2,zero,64cc <OSFlagNameSet+0xd4>
    64ac:	e0bff717 	ldw	r2,-36(fp)
    64b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    64b4:	e0bffa17 	ldw	r2,-24(fp)
    64b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    64bc:	e0bfff17 	ldw	r2,-4(fp)
    64c0:	00c00044 	movi	r3,1
    64c4:	10c00005 	stb	r3,0(r2)
        return;
    64c8:	00001a06 	br	6534 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    64cc:	e13ffe17 	ldw	r4,-8(fp)
    64d0:	00055880 	call	5588 <OS_StrLen>
    64d4:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    64d8:	e0bff803 	ldbu	r2,-32(fp)
    64dc:	10800830 	cmpltui	r2,r2,32
    64e0:	1000081e 	bne	r2,zero,6504 <OSFlagNameSet+0x10c>
    64e4:	e0bff717 	ldw	r2,-36(fp)
    64e8:	e0bffb15 	stw	r2,-20(fp)
    64ec:	e0bffb17 	ldw	r2,-20(fp)
    64f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    64f4:	e0bfff17 	ldw	r2,-4(fp)
    64f8:	00c01cc4 	movi	r3,115
    64fc:	10c00005 	stb	r3,0(r2)
        return;
    6500:	00000c06 	br	6534 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    6504:	e0bffd17 	ldw	r2,-12(fp)
    6508:	10800284 	addi	r2,r2,10
    650c:	1009883a 	mov	r4,r2
    6510:	e17ffe17 	ldw	r5,-8(fp)
    6514:	00055140 	call	5514 <OS_StrCopy>
    6518:	e0bff717 	ldw	r2,-36(fp)
    651c:	e0bffc15 	stw	r2,-16(fp)
    6520:	e0bffc17 	ldw	r2,-16(fp)
    6524:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6528:	e0bfff17 	ldw	r2,-4(fp)
    652c:	10000005 	stb	zero,0(r2)
    return;
    6530:	0001883a 	nop
}
    6534:	e037883a 	mov	sp,fp
    6538:	dfc00117 	ldw	ra,4(sp)
    653c:	df000017 	ldw	fp,0(sp)
    6540:	dec00204 	addi	sp,sp,8
    6544:	f800283a 	ret

00006548 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    6548:	deffe204 	addi	sp,sp,-120
    654c:	dfc01d15 	stw	ra,116(sp)
    6550:	df001c15 	stw	fp,112(sp)
    6554:	df001c04 	addi	fp,sp,112
    6558:	e13ffc15 	stw	r4,-16(fp)
    655c:	2809883a 	mov	r4,r5
    6560:	3007883a 	mov	r3,r6
    6564:	3805883a 	mov	r2,r7
    6568:	e13ffd0d 	sth	r4,-12(fp)
    656c:	e0fffe05 	stb	r3,-8(fp)
    6570:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6574:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6578:	e0800217 	ldw	r2,8(fp)
    657c:	1000021e 	bne	r2,zero,6588 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    6580:	0005883a 	mov	r2,zero
    6584:	00016b06 	br	6b34 <OSFlagPend+0x5ec>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6588:	e0bffc17 	ldw	r2,-16(fp)
    658c:	1000051e 	bne	r2,zero,65a4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6590:	e0800217 	ldw	r2,8(fp)
    6594:	00c01b84 	movi	r3,110
    6598:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    659c:	0005883a 	mov	r2,zero
    65a0:	00016406 	br	6b34 <OSFlagPend+0x5ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    65a4:	00800074 	movhi	r2,1
    65a8:	10866604 	addi	r2,r2,6552
    65ac:	10800003 	ldbu	r2,0(r2)
    65b0:	10803fcc 	andi	r2,r2,255
    65b4:	10000526 	beq	r2,zero,65cc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    65b8:	e0800217 	ldw	r2,8(fp)
    65bc:	00c00084 	movi	r3,2
    65c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    65c4:	0005883a 	mov	r2,zero
    65c8:	00015a06 	br	6b34 <OSFlagPend+0x5ec>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    65cc:	00800074 	movhi	r2,1
    65d0:	10865804 	addi	r2,r2,6496
    65d4:	10800003 	ldbu	r2,0(r2)
    65d8:	10803fcc 	andi	r2,r2,255
    65dc:	10000526 	beq	r2,zero,65f4 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    65e0:	e0800217 	ldw	r2,8(fp)
    65e4:	00c00344 	movi	r3,13
    65e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    65ec:	0005883a 	mov	r2,zero
    65f0:	00015006 	br	6b34 <OSFlagPend+0x5ec>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    65f4:	e0bffc17 	ldw	r2,-16(fp)
    65f8:	10800003 	ldbu	r2,0(r2)
    65fc:	10803fcc 	andi	r2,r2,255
    6600:	10800160 	cmpeqi	r2,r2,5
    6604:	1000051e 	bne	r2,zero,661c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    6608:	e0800217 	ldw	r2,8(fp)
    660c:	00c00044 	movi	r3,1
    6610:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6614:	0005883a 	mov	r2,zero
    6618:	00014606 	br	6b34 <OSFlagPend+0x5ec>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    661c:	e0fffe03 	ldbu	r3,-8(fp)
    6620:	00bfe004 	movi	r2,-128
    6624:	1884703a 	and	r2,r3,r2
    6628:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    662c:	e0bfe703 	ldbu	r2,-100(fp)
    6630:	10000626 	beq	r2,zero,664c <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    6634:	e0bffe03 	ldbu	r2,-8(fp)
    6638:	10801fcc 	andi	r2,r2,127
    663c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    6640:	00800044 	movi	r2,1
    6644:	e0bfe505 	stb	r2,-108(fp)
    6648:	00000106 	br	6650 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    664c:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6650:	0005303a 	rdctl	r2,status
    6654:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6658:	e0ffe917 	ldw	r3,-92(fp)
    665c:	00bfff84 	movi	r2,-2
    6660:	1884703a 	and	r2,r3,r2
    6664:	1001703a 	wrctl	status,r2
  
  return context;
    6668:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    666c:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    6670:	e0bffe03 	ldbu	r2,-8(fp)
    6674:	10c00060 	cmpeqi	r3,r2,1
    6678:	1800951e 	bne	r3,zero,68d0 <OSFlagPend+0x388>
    667c:	10c00088 	cmpgei	r3,r2,2
    6680:	1800021e 	bne	r3,zero,668c <OSFlagPend+0x144>
    6684:	10006326 	beq	r2,zero,6814 <OSFlagPend+0x2cc>
    6688:	0000bf06 	br	6988 <OSFlagPend+0x440>
    668c:	10c000a0 	cmpeqi	r3,r2,2
    6690:	1800031e 	bne	r3,zero,66a0 <OSFlagPend+0x158>
    6694:	108000e0 	cmpeqi	r2,r2,3
    6698:	1000301e 	bne	r2,zero,675c <OSFlagPend+0x214>
    669c:	0000ba06 	br	6988 <OSFlagPend+0x440>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    66a0:	e0bffc17 	ldw	r2,-16(fp)
    66a4:	10c0020b 	ldhu	r3,8(r2)
    66a8:	e0bffd0b 	ldhu	r2,-12(fp)
    66ac:	1884703a 	and	r2,r3,r2
    66b0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    66b4:	e0ffe78b 	ldhu	r3,-98(fp)
    66b8:	e0bffd0b 	ldhu	r2,-12(fp)
    66bc:	1880191e 	bne	r3,r2,6724 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    66c0:	e0bfe503 	ldbu	r2,-108(fp)
    66c4:	10800058 	cmpnei	r2,r2,1
    66c8:	1000091e 	bne	r2,zero,66f0 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    66cc:	e0bffc17 	ldw	r2,-16(fp)
    66d0:	1080020b 	ldhu	r2,8(r2)
    66d4:	1007883a 	mov	r3,r2
    66d8:	e0bfe78b 	ldhu	r2,-98(fp)
    66dc:	0084303a 	nor	r2,zero,r2
    66e0:	1884703a 	and	r2,r3,r2
    66e4:	1007883a 	mov	r3,r2
    66e8:	e0bffc17 	ldw	r2,-16(fp)
    66ec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    66f0:	00800074 	movhi	r2,1
    66f4:	10866704 	addi	r2,r2,6556
    66f8:	10800017 	ldw	r2,0(r2)
    66fc:	e0ffe78b 	ldhu	r3,-98(fp)
    6700:	10c00b0d 	sth	r3,44(r2)
    6704:	e0bfe617 	ldw	r2,-104(fp)
    6708:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    670c:	e0bfea17 	ldw	r2,-88(fp)
    6710:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6714:	e0800217 	ldw	r2,8(fp)
    6718:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    671c:	e0bfe78b 	ldhu	r2,-98(fp)
    6720:	00010406 	br	6b34 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6724:	e0fffd0b 	ldhu	r3,-12(fp)
    6728:	e0bffe03 	ldbu	r2,-8(fp)
    672c:	e13fff0b 	ldhu	r4,-4(fp)
    6730:	e17ff704 	addi	r5,fp,-36
    6734:	d9000015 	stw	r4,0(sp)
    6738:	e13ffc17 	ldw	r4,-16(fp)
    673c:	180d883a 	mov	r6,r3
    6740:	100f883a 	mov	r7,r2
    6744:	0006ffc0 	call	6ffc <OS_FlagBlock>
    6748:	e0bfe617 	ldw	r2,-104(fp)
    674c:	e0bfeb15 	stw	r2,-84(fp)
    6750:	e0bfeb17 	ldw	r2,-84(fp)
    6754:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6758:	00009506 	br	69b0 <OSFlagPend+0x468>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    675c:	e0bffc17 	ldw	r2,-16(fp)
    6760:	10c0020b 	ldhu	r3,8(r2)
    6764:	e0bffd0b 	ldhu	r2,-12(fp)
    6768:	1884703a 	and	r2,r3,r2
    676c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6770:	e0bfe78b 	ldhu	r2,-98(fp)
    6774:	10001926 	beq	r2,zero,67dc <OSFlagPend+0x294>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6778:	e0bfe503 	ldbu	r2,-108(fp)
    677c:	10800058 	cmpnei	r2,r2,1
    6780:	1000091e 	bne	r2,zero,67a8 <OSFlagPend+0x260>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6784:	e0bffc17 	ldw	r2,-16(fp)
    6788:	1080020b 	ldhu	r2,8(r2)
    678c:	1007883a 	mov	r3,r2
    6790:	e0bfe78b 	ldhu	r2,-98(fp)
    6794:	0084303a 	nor	r2,zero,r2
    6798:	1884703a 	and	r2,r3,r2
    679c:	1007883a 	mov	r3,r2
    67a0:	e0bffc17 	ldw	r2,-16(fp)
    67a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    67a8:	00800074 	movhi	r2,1
    67ac:	10866704 	addi	r2,r2,6556
    67b0:	10800017 	ldw	r2,0(r2)
    67b4:	e0ffe78b 	ldhu	r3,-98(fp)
    67b8:	10c00b0d 	sth	r3,44(r2)
    67bc:	e0bfe617 	ldw	r2,-104(fp)
    67c0:	e0bfec15 	stw	r2,-80(fp)
    67c4:	e0bfec17 	ldw	r2,-80(fp)
    67c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    67cc:	e0800217 	ldw	r2,8(fp)
    67d0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    67d4:	e0bfe78b 	ldhu	r2,-98(fp)
    67d8:	0000d606 	br	6b34 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    67dc:	e0fffd0b 	ldhu	r3,-12(fp)
    67e0:	e0bffe03 	ldbu	r2,-8(fp)
    67e4:	e13fff0b 	ldhu	r4,-4(fp)
    67e8:	e17ff704 	addi	r5,fp,-36
    67ec:	d9000015 	stw	r4,0(sp)
    67f0:	e13ffc17 	ldw	r4,-16(fp)
    67f4:	180d883a 	mov	r6,r3
    67f8:	100f883a 	mov	r7,r2
    67fc:	0006ffc0 	call	6ffc <OS_FlagBlock>
    6800:	e0bfe617 	ldw	r2,-104(fp)
    6804:	e0bfed15 	stw	r2,-76(fp)
    6808:	e0bfed17 	ldw	r2,-76(fp)
    680c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6810:	00006706 	br	69b0 <OSFlagPend+0x468>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6814:	e0bffc17 	ldw	r2,-16(fp)
    6818:	1080020b 	ldhu	r2,8(r2)
    681c:	0084303a 	nor	r2,zero,r2
    6820:	1007883a 	mov	r3,r2
    6824:	e0bffd0b 	ldhu	r2,-12(fp)
    6828:	1884703a 	and	r2,r3,r2
    682c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6830:	e0ffe78b 	ldhu	r3,-98(fp)
    6834:	e0bffd0b 	ldhu	r2,-12(fp)
    6838:	1880171e 	bne	r3,r2,6898 <OSFlagPend+0x350>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    683c:	e0bfe503 	ldbu	r2,-108(fp)
    6840:	10800058 	cmpnei	r2,r2,1
    6844:	1000071e 	bne	r2,zero,6864 <OSFlagPend+0x31c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6848:	e0bffc17 	ldw	r2,-16(fp)
    684c:	10c0020b 	ldhu	r3,8(r2)
    6850:	e0bfe78b 	ldhu	r2,-98(fp)
    6854:	1884b03a 	or	r2,r3,r2
    6858:	1007883a 	mov	r3,r2
    685c:	e0bffc17 	ldw	r2,-16(fp)
    6860:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6864:	00800074 	movhi	r2,1
    6868:	10866704 	addi	r2,r2,6556
    686c:	10800017 	ldw	r2,0(r2)
    6870:	e0ffe78b 	ldhu	r3,-98(fp)
    6874:	10c00b0d 	sth	r3,44(r2)
    6878:	e0bfe617 	ldw	r2,-104(fp)
    687c:	e0bfee15 	stw	r2,-72(fp)
    6880:	e0bfee17 	ldw	r2,-72(fp)
    6884:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6888:	e0800217 	ldw	r2,8(fp)
    688c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6890:	e0bfe78b 	ldhu	r2,-98(fp)
    6894:	0000a706 	br	6b34 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6898:	e0fffd0b 	ldhu	r3,-12(fp)
    689c:	e0bffe03 	ldbu	r2,-8(fp)
    68a0:	e13fff0b 	ldhu	r4,-4(fp)
    68a4:	e17ff704 	addi	r5,fp,-36
    68a8:	d9000015 	stw	r4,0(sp)
    68ac:	e13ffc17 	ldw	r4,-16(fp)
    68b0:	180d883a 	mov	r6,r3
    68b4:	100f883a 	mov	r7,r2
    68b8:	0006ffc0 	call	6ffc <OS_FlagBlock>
    68bc:	e0bfe617 	ldw	r2,-104(fp)
    68c0:	e0bfef15 	stw	r2,-68(fp)
    68c4:	e0bfef17 	ldw	r2,-68(fp)
    68c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    68cc:	00003806 	br	69b0 <OSFlagPend+0x468>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    68d0:	e0bffc17 	ldw	r2,-16(fp)
    68d4:	1080020b 	ldhu	r2,8(r2)
    68d8:	0084303a 	nor	r2,zero,r2
    68dc:	1007883a 	mov	r3,r2
    68e0:	e0bffd0b 	ldhu	r2,-12(fp)
    68e4:	1884703a 	and	r2,r3,r2
    68e8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    68ec:	e0bfe78b 	ldhu	r2,-98(fp)
    68f0:	10001726 	beq	r2,zero,6950 <OSFlagPend+0x408>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    68f4:	e0bfe503 	ldbu	r2,-108(fp)
    68f8:	10800058 	cmpnei	r2,r2,1
    68fc:	1000071e 	bne	r2,zero,691c <OSFlagPend+0x3d4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    6900:	e0bffc17 	ldw	r2,-16(fp)
    6904:	10c0020b 	ldhu	r3,8(r2)
    6908:	e0bfe78b 	ldhu	r2,-98(fp)
    690c:	1884b03a 	or	r2,r3,r2
    6910:	1007883a 	mov	r3,r2
    6914:	e0bffc17 	ldw	r2,-16(fp)
    6918:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    691c:	00800074 	movhi	r2,1
    6920:	10866704 	addi	r2,r2,6556
    6924:	10800017 	ldw	r2,0(r2)
    6928:	e0ffe78b 	ldhu	r3,-98(fp)
    692c:	10c00b0d 	sth	r3,44(r2)
    6930:	e0bfe617 	ldw	r2,-104(fp)
    6934:	e0bff015 	stw	r2,-64(fp)
    6938:	e0bff017 	ldw	r2,-64(fp)
    693c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6940:	e0800217 	ldw	r2,8(fp)
    6944:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6948:	e0bfe78b 	ldhu	r2,-98(fp)
    694c:	00007906 	br	6b34 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6950:	e0fffd0b 	ldhu	r3,-12(fp)
    6954:	e0bffe03 	ldbu	r2,-8(fp)
    6958:	e13fff0b 	ldhu	r4,-4(fp)
    695c:	e17ff704 	addi	r5,fp,-36
    6960:	d9000015 	stw	r4,0(sp)
    6964:	e13ffc17 	ldw	r4,-16(fp)
    6968:	180d883a 	mov	r6,r3
    696c:	100f883a 	mov	r7,r2
    6970:	0006ffc0 	call	6ffc <OS_FlagBlock>
    6974:	e0bfe617 	ldw	r2,-104(fp)
    6978:	e0bff115 	stw	r2,-60(fp)
    697c:	e0bff117 	ldw	r2,-60(fp)
    6980:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6984:	00000a06 	br	69b0 <OSFlagPend+0x468>
    6988:	e0bfe617 	ldw	r2,-104(fp)
    698c:	e0bff215 	stw	r2,-56(fp)
    6990:	e0bff217 	ldw	r2,-56(fp)
    6994:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6998:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    699c:	e0800217 	ldw	r2,8(fp)
    69a0:	00c01bc4 	movi	r3,111
    69a4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    69a8:	e0bfe78b 	ldhu	r2,-98(fp)
    69ac:	00006106 	br	6b34 <OSFlagPend+0x5ec>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    69b0:	00053d80 	call	53d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    69b4:	0005303a 	rdctl	r2,status
    69b8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    69bc:	e0fff317 	ldw	r3,-52(fp)
    69c0:	00bfff84 	movi	r2,-2
    69c4:	1884703a 	and	r2,r3,r2
    69c8:	1001703a 	wrctl	status,r2
  
  return context;
    69cc:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
    69d0:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    69d4:	00800074 	movhi	r2,1
    69d8:	10866704 	addi	r2,r2,6556
    69dc:	10800017 	ldw	r2,0(r2)
    69e0:	10800c43 	ldbu	r2,49(r2)
    69e4:	10803fcc 	andi	r2,r2,255
    69e8:	10002226 	beq	r2,zero,6a74 <OSFlagPend+0x52c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    69ec:	00800074 	movhi	r2,1
    69f0:	10866704 	addi	r2,r2,6556
    69f4:	10800017 	ldw	r2,0(r2)
    69f8:	10800c43 	ldbu	r2,49(r2)
    69fc:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6a00:	00800074 	movhi	r2,1
    6a04:	10866704 	addi	r2,r2,6556
    6a08:	10800017 	ldw	r2,0(r2)
    6a0c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    6a10:	e0bff704 	addi	r2,fp,-36
    6a14:	1009883a 	mov	r4,r2
    6a18:	00073ac0 	call	73ac <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    6a1c:	00800074 	movhi	r2,1
    6a20:	10866704 	addi	r2,r2,6556
    6a24:	10800017 	ldw	r2,0(r2)
    6a28:	10000c05 	stb	zero,48(r2)
    6a2c:	e0bfe617 	ldw	r2,-104(fp)
    6a30:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6a34:	e0bff417 	ldw	r2,-48(fp)
    6a38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    6a3c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
    6a40:	e0bfe803 	ldbu	r2,-96(fp)
    6a44:	108000a0 	cmpeqi	r2,r2,2
    6a48:	10000426 	beq	r2,zero,6a5c <OSFlagPend+0x514>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    6a4c:	e0800217 	ldw	r2,8(fp)
    6a50:	00c00384 	movi	r3,14
    6a54:	10c00005 	stb	r3,0(r2)
                 break;
    6a58:	00000406 	br	6a6c <OSFlagPend+0x524>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    6a5c:	e0800217 	ldw	r2,8(fp)
    6a60:	00c00284 	movi	r3,10
    6a64:	10c00005 	stb	r3,0(r2)
                 break;
    6a68:	0001883a 	nop
        }
        return (flags_rdy);
    6a6c:	e0bfe78b 	ldhu	r2,-98(fp)
    6a70:	00003006 	br	6b34 <OSFlagPend+0x5ec>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    6a74:	00800074 	movhi	r2,1
    6a78:	10866704 	addi	r2,r2,6556
    6a7c:	10800017 	ldw	r2,0(r2)
    6a80:	10800b0b 	ldhu	r2,44(r2)
    6a84:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    6a88:	e0bfe503 	ldbu	r2,-108(fp)
    6a8c:	10800058 	cmpnei	r2,r2,1
    6a90:	1000211e 	bne	r2,zero,6b18 <OSFlagPend+0x5d0>
        switch (wait_type) {
    6a94:	e0bffe03 	ldbu	r2,-8(fp)
    6a98:	10001616 	blt	r2,zero,6af4 <OSFlagPend+0x5ac>
    6a9c:	10c00090 	cmplti	r3,r2,2
    6aa0:	18000c1e 	bne	r3,zero,6ad4 <OSFlagPend+0x58c>
    6aa4:	10800108 	cmpgei	r2,r2,4
    6aa8:	1000121e 	bne	r2,zero,6af4 <OSFlagPend+0x5ac>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    6aac:	e0bffc17 	ldw	r2,-16(fp)
    6ab0:	1080020b 	ldhu	r2,8(r2)
    6ab4:	1007883a 	mov	r3,r2
    6ab8:	e0bfe78b 	ldhu	r2,-98(fp)
    6abc:	0084303a 	nor	r2,zero,r2
    6ac0:	1884703a 	and	r2,r3,r2
    6ac4:	1007883a 	mov	r3,r2
    6ac8:	e0bffc17 	ldw	r2,-16(fp)
    6acc:	10c0020d 	sth	r3,8(r2)
                 break;
    6ad0:	00001106 	br	6b18 <OSFlagPend+0x5d0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    6ad4:	e0bffc17 	ldw	r2,-16(fp)
    6ad8:	10c0020b 	ldhu	r3,8(r2)
    6adc:	e0bfe78b 	ldhu	r2,-98(fp)
    6ae0:	1884b03a 	or	r2,r3,r2
    6ae4:	1007883a 	mov	r3,r2
    6ae8:	e0bffc17 	ldw	r2,-16(fp)
    6aec:	10c0020d 	sth	r3,8(r2)
                 break;
    6af0:	00000906 	br	6b18 <OSFlagPend+0x5d0>
    6af4:	e0bfe617 	ldw	r2,-104(fp)
    6af8:	e0bff515 	stw	r2,-44(fp)
    6afc:	e0bff517 	ldw	r2,-44(fp)
    6b00:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    6b04:	e0800217 	ldw	r2,8(fp)
    6b08:	00c01bc4 	movi	r3,111
    6b0c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6b10:	0005883a 	mov	r2,zero
    6b14:	00000706 	br	6b34 <OSFlagPend+0x5ec>
    6b18:	e0bfe617 	ldw	r2,-104(fp)
    6b1c:	e0bff615 	stw	r2,-40(fp)
    6b20:	e0bff617 	ldw	r2,-40(fp)
    6b24:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    6b28:	e0800217 	ldw	r2,8(fp)
    6b2c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    6b30:	e0bfe78b 	ldhu	r2,-98(fp)
}
    6b34:	e037883a 	mov	sp,fp
    6b38:	dfc00117 	ldw	ra,4(sp)
    6b3c:	df000017 	ldw	fp,0(sp)
    6b40:	dec00204 	addi	sp,sp,8
    6b44:	f800283a 	ret

00006b48 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    6b48:	defffb04 	addi	sp,sp,-20
    6b4c:	df000415 	stw	fp,16(sp)
    6b50:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6b54:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6b58:	0005303a 	rdctl	r2,status
    6b5c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6b60:	e0fffe17 	ldw	r3,-8(fp)
    6b64:	00bfff84 	movi	r2,-2
    6b68:	1884703a 	and	r2,r3,r2
    6b6c:	1001703a 	wrctl	status,r2
  
  return context;
    6b70:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    6b74:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    6b78:	00800074 	movhi	r2,1
    6b7c:	10866704 	addi	r2,r2,6556
    6b80:	10800017 	ldw	r2,0(r2)
    6b84:	10800b0b 	ldhu	r2,44(r2)
    6b88:	e0bffd0d 	sth	r2,-12(fp)
    6b8c:	e0bffc17 	ldw	r2,-16(fp)
    6b90:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6b94:	e0bfff17 	ldw	r2,-4(fp)
    6b98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    6b9c:	e0bffd0b 	ldhu	r2,-12(fp)
}
    6ba0:	e037883a 	mov	sp,fp
    6ba4:	df000017 	ldw	fp,0(sp)
    6ba8:	dec00104 	addi	sp,sp,4
    6bac:	f800283a 	ret

00006bb0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    6bb0:	deffef04 	addi	sp,sp,-68
    6bb4:	dfc01015 	stw	ra,64(sp)
    6bb8:	df000f15 	stw	fp,60(sp)
    6bbc:	df000f04 	addi	fp,sp,60
    6bc0:	e13ffc15 	stw	r4,-16(fp)
    6bc4:	2807883a 	mov	r3,r5
    6bc8:	3005883a 	mov	r2,r6
    6bcc:	e1ffff15 	stw	r7,-4(fp)
    6bd0:	e0fffd0d 	sth	r3,-12(fp)
    6bd4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    6bd8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    6bdc:	e0bfff17 	ldw	r2,-4(fp)
    6be0:	1000021e 	bne	r2,zero,6bec <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    6be4:	0005883a 	mov	r2,zero
    6be8:	0000ce06 	br	6f24 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    6bec:	e0bffc17 	ldw	r2,-16(fp)
    6bf0:	1000051e 	bne	r2,zero,6c08 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6bf4:	e0bfff17 	ldw	r2,-4(fp)
    6bf8:	00c01b84 	movi	r3,110
    6bfc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6c00:	0005883a 	mov	r2,zero
    6c04:	0000c706 	br	6f24 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    6c08:	e0bffc17 	ldw	r2,-16(fp)
    6c0c:	10800003 	ldbu	r2,0(r2)
    6c10:	10803fcc 	andi	r2,r2,255
    6c14:	10800160 	cmpeqi	r2,r2,5
    6c18:	1000051e 	bne	r2,zero,6c30 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    6c1c:	e0bfff17 	ldw	r2,-4(fp)
    6c20:	00c00044 	movi	r3,1
    6c24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6c28:	0005883a 	mov	r2,zero
    6c2c:	0000bd06 	br	6f24 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6c30:	0005303a 	rdctl	r2,status
    6c34:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6c38:	e0fff617 	ldw	r3,-40(fp)
    6c3c:	00bfff84 	movi	r2,-2
    6c40:	1884703a 	and	r2,r3,r2
    6c44:	1001703a 	wrctl	status,r2
  
  return context;
    6c48:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6c4c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    6c50:	e0bffe03 	ldbu	r2,-8(fp)
    6c54:	10000326 	beq	r2,zero,6c64 <OSFlagPost+0xb4>
    6c58:	10800060 	cmpeqi	r2,r2,1
    6c5c:	10000b1e 	bne	r2,zero,6c8c <OSFlagPost+0xdc>
    6c60:	00001206 	br	6cac <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    6c64:	e0bffc17 	ldw	r2,-16(fp)
    6c68:	1080020b 	ldhu	r2,8(r2)
    6c6c:	1007883a 	mov	r3,r2
    6c70:	e0bffd0b 	ldhu	r2,-12(fp)
    6c74:	0084303a 	nor	r2,zero,r2
    6c78:	1884703a 	and	r2,r3,r2
    6c7c:	1007883a 	mov	r3,r2
    6c80:	e0bffc17 	ldw	r2,-16(fp)
    6c84:	10c0020d 	sth	r3,8(r2)
             break;
    6c88:	00001106 	br	6cd0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    6c8c:	e0bffc17 	ldw	r2,-16(fp)
    6c90:	10c0020b 	ldhu	r3,8(r2)
    6c94:	e0bffd0b 	ldhu	r2,-12(fp)
    6c98:	1884b03a 	or	r2,r3,r2
    6c9c:	1007883a 	mov	r3,r2
    6ca0:	e0bffc17 	ldw	r2,-16(fp)
    6ca4:	10c0020d 	sth	r3,8(r2)
             break;
    6ca8:	00000906 	br	6cd0 <OSFlagPost+0x120>
    6cac:	e0bff317 	ldw	r2,-52(fp)
    6cb0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6cb4:	e0bff717 	ldw	r2,-36(fp)
    6cb8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    6cbc:	e0bfff17 	ldw	r2,-4(fp)
    6cc0:	00c01c44 	movi	r3,113
    6cc4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    6cc8:	0005883a 	mov	r2,zero
    6ccc:	00009506 	br	6f24 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    6cd0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    6cd4:	e0bffc17 	ldw	r2,-16(fp)
    6cd8:	10800117 	ldw	r2,4(r2)
    6cdc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    6ce0:	00007406 	br	6eb4 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
    6ce4:	e0bff117 	ldw	r2,-60(fp)
    6ce8:	10800483 	ldbu	r2,18(r2)
    6cec:	10803fcc 	andi	r2,r2,255
    6cf0:	10c00060 	cmpeqi	r3,r2,1
    6cf4:	18004d1e 	bne	r3,zero,6e2c <OSFlagPost+0x27c>
    6cf8:	10c00088 	cmpgei	r3,r2,2
    6cfc:	1800021e 	bne	r3,zero,6d08 <OSFlagPost+0x158>
    6d00:	10003126 	beq	r2,zero,6dc8 <OSFlagPost+0x218>
    6d04:	00005f06 	br	6e84 <OSFlagPost+0x2d4>
    6d08:	10c000a0 	cmpeqi	r3,r2,2
    6d0c:	1800031e 	bne	r3,zero,6d1c <OSFlagPost+0x16c>
    6d10:	108000e0 	cmpeqi	r2,r2,3
    6d14:	1000181e 	bne	r2,zero,6d78 <OSFlagPost+0x1c8>
    6d18:	00005a06 	br	6e84 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6d1c:	e0bffc17 	ldw	r2,-16(fp)
    6d20:	10c0020b 	ldhu	r3,8(r2)
    6d24:	e0bff117 	ldw	r2,-60(fp)
    6d28:	1080040b 	ldhu	r2,16(r2)
    6d2c:	1884703a 	and	r2,r3,r2
    6d30:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    6d34:	e0bff117 	ldw	r2,-60(fp)
    6d38:	1080040b 	ldhu	r2,16(r2)
    6d3c:	10ffffcc 	andi	r3,r2,65535
    6d40:	e0bff40b 	ldhu	r2,-48(fp)
    6d44:	18800b1e 	bne	r3,r2,6d74 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6d48:	e0bff40b 	ldhu	r2,-48(fp)
    6d4c:	e13ff117 	ldw	r4,-60(fp)
    6d50:	100b883a 	mov	r5,r2
    6d54:	00072a00 	call	72a0 <OS_FlagTaskRdy>
    6d58:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    6d5c:	e0bff483 	ldbu	r2,-46(fp)
    6d60:	10800058 	cmpnei	r2,r2,1
    6d64:	1000031e 	bne	r2,zero,6d74 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6d68:	00800044 	movi	r2,1
    6d6c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6d70:	00004d06 	br	6ea8 <OSFlagPost+0x2f8>
    6d74:	00004c06 	br	6ea8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6d78:	e0bffc17 	ldw	r2,-16(fp)
    6d7c:	10c0020b 	ldhu	r3,8(r2)
    6d80:	e0bff117 	ldw	r2,-60(fp)
    6d84:	1080040b 	ldhu	r2,16(r2)
    6d88:	1884703a 	and	r2,r3,r2
    6d8c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    6d90:	e0bff40b 	ldhu	r2,-48(fp)
    6d94:	10000b26 	beq	r2,zero,6dc4 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6d98:	e0bff40b 	ldhu	r2,-48(fp)
    6d9c:	e13ff117 	ldw	r4,-60(fp)
    6da0:	100b883a 	mov	r5,r2
    6da4:	00072a00 	call	72a0 <OS_FlagTaskRdy>
    6da8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    6dac:	e0bff483 	ldbu	r2,-46(fp)
    6db0:	10800058 	cmpnei	r2,r2,1
    6db4:	1000031e 	bne	r2,zero,6dc4 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6db8:	00800044 	movi	r2,1
    6dbc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6dc0:	00003906 	br	6ea8 <OSFlagPost+0x2f8>
    6dc4:	00003806 	br	6ea8 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6dc8:	e0bffc17 	ldw	r2,-16(fp)
    6dcc:	1080020b 	ldhu	r2,8(r2)
    6dd0:	0084303a 	nor	r2,zero,r2
    6dd4:	1007883a 	mov	r3,r2
    6dd8:	e0bff117 	ldw	r2,-60(fp)
    6ddc:	1080040b 	ldhu	r2,16(r2)
    6de0:	1884703a 	and	r2,r3,r2
    6de4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    6de8:	e0bff117 	ldw	r2,-60(fp)
    6dec:	1080040b 	ldhu	r2,16(r2)
    6df0:	10ffffcc 	andi	r3,r2,65535
    6df4:	e0bff40b 	ldhu	r2,-48(fp)
    6df8:	18800b1e 	bne	r3,r2,6e28 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6dfc:	e0bff40b 	ldhu	r2,-48(fp)
    6e00:	e13ff117 	ldw	r4,-60(fp)
    6e04:	100b883a 	mov	r5,r2
    6e08:	00072a00 	call	72a0 <OS_FlagTaskRdy>
    6e0c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    6e10:	e0bff483 	ldbu	r2,-46(fp)
    6e14:	10800058 	cmpnei	r2,r2,1
    6e18:	1000031e 	bne	r2,zero,6e28 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6e1c:	00800044 	movi	r2,1
    6e20:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6e24:	00002006 	br	6ea8 <OSFlagPost+0x2f8>
    6e28:	00001f06 	br	6ea8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6e2c:	e0bffc17 	ldw	r2,-16(fp)
    6e30:	1080020b 	ldhu	r2,8(r2)
    6e34:	0084303a 	nor	r2,zero,r2
    6e38:	1007883a 	mov	r3,r2
    6e3c:	e0bff117 	ldw	r2,-60(fp)
    6e40:	1080040b 	ldhu	r2,16(r2)
    6e44:	1884703a 	and	r2,r3,r2
    6e48:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    6e4c:	e0bff40b 	ldhu	r2,-48(fp)
    6e50:	10000b26 	beq	r2,zero,6e80 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6e54:	e0bff40b 	ldhu	r2,-48(fp)
    6e58:	e13ff117 	ldw	r4,-60(fp)
    6e5c:	100b883a 	mov	r5,r2
    6e60:	00072a00 	call	72a0 <OS_FlagTaskRdy>
    6e64:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    6e68:	e0bff483 	ldbu	r2,-46(fp)
    6e6c:	10800058 	cmpnei	r2,r2,1
    6e70:	1000031e 	bne	r2,zero,6e80 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6e74:	00800044 	movi	r2,1
    6e78:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6e7c:	00000a06 	br	6ea8 <OSFlagPost+0x2f8>
    6e80:	00000906 	br	6ea8 <OSFlagPost+0x2f8>
    6e84:	e0bff317 	ldw	r2,-52(fp)
    6e88:	e0bff815 	stw	r2,-32(fp)
    6e8c:	e0bff817 	ldw	r2,-32(fp)
    6e90:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    6e94:	e0bfff17 	ldw	r2,-4(fp)
    6e98:	00c01bc4 	movi	r3,111
    6e9c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6ea0:	0005883a 	mov	r2,zero
    6ea4:	00001f06 	br	6f24 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    6ea8:	e0bff117 	ldw	r2,-60(fp)
    6eac:	10800017 	ldw	r2,0(r2)
    6eb0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    6eb4:	e0bff117 	ldw	r2,-60(fp)
    6eb8:	103f8a1e 	bne	r2,zero,6ce4 <__alt_data_end+0xfc006ce4>
    6ebc:	e0bff317 	ldw	r2,-52(fp)
    6ec0:	e0bff915 	stw	r2,-28(fp)
    6ec4:	e0bff917 	ldw	r2,-28(fp)
    6ec8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    6ecc:	e0bff203 	ldbu	r2,-56(fp)
    6ed0:	10800058 	cmpnei	r2,r2,1
    6ed4:	1000011e 	bne	r2,zero,6edc <OSFlagPost+0x32c>
        OS_Sched();
    6ed8:	00053d80 	call	53d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6edc:	0005303a 	rdctl	r2,status
    6ee0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6ee4:	e0fffa17 	ldw	r3,-24(fp)
    6ee8:	00bfff84 	movi	r2,-2
    6eec:	1884703a 	and	r2,r3,r2
    6ef0:	1001703a 	wrctl	status,r2
  
  return context;
    6ef4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    6ef8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    6efc:	e0bffc17 	ldw	r2,-16(fp)
    6f00:	1080020b 	ldhu	r2,8(r2)
    6f04:	e0bff50d 	sth	r2,-44(fp)
    6f08:	e0bff317 	ldw	r2,-52(fp)
    6f0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f10:	e0bffb17 	ldw	r2,-20(fp)
    6f14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    6f18:	e0bfff17 	ldw	r2,-4(fp)
    6f1c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    6f20:	e0bff50b 	ldhu	r2,-44(fp)
}
    6f24:	e037883a 	mov	sp,fp
    6f28:	dfc00117 	ldw	ra,4(sp)
    6f2c:	df000017 	ldw	fp,0(sp)
    6f30:	dec00204 	addi	sp,sp,8
    6f34:	f800283a 	ret

00006f38 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    6f38:	defff904 	addi	sp,sp,-28
    6f3c:	df000615 	stw	fp,24(sp)
    6f40:	df000604 	addi	fp,sp,24
    6f44:	e13ffe15 	stw	r4,-8(fp)
    6f48:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    6f4c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    6f50:	e0bfff17 	ldw	r2,-4(fp)
    6f54:	1000021e 	bne	r2,zero,6f60 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    6f58:	0005883a 	mov	r2,zero
    6f5c:	00002306 	br	6fec <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    6f60:	e0bffe17 	ldw	r2,-8(fp)
    6f64:	1000051e 	bne	r2,zero,6f7c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6f68:	e0bfff17 	ldw	r2,-4(fp)
    6f6c:	00c01b84 	movi	r3,110
    6f70:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6f74:	0005883a 	mov	r2,zero
    6f78:	00001c06 	br	6fec <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    6f7c:	e0bffe17 	ldw	r2,-8(fp)
    6f80:	10800003 	ldbu	r2,0(r2)
    6f84:	10803fcc 	andi	r2,r2,255
    6f88:	10800160 	cmpeqi	r2,r2,5
    6f8c:	1000051e 	bne	r2,zero,6fa4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    6f90:	e0bfff17 	ldw	r2,-4(fp)
    6f94:	00c00044 	movi	r3,1
    6f98:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6f9c:	0005883a 	mov	r2,zero
    6fa0:	00001206 	br	6fec <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6fa4:	0005303a 	rdctl	r2,status
    6fa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fac:	e0fffc17 	ldw	r3,-16(fp)
    6fb0:	00bfff84 	movi	r2,-2
    6fb4:	1884703a 	and	r2,r3,r2
    6fb8:	1001703a 	wrctl	status,r2
  
  return context;
    6fbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6fc0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    6fc4:	e0bffe17 	ldw	r2,-8(fp)
    6fc8:	1080020b 	ldhu	r2,8(r2)
    6fcc:	e0bffb0d 	sth	r2,-20(fp)
    6fd0:	e0bffa17 	ldw	r2,-24(fp)
    6fd4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6fd8:	e0bffd17 	ldw	r2,-12(fp)
    6fdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6fe0:	e0bfff17 	ldw	r2,-4(fp)
    6fe4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    6fe8:	e0bffb0b 	ldhu	r2,-20(fp)
}
    6fec:	e037883a 	mov	sp,fp
    6ff0:	df000017 	ldw	fp,0(sp)
    6ff4:	dec00104 	addi	sp,sp,4
    6ff8:	f800283a 	ret

00006ffc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    6ffc:	defff804 	addi	sp,sp,-32
    7000:	df000715 	stw	fp,28(sp)
    7004:	df000704 	addi	fp,sp,28
    7008:	e13ffb15 	stw	r4,-20(fp)
    700c:	e17ffc15 	stw	r5,-16(fp)
    7010:	3009883a 	mov	r4,r6
    7014:	3807883a 	mov	r3,r7
    7018:	e0800117 	ldw	r2,4(fp)
    701c:	e13ffd0d 	sth	r4,-12(fp)
    7020:	e0fffe05 	stb	r3,-8(fp)
    7024:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    7028:	00800074 	movhi	r2,1
    702c:	10866704 	addi	r2,r2,6556
    7030:	10800017 	ldw	r2,0(r2)
    7034:	00c00074 	movhi	r3,1
    7038:	18c66704 	addi	r3,r3,6556
    703c:	18c00017 	ldw	r3,0(r3)
    7040:	18c00c03 	ldbu	r3,48(r3)
    7044:	18c00814 	ori	r3,r3,32
    7048:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    704c:	00800074 	movhi	r2,1
    7050:	10866704 	addi	r2,r2,6556
    7054:	10800017 	ldw	r2,0(r2)
    7058:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    705c:	00800074 	movhi	r2,1
    7060:	10866704 	addi	r2,r2,6556
    7064:	10800017 	ldw	r2,0(r2)
    7068:	e0ffff0b 	ldhu	r3,-4(fp)
    706c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    7070:	00800074 	movhi	r2,1
    7074:	10866704 	addi	r2,r2,6556
    7078:	10800017 	ldw	r2,0(r2)
    707c:	e0fffc17 	ldw	r3,-16(fp)
    7080:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    7084:	e0bffc17 	ldw	r2,-16(fp)
    7088:	e0fffd0b 	ldhu	r3,-12(fp)
    708c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    7090:	e0bffc17 	ldw	r2,-16(fp)
    7094:	e0fffe03 	ldbu	r3,-8(fp)
    7098:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    709c:	00800074 	movhi	r2,1
    70a0:	10866704 	addi	r2,r2,6556
    70a4:	10c00017 	ldw	r3,0(r2)
    70a8:	e0bffc17 	ldw	r2,-16(fp)
    70ac:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    70b0:	e0bffb17 	ldw	r2,-20(fp)
    70b4:	10c00117 	ldw	r3,4(r2)
    70b8:	e0bffc17 	ldw	r2,-16(fp)
    70bc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    70c0:	e0bffc17 	ldw	r2,-16(fp)
    70c4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    70c8:	e0bffc17 	ldw	r2,-16(fp)
    70cc:	e0fffb17 	ldw	r3,-20(fp)
    70d0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    70d4:	e0bffb17 	ldw	r2,-20(fp)
    70d8:	10800117 	ldw	r2,4(r2)
    70dc:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    70e0:	e0bff917 	ldw	r2,-28(fp)
    70e4:	10000326 	beq	r2,zero,70f4 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    70e8:	e0bff917 	ldw	r2,-28(fp)
    70ec:	e0fffc17 	ldw	r3,-16(fp)
    70f0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    70f4:	e0bffb17 	ldw	r2,-20(fp)
    70f8:	e0fffc17 	ldw	r3,-16(fp)
    70fc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    7100:	00800074 	movhi	r2,1
    7104:	10866704 	addi	r2,r2,6556
    7108:	10800017 	ldw	r2,0(r2)
    710c:	10800d03 	ldbu	r2,52(r2)
    7110:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    7114:	e0bffa03 	ldbu	r2,-24(fp)
    7118:	e0fffa03 	ldbu	r3,-24(fp)
    711c:	01000074 	movhi	r4,1
    7120:	21066444 	addi	r4,r4,6545
    7124:	20c7883a 	add	r3,r4,r3
    7128:	18c00003 	ldbu	r3,0(r3)
    712c:	1809883a 	mov	r4,r3
    7130:	00c00074 	movhi	r3,1
    7134:	18c66704 	addi	r3,r3,6556
    7138:	18c00017 	ldw	r3,0(r3)
    713c:	18c00d43 	ldbu	r3,53(r3)
    7140:	00c6303a 	nor	r3,zero,r3
    7144:	20c6703a 	and	r3,r4,r3
    7148:	01000074 	movhi	r4,1
    714c:	21066444 	addi	r4,r4,6545
    7150:	2085883a 	add	r2,r4,r2
    7154:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    7158:	e0bffa03 	ldbu	r2,-24(fp)
    715c:	00c00074 	movhi	r3,1
    7160:	18c66444 	addi	r3,r3,6545
    7164:	1885883a 	add	r2,r3,r2
    7168:	10800003 	ldbu	r2,0(r2)
    716c:	10803fcc 	andi	r2,r2,255
    7170:	10000e1e 	bne	r2,zero,71ac <OS_FlagBlock+0x1b0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    7174:	00800074 	movhi	r2,1
    7178:	10866704 	addi	r2,r2,6556
    717c:	10800017 	ldw	r2,0(r2)
    7180:	10800d83 	ldbu	r2,54(r2)
    7184:	0084303a 	nor	r2,zero,r2
    7188:	1007883a 	mov	r3,r2
    718c:	00800074 	movhi	r2,1
    7190:	10866404 	addi	r2,r2,6544
    7194:	10800003 	ldbu	r2,0(r2)
    7198:	1884703a 	and	r2,r3,r2
    719c:	1007883a 	mov	r3,r2
    71a0:	00800074 	movhi	r2,1
    71a4:	10866404 	addi	r2,r2,6544
    71a8:	10c00005 	stb	r3,0(r2)
    }
}
    71ac:	e037883a 	mov	sp,fp
    71b0:	df000017 	ldw	fp,0(sp)
    71b4:	dec00104 	addi	sp,sp,4
    71b8:	f800283a 	ret

000071bc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    71bc:	defffb04 	addi	sp,sp,-20
    71c0:	dfc00415 	stw	ra,16(sp)
    71c4:	df000315 	stw	fp,12(sp)
    71c8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    71cc:	01000074 	movhi	r4,1
    71d0:	21167904 	addi	r4,r4,23012
    71d4:	0140dc04 	movi	r5,880
    71d8:	00053240 	call	5324 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    71dc:	00800074 	movhi	r2,1
    71e0:	10967904 	addi	r2,r2,23012
    71e4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    71e8:	00800074 	movhi	r2,1
    71ec:	10968404 	addi	r2,r2,23056
    71f0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    71f4:	e03ffd0d 	sth	zero,-12(fp)
    71f8:	00001306 	br	7248 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    71fc:	e0bffe17 	ldw	r2,-8(fp)
    7200:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    7204:	e0bffe17 	ldw	r2,-8(fp)
    7208:	e0ffff17 	ldw	r3,-4(fp)
    720c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    7210:	e0bffe17 	ldw	r2,-8(fp)
    7214:	00c00fc4 	movi	r3,63
    7218:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    721c:	e0bffe17 	ldw	r2,-8(fp)
    7220:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    7224:	e0bffe17 	ldw	r2,-8(fp)
    7228:	10800b04 	addi	r2,r2,44
    722c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    7230:	e0bfff17 	ldw	r2,-4(fp)
    7234:	10800b04 	addi	r2,r2,44
    7238:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    723c:	e0bffd0b 	ldhu	r2,-12(fp)
    7240:	10800044 	addi	r2,r2,1
    7244:	e0bffd0d 	sth	r2,-12(fp)
    7248:	e0bffd0b 	ldhu	r2,-12(fp)
    724c:	108004f0 	cmpltui	r2,r2,19
    7250:	103fea1e 	bne	r2,zero,71fc <__alt_data_end+0xfc0071fc>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7254:	e0bffe17 	ldw	r2,-8(fp)
    7258:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    725c:	e0bffe17 	ldw	r2,-8(fp)
    7260:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    7264:	e0bffe17 	ldw	r2,-8(fp)
    7268:	00c00fc4 	movi	r3,63
    726c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    7270:	e0bffe17 	ldw	r2,-8(fp)
    7274:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    7278:	00800074 	movhi	r2,1
    727c:	10866904 	addi	r2,r2,6564
    7280:	00c00074 	movhi	r3,1
    7284:	18d67904 	addi	r3,r3,23012
    7288:	10c00015 	stw	r3,0(r2)
#endif
}
    728c:	e037883a 	mov	sp,fp
    7290:	dfc00117 	ldw	ra,4(sp)
    7294:	df000017 	ldw	fp,0(sp)
    7298:	dec00204 	addi	sp,sp,8
    729c:	f800283a 	ret

000072a0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    72a0:	defffa04 	addi	sp,sp,-24
    72a4:	dfc00515 	stw	ra,20(sp)
    72a8:	df000415 	stw	fp,16(sp)
    72ac:	df000404 	addi	fp,sp,16
    72b0:	e13ffe15 	stw	r4,-8(fp)
    72b4:	2805883a 	mov	r2,r5
    72b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    72bc:	e0bffe17 	ldw	r2,-8(fp)
    72c0:	10800217 	ldw	r2,8(r2)
    72c4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    72c8:	e0bffd17 	ldw	r2,-12(fp)
    72cc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    72d0:	e0bffd17 	ldw	r2,-12(fp)
    72d4:	e0ffff0b 	ldhu	r3,-4(fp)
    72d8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    72dc:	e0bffd17 	ldw	r2,-12(fp)
    72e0:	10c00c03 	ldbu	r3,48(r2)
    72e4:	00bff7c4 	movi	r2,-33
    72e8:	1884703a 	and	r2,r3,r2
    72ec:	1007883a 	mov	r3,r2
    72f0:	e0bffd17 	ldw	r2,-12(fp)
    72f4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    72f8:	e0bffd17 	ldw	r2,-12(fp)
    72fc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    7300:	e0bffd17 	ldw	r2,-12(fp)
    7304:	10800c03 	ldbu	r2,48(r2)
    7308:	10803fcc 	andi	r2,r2,255
    730c:	10001e1e 	bne	r2,zero,7388 <OS_FlagTaskRdy+0xe8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    7310:	e0bffd17 	ldw	r2,-12(fp)
    7314:	10c00d83 	ldbu	r3,54(r2)
    7318:	00800074 	movhi	r2,1
    731c:	10866404 	addi	r2,r2,6544
    7320:	10800003 	ldbu	r2,0(r2)
    7324:	1884b03a 	or	r2,r3,r2
    7328:	1007883a 	mov	r3,r2
    732c:	00800074 	movhi	r2,1
    7330:	10866404 	addi	r2,r2,6544
    7334:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7338:	e0bffd17 	ldw	r2,-12(fp)
    733c:	10800d03 	ldbu	r2,52(r2)
    7340:	10803fcc 	andi	r2,r2,255
    7344:	e0fffd17 	ldw	r3,-12(fp)
    7348:	18c00d03 	ldbu	r3,52(r3)
    734c:	18c03fcc 	andi	r3,r3,255
    7350:	01000074 	movhi	r4,1
    7354:	21066444 	addi	r4,r4,6545
    7358:	20c7883a 	add	r3,r4,r3
    735c:	19000003 	ldbu	r4,0(r3)
    7360:	e0fffd17 	ldw	r3,-12(fp)
    7364:	18c00d43 	ldbu	r3,53(r3)
    7368:	20c6b03a 	or	r3,r4,r3
    736c:	01000074 	movhi	r4,1
    7370:	21066444 	addi	r4,r4,6545
    7374:	2085883a 	add	r2,r4,r2
    7378:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
    737c:	00800044 	movi	r2,1
    7380:	e0bffc05 	stb	r2,-16(fp)
    7384:	00000106 	br	738c <OS_FlagTaskRdy+0xec>
    } else {
        sched                   = OS_FALSE;
    7388:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    738c:	e13ffe17 	ldw	r4,-8(fp)
    7390:	00073ac0 	call	73ac <OS_FlagUnlink>
    return (sched);
    7394:	e0bffc03 	ldbu	r2,-16(fp)
}
    7398:	e037883a 	mov	sp,fp
    739c:	dfc00117 	ldw	ra,4(sp)
    73a0:	df000017 	ldw	fp,0(sp)
    73a4:	dec00204 	addi	sp,sp,8
    73a8:	f800283a 	ret

000073ac <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    73ac:	defffa04 	addi	sp,sp,-24
    73b0:	df000515 	stw	fp,20(sp)
    73b4:	df000504 	addi	fp,sp,20
    73b8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    73bc:	e0bfff17 	ldw	r2,-4(fp)
    73c0:	10800117 	ldw	r2,4(r2)
    73c4:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    73c8:	e0bfff17 	ldw	r2,-4(fp)
    73cc:	10800017 	ldw	r2,0(r2)
    73d0:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    73d4:	e0bffb17 	ldw	r2,-20(fp)
    73d8:	10000b1e 	bne	r2,zero,7408 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    73dc:	e0bfff17 	ldw	r2,-4(fp)
    73e0:	10800317 	ldw	r2,12(r2)
    73e4:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    73e8:	e0bffd17 	ldw	r2,-12(fp)
    73ec:	e0fffc17 	ldw	r3,-16(fp)
    73f0:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    73f4:	e0bffc17 	ldw	r2,-16(fp)
    73f8:	10000b26 	beq	r2,zero,7428 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    73fc:	e0bffc17 	ldw	r2,-16(fp)
    7400:	10000115 	stw	zero,4(r2)
    7404:	00000806 	br	7428 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    7408:	e0bffb17 	ldw	r2,-20(fp)
    740c:	e0fffc17 	ldw	r3,-16(fp)
    7410:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    7414:	e0bffc17 	ldw	r2,-16(fp)
    7418:	10000326 	beq	r2,zero,7428 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    741c:	e0bffc17 	ldw	r2,-16(fp)
    7420:	e0fffb17 	ldw	r3,-20(fp)
    7424:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    7428:	e0bfff17 	ldw	r2,-4(fp)
    742c:	10800217 	ldw	r2,8(r2)
    7430:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    7434:	e0bffe17 	ldw	r2,-8(fp)
    7438:	10000a15 	stw	zero,40(r2)
#endif
}
    743c:	e037883a 	mov	sp,fp
    7440:	df000017 	ldw	fp,0(sp)
    7444:	dec00104 	addi	sp,sp,4
    7448:	f800283a 	ret

0000744c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    744c:	defff404 	addi	sp,sp,-48
    7450:	df000b15 	stw	fp,44(sp)
    7454:	df000b04 	addi	fp,sp,44
    7458:	e13ffc15 	stw	r4,-16(fp)
    745c:	e17ffd15 	stw	r5,-12(fp)
    7460:	e1bffe15 	stw	r6,-8(fp)
    7464:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7468:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    746c:	e0bfff17 	ldw	r2,-4(fp)
    7470:	1000021e 	bne	r2,zero,747c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    7474:	0005883a 	mov	r2,zero
    7478:	00006d06 	br	7630 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    747c:	e0bffc17 	ldw	r2,-16(fp)
    7480:	1000051e 	bne	r2,zero,7498 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7484:	e0bfff17 	ldw	r2,-4(fp)
    7488:	00c01884 	movi	r3,98
    748c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7490:	0005883a 	mov	r2,zero
    7494:	00006606 	br	7630 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    7498:	e0bffc17 	ldw	r2,-16(fp)
    749c:	108000cc 	andi	r2,r2,3
    74a0:	10000526 	beq	r2,zero,74b8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    74a4:	e0bfff17 	ldw	r2,-4(fp)
    74a8:	00c01884 	movi	r3,98
    74ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    74b0:	0005883a 	mov	r2,zero
    74b4:	00005e06 	br	7630 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    74b8:	e0bffd17 	ldw	r2,-12(fp)
    74bc:	108000a8 	cmpgeui	r2,r2,2
    74c0:	1000051e 	bne	r2,zero,74d8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    74c4:	e0bfff17 	ldw	r2,-4(fp)
    74c8:	00c016c4 	movi	r3,91
    74cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    74d0:	0005883a 	mov	r2,zero
    74d4:	00005606 	br	7630 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    74d8:	e0bffe17 	ldw	r2,-8(fp)
    74dc:	10800128 	cmpgeui	r2,r2,4
    74e0:	1000051e 	bne	r2,zero,74f8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    74e4:	e0bfff17 	ldw	r2,-4(fp)
    74e8:	00c01704 	movi	r3,92
    74ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    74f0:	0005883a 	mov	r2,zero
    74f4:	00004e06 	br	7630 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    74f8:	0005303a 	rdctl	r2,status
    74fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7500:	e0fffa17 	ldw	r3,-24(fp)
    7504:	00bfff84 	movi	r2,-2
    7508:	1884703a 	and	r2,r3,r2
    750c:	1001703a 	wrctl	status,r2
  
  return context;
    7510:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7514:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    7518:	00800074 	movhi	r2,1
    751c:	10866104 	addi	r2,r2,6532
    7520:	10800017 	ldw	r2,0(r2)
    7524:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    7528:	00800074 	movhi	r2,1
    752c:	10866104 	addi	r2,r2,6532
    7530:	10800017 	ldw	r2,0(r2)
    7534:	10000726 	beq	r2,zero,7554 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    7538:	00800074 	movhi	r2,1
    753c:	10866104 	addi	r2,r2,6532
    7540:	10800017 	ldw	r2,0(r2)
    7544:	10c00117 	ldw	r3,4(r2)
    7548:	00800074 	movhi	r2,1
    754c:	10866104 	addi	r2,r2,6532
    7550:	10c00015 	stw	r3,0(r2)
    7554:	e0bff817 	ldw	r2,-32(fp)
    7558:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    755c:	e0bffb17 	ldw	r2,-20(fp)
    7560:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    7564:	e0bff917 	ldw	r2,-28(fp)
    7568:	1000051e 	bne	r2,zero,7580 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    756c:	e0bfff17 	ldw	r2,-4(fp)
    7570:	00c01684 	movi	r3,90
    7574:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7578:	0005883a 	mov	r2,zero
    757c:	00002c06 	br	7630 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    7580:	e0bffc17 	ldw	r2,-16(fp)
    7584:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    7588:	e0fffc17 	ldw	r3,-16(fp)
    758c:	e0bffe17 	ldw	r2,-8(fp)
    7590:	1885883a 	add	r2,r3,r2
    7594:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    7598:	e03ff715 	stw	zero,-36(fp)
    759c:	00000c06 	br	75d0 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    75a0:	e0bff617 	ldw	r2,-40(fp)
    75a4:	e0fff517 	ldw	r3,-44(fp)
    75a8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    75ac:	e0bff517 	ldw	r2,-44(fp)
    75b0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    75b4:	e0fff517 	ldw	r3,-44(fp)
    75b8:	e0bffe17 	ldw	r2,-8(fp)
    75bc:	1885883a 	add	r2,r3,r2
    75c0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    75c4:	e0bff717 	ldw	r2,-36(fp)
    75c8:	10800044 	addi	r2,r2,1
    75cc:	e0bff715 	stw	r2,-36(fp)
    75d0:	e0bffd17 	ldw	r2,-12(fp)
    75d4:	10bfffc4 	addi	r2,r2,-1
    75d8:	e0fff717 	ldw	r3,-36(fp)
    75dc:	18bff036 	bltu	r3,r2,75a0 <__alt_data_end+0xfc0075a0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    75e0:	e0bff617 	ldw	r2,-40(fp)
    75e4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    75e8:	e0bff917 	ldw	r2,-28(fp)
    75ec:	e0fffc17 	ldw	r3,-16(fp)
    75f0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    75f4:	e0bff917 	ldw	r2,-28(fp)
    75f8:	e0fffc17 	ldw	r3,-16(fp)
    75fc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    7600:	e0bff917 	ldw	r2,-28(fp)
    7604:	e0fffd17 	ldw	r3,-12(fp)
    7608:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    760c:	e0bff917 	ldw	r2,-28(fp)
    7610:	e0fffd17 	ldw	r3,-12(fp)
    7614:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    7618:	e0bff917 	ldw	r2,-28(fp)
    761c:	e0fffe17 	ldw	r3,-8(fp)
    7620:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    7624:	e0bfff17 	ldw	r2,-4(fp)
    7628:	10000005 	stb	zero,0(r2)
    return (pmem);
    762c:	e0bff917 	ldw	r2,-28(fp)
}
    7630:	e037883a 	mov	sp,fp
    7634:	df000017 	ldw	fp,0(sp)
    7638:	dec00104 	addi	sp,sp,4
    763c:	f800283a 	ret

00007640 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    7640:	defff804 	addi	sp,sp,-32
    7644:	df000715 	stw	fp,28(sp)
    7648:	df000704 	addi	fp,sp,28
    764c:	e13ffe15 	stw	r4,-8(fp)
    7650:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7654:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7658:	e0bfff17 	ldw	r2,-4(fp)
    765c:	1000021e 	bne	r2,zero,7668 <OSMemGet+0x28>
        return ((void *)0);
    7660:	0005883a 	mov	r2,zero
    7664:	00002e06 	br	7720 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    7668:	e0bffe17 	ldw	r2,-8(fp)
    766c:	1000051e 	bne	r2,zero,7684 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7670:	e0bfff17 	ldw	r2,-4(fp)
    7674:	00c01804 	movi	r3,96
    7678:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    767c:	0005883a 	mov	r2,zero
    7680:	00002706 	br	7720 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7684:	0005303a 	rdctl	r2,status
    7688:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    768c:	e0fffb17 	ldw	r3,-20(fp)
    7690:	00bfff84 	movi	r2,-2
    7694:	1884703a 	and	r2,r3,r2
    7698:	1001703a 	wrctl	status,r2
  
  return context;
    769c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    76a0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    76a4:	e0bffe17 	ldw	r2,-8(fp)
    76a8:	10800417 	ldw	r2,16(r2)
    76ac:	10001426 	beq	r2,zero,7700 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    76b0:	e0bffe17 	ldw	r2,-8(fp)
    76b4:	10800117 	ldw	r2,4(r2)
    76b8:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    76bc:	e0bffa17 	ldw	r2,-24(fp)
    76c0:	10c00017 	ldw	r3,0(r2)
    76c4:	e0bffe17 	ldw	r2,-8(fp)
    76c8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    76cc:	e0bffe17 	ldw	r2,-8(fp)
    76d0:	10800417 	ldw	r2,16(r2)
    76d4:	10ffffc4 	addi	r3,r2,-1
    76d8:	e0bffe17 	ldw	r2,-8(fp)
    76dc:	10c00415 	stw	r3,16(r2)
    76e0:	e0bff917 	ldw	r2,-28(fp)
    76e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    76e8:	e0bffc17 	ldw	r2,-16(fp)
    76ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    76f0:	e0bfff17 	ldw	r2,-4(fp)
    76f4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    76f8:	e0bffa17 	ldw	r2,-24(fp)
    76fc:	00000806 	br	7720 <OSMemGet+0xe0>
    7700:	e0bff917 	ldw	r2,-28(fp)
    7704:	e0bffd15 	stw	r2,-12(fp)
    7708:	e0bffd17 	ldw	r2,-12(fp)
    770c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    7710:	e0bfff17 	ldw	r2,-4(fp)
    7714:	00c01744 	movi	r3,93
    7718:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    771c:	0005883a 	mov	r2,zero
}
    7720:	e037883a 	mov	sp,fp
    7724:	df000017 	ldw	fp,0(sp)
    7728:	dec00104 	addi	sp,sp,4
    772c:	f800283a 	ret

00007730 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7730:	defff704 	addi	sp,sp,-36
    7734:	dfc00815 	stw	ra,32(sp)
    7738:	df000715 	stw	fp,28(sp)
    773c:	df000704 	addi	fp,sp,28
    7740:	e13ffd15 	stw	r4,-12(fp)
    7744:	e17ffe15 	stw	r5,-8(fp)
    7748:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    774c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7750:	e0bfff17 	ldw	r2,-4(fp)
    7754:	1000021e 	bne	r2,zero,7760 <OSMemNameGet+0x30>
        return (0);
    7758:	0005883a 	mov	r2,zero
    775c:	00002d06 	br	7814 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7760:	e0bffd17 	ldw	r2,-12(fp)
    7764:	1000051e 	bne	r2,zero,777c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7768:	e0bfff17 	ldw	r2,-4(fp)
    776c:	00c01804 	movi	r3,96
    7770:	10c00005 	stb	r3,0(r2)
        return (0);
    7774:	0005883a 	mov	r2,zero
    7778:	00002606 	br	7814 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    777c:	e0bffe17 	ldw	r2,-8(fp)
    7780:	1000051e 	bne	r2,zero,7798 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    7784:	e0bfff17 	ldw	r2,-4(fp)
    7788:	00c00304 	movi	r3,12
    778c:	10c00005 	stb	r3,0(r2)
        return (0);
    7790:	0005883a 	mov	r2,zero
    7794:	00001f06 	br	7814 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7798:	00800074 	movhi	r2,1
    779c:	10866604 	addi	r2,r2,6552
    77a0:	10800003 	ldbu	r2,0(r2)
    77a4:	10803fcc 	andi	r2,r2,255
    77a8:	10000526 	beq	r2,zero,77c0 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    77ac:	e0bfff17 	ldw	r2,-4(fp)
    77b0:	00c00444 	movi	r3,17
    77b4:	10c00005 	stb	r3,0(r2)
        return (0);
    77b8:	0005883a 	mov	r2,zero
    77bc:	00001506 	br	7814 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    77c0:	0005303a 	rdctl	r2,status
    77c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    77c8:	e0fffb17 	ldw	r3,-20(fp)
    77cc:	00bfff84 	movi	r2,-2
    77d0:	1884703a 	and	r2,r3,r2
    77d4:	1001703a 	wrctl	status,r2
  
  return context;
    77d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    77dc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    77e0:	e0bffd17 	ldw	r2,-12(fp)
    77e4:	10800504 	addi	r2,r2,20
    77e8:	e13ffe17 	ldw	r4,-8(fp)
    77ec:	100b883a 	mov	r5,r2
    77f0:	00055140 	call	5514 <OS_StrCopy>
    77f4:	e0bffa05 	stb	r2,-24(fp)
    77f8:	e0bff917 	ldw	r2,-28(fp)
    77fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7800:	e0bffc17 	ldw	r2,-16(fp)
    7804:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7808:	e0bfff17 	ldw	r2,-4(fp)
    780c:	10000005 	stb	zero,0(r2)
    return (len);
    7810:	e0bffa03 	ldbu	r2,-24(fp)
}
    7814:	e037883a 	mov	sp,fp
    7818:	dfc00117 	ldw	ra,4(sp)
    781c:	df000017 	ldw	fp,0(sp)
    7820:	dec00204 	addi	sp,sp,8
    7824:	f800283a 	ret

00007828 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7828:	defff604 	addi	sp,sp,-40
    782c:	dfc00915 	stw	ra,36(sp)
    7830:	df000815 	stw	fp,32(sp)
    7834:	df000804 	addi	fp,sp,32
    7838:	e13ffd15 	stw	r4,-12(fp)
    783c:	e17ffe15 	stw	r5,-8(fp)
    7840:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7844:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7848:	e0bfff17 	ldw	r2,-4(fp)
    784c:	1000011e 	bne	r2,zero,7854 <OSMemNameSet+0x2c>
        return;
    7850:	00003606 	br	792c <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7854:	e0bffd17 	ldw	r2,-12(fp)
    7858:	1000041e 	bne	r2,zero,786c <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    785c:	e0bfff17 	ldw	r2,-4(fp)
    7860:	00c01804 	movi	r3,96
    7864:	10c00005 	stb	r3,0(r2)
        return;
    7868:	00003006 	br	792c <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    786c:	e0bffe17 	ldw	r2,-8(fp)
    7870:	1000041e 	bne	r2,zero,7884 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    7874:	e0bfff17 	ldw	r2,-4(fp)
    7878:	00c00304 	movi	r3,12
    787c:	10c00005 	stb	r3,0(r2)
        return;
    7880:	00002a06 	br	792c <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7884:	00800074 	movhi	r2,1
    7888:	10866604 	addi	r2,r2,6552
    788c:	10800003 	ldbu	r2,0(r2)
    7890:	10803fcc 	andi	r2,r2,255
    7894:	10000426 	beq	r2,zero,78a8 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    7898:	e0bfff17 	ldw	r2,-4(fp)
    789c:	00c00484 	movi	r3,18
    78a0:	10c00005 	stb	r3,0(r2)
        return;
    78a4:	00002106 	br	792c <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    78a8:	0005303a 	rdctl	r2,status
    78ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    78b0:	e0fffa17 	ldw	r3,-24(fp)
    78b4:	00bfff84 	movi	r2,-2
    78b8:	1884703a 	and	r2,r3,r2
    78bc:	1001703a 	wrctl	status,r2
  
  return context;
    78c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    78c4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    78c8:	e13ffe17 	ldw	r4,-8(fp)
    78cc:	00055880 	call	5588 <OS_StrLen>
    78d0:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    78d4:	e0bff903 	ldbu	r2,-28(fp)
    78d8:	10800830 	cmpltui	r2,r2,32
    78dc:	1000081e 	bne	r2,zero,7900 <OSMemNameSet+0xd8>
    78e0:	e0bff817 	ldw	r2,-32(fp)
    78e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    78e8:	e0bffb17 	ldw	r2,-20(fp)
    78ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    78f0:	e0bfff17 	ldw	r2,-4(fp)
    78f4:	00c018c4 	movi	r3,99
    78f8:	10c00005 	stb	r3,0(r2)
        return;
    78fc:	00000b06 	br	792c <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    7900:	e0bffd17 	ldw	r2,-12(fp)
    7904:	10800504 	addi	r2,r2,20
    7908:	1009883a 	mov	r4,r2
    790c:	e17ffe17 	ldw	r5,-8(fp)
    7910:	00055140 	call	5514 <OS_StrCopy>
    7914:	e0bff817 	ldw	r2,-32(fp)
    7918:	e0bffc15 	stw	r2,-16(fp)
    791c:	e0bffc17 	ldw	r2,-16(fp)
    7920:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7924:	e0bfff17 	ldw	r2,-4(fp)
    7928:	10000005 	stb	zero,0(r2)
}
    792c:	e037883a 	mov	sp,fp
    7930:	dfc00117 	ldw	ra,4(sp)
    7934:	df000017 	ldw	fp,0(sp)
    7938:	dec00204 	addi	sp,sp,8
    793c:	f800283a 	ret

00007940 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    7940:	defff904 	addi	sp,sp,-28
    7944:	df000615 	stw	fp,24(sp)
    7948:	df000604 	addi	fp,sp,24
    794c:	e13ffe15 	stw	r4,-8(fp)
    7950:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7954:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7958:	e0bffe17 	ldw	r2,-8(fp)
    795c:	1000021e 	bne	r2,zero,7968 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7960:	00801804 	movi	r2,96
    7964:	00002806 	br	7a08 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    7968:	e0bfff17 	ldw	r2,-4(fp)
    796c:	1000021e 	bne	r2,zero,7978 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    7970:	008017c4 	movi	r2,95
    7974:	00002406 	br	7a08 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7978:	0005303a 	rdctl	r2,status
    797c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7980:	e0fffb17 	ldw	r3,-20(fp)
    7984:	00bfff84 	movi	r2,-2
    7988:	1884703a 	and	r2,r3,r2
    798c:	1001703a 	wrctl	status,r2
  
  return context;
    7990:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7994:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    7998:	e0bffe17 	ldw	r2,-8(fp)
    799c:	10c00417 	ldw	r3,16(r2)
    79a0:	e0bffe17 	ldw	r2,-8(fp)
    79a4:	10800317 	ldw	r2,12(r2)
    79a8:	18800636 	bltu	r3,r2,79c4 <OSMemPut+0x84>
    79ac:	e0bffa17 	ldw	r2,-24(fp)
    79b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    79b4:	e0bffc17 	ldw	r2,-16(fp)
    79b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    79bc:	00801784 	movi	r2,94
    79c0:	00001106 	br	7a08 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    79c4:	e0bffe17 	ldw	r2,-8(fp)
    79c8:	10c00117 	ldw	r3,4(r2)
    79cc:	e0bfff17 	ldw	r2,-4(fp)
    79d0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    79d4:	e0bffe17 	ldw	r2,-8(fp)
    79d8:	e0ffff17 	ldw	r3,-4(fp)
    79dc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    79e0:	e0bffe17 	ldw	r2,-8(fp)
    79e4:	10800417 	ldw	r2,16(r2)
    79e8:	10c00044 	addi	r3,r2,1
    79ec:	e0bffe17 	ldw	r2,-8(fp)
    79f0:	10c00415 	stw	r3,16(r2)
    79f4:	e0bffa17 	ldw	r2,-24(fp)
    79f8:	e0bffd15 	stw	r2,-12(fp)
    79fc:	e0bffd17 	ldw	r2,-12(fp)
    7a00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    7a04:	0005883a 	mov	r2,zero
}
    7a08:	e037883a 	mov	sp,fp
    7a0c:	df000017 	ldw	fp,0(sp)
    7a10:	dec00104 	addi	sp,sp,4
    7a14:	f800283a 	ret

00007a18 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    7a18:	defffa04 	addi	sp,sp,-24
    7a1c:	df000515 	stw	fp,20(sp)
    7a20:	df000504 	addi	fp,sp,20
    7a24:	e13ffe15 	stw	r4,-8(fp)
    7a28:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7a2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7a30:	e0bffe17 	ldw	r2,-8(fp)
    7a34:	1000021e 	bne	r2,zero,7a40 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7a38:	00801804 	movi	r2,96
    7a3c:	00002c06 	br	7af0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    7a40:	e0bfff17 	ldw	r2,-4(fp)
    7a44:	1000021e 	bne	r2,zero,7a50 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    7a48:	00801844 	movi	r2,97
    7a4c:	00002806 	br	7af0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7a50:	0005303a 	rdctl	r2,status
    7a54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7a58:	e0fffc17 	ldw	r3,-16(fp)
    7a5c:	00bfff84 	movi	r2,-2
    7a60:	1884703a 	and	r2,r3,r2
    7a64:	1001703a 	wrctl	status,r2
  
  return context;
    7a68:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7a6c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    7a70:	e0bffe17 	ldw	r2,-8(fp)
    7a74:	10c00017 	ldw	r3,0(r2)
    7a78:	e0bfff17 	ldw	r2,-4(fp)
    7a7c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    7a80:	e0bffe17 	ldw	r2,-8(fp)
    7a84:	10c00117 	ldw	r3,4(r2)
    7a88:	e0bfff17 	ldw	r2,-4(fp)
    7a8c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    7a90:	e0bffe17 	ldw	r2,-8(fp)
    7a94:	10c00217 	ldw	r3,8(r2)
    7a98:	e0bfff17 	ldw	r2,-4(fp)
    7a9c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    7aa0:	e0bffe17 	ldw	r2,-8(fp)
    7aa4:	10c00317 	ldw	r3,12(r2)
    7aa8:	e0bfff17 	ldw	r2,-4(fp)
    7aac:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    7ab0:	e0bffe17 	ldw	r2,-8(fp)
    7ab4:	10c00417 	ldw	r3,16(r2)
    7ab8:	e0bfff17 	ldw	r2,-4(fp)
    7abc:	10c00415 	stw	r3,16(r2)
    7ac0:	e0bffb17 	ldw	r2,-20(fp)
    7ac4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7ac8:	e0bffd17 	ldw	r2,-12(fp)
    7acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    7ad0:	e0bfff17 	ldw	r2,-4(fp)
    7ad4:	10c00317 	ldw	r3,12(r2)
    7ad8:	e0bfff17 	ldw	r2,-4(fp)
    7adc:	10800417 	ldw	r2,16(r2)
    7ae0:	1887c83a 	sub	r3,r3,r2
    7ae4:	e0bfff17 	ldw	r2,-4(fp)
    7ae8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    7aec:	0005883a 	mov	r2,zero
}
    7af0:	e037883a 	mov	sp,fp
    7af4:	df000017 	ldw	fp,0(sp)
    7af8:	dec00104 	addi	sp,sp,4
    7afc:	f800283a 	ret

00007b00 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    7b00:	defffc04 	addi	sp,sp,-16
    7b04:	dfc00315 	stw	ra,12(sp)
    7b08:	df000215 	stw	fp,8(sp)
    7b0c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    7b10:	01000074 	movhi	r4,1
    7b14:	21175504 	addi	r4,r4,23892
    7b18:	01430c04 	movi	r5,3120
    7b1c:	00053240 	call	5324 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    7b20:	00800074 	movhi	r2,1
    7b24:	10975504 	addi	r2,r2,23892
    7b28:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7b2c:	e03fff0d 	sth	zero,-4(fp)
    7b30:	00001306 	br	7b80 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    7b34:	e0bfff0b 	ldhu	r2,-4(fp)
    7b38:	10800044 	addi	r2,r2,1
    7b3c:	10c00d24 	muli	r3,r2,52
    7b40:	00800074 	movhi	r2,1
    7b44:	10975504 	addi	r2,r2,23892
    7b48:	1887883a 	add	r3,r3,r2
    7b4c:	e0bffe17 	ldw	r2,-8(fp)
    7b50:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    7b54:	e0bffe17 	ldw	r2,-8(fp)
    7b58:	00c00fc4 	movi	r3,63
    7b5c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    7b60:	e0bffe17 	ldw	r2,-8(fp)
    7b64:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    7b68:	e0bffe17 	ldw	r2,-8(fp)
    7b6c:	10800d04 	addi	r2,r2,52
    7b70:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7b74:	e0bfff0b 	ldhu	r2,-4(fp)
    7b78:	10800044 	addi	r2,r2,1
    7b7c:	e0bfff0d 	sth	r2,-4(fp)
    7b80:	e0bfff0b 	ldhu	r2,-4(fp)
    7b84:	10800ef0 	cmpltui	r2,r2,59
    7b88:	103fea1e 	bne	r2,zero,7b34 <__alt_data_end+0xfc007b34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    7b8c:	e0bffe17 	ldw	r2,-8(fp)
    7b90:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    7b94:	e0bffe17 	ldw	r2,-8(fp)
    7b98:	00c00fc4 	movi	r3,63
    7b9c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    7ba0:	e0bffe17 	ldw	r2,-8(fp)
    7ba4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    7ba8:	00800074 	movhi	r2,1
    7bac:	10866104 	addi	r2,r2,6532
    7bb0:	00c00074 	movhi	r3,1
    7bb4:	18d75504 	addi	r3,r3,23892
    7bb8:	10c00015 	stw	r3,0(r2)
#endif
}
    7bbc:	e037883a 	mov	sp,fp
    7bc0:	dfc00117 	ldw	ra,4(sp)
    7bc4:	df000017 	ldw	fp,0(sp)
    7bc8:	dec00204 	addi	sp,sp,8
    7bcc:	f800283a 	ret

00007bd0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    7bd0:	defff804 	addi	sp,sp,-32
    7bd4:	df000715 	stw	fp,28(sp)
    7bd8:	df000704 	addi	fp,sp,28
    7bdc:	e13ffe15 	stw	r4,-8(fp)
    7be0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7be4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7be8:	e0bfff17 	ldw	r2,-4(fp)
    7bec:	1000021e 	bne	r2,zero,7bf8 <OSQAccept+0x28>
        return ((void *)0);
    7bf0:	0005883a 	mov	r2,zero
    7bf4:	00004206 	br	7d00 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    7bf8:	e0bffe17 	ldw	r2,-8(fp)
    7bfc:	1000051e 	bne	r2,zero,7c14 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    7c00:	e0bfff17 	ldw	r2,-4(fp)
    7c04:	00c00104 	movi	r3,4
    7c08:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7c0c:	0005883a 	mov	r2,zero
    7c10:	00003b06 	br	7d00 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    7c14:	e0bffe17 	ldw	r2,-8(fp)
    7c18:	10800003 	ldbu	r2,0(r2)
    7c1c:	10803fcc 	andi	r2,r2,255
    7c20:	108000a0 	cmpeqi	r2,r2,2
    7c24:	1000051e 	bne	r2,zero,7c3c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    7c28:	e0bfff17 	ldw	r2,-4(fp)
    7c2c:	00c00044 	movi	r3,1
    7c30:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7c34:	0005883a 	mov	r2,zero
    7c38:	00003106 	br	7d00 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7c3c:	0005303a 	rdctl	r2,status
    7c40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7c44:	e0fffc17 	ldw	r3,-16(fp)
    7c48:	00bfff84 	movi	r2,-2
    7c4c:	1884703a 	and	r2,r3,r2
    7c50:	1001703a 	wrctl	status,r2
  
  return context;
    7c54:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7c58:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    7c5c:	e0bffe17 	ldw	r2,-8(fp)
    7c60:	10800117 	ldw	r2,4(r2)
    7c64:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    7c68:	e0bffb17 	ldw	r2,-20(fp)
    7c6c:	1080058b 	ldhu	r2,22(r2)
    7c70:	10bfffcc 	andi	r2,r2,65535
    7c74:	10001926 	beq	r2,zero,7cdc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    7c78:	e0bffb17 	ldw	r2,-20(fp)
    7c7c:	10800417 	ldw	r2,16(r2)
    7c80:	11000104 	addi	r4,r2,4
    7c84:	e0fffb17 	ldw	r3,-20(fp)
    7c88:	19000415 	stw	r4,16(r3)
    7c8c:	10800017 	ldw	r2,0(r2)
    7c90:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    7c94:	e0bffb17 	ldw	r2,-20(fp)
    7c98:	1080058b 	ldhu	r2,22(r2)
    7c9c:	10bfffc4 	addi	r2,r2,-1
    7ca0:	1007883a 	mov	r3,r2
    7ca4:	e0bffb17 	ldw	r2,-20(fp)
    7ca8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    7cac:	e0bffb17 	ldw	r2,-20(fp)
    7cb0:	10c00417 	ldw	r3,16(r2)
    7cb4:	e0bffb17 	ldw	r2,-20(fp)
    7cb8:	10800217 	ldw	r2,8(r2)
    7cbc:	1880041e 	bne	r3,r2,7cd0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    7cc0:	e0bffb17 	ldw	r2,-20(fp)
    7cc4:	10c00117 	ldw	r3,4(r2)
    7cc8:	e0bffb17 	ldw	r2,-20(fp)
    7ccc:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    7cd0:	e0bfff17 	ldw	r2,-4(fp)
    7cd4:	10000005 	stb	zero,0(r2)
    7cd8:	00000406 	br	7cec <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    7cdc:	e0bfff17 	ldw	r2,-4(fp)
    7ce0:	00c007c4 	movi	r3,31
    7ce4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    7ce8:	e03ff915 	stw	zero,-28(fp)
    7cec:	e0bffa17 	ldw	r2,-24(fp)
    7cf0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7cf4:	e0bffd17 	ldw	r2,-12(fp)
    7cf8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    7cfc:	e0bff917 	ldw	r2,-28(fp)
}
    7d00:	e037883a 	mov	sp,fp
    7d04:	df000017 	ldw	fp,0(sp)
    7d08:	dec00104 	addi	sp,sp,4
    7d0c:	f800283a 	ret

00007d10 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    7d10:	defff404 	addi	sp,sp,-48
    7d14:	dfc00b15 	stw	ra,44(sp)
    7d18:	df000a15 	stw	fp,40(sp)
    7d1c:	df000a04 	addi	fp,sp,40
    7d20:	e13ffe15 	stw	r4,-8(fp)
    7d24:	2805883a 	mov	r2,r5
    7d28:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7d2c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    7d30:	00800074 	movhi	r2,1
    7d34:	10866604 	addi	r2,r2,6552
    7d38:	10800003 	ldbu	r2,0(r2)
    7d3c:	10803fcc 	andi	r2,r2,255
    7d40:	10000226 	beq	r2,zero,7d4c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    7d44:	0005883a 	mov	r2,zero
    7d48:	00006a06 	br	7ef4 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7d4c:	0005303a 	rdctl	r2,status
    7d50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d54:	e0fff917 	ldw	r3,-28(fp)
    7d58:	00bfff84 	movi	r2,-2
    7d5c:	1884703a 	and	r2,r3,r2
    7d60:	1001703a 	wrctl	status,r2
  
  return context;
    7d64:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    7d68:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    7d6c:	00800074 	movhi	r2,1
    7d70:	10866504 	addi	r2,r2,6548
    7d74:	10800017 	ldw	r2,0(r2)
    7d78:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    7d7c:	00800074 	movhi	r2,1
    7d80:	10866504 	addi	r2,r2,6548
    7d84:	10800017 	ldw	r2,0(r2)
    7d88:	10000726 	beq	r2,zero,7da8 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    7d8c:	00800074 	movhi	r2,1
    7d90:	10866504 	addi	r2,r2,6548
    7d94:	10800017 	ldw	r2,0(r2)
    7d98:	10c00117 	ldw	r3,4(r2)
    7d9c:	00800074 	movhi	r2,1
    7da0:	10866504 	addi	r2,r2,6548
    7da4:	10c00015 	stw	r3,0(r2)
    7da8:	e0bff717 	ldw	r2,-36(fp)
    7dac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7db0:	e0bffa17 	ldw	r2,-24(fp)
    7db4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    7db8:	e0bff617 	ldw	r2,-40(fp)
    7dbc:	10004c26 	beq	r2,zero,7ef0 <OSQCreate+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7dc0:	0005303a 	rdctl	r2,status
    7dc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7dc8:	e0fffb17 	ldw	r3,-20(fp)
    7dcc:	00bfff84 	movi	r2,-2
    7dd0:	1884703a 	and	r2,r3,r2
    7dd4:	1001703a 	wrctl	status,r2
  
  return context;
    7dd8:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    7ddc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    7de0:	00800074 	movhi	r2,1
    7de4:	10866304 	addi	r2,r2,6540
    7de8:	10800017 	ldw	r2,0(r2)
    7dec:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    7df0:	e0bff817 	ldw	r2,-32(fp)
    7df4:	10003026 	beq	r2,zero,7eb8 <OSQCreate+0x1a8>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    7df8:	00800074 	movhi	r2,1
    7dfc:	10866304 	addi	r2,r2,6540
    7e00:	10800017 	ldw	r2,0(r2)
    7e04:	10c00017 	ldw	r3,0(r2)
    7e08:	00800074 	movhi	r2,1
    7e0c:	10866304 	addi	r2,r2,6540
    7e10:	10c00015 	stw	r3,0(r2)
    7e14:	e0bff717 	ldw	r2,-36(fp)
    7e18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7e1c:	e0bffc17 	ldw	r2,-16(fp)
    7e20:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    7e24:	e0bff817 	ldw	r2,-32(fp)
    7e28:	e0fffe17 	ldw	r3,-8(fp)
    7e2c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    7e30:	e0bfff0b 	ldhu	r2,-4(fp)
    7e34:	1085883a 	add	r2,r2,r2
    7e38:	1085883a 	add	r2,r2,r2
    7e3c:	e0fffe17 	ldw	r3,-8(fp)
    7e40:	1887883a 	add	r3,r3,r2
    7e44:	e0bff817 	ldw	r2,-32(fp)
    7e48:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    7e4c:	e0bff817 	ldw	r2,-32(fp)
    7e50:	e0fffe17 	ldw	r3,-8(fp)
    7e54:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    7e58:	e0bff817 	ldw	r2,-32(fp)
    7e5c:	e0fffe17 	ldw	r3,-8(fp)
    7e60:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    7e64:	e0bff817 	ldw	r2,-32(fp)
    7e68:	e0ffff0b 	ldhu	r3,-4(fp)
    7e6c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    7e70:	e0bff817 	ldw	r2,-32(fp)
    7e74:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    7e78:	e0bff617 	ldw	r2,-40(fp)
    7e7c:	00c00084 	movi	r3,2
    7e80:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    7e84:	e0bff617 	ldw	r2,-40(fp)
    7e88:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    7e8c:	e0bff617 	ldw	r2,-40(fp)
    7e90:	e0fff817 	ldw	r3,-32(fp)
    7e94:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    7e98:	e0bff617 	ldw	r2,-40(fp)
    7e9c:	00c00fc4 	movi	r3,63
    7ea0:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    7ea4:	e0bff617 	ldw	r2,-40(fp)
    7ea8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    7eac:	e13ff617 	ldw	r4,-40(fp)
    7eb0:	0004f600 	call	4f60 <OS_EventWaitListInit>
    7eb4:	00000e06 	br	7ef0 <OSQCreate+0x1e0>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    7eb8:	00800074 	movhi	r2,1
    7ebc:	10866504 	addi	r2,r2,6548
    7ec0:	10c00017 	ldw	r3,0(r2)
    7ec4:	e0bff617 	ldw	r2,-40(fp)
    7ec8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    7ecc:	00800074 	movhi	r2,1
    7ed0:	10866504 	addi	r2,r2,6548
    7ed4:	e0fff617 	ldw	r3,-40(fp)
    7ed8:	10c00015 	stw	r3,0(r2)
    7edc:	e0bff717 	ldw	r2,-36(fp)
    7ee0:	e0bffd15 	stw	r2,-12(fp)
    7ee4:	e0bffd17 	ldw	r2,-12(fp)
    7ee8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    7eec:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    7ef0:	e0bff617 	ldw	r2,-40(fp)
}
    7ef4:	e037883a 	mov	sp,fp
    7ef8:	dfc00117 	ldw	ra,4(sp)
    7efc:	df000017 	ldw	fp,0(sp)
    7f00:	dec00204 	addi	sp,sp,8
    7f04:	f800283a 	ret

00007f08 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    7f08:	defff204 	addi	sp,sp,-56
    7f0c:	dfc00d15 	stw	ra,52(sp)
    7f10:	df000c15 	stw	fp,48(sp)
    7f14:	df000c04 	addi	fp,sp,48
    7f18:	e13ffd15 	stw	r4,-12(fp)
    7f1c:	2805883a 	mov	r2,r5
    7f20:	e1bfff15 	stw	r6,-4(fp)
    7f24:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    7f28:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7f2c:	e0bfff17 	ldw	r2,-4(fp)
    7f30:	1000021e 	bne	r2,zero,7f3c <OSQDel+0x34>
        return (pevent);
    7f34:	e0bffd17 	ldw	r2,-12(fp)
    7f38:	0000a206 	br	81c4 <OSQDel+0x2bc>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    7f3c:	e0bffd17 	ldw	r2,-12(fp)
    7f40:	1000051e 	bne	r2,zero,7f58 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    7f44:	e0bfff17 	ldw	r2,-4(fp)
    7f48:	00c00104 	movi	r3,4
    7f4c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7f50:	e0bffd17 	ldw	r2,-12(fp)
    7f54:	00009b06 	br	81c4 <OSQDel+0x2bc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    7f58:	e0bffd17 	ldw	r2,-12(fp)
    7f5c:	10800003 	ldbu	r2,0(r2)
    7f60:	10803fcc 	andi	r2,r2,255
    7f64:	108000a0 	cmpeqi	r2,r2,2
    7f68:	1000051e 	bne	r2,zero,7f80 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    7f6c:	e0bfff17 	ldw	r2,-4(fp)
    7f70:	00c00044 	movi	r3,1
    7f74:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7f78:	e0bffd17 	ldw	r2,-12(fp)
    7f7c:	00009106 	br	81c4 <OSQDel+0x2bc>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7f80:	00800074 	movhi	r2,1
    7f84:	10866604 	addi	r2,r2,6552
    7f88:	10800003 	ldbu	r2,0(r2)
    7f8c:	10803fcc 	andi	r2,r2,255
    7f90:	10000526 	beq	r2,zero,7fa8 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    7f94:	e0bfff17 	ldw	r2,-4(fp)
    7f98:	00c003c4 	movi	r3,15
    7f9c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7fa0:	e0bffd17 	ldw	r2,-12(fp)
    7fa4:	00008706 	br	81c4 <OSQDel+0x2bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7fa8:	0005303a 	rdctl	r2,status
    7fac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7fb0:	e0fff817 	ldw	r3,-32(fp)
    7fb4:	00bfff84 	movi	r2,-2
    7fb8:	1884703a 	and	r2,r3,r2
    7fbc:	1001703a 	wrctl	status,r2
  
  return context;
    7fc0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    7fc4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    7fc8:	e0bffd17 	ldw	r2,-12(fp)
    7fcc:	10800283 	ldbu	r2,10(r2)
    7fd0:	10803fcc 	andi	r2,r2,255
    7fd4:	10000326 	beq	r2,zero,7fe4 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    7fd8:	00800044 	movi	r2,1
    7fdc:	e0bff405 	stb	r2,-48(fp)
    7fe0:	00000106 	br	7fe8 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    7fe4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    7fe8:	e0bffe03 	ldbu	r2,-8(fp)
    7fec:	10000326 	beq	r2,zero,7ffc <OSQDel+0xf4>
    7ff0:	10800060 	cmpeqi	r2,r2,1
    7ff4:	1000391e 	bne	r2,zero,80dc <OSQDel+0x1d4>
    7ff8:	00006706 	br	8198 <OSQDel+0x290>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    7ffc:	e0bff403 	ldbu	r2,-48(fp)
    8000:	1000261e 	bne	r2,zero,809c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    8004:	e0bffd17 	ldw	r2,-12(fp)
    8008:	00c00fc4 	movi	r3,63
    800c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    8010:	e0bffd17 	ldw	r2,-12(fp)
    8014:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    8018:	e0bffd17 	ldw	r2,-12(fp)
    801c:	10800117 	ldw	r2,4(r2)
    8020:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
    8024:	00800074 	movhi	r2,1
    8028:	10866304 	addi	r2,r2,6540
    802c:	10c00017 	ldw	r3,0(r2)
    8030:	e0bff717 	ldw	r2,-36(fp)
    8034:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    8038:	00800074 	movhi	r2,1
    803c:	10866304 	addi	r2,r2,6540
    8040:	e0fff717 	ldw	r3,-36(fp)
    8044:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8048:	e0bffd17 	ldw	r2,-12(fp)
    804c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    8050:	00800074 	movhi	r2,1
    8054:	10866504 	addi	r2,r2,6548
    8058:	10c00017 	ldw	r3,0(r2)
    805c:	e0bffd17 	ldw	r2,-12(fp)
    8060:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    8064:	e0bffd17 	ldw	r2,-12(fp)
    8068:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    806c:	00800074 	movhi	r2,1
    8070:	10866504 	addi	r2,r2,6548
    8074:	e0fffd17 	ldw	r3,-12(fp)
    8078:	10c00015 	stw	r3,0(r2)
    807c:	e0bff617 	ldw	r2,-40(fp)
    8080:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8084:	e0bff917 	ldw	r2,-28(fp)
    8088:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    808c:	e0bfff17 	ldw	r2,-4(fp)
    8090:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    8094:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    8098:	00004906 	br	81c0 <OSQDel+0x2b8>
    809c:	e0bff617 	ldw	r2,-40(fp)
    80a0:	e0bffa15 	stw	r2,-24(fp)
    80a4:	e0bffa17 	ldw	r2,-24(fp)
    80a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    80ac:	e0bfff17 	ldw	r2,-4(fp)
    80b0:	00c01244 	movi	r3,73
    80b4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    80b8:	e0bffd17 	ldw	r2,-12(fp)
    80bc:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    80c0:	00003f06 	br	81c0 <OSQDel+0x2b8>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    80c4:	e13ffd17 	ldw	r4,-12(fp)
    80c8:	000b883a 	mov	r5,zero
    80cc:	01800104 	movi	r6,4
    80d0:	000f883a 	mov	r7,zero
    80d4:	00049d00 	call	49d0 <OS_EventTaskRdy>
    80d8:	00000106 	br	80e0 <OSQDel+0x1d8>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    80dc:	0001883a 	nop
    80e0:	e0bffd17 	ldw	r2,-12(fp)
    80e4:	10800283 	ldbu	r2,10(r2)
    80e8:	10803fcc 	andi	r2,r2,255
    80ec:	103ff51e 	bne	r2,zero,80c4 <__alt_data_end+0xfc0080c4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    80f0:	e0bffd17 	ldw	r2,-12(fp)
    80f4:	00c00fc4 	movi	r3,63
    80f8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    80fc:	e0bffd17 	ldw	r2,-12(fp)
    8100:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    8104:	e0bffd17 	ldw	r2,-12(fp)
    8108:	10800117 	ldw	r2,4(r2)
    810c:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
    8110:	00800074 	movhi	r2,1
    8114:	10866304 	addi	r2,r2,6540
    8118:	10c00017 	ldw	r3,0(r2)
    811c:	e0bff717 	ldw	r2,-36(fp)
    8120:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    8124:	00800074 	movhi	r2,1
    8128:	10866304 	addi	r2,r2,6540
    812c:	e0fff717 	ldw	r3,-36(fp)
    8130:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    813c:	00800074 	movhi	r2,1
    8140:	10866504 	addi	r2,r2,6548
    8144:	10c00017 	ldw	r3,0(r2)
    8148:	e0bffd17 	ldw	r2,-12(fp)
    814c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    8150:	e0bffd17 	ldw	r2,-12(fp)
    8154:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    8158:	00800074 	movhi	r2,1
    815c:	10866504 	addi	r2,r2,6548
    8160:	e0fffd17 	ldw	r3,-12(fp)
    8164:	10c00015 	stw	r3,0(r2)
    8168:	e0bff617 	ldw	r2,-40(fp)
    816c:	e0bffb15 	stw	r2,-20(fp)
    8170:	e0bffb17 	ldw	r2,-20(fp)
    8174:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    8178:	e0bff403 	ldbu	r2,-48(fp)
    817c:	10800058 	cmpnei	r2,r2,1
    8180:	1000011e 	bne	r2,zero,8188 <OSQDel+0x280>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    8184:	00053d80 	call	53d8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    8188:	e0bfff17 	ldw	r2,-4(fp)
    818c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    8190:	e03ff515 	stw	zero,-44(fp)
             break;
    8194:	00000a06 	br	81c0 <OSQDel+0x2b8>
    8198:	e0bff617 	ldw	r2,-40(fp)
    819c:	e0bffc15 	stw	r2,-16(fp)
    81a0:	e0bffc17 	ldw	r2,-16(fp)
    81a4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    81a8:	e0bfff17 	ldw	r2,-4(fp)
    81ac:	00c001c4 	movi	r3,7
    81b0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    81b4:	e0bffd17 	ldw	r2,-12(fp)
    81b8:	e0bff515 	stw	r2,-44(fp)
             break;
    81bc:	0001883a 	nop
    }
    return (pevent_return);
    81c0:	e0bff517 	ldw	r2,-44(fp)
}
    81c4:	e037883a 	mov	sp,fp
    81c8:	dfc00117 	ldw	ra,4(sp)
    81cc:	df000017 	ldw	fp,0(sp)
    81d0:	dec00204 	addi	sp,sp,8
    81d4:	f800283a 	ret

000081d8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    81d8:	defffa04 	addi	sp,sp,-24
    81dc:	df000515 	stw	fp,20(sp)
    81e0:	df000504 	addi	fp,sp,20
    81e4:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    81e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    81ec:	e0bfff17 	ldw	r2,-4(fp)
    81f0:	1000021e 	bne	r2,zero,81fc <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    81f4:	00800104 	movi	r2,4
    81f8:	00002106 	br	8280 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    81fc:	e0bfff17 	ldw	r2,-4(fp)
    8200:	10800003 	ldbu	r2,0(r2)
    8204:	10803fcc 	andi	r2,r2,255
    8208:	108000a0 	cmpeqi	r2,r2,2
    820c:	1000021e 	bne	r2,zero,8218 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    8210:	00800044 	movi	r2,1
    8214:	00001a06 	br	8280 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8218:	0005303a 	rdctl	r2,status
    821c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8220:	e0fffd17 	ldw	r3,-12(fp)
    8224:	00bfff84 	movi	r2,-2
    8228:	1884703a 	and	r2,r3,r2
    822c:	1001703a 	wrctl	status,r2
  
  return context;
    8230:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8234:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    8238:	e0bfff17 	ldw	r2,-4(fp)
    823c:	10800117 	ldw	r2,4(r2)
    8240:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    8244:	e0bffc17 	ldw	r2,-16(fp)
    8248:	10c00117 	ldw	r3,4(r2)
    824c:	e0bffc17 	ldw	r2,-16(fp)
    8250:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    8254:	e0bffc17 	ldw	r2,-16(fp)
    8258:	10c00117 	ldw	r3,4(r2)
    825c:	e0bffc17 	ldw	r2,-16(fp)
    8260:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    8264:	e0bffc17 	ldw	r2,-16(fp)
    8268:	1000058d 	sth	zero,22(r2)
    826c:	e0bffb17 	ldw	r2,-20(fp)
    8270:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8274:	e0bffe17 	ldw	r2,-8(fp)
    8278:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    827c:	0005883a 	mov	r2,zero
}
    8280:	e037883a 	mov	sp,fp
    8284:	df000017 	ldw	fp,0(sp)
    8288:	dec00104 	addi	sp,sp,4
    828c:	f800283a 	ret

00008290 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    8290:	defff304 	addi	sp,sp,-52
    8294:	dfc00c15 	stw	ra,48(sp)
    8298:	df000b15 	stw	fp,44(sp)
    829c:	df000b04 	addi	fp,sp,44
    82a0:	e13ffd15 	stw	r4,-12(fp)
    82a4:	2805883a 	mov	r2,r5
    82a8:	e1bfff15 	stw	r6,-4(fp)
    82ac:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    82b0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    82b4:	e0bfff17 	ldw	r2,-4(fp)
    82b8:	1000021e 	bne	r2,zero,82c4 <OSQPend+0x34>
        return ((void *)0);
    82bc:	0005883a 	mov	r2,zero
    82c0:	0000ad06 	br	8578 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    82c4:	e0bffd17 	ldw	r2,-12(fp)
    82c8:	1000051e 	bne	r2,zero,82e0 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    82cc:	e0bfff17 	ldw	r2,-4(fp)
    82d0:	00c00104 	movi	r3,4
    82d4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    82d8:	0005883a 	mov	r2,zero
    82dc:	0000a606 	br	8578 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    82e0:	e0bffd17 	ldw	r2,-12(fp)
    82e4:	10800003 	ldbu	r2,0(r2)
    82e8:	10803fcc 	andi	r2,r2,255
    82ec:	108000a0 	cmpeqi	r2,r2,2
    82f0:	1000051e 	bne	r2,zero,8308 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    82f4:	e0bfff17 	ldw	r2,-4(fp)
    82f8:	00c00044 	movi	r3,1
    82fc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8300:	0005883a 	mov	r2,zero
    8304:	00009c06 	br	8578 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    8308:	00800074 	movhi	r2,1
    830c:	10866604 	addi	r2,r2,6552
    8310:	10800003 	ldbu	r2,0(r2)
    8314:	10803fcc 	andi	r2,r2,255
    8318:	10000526 	beq	r2,zero,8330 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    831c:	e0bfff17 	ldw	r2,-4(fp)
    8320:	00c00084 	movi	r3,2
    8324:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8328:	0005883a 	mov	r2,zero
    832c:	00009206 	br	8578 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    8330:	00800074 	movhi	r2,1
    8334:	10865804 	addi	r2,r2,6496
    8338:	10800003 	ldbu	r2,0(r2)
    833c:	10803fcc 	andi	r2,r2,255
    8340:	10000526 	beq	r2,zero,8358 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    8344:	e0bfff17 	ldw	r2,-4(fp)
    8348:	00c00344 	movi	r3,13
    834c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8350:	0005883a 	mov	r2,zero
    8354:	00008806 	br	8578 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8358:	0005303a 	rdctl	r2,status
    835c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8360:	e0fff817 	ldw	r3,-32(fp)
    8364:	00bfff84 	movi	r2,-2
    8368:	1884703a 	and	r2,r3,r2
    836c:	1001703a 	wrctl	status,r2
  
  return context;
    8370:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    8374:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    8378:	e0bffd17 	ldw	r2,-12(fp)
    837c:	10800117 	ldw	r2,4(r2)
    8380:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    8384:	e0bff717 	ldw	r2,-36(fp)
    8388:	1080058b 	ldhu	r2,22(r2)
    838c:	10bfffcc 	andi	r2,r2,65535
    8390:	10001e26 	beq	r2,zero,840c <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    8394:	e0bff717 	ldw	r2,-36(fp)
    8398:	10800417 	ldw	r2,16(r2)
    839c:	11000104 	addi	r4,r2,4
    83a0:	e0fff717 	ldw	r3,-36(fp)
    83a4:	19000415 	stw	r4,16(r3)
    83a8:	10800017 	ldw	r2,0(r2)
    83ac:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    83b0:	e0bff717 	ldw	r2,-36(fp)
    83b4:	1080058b 	ldhu	r2,22(r2)
    83b8:	10bfffc4 	addi	r2,r2,-1
    83bc:	1007883a 	mov	r3,r2
    83c0:	e0bff717 	ldw	r2,-36(fp)
    83c4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    83c8:	e0bff717 	ldw	r2,-36(fp)
    83cc:	10c00417 	ldw	r3,16(r2)
    83d0:	e0bff717 	ldw	r2,-36(fp)
    83d4:	10800217 	ldw	r2,8(r2)
    83d8:	1880041e 	bne	r3,r2,83ec <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    83dc:	e0bff717 	ldw	r2,-36(fp)
    83e0:	10c00117 	ldw	r3,4(r2)
    83e4:	e0bff717 	ldw	r2,-36(fp)
    83e8:	10c00415 	stw	r3,16(r2)
    83ec:	e0bff617 	ldw	r2,-40(fp)
    83f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    83f4:	e0bff917 	ldw	r2,-28(fp)
    83f8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    83fc:	e0bfff17 	ldw	r2,-4(fp)
    8400:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    8404:	e0bff517 	ldw	r2,-44(fp)
    8408:	00005b06 	br	8578 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    840c:	00800074 	movhi	r2,1
    8410:	10866704 	addi	r2,r2,6556
    8414:	10800017 	ldw	r2,0(r2)
    8418:	00c00074 	movhi	r3,1
    841c:	18c66704 	addi	r3,r3,6556
    8420:	18c00017 	ldw	r3,0(r3)
    8424:	18c00c03 	ldbu	r3,48(r3)
    8428:	18c00114 	ori	r3,r3,4
    842c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    8430:	00800074 	movhi	r2,1
    8434:	10866704 	addi	r2,r2,6556
    8438:	10800017 	ldw	r2,0(r2)
    843c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    8440:	00800074 	movhi	r2,1
    8444:	10866704 	addi	r2,r2,6556
    8448:	10800017 	ldw	r2,0(r2)
    844c:	e0fffe0b 	ldhu	r3,-8(fp)
    8450:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    8454:	e13ffd17 	ldw	r4,-12(fp)
    8458:	0004b680 	call	4b68 <OS_EventTaskWait>
    845c:	e0bff617 	ldw	r2,-40(fp)
    8460:	e0bffa15 	stw	r2,-24(fp)
    8464:	e0bffa17 	ldw	r2,-24(fp)
    8468:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    846c:	00053d80 	call	53d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8470:	0005303a 	rdctl	r2,status
    8474:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8478:	e0fffb17 	ldw	r3,-20(fp)
    847c:	00bfff84 	movi	r2,-2
    8480:	1884703a 	and	r2,r3,r2
    8484:	1001703a 	wrctl	status,r2
  
  return context;
    8488:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    848c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    8490:	00800074 	movhi	r2,1
    8494:	10866704 	addi	r2,r2,6556
    8498:	10800017 	ldw	r2,0(r2)
    849c:	10800c43 	ldbu	r2,49(r2)
    84a0:	10803fcc 	andi	r2,r2,255
    84a4:	10000326 	beq	r2,zero,84b4 <OSQPend+0x224>
    84a8:	108000a0 	cmpeqi	r2,r2,2
    84ac:	1000091e 	bne	r2,zero,84d4 <OSQPend+0x244>
    84b0:	00000d06 	br	84e8 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    84b4:	00800074 	movhi	r2,1
    84b8:	10866704 	addi	r2,r2,6556
    84bc:	10800017 	ldw	r2,0(r2)
    84c0:	10800917 	ldw	r2,36(r2)
    84c4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    84c8:	e0bfff17 	ldw	r2,-4(fp)
    84cc:	10000005 	stb	zero,0(r2)
             break;
    84d0:	00001006 	br	8514 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    84d4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    84d8:	e0bfff17 	ldw	r2,-4(fp)
    84dc:	00c00384 	movi	r3,14
    84e0:	10c00005 	stb	r3,0(r2)
             break;
    84e4:	00000b06 	br	8514 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    84e8:	00800074 	movhi	r2,1
    84ec:	10866704 	addi	r2,r2,6556
    84f0:	10800017 	ldw	r2,0(r2)
    84f4:	1009883a 	mov	r4,r2
    84f8:	e17ffd17 	ldw	r5,-12(fp)
    84fc:	0004db80 	call	4db8 <OS_EventTaskRemove>
             pmsg = (void *)0;
    8500:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    8504:	e0bfff17 	ldw	r2,-4(fp)
    8508:	00c00284 	movi	r3,10
    850c:	10c00005 	stb	r3,0(r2)
             break;
    8510:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    8514:	00800074 	movhi	r2,1
    8518:	10866704 	addi	r2,r2,6556
    851c:	10800017 	ldw	r2,0(r2)
    8520:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    8524:	00800074 	movhi	r2,1
    8528:	10866704 	addi	r2,r2,6556
    852c:	10800017 	ldw	r2,0(r2)
    8530:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    8534:	00800074 	movhi	r2,1
    8538:	10866704 	addi	r2,r2,6556
    853c:	10800017 	ldw	r2,0(r2)
    8540:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    8544:	00800074 	movhi	r2,1
    8548:	10866704 	addi	r2,r2,6556
    854c:	10800017 	ldw	r2,0(r2)
    8550:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    8554:	00800074 	movhi	r2,1
    8558:	10866704 	addi	r2,r2,6556
    855c:	10800017 	ldw	r2,0(r2)
    8560:	10000915 	stw	zero,36(r2)
    8564:	e0bff617 	ldw	r2,-40(fp)
    8568:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    856c:	e0bffc17 	ldw	r2,-16(fp)
    8570:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    8574:	e0bff517 	ldw	r2,-44(fp)
}
    8578:	e037883a 	mov	sp,fp
    857c:	dfc00117 	ldw	ra,4(sp)
    8580:	df000017 	ldw	fp,0(sp)
    8584:	dec00204 	addi	sp,sp,8
    8588:	f800283a 	ret

0000858c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    858c:	defff604 	addi	sp,sp,-40
    8590:	dfc00915 	stw	ra,36(sp)
    8594:	df000815 	stw	fp,32(sp)
    8598:	df000804 	addi	fp,sp,32
    859c:	e13ffd15 	stw	r4,-12(fp)
    85a0:	2805883a 	mov	r2,r5
    85a4:	e1bfff15 	stw	r6,-4(fp)
    85a8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    85ac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    85b0:	e0bfff17 	ldw	r2,-4(fp)
    85b4:	1000021e 	bne	r2,zero,85c0 <OSQPendAbort+0x34>
        return (0);
    85b8:	0005883a 	mov	r2,zero
    85bc:	00004b06 	br	86ec <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    85c0:	e0bffd17 	ldw	r2,-12(fp)
    85c4:	1000051e 	bne	r2,zero,85dc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    85c8:	e0bfff17 	ldw	r2,-4(fp)
    85cc:	00c00104 	movi	r3,4
    85d0:	10c00005 	stb	r3,0(r2)
        return (0);
    85d4:	0005883a 	mov	r2,zero
    85d8:	00004406 	br	86ec <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    85dc:	e0bffd17 	ldw	r2,-12(fp)
    85e0:	10800003 	ldbu	r2,0(r2)
    85e4:	10803fcc 	andi	r2,r2,255
    85e8:	108000a0 	cmpeqi	r2,r2,2
    85ec:	1000051e 	bne	r2,zero,8604 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    85f0:	e0bfff17 	ldw	r2,-4(fp)
    85f4:	00c00044 	movi	r3,1
    85f8:	10c00005 	stb	r3,0(r2)
        return (0);
    85fc:	0005883a 	mov	r2,zero
    8600:	00003a06 	br	86ec <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8604:	0005303a 	rdctl	r2,status
    8608:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    860c:	e0fffa17 	ldw	r3,-24(fp)
    8610:	00bfff84 	movi	r2,-2
    8614:	1884703a 	and	r2,r3,r2
    8618:	1001703a 	wrctl	status,r2
  
  return context;
    861c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8620:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    8624:	e0bffd17 	ldw	r2,-12(fp)
    8628:	10800283 	ldbu	r2,10(r2)
    862c:	10803fcc 	andi	r2,r2,255
    8630:	10002726 	beq	r2,zero,86d0 <OSQPendAbort+0x144>
        nbr_tasks = 0;
    8634:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    8638:	e0bffe03 	ldbu	r2,-8(fp)
    863c:	10800060 	cmpeqi	r2,r2,1
    8640:	10000a1e 	bne	r2,zero,866c <OSQPendAbort+0xe0>
    8644:	00000f06 	br	8684 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    8648:	e13ffd17 	ldw	r4,-12(fp)
    864c:	000b883a 	mov	r5,zero
    8650:	01800104 	movi	r6,4
    8654:	01c00084 	movi	r7,2
    8658:	00049d00 	call	49d0 <OS_EventTaskRdy>
                     nbr_tasks++;
    865c:	e0bff803 	ldbu	r2,-32(fp)
    8660:	10800044 	addi	r2,r2,1
    8664:	e0bff805 	stb	r2,-32(fp)
    8668:	00000106 	br	8670 <OSQPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    866c:	0001883a 	nop
    8670:	e0bffd17 	ldw	r2,-12(fp)
    8674:	10800283 	ldbu	r2,10(r2)
    8678:	10803fcc 	andi	r2,r2,255
    867c:	103ff21e 	bne	r2,zero,8648 <__alt_data_end+0xfc008648>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    8680:	00000906 	br	86a8 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    8684:	e13ffd17 	ldw	r4,-12(fp)
    8688:	000b883a 	mov	r5,zero
    868c:	01800104 	movi	r6,4
    8690:	01c00084 	movi	r7,2
    8694:	00049d00 	call	49d0 <OS_EventTaskRdy>
                 nbr_tasks++;
    8698:	e0bff803 	ldbu	r2,-32(fp)
    869c:	10800044 	addi	r2,r2,1
    86a0:	e0bff805 	stb	r2,-32(fp)
                 break;
    86a4:	0001883a 	nop
    86a8:	e0bff917 	ldw	r2,-28(fp)
    86ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    86b0:	e0bffb17 	ldw	r2,-20(fp)
    86b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    86b8:	00053d80 	call	53d8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    86bc:	e0bfff17 	ldw	r2,-4(fp)
    86c0:	00c00384 	movi	r3,14
    86c4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    86c8:	e0bff803 	ldbu	r2,-32(fp)
    86cc:	00000706 	br	86ec <OSQPendAbort+0x160>
    86d0:	e0bff917 	ldw	r2,-28(fp)
    86d4:	e0bffc15 	stw	r2,-16(fp)
    86d8:	e0bffc17 	ldw	r2,-16(fp)
    86dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    86e0:	e0bfff17 	ldw	r2,-4(fp)
    86e4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    86e8:	0005883a 	mov	r2,zero
}
    86ec:	e037883a 	mov	sp,fp
    86f0:	dfc00117 	ldw	ra,4(sp)
    86f4:	df000017 	ldw	fp,0(sp)
    86f8:	dec00204 	addi	sp,sp,8
    86fc:	f800283a 	ret

00008700 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    8700:	defff604 	addi	sp,sp,-40
    8704:	dfc00915 	stw	ra,36(sp)
    8708:	df000815 	stw	fp,32(sp)
    870c:	df000804 	addi	fp,sp,32
    8710:	e13ffe15 	stw	r4,-8(fp)
    8714:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8718:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    871c:	e0bffe17 	ldw	r2,-8(fp)
    8720:	1000021e 	bne	r2,zero,872c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8724:	00800104 	movi	r2,4
    8728:	00004a06 	br	8854 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    872c:	e0bffe17 	ldw	r2,-8(fp)
    8730:	10800003 	ldbu	r2,0(r2)
    8734:	10803fcc 	andi	r2,r2,255
    8738:	108000a0 	cmpeqi	r2,r2,2
    873c:	1000021e 	bne	r2,zero,8748 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    8740:	00800044 	movi	r2,1
    8744:	00004306 	br	8854 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8748:	0005303a 	rdctl	r2,status
    874c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8750:	e0fffa17 	ldw	r3,-24(fp)
    8754:	00bfff84 	movi	r2,-2
    8758:	1884703a 	and	r2,r3,r2
    875c:	1001703a 	wrctl	status,r2
  
  return context;
    8760:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8764:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    8768:	e0bffe17 	ldw	r2,-8(fp)
    876c:	10800283 	ldbu	r2,10(r2)
    8770:	10803fcc 	andi	r2,r2,255
    8774:	10000c26 	beq	r2,zero,87a8 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8778:	e13ffe17 	ldw	r4,-8(fp)
    877c:	e17fff17 	ldw	r5,-4(fp)
    8780:	01800104 	movi	r6,4
    8784:	000f883a 	mov	r7,zero
    8788:	00049d00 	call	49d0 <OS_EventTaskRdy>
    878c:	e0bff817 	ldw	r2,-32(fp)
    8790:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8794:	e0bffb17 	ldw	r2,-20(fp)
    8798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    879c:	00053d80 	call	53d8 <OS_Sched>
        return (OS_ERR_NONE);
    87a0:	0005883a 	mov	r2,zero
    87a4:	00002b06 	br	8854 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    87a8:	e0bffe17 	ldw	r2,-8(fp)
    87ac:	10800117 	ldw	r2,4(r2)
    87b0:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    87b4:	e0bff917 	ldw	r2,-28(fp)
    87b8:	10c0058b 	ldhu	r3,22(r2)
    87bc:	e0bff917 	ldw	r2,-28(fp)
    87c0:	1080050b 	ldhu	r2,20(r2)
    87c4:	18ffffcc 	andi	r3,r3,65535
    87c8:	10bfffcc 	andi	r2,r2,65535
    87cc:	18800636 	bltu	r3,r2,87e8 <OSQPost+0xe8>
    87d0:	e0bff817 	ldw	r2,-32(fp)
    87d4:	e0bffc15 	stw	r2,-16(fp)
    87d8:	e0bffc17 	ldw	r2,-16(fp)
    87dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    87e0:	00800784 	movi	r2,30
    87e4:	00001b06 	br	8854 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    87e8:	e0bff917 	ldw	r2,-28(fp)
    87ec:	10800317 	ldw	r2,12(r2)
    87f0:	11000104 	addi	r4,r2,4
    87f4:	e0fff917 	ldw	r3,-28(fp)
    87f8:	19000315 	stw	r4,12(r3)
    87fc:	e0ffff17 	ldw	r3,-4(fp)
    8800:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    8804:	e0bff917 	ldw	r2,-28(fp)
    8808:	1080058b 	ldhu	r2,22(r2)
    880c:	10800044 	addi	r2,r2,1
    8810:	1007883a 	mov	r3,r2
    8814:	e0bff917 	ldw	r2,-28(fp)
    8818:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    881c:	e0bff917 	ldw	r2,-28(fp)
    8820:	10c00317 	ldw	r3,12(r2)
    8824:	e0bff917 	ldw	r2,-28(fp)
    8828:	10800217 	ldw	r2,8(r2)
    882c:	1880041e 	bne	r3,r2,8840 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    8830:	e0bff917 	ldw	r2,-28(fp)
    8834:	10c00117 	ldw	r3,4(r2)
    8838:	e0bff917 	ldw	r2,-28(fp)
    883c:	10c00315 	stw	r3,12(r2)
    8840:	e0bff817 	ldw	r2,-32(fp)
    8844:	e0bffd15 	stw	r2,-12(fp)
    8848:	e0bffd17 	ldw	r2,-12(fp)
    884c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8850:	0005883a 	mov	r2,zero
}
    8854:	e037883a 	mov	sp,fp
    8858:	dfc00117 	ldw	ra,4(sp)
    885c:	df000017 	ldw	fp,0(sp)
    8860:	dec00204 	addi	sp,sp,8
    8864:	f800283a 	ret

00008868 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    8868:	defff604 	addi	sp,sp,-40
    886c:	dfc00915 	stw	ra,36(sp)
    8870:	df000815 	stw	fp,32(sp)
    8874:	df000804 	addi	fp,sp,32
    8878:	e13ffe15 	stw	r4,-8(fp)
    887c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8880:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8884:	e0bffe17 	ldw	r2,-8(fp)
    8888:	1000021e 	bne	r2,zero,8894 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    888c:	00800104 	movi	r2,4
    8890:	00004c06 	br	89c4 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8894:	e0bffe17 	ldw	r2,-8(fp)
    8898:	10800003 	ldbu	r2,0(r2)
    889c:	10803fcc 	andi	r2,r2,255
    88a0:	108000a0 	cmpeqi	r2,r2,2
    88a4:	1000021e 	bne	r2,zero,88b0 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    88a8:	00800044 	movi	r2,1
    88ac:	00004506 	br	89c4 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    88b0:	0005303a 	rdctl	r2,status
    88b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    88b8:	e0fffa17 	ldw	r3,-24(fp)
    88bc:	00bfff84 	movi	r2,-2
    88c0:	1884703a 	and	r2,r3,r2
    88c4:	1001703a 	wrctl	status,r2
  
  return context;
    88c8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    88cc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    88d0:	e0bffe17 	ldw	r2,-8(fp)
    88d4:	10800283 	ldbu	r2,10(r2)
    88d8:	10803fcc 	andi	r2,r2,255
    88dc:	10000c26 	beq	r2,zero,8910 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    88e0:	e13ffe17 	ldw	r4,-8(fp)
    88e4:	e17fff17 	ldw	r5,-4(fp)
    88e8:	01800104 	movi	r6,4
    88ec:	000f883a 	mov	r7,zero
    88f0:	00049d00 	call	49d0 <OS_EventTaskRdy>
    88f4:	e0bff817 	ldw	r2,-32(fp)
    88f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88fc:	e0bffb17 	ldw	r2,-20(fp)
    8900:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    8904:	00053d80 	call	53d8 <OS_Sched>
        return (OS_ERR_NONE);
    8908:	0005883a 	mov	r2,zero
    890c:	00002d06 	br	89c4 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8910:	e0bffe17 	ldw	r2,-8(fp)
    8914:	10800117 	ldw	r2,4(r2)
    8918:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    891c:	e0bff917 	ldw	r2,-28(fp)
    8920:	10c0058b 	ldhu	r3,22(r2)
    8924:	e0bff917 	ldw	r2,-28(fp)
    8928:	1080050b 	ldhu	r2,20(r2)
    892c:	18ffffcc 	andi	r3,r3,65535
    8930:	10bfffcc 	andi	r2,r2,65535
    8934:	18800636 	bltu	r3,r2,8950 <OSQPostFront+0xe8>
    8938:	e0bff817 	ldw	r2,-32(fp)
    893c:	e0bffc15 	stw	r2,-16(fp)
    8940:	e0bffc17 	ldw	r2,-16(fp)
    8944:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8948:	00800784 	movi	r2,30
    894c:	00001d06 	br	89c4 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    8950:	e0bff917 	ldw	r2,-28(fp)
    8954:	10c00417 	ldw	r3,16(r2)
    8958:	e0bff917 	ldw	r2,-28(fp)
    895c:	10800117 	ldw	r2,4(r2)
    8960:	1880041e 	bne	r3,r2,8974 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    8964:	e0bff917 	ldw	r2,-28(fp)
    8968:	10c00217 	ldw	r3,8(r2)
    896c:	e0bff917 	ldw	r2,-28(fp)
    8970:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    8974:	e0bff917 	ldw	r2,-28(fp)
    8978:	10800417 	ldw	r2,16(r2)
    897c:	10ffff04 	addi	r3,r2,-4
    8980:	e0bff917 	ldw	r2,-28(fp)
    8984:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    8988:	e0bff917 	ldw	r2,-28(fp)
    898c:	10800417 	ldw	r2,16(r2)
    8990:	e0ffff17 	ldw	r3,-4(fp)
    8994:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8998:	e0bff917 	ldw	r2,-28(fp)
    899c:	1080058b 	ldhu	r2,22(r2)
    89a0:	10800044 	addi	r2,r2,1
    89a4:	1007883a 	mov	r3,r2
    89a8:	e0bff917 	ldw	r2,-28(fp)
    89ac:	10c0058d 	sth	r3,22(r2)
    89b0:	e0bff817 	ldw	r2,-32(fp)
    89b4:	e0bffd15 	stw	r2,-12(fp)
    89b8:	e0bffd17 	ldw	r2,-12(fp)
    89bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    89c0:	0005883a 	mov	r2,zero
}
    89c4:	e037883a 	mov	sp,fp
    89c8:	dfc00117 	ldw	ra,4(sp)
    89cc:	df000017 	ldw	fp,0(sp)
    89d0:	dec00204 	addi	sp,sp,8
    89d4:	f800283a 	ret

000089d8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    89d8:	defff504 	addi	sp,sp,-44
    89dc:	dfc00a15 	stw	ra,40(sp)
    89e0:	df000915 	stw	fp,36(sp)
    89e4:	df000904 	addi	fp,sp,36
    89e8:	e13ffd15 	stw	r4,-12(fp)
    89ec:	e17ffe15 	stw	r5,-8(fp)
    89f0:	3005883a 	mov	r2,r6
    89f4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    89f8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    89fc:	e0bffd17 	ldw	r2,-12(fp)
    8a00:	1000021e 	bne	r2,zero,8a0c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    8a04:	00800104 	movi	r2,4
    8a08:	00007106 	br	8bd0 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8a0c:	e0bffd17 	ldw	r2,-12(fp)
    8a10:	10800003 	ldbu	r2,0(r2)
    8a14:	10803fcc 	andi	r2,r2,255
    8a18:	108000a0 	cmpeqi	r2,r2,2
    8a1c:	1000021e 	bne	r2,zero,8a28 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    8a20:	00800044 	movi	r2,1
    8a24:	00006a06 	br	8bd0 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8a28:	0005303a 	rdctl	r2,status
    8a2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a30:	e0fff917 	ldw	r3,-28(fp)
    8a34:	00bfff84 	movi	r2,-2
    8a38:	1884703a 	and	r2,r3,r2
    8a3c:	1001703a 	wrctl	status,r2
  
  return context;
    8a40:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    8a44:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    8a48:	e0bffd17 	ldw	r2,-12(fp)
    8a4c:	10800283 	ldbu	r2,10(r2)
    8a50:	10803fcc 	andi	r2,r2,255
    8a54:	10001d26 	beq	r2,zero,8acc <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    8a58:	e0bfff03 	ldbu	r2,-4(fp)
    8a5c:	1080004c 	andi	r2,r2,1
    8a60:	10000b26 	beq	r2,zero,8a90 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8a64:	00000506 	br	8a7c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8a68:	e13ffd17 	ldw	r4,-12(fp)
    8a6c:	e17ffe17 	ldw	r5,-8(fp)
    8a70:	01800104 	movi	r6,4
    8a74:	000f883a 	mov	r7,zero
    8a78:	00049d00 	call	49d0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8a7c:	e0bffd17 	ldw	r2,-12(fp)
    8a80:	10800283 	ldbu	r2,10(r2)
    8a84:	10803fcc 	andi	r2,r2,255
    8a88:	103ff71e 	bne	r2,zero,8a68 <__alt_data_end+0xfc008a68>
    8a8c:	00000506 	br	8aa4 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8a90:	e13ffd17 	ldw	r4,-12(fp)
    8a94:	e17ffe17 	ldw	r5,-8(fp)
    8a98:	01800104 	movi	r6,4
    8a9c:	000f883a 	mov	r7,zero
    8aa0:	00049d00 	call	49d0 <OS_EventTaskRdy>
    8aa4:	e0bff717 	ldw	r2,-36(fp)
    8aa8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8aac:	e0bffa17 	ldw	r2,-24(fp)
    8ab0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    8ab4:	e0bfff03 	ldbu	r2,-4(fp)
    8ab8:	1080010c 	andi	r2,r2,4
    8abc:	1000011e 	bne	r2,zero,8ac4 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    8ac0:	00053d80 	call	53d8 <OS_Sched>
        }
        return (OS_ERR_NONE);
    8ac4:	0005883a 	mov	r2,zero
    8ac8:	00004106 	br	8bd0 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8acc:	e0bffd17 	ldw	r2,-12(fp)
    8ad0:	10800117 	ldw	r2,4(r2)
    8ad4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8ad8:	e0bff817 	ldw	r2,-32(fp)
    8adc:	10c0058b 	ldhu	r3,22(r2)
    8ae0:	e0bff817 	ldw	r2,-32(fp)
    8ae4:	1080050b 	ldhu	r2,20(r2)
    8ae8:	18ffffcc 	andi	r3,r3,65535
    8aec:	10bfffcc 	andi	r2,r2,65535
    8af0:	18800636 	bltu	r3,r2,8b0c <OSQPostOpt+0x134>
    8af4:	e0bff717 	ldw	r2,-36(fp)
    8af8:	e0bffb15 	stw	r2,-20(fp)
    8afc:	e0bffb17 	ldw	r2,-20(fp)
    8b00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8b04:	00800784 	movi	r2,30
    8b08:	00003106 	br	8bd0 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    8b0c:	e0bfff03 	ldbu	r2,-4(fp)
    8b10:	1080008c 	andi	r2,r2,2
    8b14:	10001326 	beq	r2,zero,8b64 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    8b18:	e0bff817 	ldw	r2,-32(fp)
    8b1c:	10c00417 	ldw	r3,16(r2)
    8b20:	e0bff817 	ldw	r2,-32(fp)
    8b24:	10800117 	ldw	r2,4(r2)
    8b28:	1880041e 	bne	r3,r2,8b3c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    8b2c:	e0bff817 	ldw	r2,-32(fp)
    8b30:	10c00217 	ldw	r3,8(r2)
    8b34:	e0bff817 	ldw	r2,-32(fp)
    8b38:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    8b3c:	e0bff817 	ldw	r2,-32(fp)
    8b40:	10800417 	ldw	r2,16(r2)
    8b44:	10ffff04 	addi	r3,r2,-4
    8b48:	e0bff817 	ldw	r2,-32(fp)
    8b4c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    8b50:	e0bff817 	ldw	r2,-32(fp)
    8b54:	10800417 	ldw	r2,16(r2)
    8b58:	e0fffe17 	ldw	r3,-8(fp)
    8b5c:	10c00015 	stw	r3,0(r2)
    8b60:	00001006 	br	8ba4 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    8b64:	e0bff817 	ldw	r2,-32(fp)
    8b68:	10800317 	ldw	r2,12(r2)
    8b6c:	11000104 	addi	r4,r2,4
    8b70:	e0fff817 	ldw	r3,-32(fp)
    8b74:	19000315 	stw	r4,12(r3)
    8b78:	e0fffe17 	ldw	r3,-8(fp)
    8b7c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    8b80:	e0bff817 	ldw	r2,-32(fp)
    8b84:	10c00317 	ldw	r3,12(r2)
    8b88:	e0bff817 	ldw	r2,-32(fp)
    8b8c:	10800217 	ldw	r2,8(r2)
    8b90:	1880041e 	bne	r3,r2,8ba4 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    8b94:	e0bff817 	ldw	r2,-32(fp)
    8b98:	10c00117 	ldw	r3,4(r2)
    8b9c:	e0bff817 	ldw	r2,-32(fp)
    8ba0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8ba4:	e0bff817 	ldw	r2,-32(fp)
    8ba8:	1080058b 	ldhu	r2,22(r2)
    8bac:	10800044 	addi	r2,r2,1
    8bb0:	1007883a 	mov	r3,r2
    8bb4:	e0bff817 	ldw	r2,-32(fp)
    8bb8:	10c0058d 	sth	r3,22(r2)
    8bbc:	e0bff717 	ldw	r2,-36(fp)
    8bc0:	e0bffc15 	stw	r2,-16(fp)
    8bc4:	e0bffc17 	ldw	r2,-16(fp)
    8bc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8bcc:	0005883a 	mov	r2,zero
}
    8bd0:	e037883a 	mov	sp,fp
    8bd4:	dfc00117 	ldw	ra,4(sp)
    8bd8:	df000017 	ldw	fp,0(sp)
    8bdc:	dec00204 	addi	sp,sp,8
    8be0:	f800283a 	ret

00008be4 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    8be4:	defff604 	addi	sp,sp,-40
    8be8:	df000915 	stw	fp,36(sp)
    8bec:	df000904 	addi	fp,sp,36
    8bf0:	e13ffe15 	stw	r4,-8(fp)
    8bf4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8bf8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8bfc:	e0bffe17 	ldw	r2,-8(fp)
    8c00:	1000021e 	bne	r2,zero,8c0c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8c04:	00800104 	movi	r2,4
    8c08:	00004906 	br	8d30 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    8c0c:	e0bfff17 	ldw	r2,-4(fp)
    8c10:	1000021e 	bne	r2,zero,8c1c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8c14:	00800244 	movi	r2,9
    8c18:	00004506 	br	8d30 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8c1c:	e0bffe17 	ldw	r2,-8(fp)
    8c20:	10800003 	ldbu	r2,0(r2)
    8c24:	10803fcc 	andi	r2,r2,255
    8c28:	108000a0 	cmpeqi	r2,r2,2
    8c2c:	1000021e 	bne	r2,zero,8c38 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8c30:	00800044 	movi	r2,1
    8c34:	00003e06 	br	8d30 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c38:	0005303a 	rdctl	r2,status
    8c3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c40:	e0fffc17 	ldw	r3,-16(fp)
    8c44:	00bfff84 	movi	r2,-2
    8c48:	1884703a 	and	r2,r3,r2
    8c4c:	1001703a 	wrctl	status,r2
  
  return context;
    8c50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8c54:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    8c58:	e0bffe17 	ldw	r2,-8(fp)
    8c5c:	10c00283 	ldbu	r3,10(r2)
    8c60:	e0bfff17 	ldw	r2,-4(fp)
    8c64:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    8c68:	e0bffe17 	ldw	r2,-8(fp)
    8c6c:	108002c4 	addi	r2,r2,11
    8c70:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    8c74:	e0bfff17 	ldw	r2,-4(fp)
    8c78:	10800204 	addi	r2,r2,8
    8c7c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8c80:	e03ff705 	stb	zero,-36(fp)
    8c84:	00000b06 	br	8cb4 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    8c88:	e0bff917 	ldw	r2,-28(fp)
    8c8c:	10c00044 	addi	r3,r2,1
    8c90:	e0fff915 	stw	r3,-28(fp)
    8c94:	e0fff817 	ldw	r3,-32(fp)
    8c98:	19000044 	addi	r4,r3,1
    8c9c:	e13ff815 	stw	r4,-32(fp)
    8ca0:	18c00003 	ldbu	r3,0(r3)
    8ca4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8ca8:	e0bff703 	ldbu	r2,-36(fp)
    8cac:	10800044 	addi	r2,r2,1
    8cb0:	e0bff705 	stb	r2,-36(fp)
    8cb4:	e0bff703 	ldbu	r2,-36(fp)
    8cb8:	108000f0 	cmpltui	r2,r2,3
    8cbc:	103ff21e 	bne	r2,zero,8c88 <__alt_data_end+0xfc008c88>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    8cc0:	e0bffe17 	ldw	r2,-8(fp)
    8cc4:	10800117 	ldw	r2,4(r2)
    8cc8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    8ccc:	e0bffb17 	ldw	r2,-20(fp)
    8cd0:	1080058b 	ldhu	r2,22(r2)
    8cd4:	10bfffcc 	andi	r2,r2,65535
    8cd8:	10000626 	beq	r2,zero,8cf4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    8cdc:	e0bffb17 	ldw	r2,-20(fp)
    8ce0:	10800417 	ldw	r2,16(r2)
    8ce4:	10c00017 	ldw	r3,0(r2)
    8ce8:	e0bfff17 	ldw	r2,-4(fp)
    8cec:	10c00015 	stw	r3,0(r2)
    8cf0:	00000206 	br	8cfc <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    8cf4:	e0bfff17 	ldw	r2,-4(fp)
    8cf8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    8cfc:	e0bffb17 	ldw	r2,-20(fp)
    8d00:	10c0058b 	ldhu	r3,22(r2)
    8d04:	e0bfff17 	ldw	r2,-4(fp)
    8d08:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    8d0c:	e0bffb17 	ldw	r2,-20(fp)
    8d10:	10c0050b 	ldhu	r3,20(r2)
    8d14:	e0bfff17 	ldw	r2,-4(fp)
    8d18:	10c0018d 	sth	r3,6(r2)
    8d1c:	e0bffa17 	ldw	r2,-24(fp)
    8d20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8d24:	e0bffd17 	ldw	r2,-12(fp)
    8d28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8d2c:	0005883a 	mov	r2,zero
}
    8d30:	e037883a 	mov	sp,fp
    8d34:	df000017 	ldw	fp,0(sp)
    8d38:	dec00104 	addi	sp,sp,4
    8d3c:	f800283a 	ret

00008d40 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    8d40:	defffb04 	addi	sp,sp,-20
    8d44:	dfc00415 	stw	ra,16(sp)
    8d48:	df000315 	stw	fp,12(sp)
    8d4c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    8d50:	01000074 	movhi	r4,1
    8d54:	211c6104 	addi	r4,r4,29060
    8d58:	01407804 	movi	r5,480
    8d5c:	00053240 	call	5324 <OS_MemClr>
    pq1 = &OSQTbl[0];
    8d60:	00800074 	movhi	r2,1
    8d64:	109c6104 	addi	r2,r2,29060
    8d68:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    8d6c:	00800074 	movhi	r2,1
    8d70:	109c6704 	addi	r2,r2,29084
    8d74:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    8d78:	e03ffd0d 	sth	zero,-12(fp)
    8d7c:	00000c06 	br	8db0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    8d80:	e0bffe17 	ldw	r2,-8(fp)
    8d84:	e0ffff17 	ldw	r3,-4(fp)
    8d88:	10c00015 	stw	r3,0(r2)
        pq1++;
    8d8c:	e0bffe17 	ldw	r2,-8(fp)
    8d90:	10800604 	addi	r2,r2,24
    8d94:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    8d98:	e0bfff17 	ldw	r2,-4(fp)
    8d9c:	10800604 	addi	r2,r2,24
    8da0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    8da4:	e0bffd0b 	ldhu	r2,-12(fp)
    8da8:	10800044 	addi	r2,r2,1
    8dac:	e0bffd0d 	sth	r2,-12(fp)
    8db0:	e0bffd0b 	ldhu	r2,-12(fp)
    8db4:	108004f0 	cmpltui	r2,r2,19
    8db8:	103ff11e 	bne	r2,zero,8d80 <__alt_data_end+0xfc008d80>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    8dbc:	e0bffe17 	ldw	r2,-8(fp)
    8dc0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    8dc4:	00800074 	movhi	r2,1
    8dc8:	10866304 	addi	r2,r2,6540
    8dcc:	00c00074 	movhi	r3,1
    8dd0:	18dc6104 	addi	r3,r3,29060
    8dd4:	10c00015 	stw	r3,0(r2)
#endif
}
    8dd8:	e037883a 	mov	sp,fp
    8ddc:	dfc00117 	ldw	ra,4(sp)
    8de0:	df000017 	ldw	fp,0(sp)
    8de4:	dec00204 	addi	sp,sp,8
    8de8:	f800283a 	ret

00008dec <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    8dec:	defffa04 	addi	sp,sp,-24
    8df0:	df000515 	stw	fp,20(sp)
    8df4:	df000504 	addi	fp,sp,20
    8df8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8dfc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8e00:	e0bfff17 	ldw	r2,-4(fp)
    8e04:	1000021e 	bne	r2,zero,8e10 <OSSemAccept+0x24>
        return (0);
    8e08:	0005883a 	mov	r2,zero
    8e0c:	00001f06 	br	8e8c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8e10:	e0bfff17 	ldw	r2,-4(fp)
    8e14:	10800003 	ldbu	r2,0(r2)
    8e18:	10803fcc 	andi	r2,r2,255
    8e1c:	108000e0 	cmpeqi	r2,r2,3
    8e20:	1000021e 	bne	r2,zero,8e2c <OSSemAccept+0x40>
        return (0);
    8e24:	0005883a 	mov	r2,zero
    8e28:	00001806 	br	8e8c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e2c:	0005303a 	rdctl	r2,status
    8e30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e34:	e0fffd17 	ldw	r3,-12(fp)
    8e38:	00bfff84 	movi	r2,-2
    8e3c:	1884703a 	and	r2,r3,r2
    8e40:	1001703a 	wrctl	status,r2
  
  return context;
    8e44:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8e48:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    8e4c:	e0bfff17 	ldw	r2,-4(fp)
    8e50:	1080020b 	ldhu	r2,8(r2)
    8e54:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    8e58:	e0bffc0b 	ldhu	r2,-16(fp)
    8e5c:	10000626 	beq	r2,zero,8e78 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    8e60:	e0bfff17 	ldw	r2,-4(fp)
    8e64:	1080020b 	ldhu	r2,8(r2)
    8e68:	10bfffc4 	addi	r2,r2,-1
    8e6c:	1007883a 	mov	r3,r2
    8e70:	e0bfff17 	ldw	r2,-4(fp)
    8e74:	10c0020d 	sth	r3,8(r2)
    8e78:	e0bffb17 	ldw	r2,-20(fp)
    8e7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e80:	e0bffe17 	ldw	r2,-8(fp)
    8e84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    8e88:	e0bffc0b 	ldhu	r2,-16(fp)
}
    8e8c:	e037883a 	mov	sp,fp
    8e90:	df000017 	ldw	fp,0(sp)
    8e94:	dec00104 	addi	sp,sp,4
    8e98:	f800283a 	ret

00008e9c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    8e9c:	defff904 	addi	sp,sp,-28
    8ea0:	dfc00615 	stw	ra,24(sp)
    8ea4:	df000515 	stw	fp,20(sp)
    8ea8:	df000504 	addi	fp,sp,20
    8eac:	2005883a 	mov	r2,r4
    8eb0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8eb4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8eb8:	00800074 	movhi	r2,1
    8ebc:	10866604 	addi	r2,r2,6552
    8ec0:	10800003 	ldbu	r2,0(r2)
    8ec4:	10803fcc 	andi	r2,r2,255
    8ec8:	10000226 	beq	r2,zero,8ed4 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    8ecc:	0005883a 	mov	r2,zero
    8ed0:	00002d06 	br	8f88 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ed4:	0005303a 	rdctl	r2,status
    8ed8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8edc:	e0fffd17 	ldw	r3,-12(fp)
    8ee0:	00bfff84 	movi	r2,-2
    8ee4:	1884703a 	and	r2,r3,r2
    8ee8:	1001703a 	wrctl	status,r2
  
  return context;
    8eec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8ef0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    8ef4:	00800074 	movhi	r2,1
    8ef8:	10866504 	addi	r2,r2,6548
    8efc:	10800017 	ldw	r2,0(r2)
    8f00:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    8f04:	00800074 	movhi	r2,1
    8f08:	10866504 	addi	r2,r2,6548
    8f0c:	10800017 	ldw	r2,0(r2)
    8f10:	10000726 	beq	r2,zero,8f30 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    8f14:	00800074 	movhi	r2,1
    8f18:	10866504 	addi	r2,r2,6548
    8f1c:	10800017 	ldw	r2,0(r2)
    8f20:	10c00117 	ldw	r3,4(r2)
    8f24:	00800074 	movhi	r2,1
    8f28:	10866504 	addi	r2,r2,6548
    8f2c:	10c00015 	stw	r3,0(r2)
    8f30:	e0bffb17 	ldw	r2,-20(fp)
    8f34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8f38:	e0bffe17 	ldw	r2,-8(fp)
    8f3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    8f40:	e0bffc17 	ldw	r2,-16(fp)
    8f44:	10000f26 	beq	r2,zero,8f84 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    8f48:	e0bffc17 	ldw	r2,-16(fp)
    8f4c:	00c000c4 	movi	r3,3
    8f50:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    8f54:	e0bffc17 	ldw	r2,-16(fp)
    8f58:	e0ffff0b 	ldhu	r3,-4(fp)
    8f5c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    8f60:	e0bffc17 	ldw	r2,-16(fp)
    8f64:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    8f68:	e0bffc17 	ldw	r2,-16(fp)
    8f6c:	00c00fc4 	movi	r3,63
    8f70:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    8f74:	e0bffc17 	ldw	r2,-16(fp)
    8f78:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    8f7c:	e13ffc17 	ldw	r4,-16(fp)
    8f80:	0004f600 	call	4f60 <OS_EventWaitListInit>
    }
    return (pevent);
    8f84:	e0bffc17 	ldw	r2,-16(fp)
}
    8f88:	e037883a 	mov	sp,fp
    8f8c:	dfc00117 	ldw	ra,4(sp)
    8f90:	df000017 	ldw	fp,0(sp)
    8f94:	dec00204 	addi	sp,sp,8
    8f98:	f800283a 	ret

00008f9c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8f9c:	defff304 	addi	sp,sp,-52
    8fa0:	dfc00c15 	stw	ra,48(sp)
    8fa4:	df000b15 	stw	fp,44(sp)
    8fa8:	df000b04 	addi	fp,sp,44
    8fac:	e13ffd15 	stw	r4,-12(fp)
    8fb0:	2805883a 	mov	r2,r5
    8fb4:	e1bfff15 	stw	r6,-4(fp)
    8fb8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8fbc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8fc0:	e0bfff17 	ldw	r2,-4(fp)
    8fc4:	1000021e 	bne	r2,zero,8fd0 <OSSemDel+0x34>
        return (pevent);
    8fc8:	e0bffd17 	ldw	r2,-12(fp)
    8fcc:	00008a06 	br	91f8 <OSSemDel+0x25c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8fd0:	e0bffd17 	ldw	r2,-12(fp)
    8fd4:	1000051e 	bne	r2,zero,8fec <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8fd8:	e0bfff17 	ldw	r2,-4(fp)
    8fdc:	00c00104 	movi	r3,4
    8fe0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8fe4:	e0bffd17 	ldw	r2,-12(fp)
    8fe8:	00008306 	br	91f8 <OSSemDel+0x25c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    8fec:	e0bffd17 	ldw	r2,-12(fp)
    8ff0:	10800003 	ldbu	r2,0(r2)
    8ff4:	10803fcc 	andi	r2,r2,255
    8ff8:	108000e0 	cmpeqi	r2,r2,3
    8ffc:	1000051e 	bne	r2,zero,9014 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9000:	e0bfff17 	ldw	r2,-4(fp)
    9004:	00c00044 	movi	r3,1
    9008:	10c00005 	stb	r3,0(r2)
        return (pevent);
    900c:	e0bffd17 	ldw	r2,-12(fp)
    9010:	00007906 	br	91f8 <OSSemDel+0x25c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9014:	00800074 	movhi	r2,1
    9018:	10866604 	addi	r2,r2,6552
    901c:	10800003 	ldbu	r2,0(r2)
    9020:	10803fcc 	andi	r2,r2,255
    9024:	10000526 	beq	r2,zero,903c <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    9028:	e0bfff17 	ldw	r2,-4(fp)
    902c:	00c003c4 	movi	r3,15
    9030:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9034:	e0bffd17 	ldw	r2,-12(fp)
    9038:	00006f06 	br	91f8 <OSSemDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    903c:	0005303a 	rdctl	r2,status
    9040:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9044:	e0fff817 	ldw	r3,-32(fp)
    9048:	00bfff84 	movi	r2,-2
    904c:	1884703a 	and	r2,r3,r2
    9050:	1001703a 	wrctl	status,r2
  
  return context;
    9054:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    9058:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    905c:	e0bffd17 	ldw	r2,-12(fp)
    9060:	10800283 	ldbu	r2,10(r2)
    9064:	10803fcc 	andi	r2,r2,255
    9068:	10000326 	beq	r2,zero,9078 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    906c:	00800044 	movi	r2,1
    9070:	e0bff505 	stb	r2,-44(fp)
    9074:	00000106 	br	907c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    9078:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    907c:	e0bffe03 	ldbu	r2,-8(fp)
    9080:	10000326 	beq	r2,zero,9090 <OSSemDel+0xf4>
    9084:	10800060 	cmpeqi	r2,r2,1
    9088:	10002d1e 	bne	r2,zero,9140 <OSSemDel+0x1a4>
    908c:	00004f06 	br	91cc <OSSemDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    9090:	e0bff503 	ldbu	r2,-44(fp)
    9094:	10001a1e 	bne	r2,zero,9100 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    9098:	e0bffd17 	ldw	r2,-12(fp)
    909c:	00c00fc4 	movi	r3,63
    90a0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    90a4:	e0bffd17 	ldw	r2,-12(fp)
    90a8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    90ac:	e0bffd17 	ldw	r2,-12(fp)
    90b0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    90b4:	00800074 	movhi	r2,1
    90b8:	10866504 	addi	r2,r2,6548
    90bc:	10c00017 	ldw	r3,0(r2)
    90c0:	e0bffd17 	ldw	r2,-12(fp)
    90c4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    90c8:	e0bffd17 	ldw	r2,-12(fp)
    90cc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    90d0:	00800074 	movhi	r2,1
    90d4:	10866504 	addi	r2,r2,6548
    90d8:	e0fffd17 	ldw	r3,-12(fp)
    90dc:	10c00015 	stw	r3,0(r2)
    90e0:	e0bff717 	ldw	r2,-36(fp)
    90e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    90e8:	e0bff917 	ldw	r2,-28(fp)
    90ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    90f0:	e0bfff17 	ldw	r2,-4(fp)
    90f4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    90f8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    90fc:	00003d06 	br	91f4 <OSSemDel+0x258>
    9100:	e0bff717 	ldw	r2,-36(fp)
    9104:	e0bffa15 	stw	r2,-24(fp)
    9108:	e0bffa17 	ldw	r2,-24(fp)
    910c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    9110:	e0bfff17 	ldw	r2,-4(fp)
    9114:	00c01244 	movi	r3,73
    9118:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    911c:	e0bffd17 	ldw	r2,-12(fp)
    9120:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    9124:	00003306 	br	91f4 <OSSemDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    9128:	e13ffd17 	ldw	r4,-12(fp)
    912c:	000b883a 	mov	r5,zero
    9130:	01800044 	movi	r6,1
    9134:	000f883a 	mov	r7,zero
    9138:	00049d00 	call	49d0 <OS_EventTaskRdy>
    913c:	00000106 	br	9144 <OSSemDel+0x1a8>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    9140:	0001883a 	nop
    9144:	e0bffd17 	ldw	r2,-12(fp)
    9148:	10800283 	ldbu	r2,10(r2)
    914c:	10803fcc 	andi	r2,r2,255
    9150:	103ff51e 	bne	r2,zero,9128 <__alt_data_end+0xfc009128>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    9154:	e0bffd17 	ldw	r2,-12(fp)
    9158:	00c00fc4 	movi	r3,63
    915c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    9160:	e0bffd17 	ldw	r2,-12(fp)
    9164:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9168:	e0bffd17 	ldw	r2,-12(fp)
    916c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    9170:	00800074 	movhi	r2,1
    9174:	10866504 	addi	r2,r2,6548
    9178:	10c00017 	ldw	r3,0(r2)
    917c:	e0bffd17 	ldw	r2,-12(fp)
    9180:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9184:	e0bffd17 	ldw	r2,-12(fp)
    9188:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    918c:	00800074 	movhi	r2,1
    9190:	10866504 	addi	r2,r2,6548
    9194:	e0fffd17 	ldw	r3,-12(fp)
    9198:	10c00015 	stw	r3,0(r2)
    919c:	e0bff717 	ldw	r2,-36(fp)
    91a0:	e0bffb15 	stw	r2,-20(fp)
    91a4:	e0bffb17 	ldw	r2,-20(fp)
    91a8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    91ac:	e0bff503 	ldbu	r2,-44(fp)
    91b0:	10800058 	cmpnei	r2,r2,1
    91b4:	1000011e 	bne	r2,zero,91bc <OSSemDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    91b8:	00053d80 	call	53d8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    91bc:	e0bfff17 	ldw	r2,-4(fp)
    91c0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    91c4:	e03ff615 	stw	zero,-40(fp)
             break;
    91c8:	00000a06 	br	91f4 <OSSemDel+0x258>
    91cc:	e0bff717 	ldw	r2,-36(fp)
    91d0:	e0bffc15 	stw	r2,-16(fp)
    91d4:	e0bffc17 	ldw	r2,-16(fp)
    91d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    91dc:	e0bfff17 	ldw	r2,-4(fp)
    91e0:	00c001c4 	movi	r3,7
    91e4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    91e8:	e0bffd17 	ldw	r2,-12(fp)
    91ec:	e0bff615 	stw	r2,-40(fp)
             break;
    91f0:	0001883a 	nop
    }
    return (pevent_return);
    91f4:	e0bff617 	ldw	r2,-40(fp)
}
    91f8:	e037883a 	mov	sp,fp
    91fc:	dfc00117 	ldw	ra,4(sp)
    9200:	df000017 	ldw	fp,0(sp)
    9204:	dec00204 	addi	sp,sp,8
    9208:	f800283a 	ret

0000920c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    920c:	defff504 	addi	sp,sp,-44
    9210:	dfc00a15 	stw	ra,40(sp)
    9214:	df000915 	stw	fp,36(sp)
    9218:	df000904 	addi	fp,sp,36
    921c:	e13ffd15 	stw	r4,-12(fp)
    9220:	2805883a 	mov	r2,r5
    9224:	e1bfff15 	stw	r6,-4(fp)
    9228:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    922c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9230:	e0bfff17 	ldw	r2,-4(fp)
    9234:	1000011e 	bne	r2,zero,923c <OSSemPend+0x30>
        return;
    9238:	00008906 	br	9460 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    923c:	e0bffd17 	ldw	r2,-12(fp)
    9240:	1000041e 	bne	r2,zero,9254 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    9244:	e0bfff17 	ldw	r2,-4(fp)
    9248:	00c00104 	movi	r3,4
    924c:	10c00005 	stb	r3,0(r2)
        return;
    9250:	00008306 	br	9460 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9254:	e0bffd17 	ldw	r2,-12(fp)
    9258:	10800003 	ldbu	r2,0(r2)
    925c:	10803fcc 	andi	r2,r2,255
    9260:	108000e0 	cmpeqi	r2,r2,3
    9264:	1000041e 	bne	r2,zero,9278 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    9268:	e0bfff17 	ldw	r2,-4(fp)
    926c:	00c00044 	movi	r3,1
    9270:	10c00005 	stb	r3,0(r2)
        return;
    9274:	00007a06 	br	9460 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    9278:	00800074 	movhi	r2,1
    927c:	10866604 	addi	r2,r2,6552
    9280:	10800003 	ldbu	r2,0(r2)
    9284:	10803fcc 	andi	r2,r2,255
    9288:	10000426 	beq	r2,zero,929c <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    928c:	e0bfff17 	ldw	r2,-4(fp)
    9290:	00c00084 	movi	r3,2
    9294:	10c00005 	stb	r3,0(r2)
        return;
    9298:	00007106 	br	9460 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    929c:	00800074 	movhi	r2,1
    92a0:	10865804 	addi	r2,r2,6496
    92a4:	10800003 	ldbu	r2,0(r2)
    92a8:	10803fcc 	andi	r2,r2,255
    92ac:	10000426 	beq	r2,zero,92c0 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    92b0:	e0bfff17 	ldw	r2,-4(fp)
    92b4:	00c00344 	movi	r3,13
    92b8:	10c00005 	stb	r3,0(r2)
        return;
    92bc:	00006806 	br	9460 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92c0:	0005303a 	rdctl	r2,status
    92c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92c8:	e0fff817 	ldw	r3,-32(fp)
    92cc:	00bfff84 	movi	r2,-2
    92d0:	1884703a 	and	r2,r3,r2
    92d4:	1001703a 	wrctl	status,r2
  
  return context;
    92d8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    92dc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    92e0:	e0bffd17 	ldw	r2,-12(fp)
    92e4:	1080020b 	ldhu	r2,8(r2)
    92e8:	10bfffcc 	andi	r2,r2,65535
    92ec:	10000d26 	beq	r2,zero,9324 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    92f0:	e0bffd17 	ldw	r2,-12(fp)
    92f4:	1080020b 	ldhu	r2,8(r2)
    92f8:	10bfffc4 	addi	r2,r2,-1
    92fc:	1007883a 	mov	r3,r2
    9300:	e0bffd17 	ldw	r2,-12(fp)
    9304:	10c0020d 	sth	r3,8(r2)
    9308:	e0bff717 	ldw	r2,-36(fp)
    930c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9310:	e0bff917 	ldw	r2,-28(fp)
    9314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    9318:	e0bfff17 	ldw	r2,-4(fp)
    931c:	10000005 	stb	zero,0(r2)
        return;
    9320:	00004f06 	br	9460 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    9324:	00800074 	movhi	r2,1
    9328:	10866704 	addi	r2,r2,6556
    932c:	10800017 	ldw	r2,0(r2)
    9330:	00c00074 	movhi	r3,1
    9334:	18c66704 	addi	r3,r3,6556
    9338:	18c00017 	ldw	r3,0(r3)
    933c:	18c00c03 	ldbu	r3,48(r3)
    9340:	18c00054 	ori	r3,r3,1
    9344:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    9348:	00800074 	movhi	r2,1
    934c:	10866704 	addi	r2,r2,6556
    9350:	10800017 	ldw	r2,0(r2)
    9354:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    9358:	00800074 	movhi	r2,1
    935c:	10866704 	addi	r2,r2,6556
    9360:	10800017 	ldw	r2,0(r2)
    9364:	e0fffe0b 	ldhu	r3,-8(fp)
    9368:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    936c:	e13ffd17 	ldw	r4,-12(fp)
    9370:	0004b680 	call	4b68 <OS_EventTaskWait>
    9374:	e0bff717 	ldw	r2,-36(fp)
    9378:	e0bffa15 	stw	r2,-24(fp)
    937c:	e0bffa17 	ldw	r2,-24(fp)
    9380:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    9384:	00053d80 	call	53d8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9388:	0005303a 	rdctl	r2,status
    938c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9390:	e0fffb17 	ldw	r3,-20(fp)
    9394:	00bfff84 	movi	r2,-2
    9398:	1884703a 	and	r2,r3,r2
    939c:	1001703a 	wrctl	status,r2
  
  return context;
    93a0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    93a4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    93a8:	00800074 	movhi	r2,1
    93ac:	10866704 	addi	r2,r2,6556
    93b0:	10800017 	ldw	r2,0(r2)
    93b4:	10800c43 	ldbu	r2,49(r2)
    93b8:	10803fcc 	andi	r2,r2,255
    93bc:	10000326 	beq	r2,zero,93cc <OSSemPend+0x1c0>
    93c0:	108000a0 	cmpeqi	r2,r2,2
    93c4:	1000041e 	bne	r2,zero,93d8 <OSSemPend+0x1cc>
    93c8:	00000706 	br	93e8 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    93cc:	e0bfff17 	ldw	r2,-4(fp)
    93d0:	10000005 	stb	zero,0(r2)
             break;
    93d4:	00000e06 	br	9410 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    93d8:	e0bfff17 	ldw	r2,-4(fp)
    93dc:	00c00384 	movi	r3,14
    93e0:	10c00005 	stb	r3,0(r2)
             break;
    93e4:	00000a06 	br	9410 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    93e8:	00800074 	movhi	r2,1
    93ec:	10866704 	addi	r2,r2,6556
    93f0:	10800017 	ldw	r2,0(r2)
    93f4:	1009883a 	mov	r4,r2
    93f8:	e17ffd17 	ldw	r5,-12(fp)
    93fc:	0004db80 	call	4db8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    9400:	e0bfff17 	ldw	r2,-4(fp)
    9404:	00c00284 	movi	r3,10
    9408:	10c00005 	stb	r3,0(r2)
             break;
    940c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    9410:	00800074 	movhi	r2,1
    9414:	10866704 	addi	r2,r2,6556
    9418:	10800017 	ldw	r2,0(r2)
    941c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    9420:	00800074 	movhi	r2,1
    9424:	10866704 	addi	r2,r2,6556
    9428:	10800017 	ldw	r2,0(r2)
    942c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    9430:	00800074 	movhi	r2,1
    9434:	10866704 	addi	r2,r2,6556
    9438:	10800017 	ldw	r2,0(r2)
    943c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    9440:	00800074 	movhi	r2,1
    9444:	10866704 	addi	r2,r2,6556
    9448:	10800017 	ldw	r2,0(r2)
    944c:	10000815 	stw	zero,32(r2)
    9450:	e0bff717 	ldw	r2,-36(fp)
    9454:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9458:	e0bffc17 	ldw	r2,-16(fp)
    945c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
    9460:	e037883a 	mov	sp,fp
    9464:	dfc00117 	ldw	ra,4(sp)
    9468:	df000017 	ldw	fp,0(sp)
    946c:	dec00204 	addi	sp,sp,8
    9470:	f800283a 	ret

00009474 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9474:	defff604 	addi	sp,sp,-40
    9478:	dfc00915 	stw	ra,36(sp)
    947c:	df000815 	stw	fp,32(sp)
    9480:	df000804 	addi	fp,sp,32
    9484:	e13ffd15 	stw	r4,-12(fp)
    9488:	2805883a 	mov	r2,r5
    948c:	e1bfff15 	stw	r6,-4(fp)
    9490:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9494:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9498:	e0bfff17 	ldw	r2,-4(fp)
    949c:	1000021e 	bne	r2,zero,94a8 <OSSemPendAbort+0x34>
        return (0);
    94a0:	0005883a 	mov	r2,zero
    94a4:	00004b06 	br	95d4 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    94a8:	e0bffd17 	ldw	r2,-12(fp)
    94ac:	1000051e 	bne	r2,zero,94c4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    94b0:	e0bfff17 	ldw	r2,-4(fp)
    94b4:	00c00104 	movi	r3,4
    94b8:	10c00005 	stb	r3,0(r2)
        return (0);
    94bc:	0005883a 	mov	r2,zero
    94c0:	00004406 	br	95d4 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    94c4:	e0bffd17 	ldw	r2,-12(fp)
    94c8:	10800003 	ldbu	r2,0(r2)
    94cc:	10803fcc 	andi	r2,r2,255
    94d0:	108000e0 	cmpeqi	r2,r2,3
    94d4:	1000051e 	bne	r2,zero,94ec <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    94d8:	e0bfff17 	ldw	r2,-4(fp)
    94dc:	00c00044 	movi	r3,1
    94e0:	10c00005 	stb	r3,0(r2)
        return (0);
    94e4:	0005883a 	mov	r2,zero
    94e8:	00003a06 	br	95d4 <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    94ec:	0005303a 	rdctl	r2,status
    94f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    94f4:	e0fffa17 	ldw	r3,-24(fp)
    94f8:	00bfff84 	movi	r2,-2
    94fc:	1884703a 	and	r2,r3,r2
    9500:	1001703a 	wrctl	status,r2
  
  return context;
    9504:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    9508:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    950c:	e0bffd17 	ldw	r2,-12(fp)
    9510:	10800283 	ldbu	r2,10(r2)
    9514:	10803fcc 	andi	r2,r2,255
    9518:	10002726 	beq	r2,zero,95b8 <OSSemPendAbort+0x144>
        nbr_tasks = 0;
    951c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    9520:	e0bffe03 	ldbu	r2,-8(fp)
    9524:	10800060 	cmpeqi	r2,r2,1
    9528:	10000a1e 	bne	r2,zero,9554 <OSSemPendAbort+0xe0>
    952c:	00000f06 	br	956c <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    9530:	e13ffd17 	ldw	r4,-12(fp)
    9534:	000b883a 	mov	r5,zero
    9538:	01800044 	movi	r6,1
    953c:	01c00084 	movi	r7,2
    9540:	00049d00 	call	49d0 <OS_EventTaskRdy>
                     nbr_tasks++;
    9544:	e0bff803 	ldbu	r2,-32(fp)
    9548:	10800044 	addi	r2,r2,1
    954c:	e0bff805 	stb	r2,-32(fp)
    9550:	00000106 	br	9558 <OSSemPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    9554:	0001883a 	nop
    9558:	e0bffd17 	ldw	r2,-12(fp)
    955c:	10800283 	ldbu	r2,10(r2)
    9560:	10803fcc 	andi	r2,r2,255
    9564:	103ff21e 	bne	r2,zero,9530 <__alt_data_end+0xfc009530>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    9568:	00000906 	br	9590 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    956c:	e13ffd17 	ldw	r4,-12(fp)
    9570:	000b883a 	mov	r5,zero
    9574:	01800044 	movi	r6,1
    9578:	01c00084 	movi	r7,2
    957c:	00049d00 	call	49d0 <OS_EventTaskRdy>
                 nbr_tasks++;
    9580:	e0bff803 	ldbu	r2,-32(fp)
    9584:	10800044 	addi	r2,r2,1
    9588:	e0bff805 	stb	r2,-32(fp)
                 break;
    958c:	0001883a 	nop
    9590:	e0bff917 	ldw	r2,-28(fp)
    9594:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9598:	e0bffb17 	ldw	r2,-20(fp)
    959c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    95a0:	00053d80 	call	53d8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    95a4:	e0bfff17 	ldw	r2,-4(fp)
    95a8:	00c00384 	movi	r3,14
    95ac:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    95b0:	e0bff803 	ldbu	r2,-32(fp)
    95b4:	00000706 	br	95d4 <OSSemPendAbort+0x160>
    95b8:	e0bff917 	ldw	r2,-28(fp)
    95bc:	e0bffc15 	stw	r2,-16(fp)
    95c0:	e0bffc17 	ldw	r2,-16(fp)
    95c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    95c8:	e0bfff17 	ldw	r2,-4(fp)
    95cc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    95d0:	0005883a 	mov	r2,zero
}
    95d4:	e037883a 	mov	sp,fp
    95d8:	dfc00117 	ldw	ra,4(sp)
    95dc:	df000017 	ldw	fp,0(sp)
    95e0:	dec00204 	addi	sp,sp,8
    95e4:	f800283a 	ret

000095e8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    95e8:	defff804 	addi	sp,sp,-32
    95ec:	dfc00715 	stw	ra,28(sp)
    95f0:	df000615 	stw	fp,24(sp)
    95f4:	df000604 	addi	fp,sp,24
    95f8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    95fc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9600:	e0bfff17 	ldw	r2,-4(fp)
    9604:	1000021e 	bne	r2,zero,9610 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    9608:	00800104 	movi	r2,4
    960c:	00003506 	br	96e4 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9610:	e0bfff17 	ldw	r2,-4(fp)
    9614:	10800003 	ldbu	r2,0(r2)
    9618:	10803fcc 	andi	r2,r2,255
    961c:	108000e0 	cmpeqi	r2,r2,3
    9620:	1000021e 	bne	r2,zero,962c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    9624:	00800044 	movi	r2,1
    9628:	00002e06 	br	96e4 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    962c:	0005303a 	rdctl	r2,status
    9630:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9634:	e0fffb17 	ldw	r3,-20(fp)
    9638:	00bfff84 	movi	r2,-2
    963c:	1884703a 	and	r2,r3,r2
    9640:	1001703a 	wrctl	status,r2
  
  return context;
    9644:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    9648:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    964c:	e0bfff17 	ldw	r2,-4(fp)
    9650:	10800283 	ldbu	r2,10(r2)
    9654:	10803fcc 	andi	r2,r2,255
    9658:	10000c26 	beq	r2,zero,968c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    965c:	e13fff17 	ldw	r4,-4(fp)
    9660:	000b883a 	mov	r5,zero
    9664:	01800044 	movi	r6,1
    9668:	000f883a 	mov	r7,zero
    966c:	00049d00 	call	49d0 <OS_EventTaskRdy>
    9670:	e0bffa17 	ldw	r2,-24(fp)
    9674:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9678:	e0bffc17 	ldw	r2,-16(fp)
    967c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    9680:	00053d80 	call	53d8 <OS_Sched>
        return (OS_ERR_NONE);
    9684:	0005883a 	mov	r2,zero
    9688:	00001606 	br	96e4 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    968c:	e0bfff17 	ldw	r2,-4(fp)
    9690:	1080020b 	ldhu	r2,8(r2)
    9694:	10ffffcc 	andi	r3,r2,65535
    9698:	00bfffd4 	movui	r2,65535
    969c:	18800c26 	beq	r3,r2,96d0 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    96a0:	e0bfff17 	ldw	r2,-4(fp)
    96a4:	1080020b 	ldhu	r2,8(r2)
    96a8:	10800044 	addi	r2,r2,1
    96ac:	1007883a 	mov	r3,r2
    96b0:	e0bfff17 	ldw	r2,-4(fp)
    96b4:	10c0020d 	sth	r3,8(r2)
    96b8:	e0bffa17 	ldw	r2,-24(fp)
    96bc:	e0bffd15 	stw	r2,-12(fp)
    96c0:	e0bffd17 	ldw	r2,-12(fp)
    96c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    96c8:	0005883a 	mov	r2,zero
    96cc:	00000506 	br	96e4 <OSSemPost+0xfc>
    96d0:	e0bffa17 	ldw	r2,-24(fp)
    96d4:	e0bffe15 	stw	r2,-8(fp)
    96d8:	e0bffe17 	ldw	r2,-8(fp)
    96dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    96e0:	00800c84 	movi	r2,50
}
    96e4:	e037883a 	mov	sp,fp
    96e8:	dfc00117 	ldw	ra,4(sp)
    96ec:	df000017 	ldw	fp,0(sp)
    96f0:	dec00204 	addi	sp,sp,8
    96f4:	f800283a 	ret

000096f8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    96f8:	defff704 	addi	sp,sp,-36
    96fc:	df000815 	stw	fp,32(sp)
    9700:	df000804 	addi	fp,sp,32
    9704:	e13ffe15 	stw	r4,-8(fp)
    9708:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    970c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9710:	e0bffe17 	ldw	r2,-8(fp)
    9714:	1000021e 	bne	r2,zero,9720 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    9718:	00800104 	movi	r2,4
    971c:	00003606 	br	97f8 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    9720:	e0bfff17 	ldw	r2,-4(fp)
    9724:	1000021e 	bne	r2,zero,9730 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    9728:	00800244 	movi	r2,9
    972c:	00003206 	br	97f8 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    9730:	e0bffe17 	ldw	r2,-8(fp)
    9734:	10800003 	ldbu	r2,0(r2)
    9738:	10803fcc 	andi	r2,r2,255
    973c:	108000e0 	cmpeqi	r2,r2,3
    9740:	1000021e 	bne	r2,zero,974c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    9744:	00800044 	movi	r2,1
    9748:	00002b06 	br	97f8 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    974c:	0005303a 	rdctl	r2,status
    9750:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9754:	e0fffc17 	ldw	r3,-16(fp)
    9758:	00bfff84 	movi	r2,-2
    975c:	1884703a 	and	r2,r3,r2
    9760:	1001703a 	wrctl	status,r2
  
  return context;
    9764:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9768:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    976c:	e0bffe17 	ldw	r2,-8(fp)
    9770:	10c00283 	ldbu	r3,10(r2)
    9774:	e0bfff17 	ldw	r2,-4(fp)
    9778:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    977c:	e0bffe17 	ldw	r2,-8(fp)
    9780:	108002c4 	addi	r2,r2,11
    9784:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    9788:	e0bfff17 	ldw	r2,-4(fp)
    978c:	10800084 	addi	r2,r2,2
    9790:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9794:	e03ffa05 	stb	zero,-24(fp)
    9798:	00000b06 	br	97c8 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    979c:	e0bff917 	ldw	r2,-28(fp)
    97a0:	10c00044 	addi	r3,r2,1
    97a4:	e0fff915 	stw	r3,-28(fp)
    97a8:	e0fff817 	ldw	r3,-32(fp)
    97ac:	19000044 	addi	r4,r3,1
    97b0:	e13ff815 	stw	r4,-32(fp)
    97b4:	18c00003 	ldbu	r3,0(r3)
    97b8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    97bc:	e0bffa03 	ldbu	r2,-24(fp)
    97c0:	10800044 	addi	r2,r2,1
    97c4:	e0bffa05 	stb	r2,-24(fp)
    97c8:	e0bffa03 	ldbu	r2,-24(fp)
    97cc:	108000f0 	cmpltui	r2,r2,3
    97d0:	103ff21e 	bne	r2,zero,979c <__alt_data_end+0xfc00979c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    97d4:	e0bffe17 	ldw	r2,-8(fp)
    97d8:	10c0020b 	ldhu	r3,8(r2)
    97dc:	e0bfff17 	ldw	r2,-4(fp)
    97e0:	10c0000d 	sth	r3,0(r2)
    97e4:	e0bffb17 	ldw	r2,-20(fp)
    97e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    97ec:	e0bffd17 	ldw	r2,-12(fp)
    97f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    97f4:	0005883a 	mov	r2,zero
}
    97f8:	e037883a 	mov	sp,fp
    97fc:	df000017 	ldw	fp,0(sp)
    9800:	dec00104 	addi	sp,sp,4
    9804:	f800283a 	ret

00009808 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    9808:	defff904 	addi	sp,sp,-28
    980c:	df000615 	stw	fp,24(sp)
    9810:	df000604 	addi	fp,sp,24
    9814:	e13ffd15 	stw	r4,-12(fp)
    9818:	2805883a 	mov	r2,r5
    981c:	e1bfff15 	stw	r6,-4(fp)
    9820:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9824:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9828:	e0bfff17 	ldw	r2,-4(fp)
    982c:	1000011e 	bne	r2,zero,9834 <OSSemSet+0x2c>
        return;
    9830:	00003006 	br	98f4 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9834:	e0bffd17 	ldw	r2,-12(fp)
    9838:	1000041e 	bne	r2,zero,984c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    983c:	e0bfff17 	ldw	r2,-4(fp)
    9840:	00c00104 	movi	r3,4
    9844:	10c00005 	stb	r3,0(r2)
        return;
    9848:	00002a06 	br	98f4 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    984c:	e0bffd17 	ldw	r2,-12(fp)
    9850:	10800003 	ldbu	r2,0(r2)
    9854:	10803fcc 	andi	r2,r2,255
    9858:	108000e0 	cmpeqi	r2,r2,3
    985c:	1000041e 	bne	r2,zero,9870 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    9860:	e0bfff17 	ldw	r2,-4(fp)
    9864:	00c00044 	movi	r3,1
    9868:	10c00005 	stb	r3,0(r2)
        return;
    986c:	00002106 	br	98f4 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9870:	0005303a 	rdctl	r2,status
    9874:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9878:	e0fffb17 	ldw	r3,-20(fp)
    987c:	00bfff84 	movi	r2,-2
    9880:	1884703a 	and	r2,r3,r2
    9884:	1001703a 	wrctl	status,r2
  
  return context;
    9888:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    988c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    9890:	e0bfff17 	ldw	r2,-4(fp)
    9894:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    9898:	e0bffd17 	ldw	r2,-12(fp)
    989c:	1080020b 	ldhu	r2,8(r2)
    98a0:	10bfffcc 	andi	r2,r2,65535
    98a4:	10000426 	beq	r2,zero,98b8 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    98a8:	e0bffd17 	ldw	r2,-12(fp)
    98ac:	e0fffe0b 	ldhu	r3,-8(fp)
    98b0:	10c0020d 	sth	r3,8(r2)
    98b4:	00000b06 	br	98e4 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    98b8:	e0bffd17 	ldw	r2,-12(fp)
    98bc:	10800283 	ldbu	r2,10(r2)
    98c0:	10803fcc 	andi	r2,r2,255
    98c4:	1000041e 	bne	r2,zero,98d8 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    98c8:	e0bffd17 	ldw	r2,-12(fp)
    98cc:	e0fffe0b 	ldhu	r3,-8(fp)
    98d0:	10c0020d 	sth	r3,8(r2)
    98d4:	00000306 	br	98e4 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    98d8:	e0bfff17 	ldw	r2,-4(fp)
    98dc:	00c01244 	movi	r3,73
    98e0:	10c00005 	stb	r3,0(r2)
    98e4:	e0bffa17 	ldw	r2,-24(fp)
    98e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    98ec:	e0bffc17 	ldw	r2,-16(fp)
    98f0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
    98f4:	e037883a 	mov	sp,fp
    98f8:	df000017 	ldw	fp,0(sp)
    98fc:	dec00104 	addi	sp,sp,4
    9900:	f800283a 	ret

00009904 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    9904:	defff104 	addi	sp,sp,-60
    9908:	dfc00e15 	stw	ra,56(sp)
    990c:	df000d15 	stw	fp,52(sp)
    9910:	df000d04 	addi	fp,sp,52
    9914:	2007883a 	mov	r3,r4
    9918:	2805883a 	mov	r2,r5
    991c:	e0fffe05 	stb	r3,-8(fp)
    9920:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    9924:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    9928:	e0bffe03 	ldbu	r2,-8(fp)
    992c:	10800530 	cmpltui	r2,r2,20
    9930:	1000051e 	bne	r2,zero,9948 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    9934:	e0bffe03 	ldbu	r2,-8(fp)
    9938:	10803fe0 	cmpeqi	r2,r2,255
    993c:	1000021e 	bne	r2,zero,9948 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    9940:	00800a84 	movi	r2,42
    9944:	00013406 	br	9e18 <OSTaskChangePrio+0x514>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    9948:	e0bfff03 	ldbu	r2,-4(fp)
    994c:	10800530 	cmpltui	r2,r2,20
    9950:	1000021e 	bne	r2,zero,995c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    9954:	00800a84 	movi	r2,42
    9958:	00012f06 	br	9e18 <OSTaskChangePrio+0x514>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    995c:	0005303a 	rdctl	r2,status
    9960:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9964:	e0fff917 	ldw	r3,-28(fp)
    9968:	00bfff84 	movi	r2,-2
    996c:	1884703a 	and	r2,r3,r2
    9970:	1001703a 	wrctl	status,r2
  
  return context;
    9974:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9978:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    997c:	e0bfff03 	ldbu	r2,-4(fp)
    9980:	00c000b4 	movhi	r3,2
    9984:	18e2ed04 	addi	r3,r3,-29772
    9988:	1085883a 	add	r2,r2,r2
    998c:	1085883a 	add	r2,r2,r2
    9990:	1885883a 	add	r2,r3,r2
    9994:	10800017 	ldw	r2,0(r2)
    9998:	10000626 	beq	r2,zero,99b4 <OSTaskChangePrio+0xb0>
    999c:	e0bff517 	ldw	r2,-44(fp)
    99a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99a4:	e0bffa17 	ldw	r2,-24(fp)
    99a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    99ac:	00800a04 	movi	r2,40
    99b0:	00011906 	br	9e18 <OSTaskChangePrio+0x514>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    99b4:	e0bffe03 	ldbu	r2,-8(fp)
    99b8:	10803fd8 	cmpnei	r2,r2,255
    99bc:	1000051e 	bne	r2,zero,99d4 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    99c0:	00800074 	movhi	r2,1
    99c4:	10866704 	addi	r2,r2,6556
    99c8:	10800017 	ldw	r2,0(r2)
    99cc:	10800c83 	ldbu	r2,50(r2)
    99d0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    99d4:	e0bffe03 	ldbu	r2,-8(fp)
    99d8:	00c000b4 	movhi	r3,2
    99dc:	18e2ed04 	addi	r3,r3,-29772
    99e0:	1085883a 	add	r2,r2,r2
    99e4:	1085883a 	add	r2,r2,r2
    99e8:	1885883a 	add	r2,r3,r2
    99ec:	10800017 	ldw	r2,0(r2)
    99f0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    99f4:	e0bff617 	ldw	r2,-40(fp)
    99f8:	1000061e 	bne	r2,zero,9a14 <OSTaskChangePrio+0x110>
    99fc:	e0bff517 	ldw	r2,-44(fp)
    9a00:	e0bffb15 	stw	r2,-20(fp)
    9a04:	e0bffb17 	ldw	r2,-20(fp)
    9a08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    9a0c:	00800a44 	movi	r2,41
    9a10:	00010106 	br	9e18 <OSTaskChangePrio+0x514>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    9a14:	e0bff617 	ldw	r2,-40(fp)
    9a18:	10800058 	cmpnei	r2,r2,1
    9a1c:	1000061e 	bne	r2,zero,9a38 <OSTaskChangePrio+0x134>
    9a20:	e0bff517 	ldw	r2,-44(fp)
    9a24:	e0bffc15 	stw	r2,-16(fp)
    9a28:	e0bffc17 	ldw	r2,-16(fp)
    9a2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    9a30:	008010c4 	movi	r2,67
    9a34:	0000f806 	br	9e18 <OSTaskChangePrio+0x514>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    9a38:	e0bfff03 	ldbu	r2,-4(fp)
    9a3c:	1004d0fa 	srli	r2,r2,3
    9a40:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    9a44:	e0bfff03 	ldbu	r2,-4(fp)
    9a48:	108001cc 	andi	r2,r2,7
    9a4c:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
    9a50:	e0bff703 	ldbu	r2,-36(fp)
    9a54:	00c00044 	movi	r3,1
    9a58:	1884983a 	sll	r2,r3,r2
    9a5c:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
    9a60:	e0bff743 	ldbu	r2,-35(fp)
    9a64:	00c00044 	movi	r3,1
    9a68:	1884983a 	sll	r2,r3,r2
    9a6c:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    9a70:	e0bffe03 	ldbu	r2,-8(fp)
    9a74:	00c000b4 	movhi	r3,2
    9a78:	18e2ed04 	addi	r3,r3,-29772
    9a7c:	1085883a 	add	r2,r2,r2
    9a80:	1085883a 	add	r2,r2,r2
    9a84:	1885883a 	add	r2,r3,r2
    9a88:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    9a8c:	e0bfff03 	ldbu	r2,-4(fp)
    9a90:	00c000b4 	movhi	r3,2
    9a94:	18e2ed04 	addi	r3,r3,-29772
    9a98:	1085883a 	add	r2,r2,r2
    9a9c:	1085883a 	add	r2,r2,r2
    9aa0:	1885883a 	add	r2,r3,r2
    9aa4:	e0fff617 	ldw	r3,-40(fp)
    9aa8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    9aac:	e0bff617 	ldw	r2,-40(fp)
    9ab0:	10800d03 	ldbu	r2,52(r2)
    9ab4:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
    9ab8:	e0bff617 	ldw	r2,-40(fp)
    9abc:	10800d83 	ldbu	r2,54(r2)
    9ac0:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    9ac4:	e0bff617 	ldw	r2,-40(fp)
    9ac8:	10800d43 	ldbu	r2,53(r2)
    9acc:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    9ad0:	e0bff803 	ldbu	r2,-32(fp)
    9ad4:	00c00074 	movhi	r3,1
    9ad8:	18c66444 	addi	r3,r3,6545
    9adc:	1885883a 	add	r2,r3,r2
    9ae0:	10c00003 	ldbu	r3,0(r2)
    9ae4:	e0bff883 	ldbu	r2,-30(fp)
    9ae8:	1884703a 	and	r2,r3,r2
    9aec:	10803fcc 	andi	r2,r2,255
    9af0:	10003526 	beq	r2,zero,9bc8 <OSTaskChangePrio+0x2c4>
         OSRdyTbl[y_old] &= ~bitx_old;
    9af4:	e0bff803 	ldbu	r2,-32(fp)
    9af8:	e0fff803 	ldbu	r3,-32(fp)
    9afc:	01000074 	movhi	r4,1
    9b00:	21066444 	addi	r4,r4,6545
    9b04:	20c7883a 	add	r3,r4,r3
    9b08:	18c00003 	ldbu	r3,0(r3)
    9b0c:	1809883a 	mov	r4,r3
    9b10:	e0fff883 	ldbu	r3,-30(fp)
    9b14:	00c6303a 	nor	r3,zero,r3
    9b18:	20c6703a 	and	r3,r4,r3
    9b1c:	01000074 	movhi	r4,1
    9b20:	21066444 	addi	r4,r4,6545
    9b24:	2085883a 	add	r2,r4,r2
    9b28:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    9b2c:	e0bff803 	ldbu	r2,-32(fp)
    9b30:	00c00074 	movhi	r3,1
    9b34:	18c66444 	addi	r3,r3,6545
    9b38:	1885883a 	add	r2,r3,r2
    9b3c:	10800003 	ldbu	r2,0(r2)
    9b40:	10803fcc 	andi	r2,r2,255
    9b44:	10000b1e 	bne	r2,zero,9b74 <OSTaskChangePrio+0x270>
             OSRdyGrp &= ~bity_old;
    9b48:	e0bff843 	ldbu	r2,-31(fp)
    9b4c:	0084303a 	nor	r2,zero,r2
    9b50:	1007883a 	mov	r3,r2
    9b54:	00800074 	movhi	r2,1
    9b58:	10866404 	addi	r2,r2,6544
    9b5c:	10800003 	ldbu	r2,0(r2)
    9b60:	1884703a 	and	r2,r3,r2
    9b64:	1007883a 	mov	r3,r2
    9b68:	00800074 	movhi	r2,1
    9b6c:	10866404 	addi	r2,r2,6544
    9b70:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    9b74:	00800074 	movhi	r2,1
    9b78:	10866404 	addi	r2,r2,6544
    9b7c:	10c00003 	ldbu	r3,0(r2)
    9b80:	e0bff783 	ldbu	r2,-34(fp)
    9b84:	1884b03a 	or	r2,r3,r2
    9b88:	1007883a 	mov	r3,r2
    9b8c:	00800074 	movhi	r2,1
    9b90:	10866404 	addi	r2,r2,6544
    9b94:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    9b98:	e0bff703 	ldbu	r2,-36(fp)
    9b9c:	e0fff703 	ldbu	r3,-36(fp)
    9ba0:	01000074 	movhi	r4,1
    9ba4:	21066444 	addi	r4,r4,6545
    9ba8:	20c7883a 	add	r3,r4,r3
    9bac:	19000003 	ldbu	r4,0(r3)
    9bb0:	e0fff7c3 	ldbu	r3,-33(fp)
    9bb4:	20c6b03a 	or	r3,r4,r3
    9bb8:	01000074 	movhi	r4,1
    9bbc:	21066444 	addi	r4,r4,6545
    9bc0:	2085883a 	add	r2,r4,r2
    9bc4:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    9bc8:	e0bff617 	ldw	r2,-40(fp)
    9bcc:	10800717 	ldw	r2,28(r2)
    9bd0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    9bd4:	e0bff317 	ldw	r2,-52(fp)
    9bd8:	10003126 	beq	r2,zero,9ca0 <OSTaskChangePrio+0x39c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    9bdc:	e0bff803 	ldbu	r2,-32(fp)
    9be0:	e0fff803 	ldbu	r3,-32(fp)
    9be4:	e13ff317 	ldw	r4,-52(fp)
    9be8:	20c7883a 	add	r3,r4,r3
    9bec:	18c00204 	addi	r3,r3,8
    9bf0:	18c000c3 	ldbu	r3,3(r3)
    9bf4:	1809883a 	mov	r4,r3
    9bf8:	e0fff883 	ldbu	r3,-30(fp)
    9bfc:	00c6303a 	nor	r3,zero,r3
    9c00:	20c6703a 	and	r3,r4,r3
    9c04:	e13ff317 	ldw	r4,-52(fp)
    9c08:	2085883a 	add	r2,r4,r2
    9c0c:	10800204 	addi	r2,r2,8
    9c10:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    9c14:	e0bff803 	ldbu	r2,-32(fp)
    9c18:	e0fff317 	ldw	r3,-52(fp)
    9c1c:	1885883a 	add	r2,r3,r2
    9c20:	10800204 	addi	r2,r2,8
    9c24:	108000c3 	ldbu	r2,3(r2)
    9c28:	10803fcc 	andi	r2,r2,255
    9c2c:	1000091e 	bne	r2,zero,9c54 <OSTaskChangePrio+0x350>
            pevent->OSEventGrp    &= ~bity_old;
    9c30:	e0bff317 	ldw	r2,-52(fp)
    9c34:	10800283 	ldbu	r2,10(r2)
    9c38:	1007883a 	mov	r3,r2
    9c3c:	e0bff843 	ldbu	r2,-31(fp)
    9c40:	0084303a 	nor	r2,zero,r2
    9c44:	1884703a 	and	r2,r3,r2
    9c48:	1007883a 	mov	r3,r2
    9c4c:	e0bff317 	ldw	r2,-52(fp)
    9c50:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    9c54:	e0bff317 	ldw	r2,-52(fp)
    9c58:	10c00283 	ldbu	r3,10(r2)
    9c5c:	e0bff783 	ldbu	r2,-34(fp)
    9c60:	1884b03a 	or	r2,r3,r2
    9c64:	1007883a 	mov	r3,r2
    9c68:	e0bff317 	ldw	r2,-52(fp)
    9c6c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    9c70:	e0bff703 	ldbu	r2,-36(fp)
    9c74:	e0fff703 	ldbu	r3,-36(fp)
    9c78:	e13ff317 	ldw	r4,-52(fp)
    9c7c:	20c7883a 	add	r3,r4,r3
    9c80:	18c00204 	addi	r3,r3,8
    9c84:	190000c3 	ldbu	r4,3(r3)
    9c88:	e0fff7c3 	ldbu	r3,-33(fp)
    9c8c:	20c6b03a 	or	r3,r4,r3
    9c90:	e13ff317 	ldw	r4,-52(fp)
    9c94:	2085883a 	add	r2,r4,r2
    9c98:	10800204 	addi	r2,r2,8
    9c9c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    9ca0:	e0bff617 	ldw	r2,-40(fp)
    9ca4:	10800817 	ldw	r2,32(r2)
    9ca8:	10004026 	beq	r2,zero,9dac <OSTaskChangePrio+0x4a8>
        pevents =  ptcb->OSTCBEventMultiPtr;
    9cac:	e0bff617 	ldw	r2,-40(fp)
    9cb0:	10800817 	ldw	r2,32(r2)
    9cb4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    9cb8:	e0bff417 	ldw	r2,-48(fp)
    9cbc:	10800017 	ldw	r2,0(r2)
    9cc0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    9cc4:	00003706 	br	9da4 <OSTaskChangePrio+0x4a0>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    9cc8:	e0bff803 	ldbu	r2,-32(fp)
    9ccc:	e0fff803 	ldbu	r3,-32(fp)
    9cd0:	e13ff317 	ldw	r4,-52(fp)
    9cd4:	20c7883a 	add	r3,r4,r3
    9cd8:	18c00204 	addi	r3,r3,8
    9cdc:	18c000c3 	ldbu	r3,3(r3)
    9ce0:	1809883a 	mov	r4,r3
    9ce4:	e0fff883 	ldbu	r3,-30(fp)
    9ce8:	00c6303a 	nor	r3,zero,r3
    9cec:	20c6703a 	and	r3,r4,r3
    9cf0:	e13ff317 	ldw	r4,-52(fp)
    9cf4:	2085883a 	add	r2,r4,r2
    9cf8:	10800204 	addi	r2,r2,8
    9cfc:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    9d00:	e0bff803 	ldbu	r2,-32(fp)
    9d04:	e0fff317 	ldw	r3,-52(fp)
    9d08:	1885883a 	add	r2,r3,r2
    9d0c:	10800204 	addi	r2,r2,8
    9d10:	108000c3 	ldbu	r2,3(r2)
    9d14:	10803fcc 	andi	r2,r2,255
    9d18:	1000091e 	bne	r2,zero,9d40 <OSTaskChangePrio+0x43c>
                pevent->OSEventGrp    &= ~bity_old;
    9d1c:	e0bff317 	ldw	r2,-52(fp)
    9d20:	10800283 	ldbu	r2,10(r2)
    9d24:	1007883a 	mov	r3,r2
    9d28:	e0bff843 	ldbu	r2,-31(fp)
    9d2c:	0084303a 	nor	r2,zero,r2
    9d30:	1884703a 	and	r2,r3,r2
    9d34:	1007883a 	mov	r3,r2
    9d38:	e0bff317 	ldw	r2,-52(fp)
    9d3c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    9d40:	e0bff317 	ldw	r2,-52(fp)
    9d44:	10c00283 	ldbu	r3,10(r2)
    9d48:	e0bff783 	ldbu	r2,-34(fp)
    9d4c:	1884b03a 	or	r2,r3,r2
    9d50:	1007883a 	mov	r3,r2
    9d54:	e0bff317 	ldw	r2,-52(fp)
    9d58:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    9d5c:	e0bff703 	ldbu	r2,-36(fp)
    9d60:	e0fff703 	ldbu	r3,-36(fp)
    9d64:	e13ff317 	ldw	r4,-52(fp)
    9d68:	20c7883a 	add	r3,r4,r3
    9d6c:	18c00204 	addi	r3,r3,8
    9d70:	190000c3 	ldbu	r4,3(r3)
    9d74:	e0fff7c3 	ldbu	r3,-33(fp)
    9d78:	20c6b03a 	or	r3,r4,r3
    9d7c:	e13ff317 	ldw	r4,-52(fp)
    9d80:	2085883a 	add	r2,r4,r2
    9d84:	10800204 	addi	r2,r2,8
    9d88:	10c000c5 	stb	r3,3(r2)
            pevents++;
    9d8c:	e0bff417 	ldw	r2,-48(fp)
    9d90:	10800104 	addi	r2,r2,4
    9d94:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    9d98:	e0bff417 	ldw	r2,-48(fp)
    9d9c:	10800017 	ldw	r2,0(r2)
    9da0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    9da4:	e0bff317 	ldw	r2,-52(fp)
    9da8:	103fc71e 	bne	r2,zero,9cc8 <__alt_data_end+0xfc009cc8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    9dac:	e0bff617 	ldw	r2,-40(fp)
    9db0:	e0ffff03 	ldbu	r3,-4(fp)
    9db4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    9db8:	e0bff617 	ldw	r2,-40(fp)
    9dbc:	e0fff703 	ldbu	r3,-36(fp)
    9dc0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    9dc4:	e0bff617 	ldw	r2,-40(fp)
    9dc8:	e0fff743 	ldbu	r3,-35(fp)
    9dcc:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    9dd0:	e0bff617 	ldw	r2,-40(fp)
    9dd4:	e0fff783 	ldbu	r3,-34(fp)
    9dd8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    9ddc:	e0bff617 	ldw	r2,-40(fp)
    9de0:	e0fff7c3 	ldbu	r3,-33(fp)
    9de4:	10c00d45 	stb	r3,53(r2)
    9de8:	e0bff517 	ldw	r2,-44(fp)
    9dec:	e0bffd15 	stw	r2,-12(fp)
    9df0:	e0bffd17 	ldw	r2,-12(fp)
    9df4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    9df8:	00800074 	movhi	r2,1
    9dfc:	10865844 	addi	r2,r2,6497
    9e00:	10800003 	ldbu	r2,0(r2)
    9e04:	10803fcc 	andi	r2,r2,255
    9e08:	10800058 	cmpnei	r2,r2,1
    9e0c:	1000011e 	bne	r2,zero,9e14 <OSTaskChangePrio+0x510>
        OS_Sched();                                         /* Find new highest priority task          */
    9e10:	00053d80 	call	53d8 <OS_Sched>
    }
    return (OS_ERR_NONE);
    9e14:	0005883a 	mov	r2,zero
}
    9e18:	e037883a 	mov	sp,fp
    9e1c:	dfc00117 	ldw	ra,4(sp)
    9e20:	df000017 	ldw	fp,0(sp)
    9e24:	dec00204 	addi	sp,sp,8
    9e28:	f800283a 	ret

00009e2c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    9e2c:	deffee04 	addi	sp,sp,-72
    9e30:	dfc01115 	stw	ra,68(sp)
    9e34:	df001015 	stw	fp,64(sp)
    9e38:	df001004 	addi	fp,sp,64
    9e3c:	e13ffc15 	stw	r4,-16(fp)
    9e40:	e17ffd15 	stw	r5,-12(fp)
    9e44:	e1bffe15 	stw	r6,-8(fp)
    9e48:	3805883a 	mov	r2,r7
    9e4c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    9e50:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    9e54:	e0bfff03 	ldbu	r2,-4(fp)
    9e58:	10800570 	cmpltui	r2,r2,21
    9e5c:	1000021e 	bne	r2,zero,9e68 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    9e60:	00800a84 	movi	r2,42
    9e64:	00005b06 	br	9fd4 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9e68:	0005303a 	rdctl	r2,status
    9e6c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e70:	e0fff617 	ldw	r3,-40(fp)
    9e74:	00bfff84 	movi	r2,-2
    9e78:	1884703a 	and	r2,r3,r2
    9e7c:	1001703a 	wrctl	status,r2
  
  return context;
    9e80:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9e84:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    9e88:	00800074 	movhi	r2,1
    9e8c:	10866604 	addi	r2,r2,6552
    9e90:	10800003 	ldbu	r2,0(r2)
    9e94:	10803fcc 	andi	r2,r2,255
    9e98:	10000626 	beq	r2,zero,9eb4 <OSTaskCreate+0x88>
    9e9c:	e0bff317 	ldw	r2,-52(fp)
    9ea0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ea4:	e0bff717 	ldw	r2,-36(fp)
    9ea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    9eac:	00800f04 	movi	r2,60
    9eb0:	00004806 	br	9fd4 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    9eb4:	e0bfff03 	ldbu	r2,-4(fp)
    9eb8:	00c000b4 	movhi	r3,2
    9ebc:	18e2ed04 	addi	r3,r3,-29772
    9ec0:	1085883a 	add	r2,r2,r2
    9ec4:	1085883a 	add	r2,r2,r2
    9ec8:	1885883a 	add	r2,r3,r2
    9ecc:	10800017 	ldw	r2,0(r2)
    9ed0:	10003b1e 	bne	r2,zero,9fc0 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    9ed4:	e0bfff03 	ldbu	r2,-4(fp)
    9ed8:	00c000b4 	movhi	r3,2
    9edc:	18e2ed04 	addi	r3,r3,-29772
    9ee0:	1085883a 	add	r2,r2,r2
    9ee4:	1085883a 	add	r2,r2,r2
    9ee8:	1885883a 	add	r2,r3,r2
    9eec:	00c00044 	movi	r3,1
    9ef0:	10c00015 	stw	r3,0(r2)
    9ef4:	e0bff317 	ldw	r2,-52(fp)
    9ef8:	e0bff815 	stw	r2,-32(fp)
    9efc:	e0bff817 	ldw	r2,-32(fp)
    9f00:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    9f04:	e13ffc17 	ldw	r4,-16(fp)
    9f08:	e17ffd17 	ldw	r5,-12(fp)
    9f0c:	e1bffe17 	ldw	r6,-8(fp)
    9f10:	000f883a 	mov	r7,zero
    9f14:	000d5540 	call	d554 <OSTaskStkInit>
    9f18:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    9f1c:	e0bfff03 	ldbu	r2,-4(fp)
    9f20:	d8000015 	stw	zero,0(sp)
    9f24:	d8000115 	stw	zero,4(sp)
    9f28:	d8000215 	stw	zero,8(sp)
    9f2c:	1009883a 	mov	r4,r2
    9f30:	e17ff417 	ldw	r5,-48(fp)
    9f34:	000d883a 	mov	r6,zero
    9f38:	000f883a 	mov	r7,zero
    9f3c:	00057c80 	call	57c8 <OS_TCBInit>
    9f40:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
    9f44:	e0bff503 	ldbu	r2,-44(fp)
    9f48:	1000081e 	bne	r2,zero,9f6c <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    9f4c:	00800074 	movhi	r2,1
    9f50:	10865844 	addi	r2,r2,6497
    9f54:	10800003 	ldbu	r2,0(r2)
    9f58:	10803fcc 	andi	r2,r2,255
    9f5c:	10800058 	cmpnei	r2,r2,1
    9f60:	1000151e 	bne	r2,zero,9fb8 <OSTaskCreate+0x18c>
                OS_Sched();
    9f64:	00053d80 	call	53d8 <OS_Sched>
    9f68:	00001306 	br	9fb8 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f6c:	0005303a 	rdctl	r2,status
    9f70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f74:	e0fff917 	ldw	r3,-28(fp)
    9f78:	00bfff84 	movi	r2,-2
    9f7c:	1884703a 	and	r2,r3,r2
    9f80:	1001703a 	wrctl	status,r2
  
  return context;
    9f84:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    9f88:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    9f8c:	e0bfff03 	ldbu	r2,-4(fp)
    9f90:	00c000b4 	movhi	r3,2
    9f94:	18e2ed04 	addi	r3,r3,-29772
    9f98:	1085883a 	add	r2,r2,r2
    9f9c:	1085883a 	add	r2,r2,r2
    9fa0:	1885883a 	add	r2,r3,r2
    9fa4:	10000015 	stw	zero,0(r2)
    9fa8:	e0bff317 	ldw	r2,-52(fp)
    9fac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9fb0:	e0bffa17 	ldw	r2,-24(fp)
    9fb4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    9fb8:	e0bff503 	ldbu	r2,-44(fp)
    9fbc:	00000506 	br	9fd4 <OSTaskCreate+0x1a8>
    9fc0:	e0bff317 	ldw	r2,-52(fp)
    9fc4:	e0bffb15 	stw	r2,-20(fp)
    9fc8:	e0bffb17 	ldw	r2,-20(fp)
    9fcc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    9fd0:	00800a04 	movi	r2,40
}
    9fd4:	e037883a 	mov	sp,fp
    9fd8:	dfc00117 	ldw	ra,4(sp)
    9fdc:	df000017 	ldw	fp,0(sp)
    9fe0:	dec00204 	addi	sp,sp,8
    9fe4:	f800283a 	ret

00009fe8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    9fe8:	deffec04 	addi	sp,sp,-80
    9fec:	dfc01315 	stw	ra,76(sp)
    9ff0:	df001215 	stw	fp,72(sp)
    9ff4:	df001204 	addi	fp,sp,72
    9ff8:	e13ffa15 	stw	r4,-24(fp)
    9ffc:	e17ffb15 	stw	r5,-20(fp)
    a000:	e1bffc15 	stw	r6,-16(fp)
    a004:	3809883a 	mov	r4,r7
    a008:	e0c00217 	ldw	r3,8(fp)
    a00c:	e0800617 	ldw	r2,24(fp)
    a010:	e13ffd05 	stb	r4,-12(fp)
    a014:	e0fffe0d 	sth	r3,-8(fp)
    a018:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a01c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a020:	e0bffd03 	ldbu	r2,-12(fp)
    a024:	10800570 	cmpltui	r2,r2,21
    a028:	1000021e 	bne	r2,zero,a034 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    a02c:	00800a84 	movi	r2,42
    a030:	00006506 	br	a1c8 <OSTaskCreateExt+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a034:	0005303a 	rdctl	r2,status
    a038:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a03c:	e0fff417 	ldw	r3,-48(fp)
    a040:	00bfff84 	movi	r2,-2
    a044:	1884703a 	and	r2,r3,r2
    a048:	1001703a 	wrctl	status,r2
  
  return context;
    a04c:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a050:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a054:	00800074 	movhi	r2,1
    a058:	10866604 	addi	r2,r2,6552
    a05c:	10800003 	ldbu	r2,0(r2)
    a060:	10803fcc 	andi	r2,r2,255
    a064:	10000626 	beq	r2,zero,a080 <OSTaskCreateExt+0x98>
    a068:	e0bff117 	ldw	r2,-60(fp)
    a06c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a070:	e0bff517 	ldw	r2,-44(fp)
    a074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a078:	00800f04 	movi	r2,60
    a07c:	00005206 	br	a1c8 <OSTaskCreateExt+0x1e0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a080:	e0bffd03 	ldbu	r2,-12(fp)
    a084:	00c000b4 	movhi	r3,2
    a088:	18e2ed04 	addi	r3,r3,-29772
    a08c:	1085883a 	add	r2,r2,r2
    a090:	1085883a 	add	r2,r2,r2
    a094:	1885883a 	add	r2,r3,r2
    a098:	10800017 	ldw	r2,0(r2)
    a09c:	1000451e 	bne	r2,zero,a1b4 <OSTaskCreateExt+0x1cc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a0a0:	e0bffd03 	ldbu	r2,-12(fp)
    a0a4:	00c000b4 	movhi	r3,2
    a0a8:	18e2ed04 	addi	r3,r3,-29772
    a0ac:	1085883a 	add	r2,r2,r2
    a0b0:	1085883a 	add	r2,r2,r2
    a0b4:	1885883a 	add	r2,r3,r2
    a0b8:	00c00044 	movi	r3,1
    a0bc:	10c00015 	stw	r3,0(r2)
    a0c0:	e0bff117 	ldw	r2,-60(fp)
    a0c4:	e0bff615 	stw	r2,-40(fp)
    a0c8:	e0bff617 	ldw	r2,-40(fp)
    a0cc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    a0d0:	e0bfff0b 	ldhu	r2,-4(fp)
    a0d4:	e1000317 	ldw	r4,12(fp)
    a0d8:	e1400417 	ldw	r5,16(fp)
    a0dc:	100d883a 	mov	r6,r2
    a0e0:	000b1700 	call	b170 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    a0e4:	e0bfff0b 	ldhu	r2,-4(fp)
    a0e8:	e13ffa17 	ldw	r4,-24(fp)
    a0ec:	e17ffb17 	ldw	r5,-20(fp)
    a0f0:	e1bffc17 	ldw	r6,-16(fp)
    a0f4:	100f883a 	mov	r7,r2
    a0f8:	000d5540 	call	d554 <OSTaskStkInit>
    a0fc:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    a100:	e0fffd03 	ldbu	r3,-12(fp)
    a104:	e0bffe0b 	ldhu	r2,-8(fp)
    a108:	e13fff0b 	ldhu	r4,-4(fp)
    a10c:	e1400417 	ldw	r5,16(fp)
    a110:	d9400015 	stw	r5,0(sp)
    a114:	e1400517 	ldw	r5,20(fp)
    a118:	d9400115 	stw	r5,4(sp)
    a11c:	d9000215 	stw	r4,8(sp)
    a120:	1809883a 	mov	r4,r3
    a124:	e17ff217 	ldw	r5,-56(fp)
    a128:	e1800317 	ldw	r6,12(fp)
    a12c:	100f883a 	mov	r7,r2
    a130:	00057c80 	call	57c8 <OS_TCBInit>
    a134:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
    a138:	e0bff303 	ldbu	r2,-52(fp)
    a13c:	1000081e 	bne	r2,zero,a160 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    a140:	00800074 	movhi	r2,1
    a144:	10865844 	addi	r2,r2,6497
    a148:	10800003 	ldbu	r2,0(r2)
    a14c:	10803fcc 	andi	r2,r2,255
    a150:	10800058 	cmpnei	r2,r2,1
    a154:	1000151e 	bne	r2,zero,a1ac <OSTaskCreateExt+0x1c4>
                OS_Sched();
    a158:	00053d80 	call	53d8 <OS_Sched>
    a15c:	00001306 	br	a1ac <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a160:	0005303a 	rdctl	r2,status
    a164:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a168:	e0fff717 	ldw	r3,-36(fp)
    a16c:	00bfff84 	movi	r2,-2
    a170:	1884703a 	and	r2,r3,r2
    a174:	1001703a 	wrctl	status,r2
  
  return context;
    a178:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a17c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    a180:	e0bffd03 	ldbu	r2,-12(fp)
    a184:	00c000b4 	movhi	r3,2
    a188:	18e2ed04 	addi	r3,r3,-29772
    a18c:	1085883a 	add	r2,r2,r2
    a190:	1085883a 	add	r2,r2,r2
    a194:	1885883a 	add	r2,r3,r2
    a198:	10000015 	stw	zero,0(r2)
    a19c:	e0bff117 	ldw	r2,-60(fp)
    a1a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a1a4:	e0bff817 	ldw	r2,-32(fp)
    a1a8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    a1ac:	e0bff303 	ldbu	r2,-52(fp)
    a1b0:	00000506 	br	a1c8 <OSTaskCreateExt+0x1e0>
    a1b4:	e0bff117 	ldw	r2,-60(fp)
    a1b8:	e0bff915 	stw	r2,-28(fp)
    a1bc:	e0bff917 	ldw	r2,-28(fp)
    a1c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a1c4:	00800a04 	movi	r2,40
}
    a1c8:	e037883a 	mov	sp,fp
    a1cc:	dfc00117 	ldw	ra,4(sp)
    a1d0:	df000017 	ldw	fp,0(sp)
    a1d4:	dec00204 	addi	sp,sp,8
    a1d8:	f800283a 	ret

0000a1dc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    a1dc:	defff404 	addi	sp,sp,-48
    a1e0:	dfc00b15 	stw	ra,44(sp)
    a1e4:	df000a15 	stw	fp,40(sp)
    a1e8:	df000a04 	addi	fp,sp,40
    a1ec:	2005883a 	mov	r2,r4
    a1f0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    a1f4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    a1f8:	00800074 	movhi	r2,1
    a1fc:	10866604 	addi	r2,r2,6552
    a200:	10800003 	ldbu	r2,0(r2)
    a204:	10803fcc 	andi	r2,r2,255
    a208:	10000226 	beq	r2,zero,a214 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    a20c:	00801004 	movi	r2,64
    a210:	0000e406 	br	a5a4 <OSTaskDel+0x3c8>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    a214:	e0bfff03 	ldbu	r2,-4(fp)
    a218:	10800518 	cmpnei	r2,r2,20
    a21c:	1000021e 	bne	r2,zero,a228 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    a220:	00800f84 	movi	r2,62
    a224:	0000df06 	br	a5a4 <OSTaskDel+0x3c8>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    a228:	e0bfff03 	ldbu	r2,-4(fp)
    a22c:	10800530 	cmpltui	r2,r2,20
    a230:	1000051e 	bne	r2,zero,a248 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    a234:	e0bfff03 	ldbu	r2,-4(fp)
    a238:	10803fe0 	cmpeqi	r2,r2,255
    a23c:	1000021e 	bne	r2,zero,a248 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    a240:	00800a84 	movi	r2,42
    a244:	0000d706 	br	a5a4 <OSTaskDel+0x3c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a248:	0005303a 	rdctl	r2,status
    a24c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a250:	e0fff917 	ldw	r3,-28(fp)
    a254:	00bfff84 	movi	r2,-2
    a258:	1884703a 	and	r2,r3,r2
    a25c:	1001703a 	wrctl	status,r2
  
  return context;
    a260:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    a264:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    a268:	e0bfff03 	ldbu	r2,-4(fp)
    a26c:	10803fd8 	cmpnei	r2,r2,255
    a270:	1000051e 	bne	r2,zero,a288 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    a274:	00800074 	movhi	r2,1
    a278:	10866704 	addi	r2,r2,6556
    a27c:	10800017 	ldw	r2,0(r2)
    a280:	10800c83 	ldbu	r2,50(r2)
    a284:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a288:	e0bfff03 	ldbu	r2,-4(fp)
    a28c:	00c000b4 	movhi	r3,2
    a290:	18e2ed04 	addi	r3,r3,-29772
    a294:	1085883a 	add	r2,r2,r2
    a298:	1085883a 	add	r2,r2,r2
    a29c:	1885883a 	add	r2,r3,r2
    a2a0:	10800017 	ldw	r2,0(r2)
    a2a4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    a2a8:	e0bff717 	ldw	r2,-36(fp)
    a2ac:	1000061e 	bne	r2,zero,a2c8 <OSTaskDel+0xec>
    a2b0:	e0bff617 	ldw	r2,-40(fp)
    a2b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2b8:	e0bffa17 	ldw	r2,-24(fp)
    a2bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a2c0:	008010c4 	movi	r2,67
    a2c4:	0000b706 	br	a5a4 <OSTaskDel+0x3c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    a2c8:	e0bff717 	ldw	r2,-36(fp)
    a2cc:	10800058 	cmpnei	r2,r2,1
    a2d0:	1000061e 	bne	r2,zero,a2ec <OSTaskDel+0x110>
    a2d4:	e0bff617 	ldw	r2,-40(fp)
    a2d8:	e0bffb15 	stw	r2,-20(fp)
    a2dc:	e0bffb17 	ldw	r2,-20(fp)
    a2e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a2e4:	00800f44 	movi	r2,61
    a2e8:	0000ae06 	br	a5a4 <OSTaskDel+0x3c8>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    a2ec:	e0bff717 	ldw	r2,-36(fp)
    a2f0:	10800d03 	ldbu	r2,52(r2)
    a2f4:	10803fcc 	andi	r2,r2,255
    a2f8:	e0fff717 	ldw	r3,-36(fp)
    a2fc:	18c00d03 	ldbu	r3,52(r3)
    a300:	18c03fcc 	andi	r3,r3,255
    a304:	01000074 	movhi	r4,1
    a308:	21066444 	addi	r4,r4,6545
    a30c:	20c7883a 	add	r3,r4,r3
    a310:	18c00003 	ldbu	r3,0(r3)
    a314:	1809883a 	mov	r4,r3
    a318:	e0fff717 	ldw	r3,-36(fp)
    a31c:	18c00d43 	ldbu	r3,53(r3)
    a320:	00c6303a 	nor	r3,zero,r3
    a324:	20c6703a 	and	r3,r4,r3
    a328:	01000074 	movhi	r4,1
    a32c:	21066444 	addi	r4,r4,6545
    a330:	2085883a 	add	r2,r4,r2
    a334:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    a338:	e0bff717 	ldw	r2,-36(fp)
    a33c:	10800d03 	ldbu	r2,52(r2)
    a340:	10803fcc 	andi	r2,r2,255
    a344:	00c00074 	movhi	r3,1
    a348:	18c66444 	addi	r3,r3,6545
    a34c:	1885883a 	add	r2,r3,r2
    a350:	10800003 	ldbu	r2,0(r2)
    a354:	10803fcc 	andi	r2,r2,255
    a358:	10000c1e 	bne	r2,zero,a38c <OSTaskDel+0x1b0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    a35c:	e0bff717 	ldw	r2,-36(fp)
    a360:	10800d83 	ldbu	r2,54(r2)
    a364:	0084303a 	nor	r2,zero,r2
    a368:	1007883a 	mov	r3,r2
    a36c:	00800074 	movhi	r2,1
    a370:	10866404 	addi	r2,r2,6544
    a374:	10800003 	ldbu	r2,0(r2)
    a378:	1884703a 	and	r2,r3,r2
    a37c:	1007883a 	mov	r3,r2
    a380:	00800074 	movhi	r2,1
    a384:	10866404 	addi	r2,r2,6544
    a388:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    a38c:	e0bff717 	ldw	r2,-36(fp)
    a390:	10800717 	ldw	r2,28(r2)
    a394:	10000526 	beq	r2,zero,a3ac <OSTaskDel+0x1d0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    a398:	e0bff717 	ldw	r2,-36(fp)
    a39c:	10800717 	ldw	r2,28(r2)
    a3a0:	e13ff717 	ldw	r4,-36(fp)
    a3a4:	100b883a 	mov	r5,r2
    a3a8:	0004db80 	call	4db8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    a3ac:	e0bff717 	ldw	r2,-36(fp)
    a3b0:	10800817 	ldw	r2,32(r2)
    a3b4:	10000526 	beq	r2,zero,a3cc <OSTaskDel+0x1f0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    a3b8:	e0bff717 	ldw	r2,-36(fp)
    a3bc:	10800817 	ldw	r2,32(r2)
    a3c0:	e13ff717 	ldw	r4,-36(fp)
    a3c4:	100b883a 	mov	r5,r2
    a3c8:	0004e680 	call	4e68 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    a3cc:	e0bff717 	ldw	r2,-36(fp)
    a3d0:	10800a17 	ldw	r2,40(r2)
    a3d4:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    a3d8:	e0bff817 	ldw	r2,-32(fp)
    a3dc:	10000226 	beq	r2,zero,a3e8 <OSTaskDel+0x20c>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    a3e0:	e13ff817 	ldw	r4,-32(fp)
    a3e4:	00073ac0 	call	73ac <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    a3e8:	e0bff717 	ldw	r2,-36(fp)
    a3ec:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    a3f0:	e0bff717 	ldw	r2,-36(fp)
    a3f4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    a3f8:	e0bff717 	ldw	r2,-36(fp)
    a3fc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    a400:	00800074 	movhi	r2,1
    a404:	10865804 	addi	r2,r2,6496
    a408:	10800003 	ldbu	r2,0(r2)
    a40c:	10803fcc 	andi	r2,r2,255
    a410:	10803fe0 	cmpeqi	r2,r2,255
    a414:	1000081e 	bne	r2,zero,a438 <OSTaskDel+0x25c>
        OSLockNesting++;
    a418:	00800074 	movhi	r2,1
    a41c:	10865804 	addi	r2,r2,6496
    a420:	10800003 	ldbu	r2,0(r2)
    a424:	10800044 	addi	r2,r2,1
    a428:	1007883a 	mov	r3,r2
    a42c:	00800074 	movhi	r2,1
    a430:	10865804 	addi	r2,r2,6496
    a434:	10c00005 	stb	r3,0(r2)
    a438:	e0bff617 	ldw	r2,-40(fp)
    a43c:	e0bffc15 	stw	r2,-16(fp)
    a440:	e0bffc17 	ldw	r2,-16(fp)
    a444:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    a448:	00049b40 	call	49b4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a44c:	0005303a 	rdctl	r2,status
    a450:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a454:	e0fffd17 	ldw	r3,-12(fp)
    a458:	00bfff84 	movi	r2,-2
    a45c:	1884703a 	and	r2,r3,r2
    a460:	1001703a 	wrctl	status,r2
  
  return context;
    a464:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    a468:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    a46c:	00800074 	movhi	r2,1
    a470:	10865804 	addi	r2,r2,6496
    a474:	10800003 	ldbu	r2,0(r2)
    a478:	10803fcc 	andi	r2,r2,255
    a47c:	10000826 	beq	r2,zero,a4a0 <OSTaskDel+0x2c4>
        OSLockNesting--;
    a480:	00800074 	movhi	r2,1
    a484:	10865804 	addi	r2,r2,6496
    a488:	10800003 	ldbu	r2,0(r2)
    a48c:	10bfffc4 	addi	r2,r2,-1
    a490:	1007883a 	mov	r3,r2
    a494:	00800074 	movhi	r2,1
    a498:	10865804 	addi	r2,r2,6496
    a49c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    a4a0:	e13ff717 	ldw	r4,-36(fp)
    a4a4:	000d8680 	call	d868 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    a4a8:	00800074 	movhi	r2,1
    a4ac:	10866044 	addi	r2,r2,6529
    a4b0:	10800003 	ldbu	r2,0(r2)
    a4b4:	10bfffc4 	addi	r2,r2,-1
    a4b8:	1007883a 	mov	r3,r2
    a4bc:	00800074 	movhi	r2,1
    a4c0:	10866044 	addi	r2,r2,6529
    a4c4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    a4c8:	e0bfff03 	ldbu	r2,-4(fp)
    a4cc:	00c000b4 	movhi	r3,2
    a4d0:	18e2ed04 	addi	r3,r3,-29772
    a4d4:	1085883a 	add	r2,r2,r2
    a4d8:	1085883a 	add	r2,r2,r2
    a4dc:	1885883a 	add	r2,r3,r2
    a4e0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    a4e4:	e0bff717 	ldw	r2,-36(fp)
    a4e8:	10800617 	ldw	r2,24(r2)
    a4ec:	1000091e 	bne	r2,zero,a514 <OSTaskDel+0x338>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    a4f0:	e0bff717 	ldw	r2,-36(fp)
    a4f4:	10800517 	ldw	r2,20(r2)
    a4f8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    a4fc:	e0bff717 	ldw	r2,-36(fp)
    a500:	10c00517 	ldw	r3,20(r2)
    a504:	00800074 	movhi	r2,1
    a508:	10865b04 	addi	r2,r2,6508
    a50c:	10c00015 	stw	r3,0(r2)
    a510:	00000a06 	br	a53c <OSTaskDel+0x360>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    a514:	e0bff717 	ldw	r2,-36(fp)
    a518:	10800617 	ldw	r2,24(r2)
    a51c:	e0fff717 	ldw	r3,-36(fp)
    a520:	18c00517 	ldw	r3,20(r3)
    a524:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    a528:	e0bff717 	ldw	r2,-36(fp)
    a52c:	10800517 	ldw	r2,20(r2)
    a530:	e0fff717 	ldw	r3,-36(fp)
    a534:	18c00617 	ldw	r3,24(r3)
    a538:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    a53c:	00800074 	movhi	r2,1
    a540:	10865f04 	addi	r2,r2,6524
    a544:	10c00017 	ldw	r3,0(r2)
    a548:	e0bff717 	ldw	r2,-36(fp)
    a54c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    a550:	00800074 	movhi	r2,1
    a554:	10865f04 	addi	r2,r2,6524
    a558:	e0fff717 	ldw	r3,-36(fp)
    a55c:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    a560:	e0bff717 	ldw	r2,-36(fp)
    a564:	00c00fc4 	movi	r3,63
    a568:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    a56c:	e0bff717 	ldw	r2,-36(fp)
    a570:	10001345 	stb	zero,77(r2)
    a574:	e0bff617 	ldw	r2,-40(fp)
    a578:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a57c:	e0bffe17 	ldw	r2,-8(fp)
    a580:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a584:	00800074 	movhi	r2,1
    a588:	10865844 	addi	r2,r2,6497
    a58c:	10800003 	ldbu	r2,0(r2)
    a590:	10803fcc 	andi	r2,r2,255
    a594:	10800058 	cmpnei	r2,r2,1
    a598:	1000011e 	bne	r2,zero,a5a0 <OSTaskDel+0x3c4>
        OS_Sched();                                     /* Find new highest priority task              */
    a59c:	00053d80 	call	53d8 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a5a0:	0005883a 	mov	r2,zero
}
    a5a4:	e037883a 	mov	sp,fp
    a5a8:	dfc00117 	ldw	ra,4(sp)
    a5ac:	df000017 	ldw	fp,0(sp)
    a5b0:	dec00204 	addi	sp,sp,8
    a5b4:	f800283a 	ret

0000a5b8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    a5b8:	defff504 	addi	sp,sp,-44
    a5bc:	df000a15 	stw	fp,40(sp)
    a5c0:	df000a04 	addi	fp,sp,40
    a5c4:	2005883a 	mov	r2,r4
    a5c8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a5cc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    a5d0:	e0bfff03 	ldbu	r2,-4(fp)
    a5d4:	10800518 	cmpnei	r2,r2,20
    a5d8:	1000021e 	bne	r2,zero,a5e4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    a5dc:	00800f84 	movi	r2,62
    a5e0:	00004706 	br	a700 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    a5e4:	e0bfff03 	ldbu	r2,-4(fp)
    a5e8:	10800530 	cmpltui	r2,r2,20
    a5ec:	1000051e 	bne	r2,zero,a604 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    a5f0:	e0bfff03 	ldbu	r2,-4(fp)
    a5f4:	10803fe0 	cmpeqi	r2,r2,255
    a5f8:	1000021e 	bne	r2,zero,a604 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    a5fc:	00800a84 	movi	r2,42
    a600:	00003f06 	br	a700 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    a604:	e0bfff03 	ldbu	r2,-4(fp)
    a608:	10803fd8 	cmpnei	r2,r2,255
    a60c:	1000131e 	bne	r2,zero,a65c <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a610:	0005303a 	rdctl	r2,status
    a614:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a618:	e0fff917 	ldw	r3,-28(fp)
    a61c:	00bfff84 	movi	r2,-2
    a620:	1884703a 	and	r2,r3,r2
    a624:	1001703a 	wrctl	status,r2
  
  return context;
    a628:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    a62c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    a630:	00800074 	movhi	r2,1
    a634:	10866704 	addi	r2,r2,6556
    a638:	10800017 	ldw	r2,0(r2)
    a63c:	10800dc3 	ldbu	r2,55(r2)
    a640:	e0bff705 	stb	r2,-36(fp)
    a644:	e0bff617 	ldw	r2,-40(fp)
    a648:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a64c:	e0bffa17 	ldw	r2,-24(fp)
    a650:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    a654:	e0bff703 	ldbu	r2,-36(fp)
    a658:	00002906 	br	a700 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a65c:	0005303a 	rdctl	r2,status
    a660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a664:	e0fffb17 	ldw	r3,-20(fp)
    a668:	00bfff84 	movi	r2,-2
    a66c:	1884703a 	and	r2,r3,r2
    a670:	1001703a 	wrctl	status,r2
  
  return context;
    a674:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    a678:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    a67c:	e0bfff03 	ldbu	r2,-4(fp)
    a680:	00c000b4 	movhi	r3,2
    a684:	18e2ed04 	addi	r3,r3,-29772
    a688:	1085883a 	add	r2,r2,r2
    a68c:	1085883a 	add	r2,r2,r2
    a690:	1885883a 	add	r2,r3,r2
    a694:	10800017 	ldw	r2,0(r2)
    a698:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    a69c:	e0bff817 	ldw	r2,-32(fp)
    a6a0:	1000061e 	bne	r2,zero,a6bc <OSTaskDelReq+0x104>
    a6a4:	e0bff617 	ldw	r2,-40(fp)
    a6a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a6ac:	e0bffc17 	ldw	r2,-16(fp)
    a6b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    a6b4:	008010c4 	movi	r2,67
    a6b8:	00001106 	br	a700 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    a6bc:	e0bff817 	ldw	r2,-32(fp)
    a6c0:	10800058 	cmpnei	r2,r2,1
    a6c4:	1000061e 	bne	r2,zero,a6e0 <OSTaskDelReq+0x128>
    a6c8:	e0bff617 	ldw	r2,-40(fp)
    a6cc:	e0bffd15 	stw	r2,-12(fp)
    a6d0:	e0bffd17 	ldw	r2,-12(fp)
    a6d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a6d8:	00800f44 	movi	r2,61
    a6dc:	00000806 	br	a700 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    a6e0:	e0bff817 	ldw	r2,-32(fp)
    a6e4:	00c00fc4 	movi	r3,63
    a6e8:	10c00dc5 	stb	r3,55(r2)
    a6ec:	e0bff617 	ldw	r2,-40(fp)
    a6f0:	e0bffe15 	stw	r2,-8(fp)
    a6f4:	e0bffe17 	ldw	r2,-8(fp)
    a6f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a6fc:	0005883a 	mov	r2,zero
}
    a700:	e037883a 	mov	sp,fp
    a704:	df000017 	ldw	fp,0(sp)
    a708:	dec00104 	addi	sp,sp,4
    a70c:	f800283a 	ret

0000a710 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a710:	defff404 	addi	sp,sp,-48
    a714:	dfc00b15 	stw	ra,44(sp)
    a718:	df000a15 	stw	fp,40(sp)
    a71c:	df000a04 	addi	fp,sp,40
    a720:	2005883a 	mov	r2,r4
    a724:	e17ffe15 	stw	r5,-8(fp)
    a728:	e1bfff15 	stw	r6,-4(fp)
    a72c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    a730:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    a734:	e0bfff17 	ldw	r2,-4(fp)
    a738:	1000021e 	bne	r2,zero,a744 <OSTaskNameGet+0x34>
        return (0);
    a73c:	0005883a 	mov	r2,zero
    a740:	00005806 	br	a8a4 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    a744:	e0bffd03 	ldbu	r2,-12(fp)
    a748:	10800570 	cmpltui	r2,r2,21
    a74c:	1000081e 	bne	r2,zero,a770 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    a750:	e0bffd03 	ldbu	r2,-12(fp)
    a754:	10803fe0 	cmpeqi	r2,r2,255
    a758:	1000051e 	bne	r2,zero,a770 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    a75c:	e0bfff17 	ldw	r2,-4(fp)
    a760:	00c00a84 	movi	r3,42
    a764:	10c00005 	stb	r3,0(r2)
            return (0);
    a768:	0005883a 	mov	r2,zero
    a76c:	00004d06 	br	a8a4 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    a770:	e0bffe17 	ldw	r2,-8(fp)
    a774:	1000051e 	bne	r2,zero,a78c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    a778:	e0bfff17 	ldw	r2,-4(fp)
    a77c:	00c00304 	movi	r3,12
    a780:	10c00005 	stb	r3,0(r2)
        return (0);
    a784:	0005883a 	mov	r2,zero
    a788:	00004606 	br	a8a4 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    a78c:	00800074 	movhi	r2,1
    a790:	10866604 	addi	r2,r2,6552
    a794:	10800003 	ldbu	r2,0(r2)
    a798:	10803fcc 	andi	r2,r2,255
    a79c:	10000526 	beq	r2,zero,a7b4 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    a7a0:	e0bfff17 	ldw	r2,-4(fp)
    a7a4:	00c00444 	movi	r3,17
    a7a8:	10c00005 	stb	r3,0(r2)
        return (0);
    a7ac:	0005883a 	mov	r2,zero
    a7b0:	00003c06 	br	a8a4 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a7b4:	0005303a 	rdctl	r2,status
    a7b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7bc:	e0fff917 	ldw	r3,-28(fp)
    a7c0:	00bfff84 	movi	r2,-2
    a7c4:	1884703a 	and	r2,r3,r2
    a7c8:	1001703a 	wrctl	status,r2
  
  return context;
    a7cc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    a7d0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    a7d4:	e0bffd03 	ldbu	r2,-12(fp)
    a7d8:	10803fd8 	cmpnei	r2,r2,255
    a7dc:	1000051e 	bne	r2,zero,a7f4 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    a7e0:	00800074 	movhi	r2,1
    a7e4:	10866704 	addi	r2,r2,6556
    a7e8:	10800017 	ldw	r2,0(r2)
    a7ec:	10800c83 	ldbu	r2,50(r2)
    a7f0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a7f4:	e0bffd03 	ldbu	r2,-12(fp)
    a7f8:	00c000b4 	movhi	r3,2
    a7fc:	18e2ed04 	addi	r3,r3,-29772
    a800:	1085883a 	add	r2,r2,r2
    a804:	1085883a 	add	r2,r2,r2
    a808:	1885883a 	add	r2,r3,r2
    a80c:	10800017 	ldw	r2,0(r2)
    a810:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    a814:	e0bff717 	ldw	r2,-36(fp)
    a818:	1000091e 	bne	r2,zero,a840 <OSTaskNameGet+0x130>
    a81c:	e0bff617 	ldw	r2,-40(fp)
    a820:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a824:	e0bffa17 	ldw	r2,-24(fp)
    a828:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a82c:	e0bfff17 	ldw	r2,-4(fp)
    a830:	00c010c4 	movi	r3,67
    a834:	10c00005 	stb	r3,0(r2)
        return (0);
    a838:	0005883a 	mov	r2,zero
    a83c:	00001906 	br	a8a4 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    a840:	e0bff717 	ldw	r2,-36(fp)
    a844:	10800058 	cmpnei	r2,r2,1
    a848:	1000091e 	bne	r2,zero,a870 <OSTaskNameGet+0x160>
    a84c:	e0bff617 	ldw	r2,-40(fp)
    a850:	e0bffb15 	stw	r2,-20(fp)
    a854:	e0bffb17 	ldw	r2,-20(fp)
    a858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a85c:	e0bfff17 	ldw	r2,-4(fp)
    a860:	00c010c4 	movi	r3,67
    a864:	10c00005 	stb	r3,0(r2)
        return (0);
    a868:	0005883a 	mov	r2,zero
    a86c:	00000d06 	br	a8a4 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    a870:	e0bff717 	ldw	r2,-36(fp)
    a874:	10801304 	addi	r2,r2,76
    a878:	e13ffe17 	ldw	r4,-8(fp)
    a87c:	100b883a 	mov	r5,r2
    a880:	00055140 	call	5514 <OS_StrCopy>
    a884:	e0bff805 	stb	r2,-32(fp)
    a888:	e0bff617 	ldw	r2,-40(fp)
    a88c:	e0bffc15 	stw	r2,-16(fp)
    a890:	e0bffc17 	ldw	r2,-16(fp)
    a894:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a898:	e0bfff17 	ldw	r2,-4(fp)
    a89c:	10000005 	stb	zero,0(r2)
    return (len);
    a8a0:	e0bff803 	ldbu	r2,-32(fp)
}
    a8a4:	e037883a 	mov	sp,fp
    a8a8:	dfc00117 	ldw	ra,4(sp)
    a8ac:	df000017 	ldw	fp,0(sp)
    a8b0:	dec00204 	addi	sp,sp,8
    a8b4:	f800283a 	ret

0000a8b8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a8b8:	defff304 	addi	sp,sp,-52
    a8bc:	dfc00c15 	stw	ra,48(sp)
    a8c0:	df000b15 	stw	fp,44(sp)
    a8c4:	df000b04 	addi	fp,sp,44
    a8c8:	2005883a 	mov	r2,r4
    a8cc:	e17ffe15 	stw	r5,-8(fp)
    a8d0:	e1bfff15 	stw	r6,-4(fp)
    a8d4:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    a8d8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    a8dc:	e0bfff17 	ldw	r2,-4(fp)
    a8e0:	1000011e 	bne	r2,zero,a8e8 <OSTaskNameSet+0x30>
        return;
    a8e4:	00005f06 	br	aa64 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    a8e8:	e0bffd03 	ldbu	r2,-12(fp)
    a8ec:	10800570 	cmpltui	r2,r2,21
    a8f0:	1000071e 	bne	r2,zero,a910 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
    a8f4:	e0bffd03 	ldbu	r2,-12(fp)
    a8f8:	10803fe0 	cmpeqi	r2,r2,255
    a8fc:	1000041e 	bne	r2,zero,a910 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    a900:	e0bfff17 	ldw	r2,-4(fp)
    a904:	00c00a84 	movi	r3,42
    a908:	10c00005 	stb	r3,0(r2)
            return;
    a90c:	00005506 	br	aa64 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    a910:	e0bffe17 	ldw	r2,-8(fp)
    a914:	1000041e 	bne	r2,zero,a928 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    a918:	e0bfff17 	ldw	r2,-4(fp)
    a91c:	00c00304 	movi	r3,12
    a920:	10c00005 	stb	r3,0(r2)
        return;
    a924:	00004f06 	br	aa64 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    a928:	00800074 	movhi	r2,1
    a92c:	10866604 	addi	r2,r2,6552
    a930:	10800003 	ldbu	r2,0(r2)
    a934:	10803fcc 	andi	r2,r2,255
    a938:	10000426 	beq	r2,zero,a94c <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
    a93c:	e0bfff17 	ldw	r2,-4(fp)
    a940:	00c00484 	movi	r3,18
    a944:	10c00005 	stb	r3,0(r2)
        return;
    a948:	00004606 	br	aa64 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a94c:	0005303a 	rdctl	r2,status
    a950:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a954:	e0fff817 	ldw	r3,-32(fp)
    a958:	00bfff84 	movi	r2,-2
    a95c:	1884703a 	and	r2,r3,r2
    a960:	1001703a 	wrctl	status,r2
  
  return context;
    a964:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    a968:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    a96c:	e0bffd03 	ldbu	r2,-12(fp)
    a970:	10803fd8 	cmpnei	r2,r2,255
    a974:	1000051e 	bne	r2,zero,a98c <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    a978:	00800074 	movhi	r2,1
    a97c:	10866704 	addi	r2,r2,6556
    a980:	10800017 	ldw	r2,0(r2)
    a984:	10800c83 	ldbu	r2,50(r2)
    a988:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a98c:	e0bffd03 	ldbu	r2,-12(fp)
    a990:	00c000b4 	movhi	r3,2
    a994:	18e2ed04 	addi	r3,r3,-29772
    a998:	1085883a 	add	r2,r2,r2
    a99c:	1085883a 	add	r2,r2,r2
    a9a0:	1885883a 	add	r2,r3,r2
    a9a4:	10800017 	ldw	r2,0(r2)
    a9a8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    a9ac:	e0bff617 	ldw	r2,-40(fp)
    a9b0:	1000081e 	bne	r2,zero,a9d4 <OSTaskNameSet+0x11c>
    a9b4:	e0bff517 	ldw	r2,-44(fp)
    a9b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a9bc:	e0bff917 	ldw	r2,-28(fp)
    a9c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a9c4:	e0bfff17 	ldw	r2,-4(fp)
    a9c8:	00c010c4 	movi	r3,67
    a9cc:	10c00005 	stb	r3,0(r2)
        return;
    a9d0:	00002406 	br	aa64 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    a9d4:	e0bff617 	ldw	r2,-40(fp)
    a9d8:	10800058 	cmpnei	r2,r2,1
    a9dc:	1000081e 	bne	r2,zero,aa00 <OSTaskNameSet+0x148>
    a9e0:	e0bff517 	ldw	r2,-44(fp)
    a9e4:	e0bffa15 	stw	r2,-24(fp)
    a9e8:	e0bffa17 	ldw	r2,-24(fp)
    a9ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a9f0:	e0bfff17 	ldw	r2,-4(fp)
    a9f4:	00c010c4 	movi	r3,67
    a9f8:	10c00005 	stb	r3,0(r2)
        return;
    a9fc:	00001906 	br	aa64 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    aa00:	e13ffe17 	ldw	r4,-8(fp)
    aa04:	00055880 	call	5588 <OS_StrLen>
    aa08:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    aa0c:	e0bff703 	ldbu	r2,-36(fp)
    aa10:	10800830 	cmpltui	r2,r2,32
    aa14:	1000081e 	bne	r2,zero,aa38 <OSTaskNameSet+0x180>
    aa18:	e0bff517 	ldw	r2,-44(fp)
    aa1c:	e0bffb15 	stw	r2,-20(fp)
    aa20:	e0bffb17 	ldw	r2,-20(fp)
    aa24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    aa28:	e0bfff17 	ldw	r2,-4(fp)
    aa2c:	00c01044 	movi	r3,65
    aa30:	10c00005 	stb	r3,0(r2)
        return;
    aa34:	00000b06 	br	aa64 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    aa38:	e0bff617 	ldw	r2,-40(fp)
    aa3c:	10801304 	addi	r2,r2,76
    aa40:	1009883a 	mov	r4,r2
    aa44:	e17ffe17 	ldw	r5,-8(fp)
    aa48:	00055140 	call	5514 <OS_StrCopy>
    aa4c:	e0bff517 	ldw	r2,-44(fp)
    aa50:	e0bffc15 	stw	r2,-16(fp)
    aa54:	e0bffc17 	ldw	r2,-16(fp)
    aa58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    aa5c:	e0bfff17 	ldw	r2,-4(fp)
    aa60:	10000005 	stb	zero,0(r2)
}
    aa64:	e037883a 	mov	sp,fp
    aa68:	dfc00117 	ldw	ra,4(sp)
    aa6c:	df000017 	ldw	fp,0(sp)
    aa70:	dec00204 	addi	sp,sp,8
    aa74:	f800283a 	ret

0000aa78 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    aa78:	defff404 	addi	sp,sp,-48
    aa7c:	dfc00b15 	stw	ra,44(sp)
    aa80:	df000a15 	stw	fp,40(sp)
    aa84:	df000a04 	addi	fp,sp,40
    aa88:	2005883a 	mov	r2,r4
    aa8c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    aa90:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    aa94:	e0bfff03 	ldbu	r2,-4(fp)
    aa98:	10800530 	cmpltui	r2,r2,20
    aa9c:	1000021e 	bne	r2,zero,aaa8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    aaa0:	00800a84 	movi	r2,42
    aaa4:	00006c06 	br	ac58 <OSTaskResume+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aaa8:	0005303a 	rdctl	r2,status
    aaac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aab0:	e0fff817 	ldw	r3,-32(fp)
    aab4:	00bfff84 	movi	r2,-2
    aab8:	1884703a 	and	r2,r3,r2
    aabc:	1001703a 	wrctl	status,r2
  
  return context;
    aac0:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    aac4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    aac8:	e0bfff03 	ldbu	r2,-4(fp)
    aacc:	00c000b4 	movhi	r3,2
    aad0:	18e2ed04 	addi	r3,r3,-29772
    aad4:	1085883a 	add	r2,r2,r2
    aad8:	1085883a 	add	r2,r2,r2
    aadc:	1885883a 	add	r2,r3,r2
    aae0:	10800017 	ldw	r2,0(r2)
    aae4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    aae8:	e0bff717 	ldw	r2,-36(fp)
    aaec:	1000061e 	bne	r2,zero,ab08 <OSTaskResume+0x90>
    aaf0:	e0bff617 	ldw	r2,-40(fp)
    aaf4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aaf8:	e0bff917 	ldw	r2,-28(fp)
    aafc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    ab00:	00801184 	movi	r2,70
    ab04:	00005406 	br	ac58 <OSTaskResume+0x1e0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    ab08:	e0bff717 	ldw	r2,-36(fp)
    ab0c:	10800058 	cmpnei	r2,r2,1
    ab10:	1000061e 	bne	r2,zero,ab2c <OSTaskResume+0xb4>
    ab14:	e0bff617 	ldw	r2,-40(fp)
    ab18:	e0bffa15 	stw	r2,-24(fp)
    ab1c:	e0bffa17 	ldw	r2,-24(fp)
    ab20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ab24:	008010c4 	movi	r2,67
    ab28:	00004b06 	br	ac58 <OSTaskResume+0x1e0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    ab2c:	e0bff717 	ldw	r2,-36(fp)
    ab30:	10800c03 	ldbu	r2,48(r2)
    ab34:	10803fcc 	andi	r2,r2,255
    ab38:	1080020c 	andi	r2,r2,8
    ab3c:	10004126 	beq	r2,zero,ac44 <OSTaskResume+0x1cc>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    ab40:	e0bff717 	ldw	r2,-36(fp)
    ab44:	10c00c03 	ldbu	r3,48(r2)
    ab48:	00bffdc4 	movi	r2,-9
    ab4c:	1884703a 	and	r2,r3,r2
    ab50:	1007883a 	mov	r3,r2
    ab54:	e0bff717 	ldw	r2,-36(fp)
    ab58:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    ab5c:	e0bff717 	ldw	r2,-36(fp)
    ab60:	10800c03 	ldbu	r2,48(r2)
    ab64:	10803fcc 	andi	r2,r2,255
    ab68:	1000301e 	bne	r2,zero,ac2c <OSTaskResume+0x1b4>
            if (ptcb->OSTCBDly == 0) {
    ab6c:	e0bff717 	ldw	r2,-36(fp)
    ab70:	10800b8b 	ldhu	r2,46(r2)
    ab74:	10bfffcc 	andi	r2,r2,65535
    ab78:	1000271e 	bne	r2,zero,ac18 <OSTaskResume+0x1a0>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    ab7c:	e0bff717 	ldw	r2,-36(fp)
    ab80:	10c00d83 	ldbu	r3,54(r2)
    ab84:	00800074 	movhi	r2,1
    ab88:	10866404 	addi	r2,r2,6544
    ab8c:	10800003 	ldbu	r2,0(r2)
    ab90:	1884b03a 	or	r2,r3,r2
    ab94:	1007883a 	mov	r3,r2
    ab98:	00800074 	movhi	r2,1
    ab9c:	10866404 	addi	r2,r2,6544
    aba0:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    aba4:	e0bff717 	ldw	r2,-36(fp)
    aba8:	10800d03 	ldbu	r2,52(r2)
    abac:	10803fcc 	andi	r2,r2,255
    abb0:	e0fff717 	ldw	r3,-36(fp)
    abb4:	18c00d03 	ldbu	r3,52(r3)
    abb8:	18c03fcc 	andi	r3,r3,255
    abbc:	01000074 	movhi	r4,1
    abc0:	21066444 	addi	r4,r4,6545
    abc4:	20c7883a 	add	r3,r4,r3
    abc8:	19000003 	ldbu	r4,0(r3)
    abcc:	e0fff717 	ldw	r3,-36(fp)
    abd0:	18c00d43 	ldbu	r3,53(r3)
    abd4:	20c6b03a 	or	r3,r4,r3
    abd8:	01000074 	movhi	r4,1
    abdc:	21066444 	addi	r4,r4,6545
    abe0:	2085883a 	add	r2,r4,r2
    abe4:	10c00005 	stb	r3,0(r2)
    abe8:	e0bff617 	ldw	r2,-40(fp)
    abec:	e0bffb15 	stw	r2,-20(fp)
    abf0:	e0bffb17 	ldw	r2,-20(fp)
    abf4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    abf8:	00800074 	movhi	r2,1
    abfc:	10865844 	addi	r2,r2,6497
    ac00:	10800003 	ldbu	r2,0(r2)
    ac04:	10803fcc 	andi	r2,r2,255
    ac08:	10800058 	cmpnei	r2,r2,1
    ac0c:	10000b1e 	bne	r2,zero,ac3c <OSTaskResume+0x1c4>
                    OS_Sched();                               /* Find new highest priority task        */
    ac10:	00053d80 	call	53d8 <OS_Sched>
    ac14:	00000906 	br	ac3c <OSTaskResume+0x1c4>
    ac18:	e0bff617 	ldw	r2,-40(fp)
    ac1c:	e0bffc15 	stw	r2,-16(fp)
    ac20:	e0bffc17 	ldw	r2,-16(fp)
    ac24:	1001703a 	wrctl	status,r2
    ac28:	00000406 	br	ac3c <OSTaskResume+0x1c4>
    ac2c:	e0bff617 	ldw	r2,-40(fp)
    ac30:	e0bffd15 	stw	r2,-12(fp)
    ac34:	e0bffd17 	ldw	r2,-12(fp)
    ac38:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    ac3c:	0005883a 	mov	r2,zero
    ac40:	00000506 	br	ac58 <OSTaskResume+0x1e0>
    ac44:	e0bff617 	ldw	r2,-40(fp)
    ac48:	e0bffe15 	stw	r2,-8(fp)
    ac4c:	e0bffe17 	ldw	r2,-8(fp)
    ac50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    ac54:	00801104 	movi	r2,68
}
    ac58:	e037883a 	mov	sp,fp
    ac5c:	dfc00117 	ldw	ra,4(sp)
    ac60:	df000017 	ldw	fp,0(sp)
    ac64:	dec00204 	addi	sp,sp,8
    ac68:	f800283a 	ret

0000ac6c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    ac6c:	defff304 	addi	sp,sp,-52
    ac70:	df000c15 	stw	fp,48(sp)
    ac74:	df000c04 	addi	fp,sp,48
    ac78:	2005883a 	mov	r2,r4
    ac7c:	e17fff15 	stw	r5,-4(fp)
    ac80:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ac84:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    ac88:	e0bffe03 	ldbu	r2,-8(fp)
    ac8c:	10800570 	cmpltui	r2,r2,21
    ac90:	1000051e 	bne	r2,zero,aca8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    ac94:	e0bffe03 	ldbu	r2,-8(fp)
    ac98:	10803fe0 	cmpeqi	r2,r2,255
    ac9c:	1000021e 	bne	r2,zero,aca8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    aca0:	00800a84 	movi	r2,42
    aca4:	00005f06 	br	ae24 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    aca8:	e0bfff17 	ldw	r2,-4(fp)
    acac:	1000021e 	bne	r2,zero,acb8 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    acb0:	00800244 	movi	r2,9
    acb4:	00005b06 	br	ae24 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    acb8:	e0bfff17 	ldw	r2,-4(fp)
    acbc:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    acc0:	e0bfff17 	ldw	r2,-4(fp)
    acc4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    acc8:	0005303a 	rdctl	r2,status
    accc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    acd0:	e0fff917 	ldw	r3,-28(fp)
    acd4:	00bfff84 	movi	r2,-2
    acd8:	1884703a 	and	r2,r3,r2
    acdc:	1001703a 	wrctl	status,r2
  
  return context;
    ace0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    ace4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    ace8:	e0bffe03 	ldbu	r2,-8(fp)
    acec:	10803fd8 	cmpnei	r2,r2,255
    acf0:	1000051e 	bne	r2,zero,ad08 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    acf4:	00800074 	movhi	r2,1
    acf8:	10866704 	addi	r2,r2,6556
    acfc:	10800017 	ldw	r2,0(r2)
    ad00:	10800c83 	ldbu	r2,50(r2)
    ad04:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    ad08:	e0bffe03 	ldbu	r2,-8(fp)
    ad0c:	00c000b4 	movhi	r3,2
    ad10:	18e2ed04 	addi	r3,r3,-29772
    ad14:	1085883a 	add	r2,r2,r2
    ad18:	1085883a 	add	r2,r2,r2
    ad1c:	1885883a 	add	r2,r3,r2
    ad20:	10800017 	ldw	r2,0(r2)
    ad24:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    ad28:	e0bff717 	ldw	r2,-36(fp)
    ad2c:	1000061e 	bne	r2,zero,ad48 <OSTaskStkChk+0xdc>
    ad30:	e0bff617 	ldw	r2,-40(fp)
    ad34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ad38:	e0bffa17 	ldw	r2,-24(fp)
    ad3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ad40:	008010c4 	movi	r2,67
    ad44:	00003706 	br	ae24 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    ad48:	e0bff717 	ldw	r2,-36(fp)
    ad4c:	10800058 	cmpnei	r2,r2,1
    ad50:	1000061e 	bne	r2,zero,ad6c <OSTaskStkChk+0x100>
    ad54:	e0bff617 	ldw	r2,-40(fp)
    ad58:	e0bffb15 	stw	r2,-20(fp)
    ad5c:	e0bffb17 	ldw	r2,-20(fp)
    ad60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ad64:	008010c4 	movi	r2,67
    ad68:	00002e06 	br	ae24 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    ad6c:	e0bff717 	ldw	r2,-36(fp)
    ad70:	1080040b 	ldhu	r2,16(r2)
    ad74:	10bfffcc 	andi	r2,r2,65535
    ad78:	1080004c 	andi	r2,r2,1
    ad7c:	1000061e 	bne	r2,zero,ad98 <OSTaskStkChk+0x12c>
    ad80:	e0bff617 	ldw	r2,-40(fp)
    ad84:	e0bffc15 	stw	r2,-16(fp)
    ad88:	e0bffc17 	ldw	r2,-16(fp)
    ad8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    ad90:	00801144 	movi	r2,69
    ad94:	00002306 	br	ae24 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
    ad98:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    ad9c:	e0bff717 	ldw	r2,-36(fp)
    ada0:	10800317 	ldw	r2,12(r2)
    ada4:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
    ada8:	e0bff717 	ldw	r2,-36(fp)
    adac:	10800217 	ldw	r2,8(r2)
    adb0:	e0bff415 	stw	r2,-48(fp)
    adb4:	e0bff617 	ldw	r2,-40(fp)
    adb8:	e0bffd15 	stw	r2,-12(fp)
    adbc:	e0bffd17 	ldw	r2,-12(fp)
    adc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    adc4:	00000306 	br	add4 <OSTaskStkChk+0x168>
        nfree++;
    adc8:	e0bff517 	ldw	r2,-44(fp)
    adcc:	10800044 	addi	r2,r2,1
    add0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    add4:	e0bff417 	ldw	r2,-48(fp)
    add8:	10c00104 	addi	r3,r2,4
    addc:	e0fff415 	stw	r3,-48(fp)
    ade0:	10800017 	ldw	r2,0(r2)
    ade4:	103ff826 	beq	r2,zero,adc8 <__alt_data_end+0xfc00adc8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    ade8:	e0bff517 	ldw	r2,-44(fp)
    adec:	1085883a 	add	r2,r2,r2
    adf0:	1085883a 	add	r2,r2,r2
    adf4:	1007883a 	mov	r3,r2
    adf8:	e0bfff17 	ldw	r2,-4(fp)
    adfc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    ae00:	e0fff817 	ldw	r3,-32(fp)
    ae04:	e0bff517 	ldw	r2,-44(fp)
    ae08:	1885c83a 	sub	r2,r3,r2
    ae0c:	1085883a 	add	r2,r2,r2
    ae10:	1085883a 	add	r2,r2,r2
    ae14:	1007883a 	mov	r3,r2
    ae18:	e0bfff17 	ldw	r2,-4(fp)
    ae1c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    ae20:	0005883a 	mov	r2,zero
}
    ae24:	e037883a 	mov	sp,fp
    ae28:	df000017 	ldw	fp,0(sp)
    ae2c:	dec00104 	addi	sp,sp,4
    ae30:	f800283a 	ret

0000ae34 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    ae34:	defff504 	addi	sp,sp,-44
    ae38:	dfc00a15 	stw	ra,40(sp)
    ae3c:	df000915 	stw	fp,36(sp)
    ae40:	df000904 	addi	fp,sp,36
    ae44:	2005883a 	mov	r2,r4
    ae48:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ae4c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    ae50:	e0bfff03 	ldbu	r2,-4(fp)
    ae54:	10800518 	cmpnei	r2,r2,20
    ae58:	1000021e 	bne	r2,zero,ae64 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    ae5c:	008011c4 	movi	r2,71
    ae60:	00007306 	br	b030 <OSTaskSuspend+0x1fc>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    ae64:	e0bfff03 	ldbu	r2,-4(fp)
    ae68:	10800530 	cmpltui	r2,r2,20
    ae6c:	1000051e 	bne	r2,zero,ae84 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    ae70:	e0bfff03 	ldbu	r2,-4(fp)
    ae74:	10803fe0 	cmpeqi	r2,r2,255
    ae78:	1000021e 	bne	r2,zero,ae84 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    ae7c:	00800a84 	movi	r2,42
    ae80:	00006b06 	br	b030 <OSTaskSuspend+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ae84:	0005303a 	rdctl	r2,status
    ae88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ae8c:	e0fffb17 	ldw	r3,-20(fp)
    ae90:	00bfff84 	movi	r2,-2
    ae94:	1884703a 	and	r2,r3,r2
    ae98:	1001703a 	wrctl	status,r2
  
  return context;
    ae9c:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    aea0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    aea4:	e0bfff03 	ldbu	r2,-4(fp)
    aea8:	10803fd8 	cmpnei	r2,r2,255
    aeac:	1000081e 	bne	r2,zero,aed0 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    aeb0:	00800074 	movhi	r2,1
    aeb4:	10866704 	addi	r2,r2,6556
    aeb8:	10800017 	ldw	r2,0(r2)
    aebc:	10800c83 	ldbu	r2,50(r2)
    aec0:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    aec4:	00800044 	movi	r2,1
    aec8:	e0bff705 	stb	r2,-36(fp)
    aecc:	00000b06 	br	aefc <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    aed0:	00800074 	movhi	r2,1
    aed4:	10866704 	addi	r2,r2,6556
    aed8:	10800017 	ldw	r2,0(r2)
    aedc:	10800c83 	ldbu	r2,50(r2)
    aee0:	10c03fcc 	andi	r3,r2,255
    aee4:	e0bfff03 	ldbu	r2,-4(fp)
    aee8:	1880031e 	bne	r3,r2,aef8 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    aeec:	00800044 	movi	r2,1
    aef0:	e0bff705 	stb	r2,-36(fp)
    aef4:	00000106 	br	aefc <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    aef8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    aefc:	e0bfff03 	ldbu	r2,-4(fp)
    af00:	00c000b4 	movhi	r3,2
    af04:	18e2ed04 	addi	r3,r3,-29772
    af08:	1085883a 	add	r2,r2,r2
    af0c:	1085883a 	add	r2,r2,r2
    af10:	1885883a 	add	r2,r3,r2
    af14:	10800017 	ldw	r2,0(r2)
    af18:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    af1c:	e0bff917 	ldw	r2,-28(fp)
    af20:	1000061e 	bne	r2,zero,af3c <OSTaskSuspend+0x108>
    af24:	e0bff817 	ldw	r2,-32(fp)
    af28:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    af2c:	e0bffc17 	ldw	r2,-16(fp)
    af30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    af34:	00801204 	movi	r2,72
    af38:	00003d06 	br	b030 <OSTaskSuspend+0x1fc>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    af3c:	e0bff917 	ldw	r2,-28(fp)
    af40:	10800058 	cmpnei	r2,r2,1
    af44:	1000061e 	bne	r2,zero,af60 <OSTaskSuspend+0x12c>
    af48:	e0bff817 	ldw	r2,-32(fp)
    af4c:	e0bffd15 	stw	r2,-12(fp)
    af50:	e0bffd17 	ldw	r2,-12(fp)
    af54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    af58:	008010c4 	movi	r2,67
    af5c:	00003406 	br	b030 <OSTaskSuspend+0x1fc>
    }
    y            = ptcb->OSTCBY;
    af60:	e0bff917 	ldw	r2,-28(fp)
    af64:	10800d03 	ldbu	r2,52(r2)
    af68:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    af6c:	e0bffa03 	ldbu	r2,-24(fp)
    af70:	e0fffa03 	ldbu	r3,-24(fp)
    af74:	01000074 	movhi	r4,1
    af78:	21066444 	addi	r4,r4,6545
    af7c:	20c7883a 	add	r3,r4,r3
    af80:	18c00003 	ldbu	r3,0(r3)
    af84:	1809883a 	mov	r4,r3
    af88:	e0fff917 	ldw	r3,-28(fp)
    af8c:	18c00d43 	ldbu	r3,53(r3)
    af90:	00c6303a 	nor	r3,zero,r3
    af94:	20c6703a 	and	r3,r4,r3
    af98:	01000074 	movhi	r4,1
    af9c:	21066444 	addi	r4,r4,6545
    afa0:	2085883a 	add	r2,r4,r2
    afa4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    afa8:	e0bffa03 	ldbu	r2,-24(fp)
    afac:	00c00074 	movhi	r3,1
    afb0:	18c66444 	addi	r3,r3,6545
    afb4:	1885883a 	add	r2,r3,r2
    afb8:	10800003 	ldbu	r2,0(r2)
    afbc:	10803fcc 	andi	r2,r2,255
    afc0:	10000c1e 	bne	r2,zero,aff4 <OSTaskSuspend+0x1c0>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    afc4:	e0bff917 	ldw	r2,-28(fp)
    afc8:	10800d83 	ldbu	r2,54(r2)
    afcc:	0084303a 	nor	r2,zero,r2
    afd0:	1007883a 	mov	r3,r2
    afd4:	00800074 	movhi	r2,1
    afd8:	10866404 	addi	r2,r2,6544
    afdc:	10800003 	ldbu	r2,0(r2)
    afe0:	1884703a 	and	r2,r3,r2
    afe4:	1007883a 	mov	r3,r2
    afe8:	00800074 	movhi	r2,1
    afec:	10866404 	addi	r2,r2,6544
    aff0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    aff4:	e0bff917 	ldw	r2,-28(fp)
    aff8:	10800c03 	ldbu	r2,48(r2)
    affc:	10800214 	ori	r2,r2,8
    b000:	1007883a 	mov	r3,r2
    b004:	e0bff917 	ldw	r2,-28(fp)
    b008:	10c00c05 	stb	r3,48(r2)
    b00c:	e0bff817 	ldw	r2,-32(fp)
    b010:	e0bffe15 	stw	r2,-8(fp)
    b014:	e0bffe17 	ldw	r2,-8(fp)
    b018:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    b01c:	e0bff703 	ldbu	r2,-36(fp)
    b020:	10800058 	cmpnei	r2,r2,1
    b024:	1000011e 	bne	r2,zero,b02c <OSTaskSuspend+0x1f8>
        OS_Sched();                                             /* Find new highest priority task      */
    b028:	00053d80 	call	53d8 <OS_Sched>
    }
    return (OS_ERR_NONE);
    b02c:	0005883a 	mov	r2,zero
}
    b030:	e037883a 	mov	sp,fp
    b034:	dfc00117 	ldw	ra,4(sp)
    b038:	df000017 	ldw	fp,0(sp)
    b03c:	dec00204 	addi	sp,sp,8
    b040:	f800283a 	ret

0000b044 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    b044:	defff604 	addi	sp,sp,-40
    b048:	dfc00915 	stw	ra,36(sp)
    b04c:	df000815 	stw	fp,32(sp)
    b050:	df000804 	addi	fp,sp,32
    b054:	2005883a 	mov	r2,r4
    b058:	e17fff15 	stw	r5,-4(fp)
    b05c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b060:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    b064:	e0bffe03 	ldbu	r2,-8(fp)
    b068:	10800570 	cmpltui	r2,r2,21
    b06c:	1000051e 	bne	r2,zero,b084 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    b070:	e0bffe03 	ldbu	r2,-8(fp)
    b074:	10803fe0 	cmpeqi	r2,r2,255
    b078:	1000021e 	bne	r2,zero,b084 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    b07c:	00800a84 	movi	r2,42
    b080:	00003606 	br	b15c <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    b084:	e0bfff17 	ldw	r2,-4(fp)
    b088:	1000021e 	bne	r2,zero,b094 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    b08c:	00800244 	movi	r2,9
    b090:	00003206 	br	b15c <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b094:	0005303a 	rdctl	r2,status
    b098:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b09c:	e0fffa17 	ldw	r3,-24(fp)
    b0a0:	00bfff84 	movi	r2,-2
    b0a4:	1884703a 	and	r2,r3,r2
    b0a8:	1001703a 	wrctl	status,r2
  
  return context;
    b0ac:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b0b0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    b0b4:	e0bffe03 	ldbu	r2,-8(fp)
    b0b8:	10803fd8 	cmpnei	r2,r2,255
    b0bc:	1000051e 	bne	r2,zero,b0d4 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    b0c0:	00800074 	movhi	r2,1
    b0c4:	10866704 	addi	r2,r2,6556
    b0c8:	10800017 	ldw	r2,0(r2)
    b0cc:	10800c83 	ldbu	r2,50(r2)
    b0d0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b0d4:	e0bffe03 	ldbu	r2,-8(fp)
    b0d8:	00c000b4 	movhi	r3,2
    b0dc:	18e2ed04 	addi	r3,r3,-29772
    b0e0:	1085883a 	add	r2,r2,r2
    b0e4:	1085883a 	add	r2,r2,r2
    b0e8:	1885883a 	add	r2,r3,r2
    b0ec:	10800017 	ldw	r2,0(r2)
    b0f0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    b0f4:	e0bff917 	ldw	r2,-28(fp)
    b0f8:	1000061e 	bne	r2,zero,b114 <OSTaskQuery+0xd0>
    b0fc:	e0bff817 	ldw	r2,-32(fp)
    b100:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b104:	e0bffb17 	ldw	r2,-20(fp)
    b108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    b10c:	00800a44 	movi	r2,41
    b110:	00001206 	br	b15c <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    b114:	e0bff917 	ldw	r2,-28(fp)
    b118:	10800058 	cmpnei	r2,r2,1
    b11c:	1000061e 	bne	r2,zero,b138 <OSTaskQuery+0xf4>
    b120:	e0bff817 	ldw	r2,-32(fp)
    b124:	e0bffc15 	stw	r2,-16(fp)
    b128:	e0bffc17 	ldw	r2,-16(fp)
    b12c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b130:	008010c4 	movi	r2,67
    b134:	00000906 	br	b15c <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    b138:	e13fff17 	ldw	r4,-4(fp)
    b13c:	e17ff917 	ldw	r5,-28(fp)
    b140:	01801b04 	movi	r6,108
    b144:	00053740 	call	5374 <OS_MemCopy>
    b148:	e0bff817 	ldw	r2,-32(fp)
    b14c:	e0bffd15 	stw	r2,-12(fp)
    b150:	e0bffd17 	ldw	r2,-12(fp)
    b154:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b158:	0005883a 	mov	r2,zero
}
    b15c:	e037883a 	mov	sp,fp
    b160:	dfc00117 	ldw	ra,4(sp)
    b164:	df000017 	ldw	fp,0(sp)
    b168:	dec00204 	addi	sp,sp,8
    b16c:	f800283a 	ret

0000b170 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    b170:	defffc04 	addi	sp,sp,-16
    b174:	df000315 	stw	fp,12(sp)
    b178:	df000304 	addi	fp,sp,12
    b17c:	e13ffd15 	stw	r4,-12(fp)
    b180:	e17ffe15 	stw	r5,-8(fp)
    b184:	3005883a 	mov	r2,r6
    b188:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    b18c:	e0bfff0b 	ldhu	r2,-4(fp)
    b190:	1080004c 	andi	r2,r2,1
    b194:	10000d26 	beq	r2,zero,b1cc <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    b198:	e0bfff0b 	ldhu	r2,-4(fp)
    b19c:	1080008c 	andi	r2,r2,2
    b1a0:	10000a26 	beq	r2,zero,b1cc <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b1a4:	00000706 	br	b1c4 <OS_TaskStkClr+0x54>
                size--;
    b1a8:	e0bffe17 	ldw	r2,-8(fp)
    b1ac:	10bfffc4 	addi	r2,r2,-1
    b1b0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    b1b4:	e0bffd17 	ldw	r2,-12(fp)
    b1b8:	10c00104 	addi	r3,r2,4
    b1bc:	e0fffd15 	stw	r3,-12(fp)
    b1c0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b1c4:	e0bffe17 	ldw	r2,-8(fp)
    b1c8:	103ff71e 	bne	r2,zero,b1a8 <__alt_data_end+0xfc00b1a8>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    b1cc:	e037883a 	mov	sp,fp
    b1d0:	df000017 	ldw	fp,0(sp)
    b1d4:	dec00104 	addi	sp,sp,4
    b1d8:	f800283a 	ret

0000b1dc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    b1dc:	defff904 	addi	sp,sp,-28
    b1e0:	dfc00615 	stw	ra,24(sp)
    b1e4:	df000515 	stw	fp,20(sp)
    b1e8:	df000504 	addi	fp,sp,20
    b1ec:	2005883a 	mov	r2,r4
    b1f0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b1f4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b1f8:	00800074 	movhi	r2,1
    b1fc:	10866604 	addi	r2,r2,6552
    b200:	10800003 	ldbu	r2,0(r2)
    b204:	10803fcc 	andi	r2,r2,255
    b208:	10000126 	beq	r2,zero,b210 <OSTimeDly+0x34>
        return;
    b20c:	00003f06 	br	b30c <OSTimeDly+0x130>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    b210:	e0bfff0b 	ldhu	r2,-4(fp)
    b214:	10003d26 	beq	r2,zero,b30c <OSTimeDly+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b218:	0005303a 	rdctl	r2,status
    b21c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b220:	e0fffd17 	ldw	r3,-12(fp)
    b224:	00bfff84 	movi	r2,-2
    b228:	1884703a 	and	r2,r3,r2
    b22c:	1001703a 	wrctl	status,r2
  
  return context;
    b230:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    b234:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    b238:	00800074 	movhi	r2,1
    b23c:	10866704 	addi	r2,r2,6556
    b240:	10800017 	ldw	r2,0(r2)
    b244:	10800d03 	ldbu	r2,52(r2)
    b248:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    b24c:	e0bffc03 	ldbu	r2,-16(fp)
    b250:	e0fffc03 	ldbu	r3,-16(fp)
    b254:	01000074 	movhi	r4,1
    b258:	21066444 	addi	r4,r4,6545
    b25c:	20c7883a 	add	r3,r4,r3
    b260:	18c00003 	ldbu	r3,0(r3)
    b264:	1809883a 	mov	r4,r3
    b268:	00c00074 	movhi	r3,1
    b26c:	18c66704 	addi	r3,r3,6556
    b270:	18c00017 	ldw	r3,0(r3)
    b274:	18c00d43 	ldbu	r3,53(r3)
    b278:	00c6303a 	nor	r3,zero,r3
    b27c:	20c6703a 	and	r3,r4,r3
    b280:	01000074 	movhi	r4,1
    b284:	21066444 	addi	r4,r4,6545
    b288:	2085883a 	add	r2,r4,r2
    b28c:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
    b290:	e0bffc03 	ldbu	r2,-16(fp)
    b294:	00c00074 	movhi	r3,1
    b298:	18c66444 	addi	r3,r3,6545
    b29c:	1885883a 	add	r2,r3,r2
    b2a0:	10800003 	ldbu	r2,0(r2)
    b2a4:	10803fcc 	andi	r2,r2,255
    b2a8:	10000e1e 	bne	r2,zero,b2e4 <OSTimeDly+0x108>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    b2ac:	00800074 	movhi	r2,1
    b2b0:	10866704 	addi	r2,r2,6556
    b2b4:	10800017 	ldw	r2,0(r2)
    b2b8:	10800d83 	ldbu	r2,54(r2)
    b2bc:	0084303a 	nor	r2,zero,r2
    b2c0:	1007883a 	mov	r3,r2
    b2c4:	00800074 	movhi	r2,1
    b2c8:	10866404 	addi	r2,r2,6544
    b2cc:	10800003 	ldbu	r2,0(r2)
    b2d0:	1884703a 	and	r2,r3,r2
    b2d4:	1007883a 	mov	r3,r2
    b2d8:	00800074 	movhi	r2,1
    b2dc:	10866404 	addi	r2,r2,6544
    b2e0:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    b2e4:	00800074 	movhi	r2,1
    b2e8:	10866704 	addi	r2,r2,6556
    b2ec:	10800017 	ldw	r2,0(r2)
    b2f0:	e0ffff0b 	ldhu	r3,-4(fp)
    b2f4:	10c00b8d 	sth	r3,46(r2)
    b2f8:	e0bffb17 	ldw	r2,-20(fp)
    b2fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b300:	e0bffe17 	ldw	r2,-8(fp)
    b304:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    b308:	00053d80 	call	53d8 <OS_Sched>
    }
}
    b30c:	e037883a 	mov	sp,fp
    b310:	dfc00117 	ldw	ra,4(sp)
    b314:	df000017 	ldw	fp,0(sp)
    b318:	dec00204 	addi	sp,sp,8
    b31c:	f800283a 	ret

0000b320 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    b320:	defff704 	addi	sp,sp,-36
    b324:	dfc00815 	stw	ra,32(sp)
    b328:	df000715 	stw	fp,28(sp)
    b32c:	dc000615 	stw	r16,24(sp)
    b330:	df000704 	addi	fp,sp,28
    b334:	2011883a 	mov	r8,r4
    b338:	2809883a 	mov	r4,r5
    b33c:	3007883a 	mov	r3,r6
    b340:	3805883a 	mov	r2,r7
    b344:	e23ffb05 	stb	r8,-20(fp)
    b348:	e13ffc05 	stb	r4,-16(fp)
    b34c:	e0fffd05 	stb	r3,-12(fp)
    b350:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b354:	00800074 	movhi	r2,1
    b358:	10866604 	addi	r2,r2,6552
    b35c:	10800003 	ldbu	r2,0(r2)
    b360:	10803fcc 	andi	r2,r2,255
    b364:	10000226 	beq	r2,zero,b370 <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
    b368:	00801544 	movi	r2,85
    b36c:	00003e06 	br	b468 <OSTimeDlyHMSM+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    b370:	e0bffb03 	ldbu	r2,-20(fp)
    b374:	1000081e 	bne	r2,zero,b398 <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
    b378:	e0bffc03 	ldbu	r2,-16(fp)
    b37c:	1000061e 	bne	r2,zero,b398 <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
    b380:	e0bffd03 	ldbu	r2,-12(fp)
    b384:	1000041e 	bne	r2,zero,b398 <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
    b388:	e0bffe0b 	ldhu	r2,-8(fp)
    b38c:	1000021e 	bne	r2,zero,b398 <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
    b390:	00801504 	movi	r2,84
    b394:	00003406 	br	b468 <OSTimeDlyHMSM+0x148>
                }
            }
        }
    }
    if (minutes > 59) {
    b398:	e0bffc03 	ldbu	r2,-16(fp)
    b39c:	10800f30 	cmpltui	r2,r2,60
    b3a0:	1000021e 	bne	r2,zero,b3ac <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    b3a4:	00801444 	movi	r2,81
    b3a8:	00002f06 	br	b468 <OSTimeDlyHMSM+0x148>
    }
    if (seconds > 59) {
    b3ac:	e0bffd03 	ldbu	r2,-12(fp)
    b3b0:	10800f30 	cmpltui	r2,r2,60
    b3b4:	1000021e 	bne	r2,zero,b3c0 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
    b3b8:	00801484 	movi	r2,82
    b3bc:	00002a06 	br	b468 <OSTimeDlyHMSM+0x148>
    }
    if (ms > 999) {
    b3c0:	e0bffe0b 	ldhu	r2,-8(fp)
    b3c4:	1080fa30 	cmpltui	r2,r2,1000
    b3c8:	1000021e 	bne	r2,zero,b3d4 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
    b3cc:	008014c4 	movi	r2,83
    b3d0:	00002506 	br	b468 <OSTimeDlyHMSM+0x148>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b3d4:	e0bffb03 	ldbu	r2,-20(fp)
    b3d8:	10c38424 	muli	r3,r2,3600
    b3dc:	e0bffc03 	ldbu	r2,-16(fp)
    b3e0:	10800f24 	muli	r2,r2,60
    b3e4:	1887883a 	add	r3,r3,r2
    b3e8:	e0bffd03 	ldbu	r2,-12(fp)
    b3ec:	1885883a 	add	r2,r3,r2
    b3f0:	14001924 	muli	r16,r2,100
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    b3f4:	e0bffe0b 	ldhu	r2,-8(fp)
    b3f8:	10801924 	muli	r2,r2,100
    b3fc:	10807d04 	addi	r2,r2,500
    b400:	1009883a 	mov	r4,r2
    b404:	0140fa04 	movi	r5,1000
    b408:	000e1080 	call	e108 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b40c:	8085883a 	add	r2,r16,r2
    b410:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    b414:	e0bffa17 	ldw	r2,-24(fp)
    b418:	1004d43a 	srli	r2,r2,16
    b41c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    b420:	e0bffa17 	ldw	r2,-24(fp)
    b424:	10bfffcc 	andi	r2,r2,65535
    b428:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
    b42c:	e0bffa17 	ldw	r2,-24(fp)
    b430:	10bfffcc 	andi	r2,r2,65535
    b434:	1009883a 	mov	r4,r2
    b438:	000b1dc0 	call	b1dc <OSTimeDly>
    while (loops > 0) {
    b43c:	00000706 	br	b45c <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
    b440:	01200014 	movui	r4,32768
    b444:	000b1dc0 	call	b1dc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    b448:	01200014 	movui	r4,32768
    b44c:	000b1dc0 	call	b1dc <OSTimeDly>
        loops--;
    b450:	e0bff90b 	ldhu	r2,-28(fp)
    b454:	10bfffc4 	addi	r2,r2,-1
    b458:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    b45c:	e0bff90b 	ldhu	r2,-28(fp)
    b460:	103ff71e 	bne	r2,zero,b440 <__alt_data_end+0xfc00b440>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    b464:	0005883a 	mov	r2,zero
}
    b468:	e6ffff04 	addi	sp,fp,-4
    b46c:	dfc00217 	ldw	ra,8(sp)
    b470:	df000117 	ldw	fp,4(sp)
    b474:	dc000017 	ldw	r16,0(sp)
    b478:	dec00304 	addi	sp,sp,12
    b47c:	f800283a 	ret

0000b480 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    b480:	defff504 	addi	sp,sp,-44
    b484:	dfc00a15 	stw	ra,40(sp)
    b488:	df000915 	stw	fp,36(sp)
    b48c:	df000904 	addi	fp,sp,36
    b490:	2005883a 	mov	r2,r4
    b494:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b498:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    b49c:	e0bfff03 	ldbu	r2,-4(fp)
    b4a0:	10800530 	cmpltui	r2,r2,20
    b4a4:	1000021e 	bne	r2,zero,b4b0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    b4a8:	00800a84 	movi	r2,42
    b4ac:	00006a06 	br	b658 <OSTimeDlyResume+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b4b0:	0005303a 	rdctl	r2,status
    b4b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b4b8:	e0fff917 	ldw	r3,-28(fp)
    b4bc:	00bfff84 	movi	r2,-2
    b4c0:	1884703a 	and	r2,r3,r2
    b4c4:	1001703a 	wrctl	status,r2
  
  return context;
    b4c8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    b4cc:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    b4d0:	e0bfff03 	ldbu	r2,-4(fp)
    b4d4:	00c000b4 	movhi	r3,2
    b4d8:	18e2ed04 	addi	r3,r3,-29772
    b4dc:	1085883a 	add	r2,r2,r2
    b4e0:	1085883a 	add	r2,r2,r2
    b4e4:	1885883a 	add	r2,r3,r2
    b4e8:	10800017 	ldw	r2,0(r2)
    b4ec:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
    b4f0:	e0bff817 	ldw	r2,-32(fp)
    b4f4:	1000061e 	bne	r2,zero,b510 <OSTimeDlyResume+0x90>
    b4f8:	e0bff717 	ldw	r2,-36(fp)
    b4fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b500:	e0bffa17 	ldw	r2,-24(fp)
    b504:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b508:	008010c4 	movi	r2,67
    b50c:	00005206 	br	b658 <OSTimeDlyResume+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    b510:	e0bff817 	ldw	r2,-32(fp)
    b514:	10800058 	cmpnei	r2,r2,1
    b518:	1000061e 	bne	r2,zero,b534 <OSTimeDlyResume+0xb4>
    b51c:	e0bff717 	ldw	r2,-36(fp)
    b520:	e0bffb15 	stw	r2,-20(fp)
    b524:	e0bffb17 	ldw	r2,-20(fp)
    b528:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b52c:	008010c4 	movi	r2,67
    b530:	00004906 	br	b658 <OSTimeDlyResume+0x1d8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    b534:	e0bff817 	ldw	r2,-32(fp)
    b538:	10800b8b 	ldhu	r2,46(r2)
    b53c:	10bfffcc 	andi	r2,r2,65535
    b540:	1000061e 	bne	r2,zero,b55c <OSTimeDlyResume+0xdc>
    b544:	e0bff717 	ldw	r2,-36(fp)
    b548:	e0bffc15 	stw	r2,-16(fp)
    b54c:	e0bffc17 	ldw	r2,-16(fp)
    b550:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    b554:	00801404 	movi	r2,80
    b558:	00003f06 	br	b658 <OSTimeDlyResume+0x1d8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    b55c:	e0bff817 	ldw	r2,-32(fp)
    b560:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    b564:	e0bff817 	ldw	r2,-32(fp)
    b568:	10800c03 	ldbu	r2,48(r2)
    b56c:	10803fcc 	andi	r2,r2,255
    b570:	10800dcc 	andi	r2,r2,55
    b574:	10000b26 	beq	r2,zero,b5a4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    b578:	e0bff817 	ldw	r2,-32(fp)
    b57c:	10c00c03 	ldbu	r3,48(r2)
    b580:	00bff204 	movi	r2,-56
    b584:	1884703a 	and	r2,r3,r2
    b588:	1007883a 	mov	r3,r2
    b58c:	e0bff817 	ldw	r2,-32(fp)
    b590:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    b594:	e0bff817 	ldw	r2,-32(fp)
    b598:	00c00044 	movi	r3,1
    b59c:	10c00c45 	stb	r3,49(r2)
    b5a0:	00000206 	br	b5ac <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    b5a4:	e0bff817 	ldw	r2,-32(fp)
    b5a8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    b5ac:	e0bff817 	ldw	r2,-32(fp)
    b5b0:	10800c03 	ldbu	r2,48(r2)
    b5b4:	10803fcc 	andi	r2,r2,255
    b5b8:	1080020c 	andi	r2,r2,8
    b5bc:	1000211e 	bne	r2,zero,b644 <OSTimeDlyResume+0x1c4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    b5c0:	e0bff817 	ldw	r2,-32(fp)
    b5c4:	10c00d83 	ldbu	r3,54(r2)
    b5c8:	00800074 	movhi	r2,1
    b5cc:	10866404 	addi	r2,r2,6544
    b5d0:	10800003 	ldbu	r2,0(r2)
    b5d4:	1884b03a 	or	r2,r3,r2
    b5d8:	1007883a 	mov	r3,r2
    b5dc:	00800074 	movhi	r2,1
    b5e0:	10866404 	addi	r2,r2,6544
    b5e4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    b5e8:	e0bff817 	ldw	r2,-32(fp)
    b5ec:	10800d03 	ldbu	r2,52(r2)
    b5f0:	10803fcc 	andi	r2,r2,255
    b5f4:	e0fff817 	ldw	r3,-32(fp)
    b5f8:	18c00d03 	ldbu	r3,52(r3)
    b5fc:	18c03fcc 	andi	r3,r3,255
    b600:	01000074 	movhi	r4,1
    b604:	21066444 	addi	r4,r4,6545
    b608:	20c7883a 	add	r3,r4,r3
    b60c:	19000003 	ldbu	r4,0(r3)
    b610:	e0fff817 	ldw	r3,-32(fp)
    b614:	18c00d43 	ldbu	r3,53(r3)
    b618:	20c6b03a 	or	r3,r4,r3
    b61c:	01000074 	movhi	r4,1
    b620:	21066444 	addi	r4,r4,6545
    b624:	2085883a 	add	r2,r4,r2
    b628:	10c00005 	stb	r3,0(r2)
    b62c:	e0bff717 	ldw	r2,-36(fp)
    b630:	e0bffd15 	stw	r2,-12(fp)
    b634:	e0bffd17 	ldw	r2,-12(fp)
    b638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    b63c:	00053d80 	call	53d8 <OS_Sched>
    b640:	00000406 	br	b654 <OSTimeDlyResume+0x1d4>
    b644:	e0bff717 	ldw	r2,-36(fp)
    b648:	e0bffe15 	stw	r2,-8(fp)
    b64c:	e0bffe17 	ldw	r2,-8(fp)
    b650:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    b654:	0005883a 	mov	r2,zero
}
    b658:	e037883a 	mov	sp,fp
    b65c:	dfc00117 	ldw	ra,4(sp)
    b660:	df000017 	ldw	fp,0(sp)
    b664:	dec00204 	addi	sp,sp,8
    b668:	f800283a 	ret

0000b66c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    b66c:	defffb04 	addi	sp,sp,-20
    b670:	df000415 	stw	fp,16(sp)
    b674:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b678:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b67c:	0005303a 	rdctl	r2,status
    b680:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b684:	e0fffe17 	ldw	r3,-8(fp)
    b688:	00bfff84 	movi	r2,-2
    b68c:	1884703a 	and	r2,r3,r2
    b690:	1001703a 	wrctl	status,r2
  
  return context;
    b694:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    b698:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    b69c:	00800074 	movhi	r2,1
    b6a0:	10866804 	addi	r2,r2,6560
    b6a4:	10800017 	ldw	r2,0(r2)
    b6a8:	e0bffd15 	stw	r2,-12(fp)
    b6ac:	e0bffc17 	ldw	r2,-16(fp)
    b6b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6b4:	e0bfff17 	ldw	r2,-4(fp)
    b6b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    b6bc:	e0bffd17 	ldw	r2,-12(fp)
}
    b6c0:	e037883a 	mov	sp,fp
    b6c4:	df000017 	ldw	fp,0(sp)
    b6c8:	dec00104 	addi	sp,sp,4
    b6cc:	f800283a 	ret

0000b6d0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    b6d0:	defffb04 	addi	sp,sp,-20
    b6d4:	df000415 	stw	fp,16(sp)
    b6d8:	df000404 	addi	fp,sp,16
    b6dc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b6e0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b6e4:	0005303a 	rdctl	r2,status
    b6e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b6ec:	e0fffd17 	ldw	r3,-12(fp)
    b6f0:	00bfff84 	movi	r2,-2
    b6f4:	1884703a 	and	r2,r3,r2
    b6f8:	1001703a 	wrctl	status,r2
  
  return context;
    b6fc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    b700:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    b704:	00800074 	movhi	r2,1
    b708:	10866804 	addi	r2,r2,6560
    b70c:	e0ffff17 	ldw	r3,-4(fp)
    b710:	10c00015 	stw	r3,0(r2)
    b714:	e0bffc17 	ldw	r2,-16(fp)
    b718:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b71c:	e0bffe17 	ldw	r2,-8(fp)
    b720:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    b724:	e037883a 	mov	sp,fp
    b728:	df000017 	ldw	fp,0(sp)
    b72c:	dec00104 	addi	sp,sp,4
    b730:	f800283a 	ret

0000b734 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b734:	defffd04 	addi	sp,sp,-12
    b738:	dfc00215 	stw	ra,8(sp)
    b73c:	df000115 	stw	fp,4(sp)
    b740:	df000104 	addi	fp,sp,4
    b744:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b748:	e13fff17 	ldw	r4,-4(fp)
    b74c:	01400074 	movhi	r5,1
    b750:	297f5d04 	addi	r5,r5,-652
    b754:	000cad00 	call	cad0 <alt_dev_llist_insert>
}
    b758:	e037883a 	mov	sp,fp
    b75c:	dfc00117 	ldw	ra,4(sp)
    b760:	df000017 	ldw	fp,0(sp)
    b764:	dec00204 	addi	sp,sp,8
    b768:	f800283a 	ret

0000b76c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b76c:	defffd04 	addi	sp,sp,-12
    b770:	dfc00215 	stw	ra,8(sp)
    b774:	df000115 	stw	fp,4(sp)
    b778:	df000104 	addi	fp,sp,4
    b77c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_S0, cpu_s0);
    b780:	000d4640 	call	d464 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b784:	00800044 	movi	r2,1
    b788:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b78c:	e037883a 	mov	sp,fp
    b790:	dfc00117 	ldw	ra,4(sp)
    b794:	df000017 	ldw	fp,0(sp)
    b798:	dec00204 	addi	sp,sp,8
    b79c:	f800283a 	ret

0000b7a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b7a0:	defffe04 	addi	sp,sp,-8
    b7a4:	dfc00115 	stw	ra,4(sp)
    b7a8:	df000015 	stw	fp,0(sp)
    b7ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_CPU_S0, timer_cpu_s0);
    b7b0:	01024034 	movhi	r4,2304
    b7b4:	000b883a 	mov	r5,zero
    b7b8:	000d883a 	mov	r6,zero
    b7bc:	01c01904 	movi	r7,100
    b7c0:	000c5a00 	call	c5a0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_CPU_S0, jtag_uart_cpu_s0);
    b7c4:	01000074 	movhi	r4,1
    b7c8:	213b3b04 	addi	r4,r4,-4884
    b7cc:	000b883a 	mov	r5,zero
    b7d0:	01800084 	movi	r6,2
    b7d4:	000b9680 	call	b968 <altera_avalon_jtag_uart_init>
    b7d8:	01000074 	movhi	r4,1
    b7dc:	213b3104 	addi	r4,r4,-4924
    b7e0:	000b7340 	call	b734 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    b7e4:	01000074 	movhi	r4,1
    b7e8:	213f4c04 	addi	r4,r4,-720
    b7ec:	000b7340 	call	b734 <alt_dev_reg>
}
    b7f0:	e037883a 	mov	sp,fp
    b7f4:	dfc00117 	ldw	ra,4(sp)
    b7f8:	df000017 	ldw	fp,0(sp)
    b7fc:	dec00204 	addi	sp,sp,8
    b800:	f800283a 	ret

0000b804 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b804:	defffa04 	addi	sp,sp,-24
    b808:	dfc00515 	stw	ra,20(sp)
    b80c:	df000415 	stw	fp,16(sp)
    b810:	df000404 	addi	fp,sp,16
    b814:	e13ffd15 	stw	r4,-12(fp)
    b818:	e17ffe15 	stw	r5,-8(fp)
    b81c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b820:	e0bffd17 	ldw	r2,-12(fp)
    b824:	10800017 	ldw	r2,0(r2)
    b828:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b82c:	e0bffc17 	ldw	r2,-16(fp)
    b830:	10c00a04 	addi	r3,r2,40
    b834:	e0bffd17 	ldw	r2,-12(fp)
    b838:	10800217 	ldw	r2,8(r2)
    b83c:	1809883a 	mov	r4,r3
    b840:	e17ffe17 	ldw	r5,-8(fp)
    b844:	e1bfff17 	ldw	r6,-4(fp)
    b848:	100f883a 	mov	r7,r2
    b84c:	000bfb40 	call	bfb4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b850:	e037883a 	mov	sp,fp
    b854:	dfc00117 	ldw	ra,4(sp)
    b858:	df000017 	ldw	fp,0(sp)
    b85c:	dec00204 	addi	sp,sp,8
    b860:	f800283a 	ret

0000b864 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b864:	defffa04 	addi	sp,sp,-24
    b868:	dfc00515 	stw	ra,20(sp)
    b86c:	df000415 	stw	fp,16(sp)
    b870:	df000404 	addi	fp,sp,16
    b874:	e13ffd15 	stw	r4,-12(fp)
    b878:	e17ffe15 	stw	r5,-8(fp)
    b87c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b880:	e0bffd17 	ldw	r2,-12(fp)
    b884:	10800017 	ldw	r2,0(r2)
    b888:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b88c:	e0bffc17 	ldw	r2,-16(fp)
    b890:	10c00a04 	addi	r3,r2,40
    b894:	e0bffd17 	ldw	r2,-12(fp)
    b898:	10800217 	ldw	r2,8(r2)
    b89c:	1809883a 	mov	r4,r3
    b8a0:	e17ffe17 	ldw	r5,-8(fp)
    b8a4:	e1bfff17 	ldw	r6,-4(fp)
    b8a8:	100f883a 	mov	r7,r2
    b8ac:	000c2680 	call	c268 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b8b0:	e037883a 	mov	sp,fp
    b8b4:	dfc00117 	ldw	ra,4(sp)
    b8b8:	df000017 	ldw	fp,0(sp)
    b8bc:	dec00204 	addi	sp,sp,8
    b8c0:	f800283a 	ret

0000b8c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b8c4:	defffc04 	addi	sp,sp,-16
    b8c8:	dfc00315 	stw	ra,12(sp)
    b8cc:	df000215 	stw	fp,8(sp)
    b8d0:	df000204 	addi	fp,sp,8
    b8d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b8d8:	e0bfff17 	ldw	r2,-4(fp)
    b8dc:	10800017 	ldw	r2,0(r2)
    b8e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b8e4:	e0bffe17 	ldw	r2,-8(fp)
    b8e8:	10c00a04 	addi	r3,r2,40
    b8ec:	e0bfff17 	ldw	r2,-4(fp)
    b8f0:	10800217 	ldw	r2,8(r2)
    b8f4:	1809883a 	mov	r4,r3
    b8f8:	100b883a 	mov	r5,r2
    b8fc:	000be600 	call	be60 <altera_avalon_jtag_uart_close>
}
    b900:	e037883a 	mov	sp,fp
    b904:	dfc00117 	ldw	ra,4(sp)
    b908:	df000017 	ldw	fp,0(sp)
    b90c:	dec00204 	addi	sp,sp,8
    b910:	f800283a 	ret

0000b914 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b914:	defffa04 	addi	sp,sp,-24
    b918:	dfc00515 	stw	ra,20(sp)
    b91c:	df000415 	stw	fp,16(sp)
    b920:	df000404 	addi	fp,sp,16
    b924:	e13ffd15 	stw	r4,-12(fp)
    b928:	e17ffe15 	stw	r5,-8(fp)
    b92c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b930:	e0bffd17 	ldw	r2,-12(fp)
    b934:	10800017 	ldw	r2,0(r2)
    b938:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b93c:	e0bffc17 	ldw	r2,-16(fp)
    b940:	10800a04 	addi	r2,r2,40
    b944:	1009883a 	mov	r4,r2
    b948:	e17ffe17 	ldw	r5,-8(fp)
    b94c:	e1bfff17 	ldw	r6,-4(fp)
    b950:	000bec80 	call	bec8 <altera_avalon_jtag_uart_ioctl>
}
    b954:	e037883a 	mov	sp,fp
    b958:	dfc00117 	ldw	ra,4(sp)
    b95c:	df000017 	ldw	fp,0(sp)
    b960:	dec00204 	addi	sp,sp,8
    b964:	f800283a 	ret

0000b968 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b968:	defff004 	addi	sp,sp,-64
    b96c:	dfc00f15 	stw	ra,60(sp)
    b970:	df000e15 	stw	fp,56(sp)
    b974:	df000e04 	addi	fp,sp,56
    b978:	e13ff915 	stw	r4,-28(fp)
    b97c:	e17ffa15 	stw	r5,-24(fp)
    b980:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    b984:	e0bff917 	ldw	r2,-28(fp)
    b988:	10800c04 	addi	r2,r2,48
    b98c:	e0bff315 	stw	r2,-52(fp)
    b990:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    b994:	e0fff40b 	ldhu	r3,-48(fp)
    b998:	e0bff884 	addi	r2,fp,-30
    b99c:	1809883a 	mov	r4,r3
    b9a0:	100b883a 	mov	r5,r2
    b9a4:	0005f300 	call	5f30 <OSFlagCreate>
    b9a8:	1007883a 	mov	r3,r2
    b9ac:	e0bff317 	ldw	r2,-52(fp)
    b9b0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    b9b4:	e0bff917 	ldw	r2,-28(fp)
    b9b8:	10800a04 	addi	r2,r2,40
    b9bc:	e0bff515 	stw	r2,-44(fp)
    b9c0:	00800044 	movi	r2,1
    b9c4:	e0bff60d 	sth	r2,-40(fp)
    b9c8:	e0bff60b 	ldhu	r2,-40(fp)
    b9cc:	1009883a 	mov	r4,r2
    b9d0:	0008e9c0 	call	8e9c <OSSemCreate>
    b9d4:	1007883a 	mov	r3,r2
    b9d8:	e0bff517 	ldw	r2,-44(fp)
    b9dc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    b9e0:	e0bff917 	ldw	r2,-28(fp)
    b9e4:	10800b04 	addi	r2,r2,44
    b9e8:	e0bff715 	stw	r2,-36(fp)
    b9ec:	00800044 	movi	r2,1
    b9f0:	e0bff80d 	sth	r2,-32(fp)
    b9f4:	e0bff80b 	ldhu	r2,-32(fp)
    b9f8:	1009883a 	mov	r4,r2
    b9fc:	0008e9c0 	call	8e9c <OSSemCreate>
    ba00:	1007883a 	mov	r3,r2
    ba04:	e0bff717 	ldw	r2,-36(fp)
    ba08:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ba0c:	e0bff917 	ldw	r2,-28(fp)
    ba10:	00c00044 	movi	r3,1
    ba14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ba18:	e0bff917 	ldw	r2,-28(fp)
    ba1c:	10800017 	ldw	r2,0(r2)
    ba20:	10800104 	addi	r2,r2,4
    ba24:	e0fff917 	ldw	r3,-28(fp)
    ba28:	18c00817 	ldw	r3,32(r3)
    ba2c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ba30:	e0fffa17 	ldw	r3,-24(fp)
    ba34:	e0bffb17 	ldw	r2,-20(fp)
    ba38:	d8000015 	stw	zero,0(sp)
    ba3c:	1809883a 	mov	r4,r3
    ba40:	100b883a 	mov	r5,r2
    ba44:	01800074 	movhi	r6,1
    ba48:	31aeac04 	addi	r6,r6,-17744
    ba4c:	e1fff917 	ldw	r7,-28(fp)
    ba50:	000cc580 	call	cc58 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ba54:	e0bff917 	ldw	r2,-28(fp)
    ba58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ba5c:	e0bff917 	ldw	r2,-28(fp)
    ba60:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ba64:	00800074 	movhi	r2,1
    ba68:	10866d04 	addi	r2,r2,6580
    ba6c:	10800017 	ldw	r2,0(r2)
    ba70:	1809883a 	mov	r4,r3
    ba74:	100b883a 	mov	r5,r2
    ba78:	01800074 	movhi	r6,1
    ba7c:	31af5504 	addi	r6,r6,-17068
    ba80:	e1fff917 	ldw	r7,-28(fp)
    ba84:	000c9240 	call	c924 <alt_alarm_start>
    ba88:	1000040e 	bge	r2,zero,ba9c <altera_avalon_jtag_uart_init+0x134>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ba8c:	e0bff917 	ldw	r2,-28(fp)
    ba90:	00e00034 	movhi	r3,32768
    ba94:	18ffffc4 	addi	r3,r3,-1
    ba98:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ba9c:	e037883a 	mov	sp,fp
    baa0:	dfc00117 	ldw	ra,4(sp)
    baa4:	df000017 	ldw	fp,0(sp)
    baa8:	dec00204 	addi	sp,sp,8
    baac:	f800283a 	ret

0000bab0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    bab0:	defff204 	addi	sp,sp,-56
    bab4:	dfc00d15 	stw	ra,52(sp)
    bab8:	df000c15 	stw	fp,48(sp)
    babc:	df000c04 	addi	fp,sp,48
    bac0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    bac4:	e0bfff17 	ldw	r2,-4(fp)
    bac8:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
    bacc:	e0bff617 	ldw	r2,-40(fp)
    bad0:	10800017 	ldw	r2,0(r2)
    bad4:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bad8:	e0bff717 	ldw	r2,-36(fp)
    badc:	10800104 	addi	r2,r2,4
    bae0:	10800037 	ldwio	r2,0(r2)
    bae4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    bae8:	e0bff817 	ldw	r2,-32(fp)
    baec:	1080c00c 	andi	r2,r2,768
    baf0:	1000011e 	bne	r2,zero,baf8 <altera_avalon_jtag_uart_irq+0x48>
      break;
    baf4:	00009206 	br	bd40 <altera_avalon_jtag_uart_irq+0x290>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    baf8:	e0bff817 	ldw	r2,-32(fp)
    bafc:	1080400c 	andi	r2,r2,256
    bb00:	10004726 	beq	r2,zero,bc20 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    bb04:	00800074 	movhi	r2,1
    bb08:	e0bff415 	stw	r2,-48(fp)
    bb0c:	00000106 	br	bb14 <altera_avalon_jtag_uart_irq+0x64>
        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    bb10:	0001883a 	nop
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bb14:	e0bff617 	ldw	r2,-40(fp)
    bb18:	10800d17 	ldw	r2,52(r2)
    bb1c:	10800044 	addi	r2,r2,1
    bb20:	1081ffcc 	andi	r2,r2,2047
    bb24:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    bb28:	e0bff617 	ldw	r2,-40(fp)
    bb2c:	10c00e17 	ldw	r3,56(r2)
    bb30:	e0bff917 	ldw	r2,-28(fp)
    bb34:	1880011e 	bne	r3,r2,bb3c <altera_avalon_jtag_uart_irq+0x8c>
          break;
    bb38:	00002806 	br	bbdc <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bb3c:	e0bff717 	ldw	r2,-36(fp)
    bb40:	10800037 	ldwio	r2,0(r2)
    bb44:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    bb48:	e0bff417 	ldw	r2,-48(fp)
    bb4c:	10a0000c 	andi	r2,r2,32768
    bb50:	1000011e 	bne	r2,zero,bb58 <altera_avalon_jtag_uart_irq+0xa8>
          break;
    bb54:	00002106 	br	bbdc <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bb58:	e0bff617 	ldw	r2,-40(fp)
    bb5c:	10800d17 	ldw	r2,52(r2)
    bb60:	e0fff417 	ldw	r3,-48(fp)
    bb64:	e13ff617 	ldw	r4,-40(fp)
    bb68:	2085883a 	add	r2,r4,r2
    bb6c:	10801104 	addi	r2,r2,68
    bb70:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bb74:	e0bff617 	ldw	r2,-40(fp)
    bb78:	10800d17 	ldw	r2,52(r2)
    bb7c:	10800044 	addi	r2,r2,1
    bb80:	10c1ffcc 	andi	r3,r2,2047
    bb84:	e0bff617 	ldw	r2,-40(fp)
    bb88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    bb8c:	e0bff617 	ldw	r2,-40(fp)
    bb90:	10800c17 	ldw	r2,48(r2)
    bb94:	e0bffa15 	stw	r2,-24(fp)
    bb98:	00800044 	movi	r2,1
    bb9c:	e0bffb0d 	sth	r2,-20(fp)
    bba0:	00800044 	movi	r2,1
    bba4:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    bba8:	00800074 	movhi	r2,1
    bbac:	10865844 	addi	r2,r2,6497
    bbb0:	10800003 	ldbu	r2,0(r2)
    bbb4:	10803fcc 	andi	r2,r2,255
    bbb8:	103fd526 	beq	r2,zero,bb10 <__alt_data_end+0xfc00bb10>
  {
    OSFlagPost (group, flags, opt, &err);
    bbbc:	e17ffb0b 	ldhu	r5,-20(fp)
    bbc0:	e0fffb83 	ldbu	r3,-18(fp)
    bbc4:	e0bffdc4 	addi	r2,fp,-9
    bbc8:	e13ffa17 	ldw	r4,-24(fp)
    bbcc:	180d883a 	mov	r6,r3
    bbd0:	100f883a 	mov	r7,r2
    bbd4:	0006bb00 	call	6bb0 <OSFlagPost>
      }
    bbd8:	003fcd06 	br	bb10 <__alt_data_end+0xfc00bb10>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    bbdc:	e0bff417 	ldw	r2,-48(fp)
    bbe0:	10bfffec 	andhi	r2,r2,65535
    bbe4:	10000e26 	beq	r2,zero,bc20 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bbe8:	e0bff617 	ldw	r2,-40(fp)
    bbec:	10c00817 	ldw	r3,32(r2)
    bbf0:	00bfff84 	movi	r2,-2
    bbf4:	1886703a 	and	r3,r3,r2
    bbf8:	e0bff617 	ldw	r2,-40(fp)
    bbfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    bc00:	e0bff717 	ldw	r2,-36(fp)
    bc04:	10800104 	addi	r2,r2,4
    bc08:	e0fff617 	ldw	r3,-40(fp)
    bc0c:	18c00817 	ldw	r3,32(r3)
    bc10:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bc14:	e0bff717 	ldw	r2,-36(fp)
    bc18:	10800104 	addi	r2,r2,4
    bc1c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    bc20:	e0bff817 	ldw	r2,-32(fp)
    bc24:	1080800c 	andi	r2,r2,512
    bc28:	10004426 	beq	r2,zero,bd3c <altera_avalon_jtag_uart_irq+0x28c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    bc2c:	e0bff817 	ldw	r2,-32(fp)
    bc30:	1004d43a 	srli	r2,r2,16
    bc34:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    bc38:	00002706 	br	bcd8 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    bc3c:	e0bff717 	ldw	r2,-36(fp)
    bc40:	e0fff617 	ldw	r3,-40(fp)
    bc44:	18c01017 	ldw	r3,64(r3)
    bc48:	e13ff617 	ldw	r4,-40(fp)
    bc4c:	20c7883a 	add	r3,r4,r3
    bc50:	18c21104 	addi	r3,r3,2116
    bc54:	18c00003 	ldbu	r3,0(r3)
    bc58:	18c03fcc 	andi	r3,r3,255
    bc5c:	18c0201c 	xori	r3,r3,128
    bc60:	18ffe004 	addi	r3,r3,-128
    bc64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bc68:	e0bff617 	ldw	r2,-40(fp)
    bc6c:	10801017 	ldw	r2,64(r2)
    bc70:	10800044 	addi	r2,r2,1
    bc74:	10c1ffcc 	andi	r3,r2,2047
    bc78:	e0bff617 	ldw	r2,-40(fp)
    bc7c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    bc80:	e0bff617 	ldw	r2,-40(fp)
    bc84:	10800c17 	ldw	r2,48(r2)
    bc88:	e0bffc15 	stw	r2,-16(fp)
    bc8c:	00800084 	movi	r2,2
    bc90:	e0bffd0d 	sth	r2,-12(fp)
    bc94:	00800044 	movi	r2,1
    bc98:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    bc9c:	00800074 	movhi	r2,1
    bca0:	10865844 	addi	r2,r2,6497
    bca4:	10800003 	ldbu	r2,0(r2)
    bca8:	10803fcc 	andi	r2,r2,255
    bcac:	10000726 	beq	r2,zero,bccc <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
    bcb0:	e17ffd0b 	ldhu	r5,-12(fp)
    bcb4:	e0fffd83 	ldbu	r3,-10(fp)
    bcb8:	e0bffe04 	addi	r2,fp,-8
    bcbc:	e13ffc17 	ldw	r4,-16(fp)
    bcc0:	180d883a 	mov	r6,r3
    bcc4:	100f883a 	mov	r7,r2
    bcc8:	0006bb00 	call	6bb0 <OSFlagPost>

        space--;
    bccc:	e0bff517 	ldw	r2,-44(fp)
    bcd0:	10bfffc4 	addi	r2,r2,-1
    bcd4:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    bcd8:	e0bff517 	ldw	r2,-44(fp)
    bcdc:	10000526 	beq	r2,zero,bcf4 <altera_avalon_jtag_uart_irq+0x244>
    bce0:	e0bff617 	ldw	r2,-40(fp)
    bce4:	10c01017 	ldw	r3,64(r2)
    bce8:	e0bff617 	ldw	r2,-40(fp)
    bcec:	10800f17 	ldw	r2,60(r2)
    bcf0:	18bfd21e 	bne	r3,r2,bc3c <__alt_data_end+0xfc00bc3c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    bcf4:	e0bff517 	ldw	r2,-44(fp)
    bcf8:	10001026 	beq	r2,zero,bd3c <altera_avalon_jtag_uart_irq+0x28c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bcfc:	e0bff617 	ldw	r2,-40(fp)
    bd00:	10c00817 	ldw	r3,32(r2)
    bd04:	00bfff44 	movi	r2,-3
    bd08:	1886703a 	and	r3,r3,r2
    bd0c:	e0bff617 	ldw	r2,-40(fp)
    bd10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bd14:	e0bff617 	ldw	r2,-40(fp)
    bd18:	10800017 	ldw	r2,0(r2)
    bd1c:	10800104 	addi	r2,r2,4
    bd20:	e0fff617 	ldw	r3,-40(fp)
    bd24:	18c00817 	ldw	r3,32(r3)
    bd28:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bd2c:	e0bff717 	ldw	r2,-36(fp)
    bd30:	10800104 	addi	r2,r2,4
    bd34:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    bd38:	003f6706 	br	bad8 <__alt_data_end+0xfc00bad8>
    bd3c:	003f6606 	br	bad8 <__alt_data_end+0xfc00bad8>
}
    bd40:	e037883a 	mov	sp,fp
    bd44:	dfc00117 	ldw	ra,4(sp)
    bd48:	df000017 	ldw	fp,0(sp)
    bd4c:	dec00204 	addi	sp,sp,8
    bd50:	f800283a 	ret

0000bd54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    bd54:	defff904 	addi	sp,sp,-28
    bd58:	dfc00615 	stw	ra,24(sp)
    bd5c:	df000515 	stw	fp,20(sp)
    bd60:	df000504 	addi	fp,sp,20
    bd64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    bd68:	e0bfff17 	ldw	r2,-4(fp)
    bd6c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    bd70:	e0bffb17 	ldw	r2,-20(fp)
    bd74:	10800017 	ldw	r2,0(r2)
    bd78:	10800104 	addi	r2,r2,4
    bd7c:	10800037 	ldwio	r2,0(r2)
    bd80:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    bd84:	e0bffc17 	ldw	r2,-16(fp)
    bd88:	1081000c 	andi	r2,r2,1024
    bd8c:	10000a26 	beq	r2,zero,bdb8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    bd90:	e0bffb17 	ldw	r2,-20(fp)
    bd94:	10800017 	ldw	r2,0(r2)
    bd98:	10800104 	addi	r2,r2,4
    bd9c:	e0fffb17 	ldw	r3,-20(fp)
    bda0:	18c00817 	ldw	r3,32(r3)
    bda4:	18c10014 	ori	r3,r3,1024
    bda8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    bdac:	e0bffb17 	ldw	r2,-20(fp)
    bdb0:	10000915 	stw	zero,36(r2)
    bdb4:	00002206 	br	be40 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    bdb8:	e0bffb17 	ldw	r2,-20(fp)
    bdbc:	10800917 	ldw	r2,36(r2)
    bdc0:	00e00034 	movhi	r3,32768
    bdc4:	18ffff04 	addi	r3,r3,-4
    bdc8:	18801d36 	bltu	r3,r2,be40 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
    bdcc:	e0bffb17 	ldw	r2,-20(fp)
    bdd0:	10800917 	ldw	r2,36(r2)
    bdd4:	10c00044 	addi	r3,r2,1
    bdd8:	e0bffb17 	ldw	r2,-20(fp)
    bddc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    bde0:	e0bffb17 	ldw	r2,-20(fp)
    bde4:	10c00917 	ldw	r3,36(r2)
    bde8:	e0bffb17 	ldw	r2,-20(fp)
    bdec:	10800117 	ldw	r2,4(r2)
    bdf0:	18801336 	bltu	r3,r2,be40 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    bdf4:	e0bffb17 	ldw	r2,-20(fp)
    bdf8:	10800c17 	ldw	r2,48(r2)
    bdfc:	e0bffd15 	stw	r2,-12(fp)
    be00:	00800104 	movi	r2,4
    be04:	e0bffe0d 	sth	r2,-8(fp)
    be08:	00800044 	movi	r2,1
    be0c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    be10:	00800074 	movhi	r2,1
    be14:	10865844 	addi	r2,r2,6497
    be18:	10800003 	ldbu	r2,0(r2)
    be1c:	10803fcc 	andi	r2,r2,255
    be20:	10000726 	beq	r2,zero,be40 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
    be24:	e17ffe0b 	ldhu	r5,-8(fp)
    be28:	e0fffe83 	ldbu	r3,-6(fp)
    be2c:	e0bffec4 	addi	r2,fp,-5
    be30:	e13ffd17 	ldw	r4,-12(fp)
    be34:	180d883a 	mov	r6,r3
    be38:	100f883a 	mov	r7,r2
    be3c:	0006bb00 	call	6bb0 <OSFlagPost>
    be40:	00800074 	movhi	r2,1
    be44:	10866d04 	addi	r2,r2,6580
    be48:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    be4c:	e037883a 	mov	sp,fp
    be50:	dfc00117 	ldw	ra,4(sp)
    be54:	df000017 	ldw	fp,0(sp)
    be58:	dec00204 	addi	sp,sp,8
    be5c:	f800283a 	ret

0000be60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    be60:	defffd04 	addi	sp,sp,-12
    be64:	df000215 	stw	fp,8(sp)
    be68:	df000204 	addi	fp,sp,8
    be6c:	e13ffe15 	stw	r4,-8(fp)
    be70:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    be74:	00000506 	br	be8c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    be78:	e0bfff17 	ldw	r2,-4(fp)
    be7c:	1090000c 	andi	r2,r2,16384
    be80:	10000226 	beq	r2,zero,be8c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    be84:	00bffd44 	movi	r2,-11
    be88:	00000b06 	br	beb8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    be8c:	e0bffe17 	ldw	r2,-8(fp)
    be90:	10c01017 	ldw	r3,64(r2)
    be94:	e0bffe17 	ldw	r2,-8(fp)
    be98:	10800f17 	ldw	r2,60(r2)
    be9c:	18800526 	beq	r3,r2,beb4 <altera_avalon_jtag_uart_close+0x54>
    bea0:	e0bffe17 	ldw	r2,-8(fp)
    bea4:	10c00917 	ldw	r3,36(r2)
    bea8:	e0bffe17 	ldw	r2,-8(fp)
    beac:	10800117 	ldw	r2,4(r2)
    beb0:	18bff136 	bltu	r3,r2,be78 <__alt_data_end+0xfc00be78>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    beb4:	0005883a 	mov	r2,zero
}
    beb8:	e037883a 	mov	sp,fp
    bebc:	df000017 	ldw	fp,0(sp)
    bec0:	dec00104 	addi	sp,sp,4
    bec4:	f800283a 	ret

0000bec8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    bec8:	defffa04 	addi	sp,sp,-24
    becc:	df000515 	stw	fp,20(sp)
    bed0:	df000504 	addi	fp,sp,20
    bed4:	e13ffd15 	stw	r4,-12(fp)
    bed8:	e17ffe15 	stw	r5,-8(fp)
    bedc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    bee0:	00bff9c4 	movi	r2,-25
    bee4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    bee8:	e0bffe17 	ldw	r2,-8(fp)
    beec:	10da8060 	cmpeqi	r3,r2,27137
    bef0:	1800031e 	bne	r3,zero,bf00 <altera_avalon_jtag_uart_ioctl+0x38>
    bef4:	109a80a0 	cmpeqi	r2,r2,27138
    bef8:	1000191e 	bne	r2,zero,bf60 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    befc:	00002806 	br	bfa0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    bf00:	e0bffd17 	ldw	r2,-12(fp)
    bf04:	10c00117 	ldw	r3,4(r2)
    bf08:	00a00034 	movhi	r2,32768
    bf0c:	10bfffc4 	addi	r2,r2,-1
    bf10:	18801226 	beq	r3,r2,bf5c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    bf14:	e0bfff17 	ldw	r2,-4(fp)
    bf18:	10800017 	ldw	r2,0(r2)
    bf1c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    bf20:	e0bffc17 	ldw	r2,-16(fp)
    bf24:	10800090 	cmplti	r2,r2,2
    bf28:	1000061e 	bne	r2,zero,bf44 <altera_avalon_jtag_uart_ioctl+0x7c>
    bf2c:	e0fffc17 	ldw	r3,-16(fp)
    bf30:	00a00034 	movhi	r2,32768
    bf34:	10bfffc4 	addi	r2,r2,-1
    bf38:	18800226 	beq	r3,r2,bf44 <altera_avalon_jtag_uart_ioctl+0x7c>
    bf3c:	e0bffc17 	ldw	r2,-16(fp)
    bf40:	00000206 	br	bf4c <altera_avalon_jtag_uart_ioctl+0x84>
    bf44:	00a00034 	movhi	r2,32768
    bf48:	10bfff84 	addi	r2,r2,-2
    bf4c:	e0fffd17 	ldw	r3,-12(fp)
    bf50:	18800115 	stw	r2,4(r3)
      rc = 0;
    bf54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    bf58:	00001106 	br	bfa0 <altera_avalon_jtag_uart_ioctl+0xd8>
    bf5c:	00001006 	br	bfa0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    bf60:	e0bffd17 	ldw	r2,-12(fp)
    bf64:	10c00117 	ldw	r3,4(r2)
    bf68:	00a00034 	movhi	r2,32768
    bf6c:	10bfffc4 	addi	r2,r2,-1
    bf70:	18800a26 	beq	r3,r2,bf9c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    bf74:	e0bffd17 	ldw	r2,-12(fp)
    bf78:	10c00917 	ldw	r3,36(r2)
    bf7c:	e0bffd17 	ldw	r2,-12(fp)
    bf80:	10800117 	ldw	r2,4(r2)
    bf84:	1885803a 	cmpltu	r2,r3,r2
    bf88:	10c03fcc 	andi	r3,r2,255
    bf8c:	e0bfff17 	ldw	r2,-4(fp)
    bf90:	10c00015 	stw	r3,0(r2)
      rc = 0;
    bf94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    bf98:	00000006 	br	bf9c <altera_avalon_jtag_uart_ioctl+0xd4>
    bf9c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    bfa0:	e0bffb17 	ldw	r2,-20(fp)
}
    bfa4:	e037883a 	mov	sp,fp
    bfa8:	df000017 	ldw	fp,0(sp)
    bfac:	dec00104 	addi	sp,sp,4
    bfb0:	f800283a 	ret

0000bfb4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    bfb4:	deffec04 	addi	sp,sp,-80
    bfb8:	dfc01315 	stw	ra,76(sp)
    bfbc:	df001215 	stw	fp,72(sp)
    bfc0:	df001204 	addi	fp,sp,72
    bfc4:	e13ffc15 	stw	r4,-16(fp)
    bfc8:	e17ffd15 	stw	r5,-12(fp)
    bfcc:	e1bffe15 	stw	r6,-8(fp)
    bfd0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    bfd4:	e0bffd17 	ldw	r2,-12(fp)
    bfd8:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    bfdc:	e0bffc17 	ldw	r2,-16(fp)
    bfe0:	10800a17 	ldw	r2,40(r2)
    bfe4:	e0bff415 	stw	r2,-48(fp)
    bfe8:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    bfec:	e0fff50b 	ldhu	r3,-44(fp)
    bff0:	e0bffb04 	addi	r2,fp,-20
    bff4:	e13ff417 	ldw	r4,-48(fp)
    bff8:	180b883a 	mov	r5,r3
    bffc:	100d883a 	mov	r6,r2
    c000:	000920c0 	call	920c <OSSemPend>

  while (space > 0)
    c004:	00006606 	br	c1a0 <altera_avalon_jtag_uart_read+0x1ec>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c008:	e0bffc17 	ldw	r2,-16(fp)
    c00c:	10800d17 	ldw	r2,52(r2)
    c010:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
    c014:	e0bffc17 	ldw	r2,-16(fp)
    c018:	10800e17 	ldw	r2,56(r2)
    c01c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
    c020:	e0fff117 	ldw	r3,-60(fp)
    c024:	e0bff217 	ldw	r2,-56(fp)
    c028:	18800536 	bltu	r3,r2,c040 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    c02c:	e0fff117 	ldw	r3,-60(fp)
    c030:	e0bff217 	ldw	r2,-56(fp)
    c034:	1885c83a 	sub	r2,r3,r2
    c038:	e0bff015 	stw	r2,-64(fp)
    c03c:	00000406 	br	c050 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c040:	00c20004 	movi	r3,2048
    c044:	e0bff217 	ldw	r2,-56(fp)
    c048:	1885c83a 	sub	r2,r3,r2
    c04c:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
    c050:	e0bff017 	ldw	r2,-64(fp)
    c054:	1000011e 	bne	r2,zero,c05c <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
    c058:	00001d06 	br	c0d0 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
    c05c:	e0fffe17 	ldw	r3,-8(fp)
    c060:	e0bff017 	ldw	r2,-64(fp)
    c064:	1880022e 	bgeu	r3,r2,c070 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
    c068:	e0bffe17 	ldw	r2,-8(fp)
    c06c:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c070:	e0bff217 	ldw	r2,-56(fp)
    c074:	10801104 	addi	r2,r2,68
    c078:	e0fffc17 	ldw	r3,-16(fp)
    c07c:	1885883a 	add	r2,r3,r2
    c080:	e13fef17 	ldw	r4,-68(fp)
    c084:	100b883a 	mov	r5,r2
    c088:	e1bff017 	ldw	r6,-64(fp)
    c08c:	00011c40 	call	11c4 <memcpy>
      ptr   += n;
    c090:	e0ffef17 	ldw	r3,-68(fp)
    c094:	e0bff017 	ldw	r2,-64(fp)
    c098:	1885883a 	add	r2,r3,r2
    c09c:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
    c0a0:	e0fffe17 	ldw	r3,-8(fp)
    c0a4:	e0bff017 	ldw	r2,-64(fp)
    c0a8:	1885c83a 	sub	r2,r3,r2
    c0ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c0b0:	e0fff217 	ldw	r3,-56(fp)
    c0b4:	e0bff017 	ldw	r2,-64(fp)
    c0b8:	1885883a 	add	r2,r3,r2
    c0bc:	10c1ffcc 	andi	r3,r2,2047
    c0c0:	e0bffc17 	ldw	r2,-16(fp)
    c0c4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    c0c8:	e0bffe17 	ldw	r2,-8(fp)
    c0cc:	00bfce16 	blt	zero,r2,c008 <__alt_data_end+0xfc00c008>

    /* If we read any data then return it */
    if (ptr != buffer)
    c0d0:	e0ffef17 	ldw	r3,-68(fp)
    c0d4:	e0bffd17 	ldw	r2,-12(fp)
    c0d8:	18800126 	beq	r3,r2,c0e0 <altera_avalon_jtag_uart_read+0x12c>
      break;
    c0dc:	00003206 	br	c1a8 <altera_avalon_jtag_uart_read+0x1f4>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c0e0:	e0bfff17 	ldw	r2,-4(fp)
    c0e4:	1090000c 	andi	r2,r2,16384
    c0e8:	10000126 	beq	r2,zero,c0f0 <altera_avalon_jtag_uart_read+0x13c>
      break;
    c0ec:	00002e06 	br	c1a8 <altera_avalon_jtag_uart_read+0x1f4>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    c0f0:	00800074 	movhi	r2,1
    c0f4:	10865844 	addi	r2,r2,6497
    c0f8:	10800003 	ldbu	r2,0(r2)
    c0fc:	10803fcc 	andi	r2,r2,255
    c100:	10800058 	cmpnei	r2,r2,1
    c104:	1000171e 	bne	r2,zero,c164 <altera_avalon_jtag_uart_read+0x1b0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    c108:	e0bffc17 	ldw	r2,-16(fp)
    c10c:	10800c17 	ldw	r2,48(r2)
    c110:	e0bff615 	stw	r2,-40(fp)
    c114:	00800144 	movi	r2,5
    c118:	e0bff70d 	sth	r2,-36(fp)
    c11c:	00bfe0c4 	movi	r2,-125
    c120:	e0bff785 	stb	r2,-34(fp)
    c124:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    c128:	00800074 	movhi	r2,1
    c12c:	10865844 	addi	r2,r2,6497
    c130:	10800003 	ldbu	r2,0(r2)
    c134:	10803fcc 	andi	r2,r2,255
    c138:	10001426 	beq	r2,zero,c18c <altera_avalon_jtag_uart_read+0x1d8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    c13c:	e17ff70b 	ldhu	r5,-36(fp)
    c140:	e0fff783 	ldbu	r3,-34(fp)
    c144:	e0bff80b 	ldhu	r2,-32(fp)
    c148:	e13ffb44 	addi	r4,fp,-19
    c14c:	d9000015 	stw	r4,0(sp)
    c150:	e13ff617 	ldw	r4,-40(fp)
    c154:	180d883a 	mov	r6,r3
    c158:	100f883a 	mov	r7,r2
    c15c:	00065480 	call	6548 <OSFlagPend>
    c160:	00000a06 	br	c18c <altera_avalon_jtag_uart_read+0x1d8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c164:	0001883a 	nop
    c168:	e0bffc17 	ldw	r2,-16(fp)
    c16c:	10c00d17 	ldw	r3,52(r2)
    c170:	e0bff117 	ldw	r2,-60(fp)
    c174:	1880051e 	bne	r3,r2,c18c <altera_avalon_jtag_uart_read+0x1d8>
    c178:	e0bffc17 	ldw	r2,-16(fp)
    c17c:	10c00917 	ldw	r3,36(r2)
    c180:	e0bffc17 	ldw	r2,-16(fp)
    c184:	10800117 	ldw	r2,4(r2)
    c188:	18bff736 	bltu	r3,r2,c168 <__alt_data_end+0xfc00c168>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c18c:	e0bffc17 	ldw	r2,-16(fp)
    c190:	10c00d17 	ldw	r3,52(r2)
    c194:	e0bff117 	ldw	r2,-60(fp)
    c198:	1880011e 	bne	r3,r2,c1a0 <altera_avalon_jtag_uart_read+0x1ec>
      break;
    c19c:	00000206 	br	c1a8 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c1a0:	e0bffe17 	ldw	r2,-8(fp)
    c1a4:	00bf9816 	blt	zero,r2,c008 <__alt_data_end+0xfc00c008>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    c1a8:	e0bffc17 	ldw	r2,-16(fp)
    c1ac:	10800a17 	ldw	r2,40(r2)
    c1b0:	1009883a 	mov	r4,r2
    c1b4:	00095e80 	call	95e8 <OSSemPost>

  if (ptr != buffer)
    c1b8:	e0ffef17 	ldw	r3,-68(fp)
    c1bc:	e0bffd17 	ldw	r2,-12(fp)
    c1c0:	18801726 	beq	r3,r2,c220 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c1c4:	0005303a 	rdctl	r2,status
    c1c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c1cc:	e0fff917 	ldw	r3,-28(fp)
    c1d0:	00bfff84 	movi	r2,-2
    c1d4:	1884703a 	and	r2,r3,r2
    c1d8:	1001703a 	wrctl	status,r2
  
  return context;
    c1dc:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c1e0:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c1e4:	e0bffc17 	ldw	r2,-16(fp)
    c1e8:	10800817 	ldw	r2,32(r2)
    c1ec:	10c00054 	ori	r3,r2,1
    c1f0:	e0bffc17 	ldw	r2,-16(fp)
    c1f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c1f8:	e0bffc17 	ldw	r2,-16(fp)
    c1fc:	10800017 	ldw	r2,0(r2)
    c200:	10800104 	addi	r2,r2,4
    c204:	e0fffc17 	ldw	r3,-16(fp)
    c208:	18c00817 	ldw	r3,32(r3)
    c20c:	10c00035 	stwio	r3,0(r2)
    c210:	e0bff317 	ldw	r2,-52(fp)
    c214:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c218:	e0bffa17 	ldw	r2,-24(fp)
    c21c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c220:	e0ffef17 	ldw	r3,-68(fp)
    c224:	e0bffd17 	ldw	r2,-12(fp)
    c228:	18800426 	beq	r3,r2,c23c <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
    c22c:	e0ffef17 	ldw	r3,-68(fp)
    c230:	e0bffd17 	ldw	r2,-12(fp)
    c234:	1885c83a 	sub	r2,r3,r2
    c238:	00000606 	br	c254 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
    c23c:	e0bfff17 	ldw	r2,-4(fp)
    c240:	1090000c 	andi	r2,r2,16384
    c244:	10000226 	beq	r2,zero,c250 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
    c248:	00bffd44 	movi	r2,-11
    c24c:	00000106 	br	c254 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
    c250:	00bffec4 	movi	r2,-5
}
    c254:	e037883a 	mov	sp,fp
    c258:	dfc00117 	ldw	ra,4(sp)
    c25c:	df000017 	ldw	fp,0(sp)
    c260:	dec00204 	addi	sp,sp,8
    c264:	f800283a 	ret

0000c268 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c268:	deffed04 	addi	sp,sp,-76
    c26c:	dfc01215 	stw	ra,72(sp)
    c270:	df001115 	stw	fp,68(sp)
    c274:	df001104 	addi	fp,sp,68
    c278:	e13ffc15 	stw	r4,-16(fp)
    c27c:	e17ffd15 	stw	r5,-12(fp)
    c280:	e1bffe15 	stw	r6,-8(fp)
    c284:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c288:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c28c:	e0bffd17 	ldw	r2,-12(fp)
    c290:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    c294:	e0bffc17 	ldw	r2,-16(fp)
    c298:	10800b17 	ldw	r2,44(r2)
    c29c:	e0bff515 	stw	r2,-44(fp)
    c2a0:	e03ff60d 	sth	zero,-40(fp)
    c2a4:	e0fff60b 	ldhu	r3,-40(fp)
    c2a8:	e0bffbc4 	addi	r2,fp,-17
    c2ac:	e13ff517 	ldw	r4,-44(fp)
    c2b0:	180b883a 	mov	r5,r3
    c2b4:	100d883a 	mov	r6,r2
    c2b8:	000920c0 	call	920c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c2bc:	00003906 	br	c3a4 <altera_avalon_jtag_uart_write+0x13c>
    c2c0:	00003806 	br	c3a4 <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c2c4:	e0bffc17 	ldw	r2,-16(fp)
    c2c8:	10800f17 	ldw	r2,60(r2)
    c2cc:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
    c2d0:	e0bffc17 	ldw	r2,-16(fp)
    c2d4:	10801017 	ldw	r2,64(r2)
    c2d8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    c2dc:	e0fff317 	ldw	r3,-52(fp)
    c2e0:	e0bff017 	ldw	r2,-64(fp)
    c2e4:	1880062e 	bgeu	r3,r2,c300 <altera_avalon_jtag_uart_write+0x98>
        n = out - 1 - in;
    c2e8:	e0fff017 	ldw	r3,-64(fp)
    c2ec:	e0bff317 	ldw	r2,-52(fp)
    c2f0:	1885c83a 	sub	r2,r3,r2
    c2f4:	10bfffc4 	addi	r2,r2,-1
    c2f8:	e0bff115 	stw	r2,-60(fp)
    c2fc:	00000b06 	br	c32c <altera_avalon_jtag_uart_write+0xc4>
      else if (out > 0)
    c300:	e0bff017 	ldw	r2,-64(fp)
    c304:	10000526 	beq	r2,zero,c31c <altera_avalon_jtag_uart_write+0xb4>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c308:	00c20004 	movi	r3,2048
    c30c:	e0bff317 	ldw	r2,-52(fp)
    c310:	1885c83a 	sub	r2,r3,r2
    c314:	e0bff115 	stw	r2,-60(fp)
    c318:	00000406 	br	c32c <altera_avalon_jtag_uart_write+0xc4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c31c:	00c1ffc4 	movi	r3,2047
    c320:	e0bff317 	ldw	r2,-52(fp)
    c324:	1885c83a 	sub	r2,r3,r2
    c328:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    c32c:	e0bff117 	ldw	r2,-60(fp)
    c330:	1000011e 	bne	r2,zero,c338 <altera_avalon_jtag_uart_write+0xd0>
        break;
    c334:	00001d06 	br	c3ac <altera_avalon_jtag_uart_write+0x144>

      if (n > count)
    c338:	e0fffe17 	ldw	r3,-8(fp)
    c33c:	e0bff117 	ldw	r2,-60(fp)
    c340:	1880022e 	bgeu	r3,r2,c34c <altera_avalon_jtag_uart_write+0xe4>
        n = count;
    c344:	e0bffe17 	ldw	r2,-8(fp)
    c348:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c34c:	e0bff317 	ldw	r2,-52(fp)
    c350:	10821104 	addi	r2,r2,2116
    c354:	e0fffc17 	ldw	r3,-16(fp)
    c358:	1885883a 	add	r2,r3,r2
    c35c:	1009883a 	mov	r4,r2
    c360:	e17ffd17 	ldw	r5,-12(fp)
    c364:	e1bff117 	ldw	r6,-60(fp)
    c368:	00011c40 	call	11c4 <memcpy>
      ptr   += n;
    c36c:	e0fffd17 	ldw	r3,-12(fp)
    c370:	e0bff117 	ldw	r2,-60(fp)
    c374:	1885883a 	add	r2,r3,r2
    c378:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    c37c:	e0fffe17 	ldw	r3,-8(fp)
    c380:	e0bff117 	ldw	r2,-60(fp)
    c384:	1885c83a 	sub	r2,r3,r2
    c388:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c38c:	e0fff317 	ldw	r3,-52(fp)
    c390:	e0bff117 	ldw	r2,-60(fp)
    c394:	1885883a 	add	r2,r3,r2
    c398:	10c1ffcc 	andi	r3,r2,2047
    c39c:	e0bffc17 	ldw	r2,-16(fp)
    c3a0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c3a4:	e0bffe17 	ldw	r2,-8(fp)
    c3a8:	00bfc616 	blt	zero,r2,c2c4 <__alt_data_end+0xfc00c2c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c3ac:	0005303a 	rdctl	r2,status
    c3b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c3b4:	e0fff717 	ldw	r3,-36(fp)
    c3b8:	00bfff84 	movi	r2,-2
    c3bc:	1884703a 	and	r2,r3,r2
    c3c0:	1001703a 	wrctl	status,r2
  
  return context;
    c3c4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c3c8:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c3cc:	e0bffc17 	ldw	r2,-16(fp)
    c3d0:	10800817 	ldw	r2,32(r2)
    c3d4:	10c00094 	ori	r3,r2,2
    c3d8:	e0bffc17 	ldw	r2,-16(fp)
    c3dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c3e0:	e0bffc17 	ldw	r2,-16(fp)
    c3e4:	10800017 	ldw	r2,0(r2)
    c3e8:	10800104 	addi	r2,r2,4
    c3ec:	e0fffc17 	ldw	r3,-16(fp)
    c3f0:	18c00817 	ldw	r3,32(r3)
    c3f4:	10c00035 	stwio	r3,0(r2)
    c3f8:	e0bff417 	ldw	r2,-48(fp)
    c3fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c400:	e0bff817 	ldw	r2,-32(fp)
    c404:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c408:	e0bffe17 	ldw	r2,-8(fp)
    c40c:	00802f0e 	bge	zero,r2,c4cc <altera_avalon_jtag_uart_write+0x264>
    {
      if (flags & O_NONBLOCK)
    c410:	e0bfff17 	ldw	r2,-4(fp)
    c414:	1090000c 	andi	r2,r2,16384
    c418:	10000126 	beq	r2,zero,c420 <altera_avalon_jtag_uart_write+0x1b8>
        break;
    c41c:	00002d06 	br	c4d4 <altera_avalon_jtag_uart_write+0x26c>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    c420:	00800074 	movhi	r2,1
    c424:	10865844 	addi	r2,r2,6497
    c428:	10800003 	ldbu	r2,0(r2)
    c42c:	10803fcc 	andi	r2,r2,255
    c430:	10800058 	cmpnei	r2,r2,1
    c434:	1000171e 	bne	r2,zero,c494 <altera_avalon_jtag_uart_write+0x22c>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    c438:	e0bffc17 	ldw	r2,-16(fp)
    c43c:	10800c17 	ldw	r2,48(r2)
    c440:	e0bff915 	stw	r2,-28(fp)
    c444:	00800184 	movi	r2,6
    c448:	e0bffa0d 	sth	r2,-24(fp)
    c44c:	00bfe0c4 	movi	r2,-125
    c450:	e0bffa85 	stb	r2,-22(fp)
    c454:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    c458:	00800074 	movhi	r2,1
    c45c:	10865844 	addi	r2,r2,6497
    c460:	10800003 	ldbu	r2,0(r2)
    c464:	10803fcc 	andi	r2,r2,255
    c468:	10001426 	beq	r2,zero,c4bc <altera_avalon_jtag_uart_write+0x254>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    c46c:	e17ffa0b 	ldhu	r5,-24(fp)
    c470:	e0fffa83 	ldbu	r3,-22(fp)
    c474:	e0bffb0b 	ldhu	r2,-20(fp)
    c478:	e13ffb84 	addi	r4,fp,-18
    c47c:	d9000015 	stw	r4,0(sp)
    c480:	e13ff917 	ldw	r4,-28(fp)
    c484:	180d883a 	mov	r6,r3
    c488:	100f883a 	mov	r7,r2
    c48c:	00065480 	call	6548 <OSFlagPend>
    c490:	00000a06 	br	c4bc <altera_avalon_jtag_uart_write+0x254>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c494:	0001883a 	nop
    c498:	e0bffc17 	ldw	r2,-16(fp)
    c49c:	10c01017 	ldw	r3,64(r2)
    c4a0:	e0bff017 	ldw	r2,-64(fp)
    c4a4:	1880051e 	bne	r3,r2,c4bc <altera_avalon_jtag_uart_write+0x254>
    c4a8:	e0bffc17 	ldw	r2,-16(fp)
    c4ac:	10c00917 	ldw	r3,36(r2)
    c4b0:	e0bffc17 	ldw	r2,-16(fp)
    c4b4:	10800117 	ldw	r2,4(r2)
    c4b8:	18bff736 	bltu	r3,r2,c498 <__alt_data_end+0xfc00c498>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    c4bc:	e0bffc17 	ldw	r2,-16(fp)
    c4c0:	10800917 	ldw	r2,36(r2)
    c4c4:	10000126 	beq	r2,zero,c4cc <altera_avalon_jtag_uart_write+0x264>
         break;
    c4c8:	00000206 	br	c4d4 <altera_avalon_jtag_uart_write+0x26c>
    }
  }
  while (count > 0);
    c4cc:	e0bffe17 	ldw	r2,-8(fp)
    c4d0:	00bf7b16 	blt	zero,r2,c2c0 <__alt_data_end+0xfc00c2c0>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    c4d4:	e0bffc17 	ldw	r2,-16(fp)
    c4d8:	10800b17 	ldw	r2,44(r2)
    c4dc:	1009883a 	mov	r4,r2
    c4e0:	00095e80 	call	95e8 <OSSemPost>

  if (ptr != start)
    c4e4:	e0fffd17 	ldw	r3,-12(fp)
    c4e8:	e0bff217 	ldw	r2,-56(fp)
    c4ec:	18800426 	beq	r3,r2,c500 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
    c4f0:	e0fffd17 	ldw	r3,-12(fp)
    c4f4:	e0bff217 	ldw	r2,-56(fp)
    c4f8:	1885c83a 	sub	r2,r3,r2
    c4fc:	00000606 	br	c518 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
    c500:	e0bfff17 	ldw	r2,-4(fp)
    c504:	1090000c 	andi	r2,r2,16384
    c508:	10000226 	beq	r2,zero,c514 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
    c50c:	00bffd44 	movi	r2,-11
    c510:	00000106 	br	c518 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    c514:	00bffec4 	movi	r2,-5
}
    c518:	e037883a 	mov	sp,fp
    c51c:	dfc00117 	ldw	ra,4(sp)
    c520:	df000017 	ldw	fp,0(sp)
    c524:	dec00204 	addi	sp,sp,8
    c528:	f800283a 	ret

0000c52c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c52c:	defffa04 	addi	sp,sp,-24
    c530:	dfc00515 	stw	ra,20(sp)
    c534:	df000415 	stw	fp,16(sp)
    c538:	df000404 	addi	fp,sp,16
    c53c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c540:	0007883a 	mov	r3,zero
    c544:	e0bfff17 	ldw	r2,-4(fp)
    c548:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c54c:	e0bfff17 	ldw	r2,-4(fp)
    c550:	10800104 	addi	r2,r2,4
    c554:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c558:	0005303a 	rdctl	r2,status
    c55c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c560:	e0fffd17 	ldw	r3,-12(fp)
    c564:	00bfff84 	movi	r2,-2
    c568:	1884703a 	and	r2,r3,r2
    c56c:	1001703a 	wrctl	status,r2
  
  return context;
    c570:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c574:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    c578:	000d3600 	call	d360 <alt_tick>
    c57c:	e0bffc17 	ldw	r2,-16(fp)
    c580:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c584:	e0bffe17 	ldw	r2,-8(fp)
    c588:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c58c:	e037883a 	mov	sp,fp
    c590:	dfc00117 	ldw	ra,4(sp)
    c594:	df000017 	ldw	fp,0(sp)
    c598:	dec00204 	addi	sp,sp,8
    c59c:	f800283a 	ret

0000c5a0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c5a0:	defff804 	addi	sp,sp,-32
    c5a4:	dfc00715 	stw	ra,28(sp)
    c5a8:	df000615 	stw	fp,24(sp)
    c5ac:	df000604 	addi	fp,sp,24
    c5b0:	e13ffc15 	stw	r4,-16(fp)
    c5b4:	e17ffd15 	stw	r5,-12(fp)
    c5b8:	e1bffe15 	stw	r6,-8(fp)
    c5bc:	e1ffff15 	stw	r7,-4(fp)
    c5c0:	e0bfff17 	ldw	r2,-4(fp)
    c5c4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c5c8:	00800074 	movhi	r2,1
    c5cc:	10866d04 	addi	r2,r2,6580
    c5d0:	10800017 	ldw	r2,0(r2)
    c5d4:	1000041e 	bne	r2,zero,c5e8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    c5d8:	00800074 	movhi	r2,1
    c5dc:	10866d04 	addi	r2,r2,6580
    c5e0:	e0fffb17 	ldw	r3,-20(fp)
    c5e4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c5e8:	e0bffc17 	ldw	r2,-16(fp)
    c5ec:	10800104 	addi	r2,r2,4
    c5f0:	00c001c4 	movi	r3,7
    c5f4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    c5f8:	d8000015 	stw	zero,0(sp)
    c5fc:	e13ffd17 	ldw	r4,-12(fp)
    c600:	e17ffe17 	ldw	r5,-8(fp)
    c604:	01800074 	movhi	r6,1
    c608:	31b14b04 	addi	r6,r6,-15060
    c60c:	e1fffc17 	ldw	r7,-16(fp)
    c610:	000cc580 	call	cc58 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c614:	e037883a 	mov	sp,fp
    c618:	dfc00117 	ldw	ra,4(sp)
    c61c:	df000017 	ldw	fp,0(sp)
    c620:	dec00204 	addi	sp,sp,8
    c624:	f800283a 	ret

0000c628 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c628:	defffa04 	addi	sp,sp,-24
    c62c:	dfc00515 	stw	ra,20(sp)
    c630:	df000415 	stw	fp,16(sp)
    c634:	df000404 	addi	fp,sp,16
    c638:	e13ffd15 	stw	r4,-12(fp)
    c63c:	e17ffe15 	stw	r5,-8(fp)
    c640:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    c644:	e0bffd17 	ldw	r2,-12(fp)
    c648:	10800017 	ldw	r2,0(r2)
    c64c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    c650:	e0bffc17 	ldw	r2,-16(fp)
    c654:	10c00a04 	addi	r3,r2,40
    c658:	e0bffd17 	ldw	r2,-12(fp)
    c65c:	10800217 	ldw	r2,8(r2)
    c660:	1809883a 	mov	r4,r3
    c664:	e17ffe17 	ldw	r5,-8(fp)
    c668:	e1bfff17 	ldw	r6,-4(fp)
    c66c:	100f883a 	mov	r7,r2
    c670:	000c7380 	call	c738 <altera_avalon_uart_read>
      fd->fd_flags);
}
    c674:	e037883a 	mov	sp,fp
    c678:	dfc00117 	ldw	ra,4(sp)
    c67c:	df000017 	ldw	fp,0(sp)
    c680:	dec00204 	addi	sp,sp,8
    c684:	f800283a 	ret

0000c688 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c688:	defffa04 	addi	sp,sp,-24
    c68c:	dfc00515 	stw	ra,20(sp)
    c690:	df000415 	stw	fp,16(sp)
    c694:	df000404 	addi	fp,sp,16
    c698:	e13ffd15 	stw	r4,-12(fp)
    c69c:	e17ffe15 	stw	r5,-8(fp)
    c6a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    c6a4:	e0bffd17 	ldw	r2,-12(fp)
    c6a8:	10800017 	ldw	r2,0(r2)
    c6ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    c6b0:	e0bffc17 	ldw	r2,-16(fp)
    c6b4:	10c00a04 	addi	r3,r2,40
    c6b8:	e0bffd17 	ldw	r2,-12(fp)
    c6bc:	10800217 	ldw	r2,8(r2)
    c6c0:	1809883a 	mov	r4,r3
    c6c4:	e17ffe17 	ldw	r5,-8(fp)
    c6c8:	e1bfff17 	ldw	r6,-4(fp)
    c6cc:	100f883a 	mov	r7,r2
    c6d0:	000c8480 	call	c848 <altera_avalon_uart_write>
      fd->fd_flags);
}
    c6d4:	e037883a 	mov	sp,fp
    c6d8:	dfc00117 	ldw	ra,4(sp)
    c6dc:	df000017 	ldw	fp,0(sp)
    c6e0:	dec00204 	addi	sp,sp,8
    c6e4:	f800283a 	ret

0000c6e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c6e8:	defffe04 	addi	sp,sp,-8
    c6ec:	dfc00115 	stw	ra,4(sp)
    c6f0:	df000015 	stw	fp,0(sp)
    c6f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c6f8:	00800074 	movhi	r2,1
    c6fc:	10bf6004 	addi	r2,r2,-640
    c700:	10800017 	ldw	r2,0(r2)
    c704:	10000526 	beq	r2,zero,c71c <alt_get_errno+0x34>
    c708:	00800074 	movhi	r2,1
    c70c:	10bf6004 	addi	r2,r2,-640
    c710:	10800017 	ldw	r2,0(r2)
    c714:	103ee83a 	callr	r2
    c718:	00000206 	br	c724 <alt_get_errno+0x3c>
    c71c:	00800074 	movhi	r2,1
    c720:	10864f04 	addi	r2,r2,6460
}
    c724:	e037883a 	mov	sp,fp
    c728:	dfc00117 	ldw	ra,4(sp)
    c72c:	df000017 	ldw	fp,0(sp)
    c730:	dec00204 	addi	sp,sp,8
    c734:	f800283a 	ret

0000c738 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    c738:	defff804 	addi	sp,sp,-32
    c73c:	dfc00715 	stw	ra,28(sp)
    c740:	df000615 	stw	fp,24(sp)
    c744:	df000604 	addi	fp,sp,24
    c748:	e13ffc15 	stw	r4,-16(fp)
    c74c:	e17ffd15 	stw	r5,-12(fp)
    c750:	e1bffe15 	stw	r6,-8(fp)
    c754:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    c758:	e0bfff17 	ldw	r2,-4(fp)
    c75c:	1090000c 	andi	r2,r2,16384
    c760:	1005003a 	cmpeq	r2,r2,zero
    c764:	10803fcc 	andi	r2,r2,255
    c768:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	10800017 	ldw	r2,0(r2)
    c774:	10800204 	addi	r2,r2,8
    c778:	10800037 	ldwio	r2,0(r2)
    c77c:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    c780:	e0bffc17 	ldw	r2,-16(fp)
    c784:	10800017 	ldw	r2,0(r2)
    c788:	10800204 	addi	r2,r2,8
    c78c:	0007883a 	mov	r3,zero
    c790:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    c794:	e0bffb17 	ldw	r2,-20(fp)
    c798:	1080200c 	andi	r2,r2,128
    c79c:	10000b26 	beq	r2,zero,c7cc <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    c7a0:	e0bffc17 	ldw	r2,-16(fp)
    c7a4:	10800017 	ldw	r2,0(r2)
    c7a8:	10800037 	ldwio	r2,0(r2)
    c7ac:	1007883a 	mov	r3,r2
    c7b0:	e0bffd17 	ldw	r2,-12(fp)
    c7b4:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    c7b8:	e0bffb17 	ldw	r2,-20(fp)
    c7bc:	108000cc 	andi	r2,r2,3
    c7c0:	1000021e 	bne	r2,zero,c7cc <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    c7c4:	00800044 	movi	r2,1
    c7c8:	00000606 	br	c7e4 <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    c7cc:	e0bffa17 	ldw	r2,-24(fp)
    c7d0:	103fe61e 	bne	r2,zero,c76c <__alt_data_end+0xfc00c76c>

  ALT_ERRNO = EWOULDBLOCK;
    c7d4:	000c6e80 	call	c6e8 <alt_get_errno>
    c7d8:	00c002c4 	movi	r3,11
    c7dc:	10c00015 	stw	r3,0(r2)
 
  return 0;
    c7e0:	0005883a 	mov	r2,zero
}
    c7e4:	e037883a 	mov	sp,fp
    c7e8:	dfc00117 	ldw	ra,4(sp)
    c7ec:	df000017 	ldw	fp,0(sp)
    c7f0:	dec00204 	addi	sp,sp,8
    c7f4:	f800283a 	ret

0000c7f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c7f8:	defffe04 	addi	sp,sp,-8
    c7fc:	dfc00115 	stw	ra,4(sp)
    c800:	df000015 	stw	fp,0(sp)
    c804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c808:	00800074 	movhi	r2,1
    c80c:	10bf6004 	addi	r2,r2,-640
    c810:	10800017 	ldw	r2,0(r2)
    c814:	10000526 	beq	r2,zero,c82c <alt_get_errno+0x34>
    c818:	00800074 	movhi	r2,1
    c81c:	10bf6004 	addi	r2,r2,-640
    c820:	10800017 	ldw	r2,0(r2)
    c824:	103ee83a 	callr	r2
    c828:	00000206 	br	c834 <alt_get_errno+0x3c>
    c82c:	00800074 	movhi	r2,1
    c830:	10864f04 	addi	r2,r2,6460
}
    c834:	e037883a 	mov	sp,fp
    c838:	dfc00117 	ldw	ra,4(sp)
    c83c:	df000017 	ldw	fp,0(sp)
    c840:	dec00204 	addi	sp,sp,8
    c844:	f800283a 	ret

0000c848 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    c848:	defff704 	addi	sp,sp,-36
    c84c:	dfc00815 	stw	ra,32(sp)
    c850:	df000715 	stw	fp,28(sp)
    c854:	df000704 	addi	fp,sp,28
    c858:	e13ffc15 	stw	r4,-16(fp)
    c85c:	e17ffd15 	stw	r5,-12(fp)
    c860:	e1bffe15 	stw	r6,-8(fp)
    c864:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    c868:	e0bfff17 	ldw	r2,-4(fp)
    c86c:	1090000c 	andi	r2,r2,16384
    c870:	1005003a 	cmpeq	r2,r2,zero
    c874:	10803fcc 	andi	r2,r2,255
    c878:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    c87c:	e0bffe17 	ldw	r2,-8(fp)
    c880:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    c884:	e0bffc17 	ldw	r2,-16(fp)
    c888:	10800017 	ldw	r2,0(r2)
    c88c:	10800204 	addi	r2,r2,8
    c890:	10800037 	ldwio	r2,0(r2)
    c894:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    c898:	e0bffb17 	ldw	r2,-20(fp)
    c89c:	1080100c 	andi	r2,r2,64
    c8a0:	10000f26 	beq	r2,zero,c8e0 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    c8a4:	e0bffc17 	ldw	r2,-16(fp)
    c8a8:	10800017 	ldw	r2,0(r2)
    c8ac:	10800104 	addi	r2,r2,4
    c8b0:	1007883a 	mov	r3,r2
    c8b4:	e0bffd17 	ldw	r2,-12(fp)
    c8b8:	11000044 	addi	r4,r2,1
    c8bc:	e13ffd15 	stw	r4,-12(fp)
    c8c0:	10800003 	ldbu	r2,0(r2)
    c8c4:	10803fcc 	andi	r2,r2,255
    c8c8:	1080201c 	xori	r2,r2,128
    c8cc:	10bfe004 	addi	r2,r2,-128
    c8d0:	18800035 	stwio	r2,0(r3)
      count--;
    c8d4:	e0bff917 	ldw	r2,-28(fp)
    c8d8:	10bfffc4 	addi	r2,r2,-1
    c8dc:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    c8e0:	e0bffa17 	ldw	r2,-24(fp)
    c8e4:	10000226 	beq	r2,zero,c8f0 <altera_avalon_uart_write+0xa8>
    c8e8:	e0bff917 	ldw	r2,-28(fp)
    c8ec:	103fe51e 	bne	r2,zero,c884 <__alt_data_end+0xfc00c884>

  if (count)
    c8f0:	e0bff917 	ldw	r2,-28(fp)
    c8f4:	10000326 	beq	r2,zero,c904 <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    c8f8:	000c7f80 	call	c7f8 <alt_get_errno>
    c8fc:	00c002c4 	movi	r3,11
    c900:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    c904:	e0fffe17 	ldw	r3,-8(fp)
    c908:	e0bff917 	ldw	r2,-28(fp)
    c90c:	1885c83a 	sub	r2,r3,r2
}
    c910:	e037883a 	mov	sp,fp
    c914:	dfc00117 	ldw	ra,4(sp)
    c918:	df000017 	ldw	fp,0(sp)
    c91c:	dec00204 	addi	sp,sp,8
    c920:	f800283a 	ret

0000c924 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    c924:	defff504 	addi	sp,sp,-44
    c928:	df000a15 	stw	fp,40(sp)
    c92c:	df000a04 	addi	fp,sp,40
    c930:	e13ffc15 	stw	r4,-16(fp)
    c934:	e17ffd15 	stw	r5,-12(fp)
    c938:	e1bffe15 	stw	r6,-8(fp)
    c93c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    c940:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c944:	00800074 	movhi	r2,1
    c948:	10866d04 	addi	r2,r2,6580
    c94c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    c950:	10003f26 	beq	r2,zero,ca50 <alt_alarm_start+0x12c>
  {
    if (alarm)
    c954:	e0bffc17 	ldw	r2,-16(fp)
    c958:	10003b26 	beq	r2,zero,ca48 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    c95c:	e0bffc17 	ldw	r2,-16(fp)
    c960:	e0fffe17 	ldw	r3,-8(fp)
    c964:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    c968:	e0bffc17 	ldw	r2,-16(fp)
    c96c:	e0ffff17 	ldw	r3,-4(fp)
    c970:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c974:	0005303a 	rdctl	r2,status
    c978:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c97c:	e0fff817 	ldw	r3,-32(fp)
    c980:	00bfff84 	movi	r2,-2
    c984:	1884703a 	and	r2,r3,r2
    c988:	1001703a 	wrctl	status,r2
  
  return context;
    c98c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    c990:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    c994:	00800074 	movhi	r2,1
    c998:	10866e04 	addi	r2,r2,6584
    c99c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    c9a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    c9a4:	e0fffd17 	ldw	r3,-12(fp)
    c9a8:	e0bff617 	ldw	r2,-40(fp)
    c9ac:	1885883a 	add	r2,r3,r2
    c9b0:	10c00044 	addi	r3,r2,1
    c9b4:	e0bffc17 	ldw	r2,-16(fp)
    c9b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    c9bc:	e0bffc17 	ldw	r2,-16(fp)
    c9c0:	10c00217 	ldw	r3,8(r2)
    c9c4:	e0bff617 	ldw	r2,-40(fp)
    c9c8:	1880042e 	bgeu	r3,r2,c9dc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    c9cc:	e0bffc17 	ldw	r2,-16(fp)
    c9d0:	00c00044 	movi	r3,1
    c9d4:	10c00405 	stb	r3,16(r2)
    c9d8:	00000206 	br	c9e4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    c9dc:	e0bffc17 	ldw	r2,-16(fp)
    c9e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    c9e4:	e0bffc17 	ldw	r2,-16(fp)
    c9e8:	00c00074 	movhi	r3,1
    c9ec:	18ff8204 	addi	r3,r3,-504
    c9f0:	e0fff915 	stw	r3,-28(fp)
    c9f4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c9f8:	e0bffa17 	ldw	r2,-24(fp)
    c9fc:	e0fff917 	ldw	r3,-28(fp)
    ca00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ca04:	e0bff917 	ldw	r2,-28(fp)
    ca08:	10c00017 	ldw	r3,0(r2)
    ca0c:	e0bffa17 	ldw	r2,-24(fp)
    ca10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ca14:	e0bff917 	ldw	r2,-28(fp)
    ca18:	10800017 	ldw	r2,0(r2)
    ca1c:	e0fffa17 	ldw	r3,-24(fp)
    ca20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ca24:	e0bff917 	ldw	r2,-28(fp)
    ca28:	e0fffa17 	ldw	r3,-24(fp)
    ca2c:	10c00015 	stw	r3,0(r2)
    ca30:	e0bff717 	ldw	r2,-36(fp)
    ca34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ca38:	e0bffb17 	ldw	r2,-20(fp)
    ca3c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ca40:	0005883a 	mov	r2,zero
    ca44:	00000306 	br	ca54 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    ca48:	00bffa84 	movi	r2,-22
    ca4c:	00000106 	br	ca54 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    ca50:	00bfde84 	movi	r2,-134
  }
}
    ca54:	e037883a 	mov	sp,fp
    ca58:	df000017 	ldw	fp,0(sp)
    ca5c:	dec00104 	addi	sp,sp,4
    ca60:	f800283a 	ret

0000ca64 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ca64:	deffff04 	addi	sp,sp,-4
    ca68:	df000015 	stw	fp,0(sp)
    ca6c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ca70:	e037883a 	mov	sp,fp
    ca74:	df000017 	ldw	fp,0(sp)
    ca78:	dec00104 	addi	sp,sp,4
    ca7c:	f800283a 	ret

0000ca80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca80:	defffe04 	addi	sp,sp,-8
    ca84:	dfc00115 	stw	ra,4(sp)
    ca88:	df000015 	stw	fp,0(sp)
    ca8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ca90:	00800074 	movhi	r2,1
    ca94:	10bf6004 	addi	r2,r2,-640
    ca98:	10800017 	ldw	r2,0(r2)
    ca9c:	10000526 	beq	r2,zero,cab4 <alt_get_errno+0x34>
    caa0:	00800074 	movhi	r2,1
    caa4:	10bf6004 	addi	r2,r2,-640
    caa8:	10800017 	ldw	r2,0(r2)
    caac:	103ee83a 	callr	r2
    cab0:	00000206 	br	cabc <alt_get_errno+0x3c>
    cab4:	00800074 	movhi	r2,1
    cab8:	10864f04 	addi	r2,r2,6460
}
    cabc:	e037883a 	mov	sp,fp
    cac0:	dfc00117 	ldw	ra,4(sp)
    cac4:	df000017 	ldw	fp,0(sp)
    cac8:	dec00204 	addi	sp,sp,8
    cacc:	f800283a 	ret

0000cad0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    cad0:	defffa04 	addi	sp,sp,-24
    cad4:	dfc00515 	stw	ra,20(sp)
    cad8:	df000415 	stw	fp,16(sp)
    cadc:	df000404 	addi	fp,sp,16
    cae0:	e13ffe15 	stw	r4,-8(fp)
    cae4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    cae8:	e0bffe17 	ldw	r2,-8(fp)
    caec:	10000326 	beq	r2,zero,cafc <alt_dev_llist_insert+0x2c>
    caf0:	e0bffe17 	ldw	r2,-8(fp)
    caf4:	10800217 	ldw	r2,8(r2)
    caf8:	1000051e 	bne	r2,zero,cb10 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    cafc:	000ca800 	call	ca80 <alt_get_errno>
    cb00:	00c00584 	movi	r3,22
    cb04:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    cb08:	00bffa84 	movi	r2,-22
    cb0c:	00001306 	br	cb5c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    cb10:	e0bffe17 	ldw	r2,-8(fp)
    cb14:	e0ffff17 	ldw	r3,-4(fp)
    cb18:	e0fffc15 	stw	r3,-16(fp)
    cb1c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cb20:	e0bffd17 	ldw	r2,-12(fp)
    cb24:	e0fffc17 	ldw	r3,-16(fp)
    cb28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    cb2c:	e0bffc17 	ldw	r2,-16(fp)
    cb30:	10c00017 	ldw	r3,0(r2)
    cb34:	e0bffd17 	ldw	r2,-12(fp)
    cb38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cb3c:	e0bffc17 	ldw	r2,-16(fp)
    cb40:	10800017 	ldw	r2,0(r2)
    cb44:	e0fffd17 	ldw	r3,-12(fp)
    cb48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    cb4c:	e0bffc17 	ldw	r2,-16(fp)
    cb50:	e0fffd17 	ldw	r3,-12(fp)
    cb54:	10c00015 	stw	r3,0(r2)

  return 0;  
    cb58:	0005883a 	mov	r2,zero
}
    cb5c:	e037883a 	mov	sp,fp
    cb60:	dfc00117 	ldw	ra,4(sp)
    cb64:	df000017 	ldw	fp,0(sp)
    cb68:	dec00204 	addi	sp,sp,8
    cb6c:	f800283a 	ret

0000cb70 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    cb70:	defffd04 	addi	sp,sp,-12
    cb74:	dfc00215 	stw	ra,8(sp)
    cb78:	df000115 	stw	fp,4(sp)
    cb7c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cb80:	00800074 	movhi	r2,1
    cb84:	10b85404 	addi	r2,r2,-7856
    cb88:	e0bfff15 	stw	r2,-4(fp)
    cb8c:	00000606 	br	cba8 <_do_ctors+0x38>
        (*ctor) (); 
    cb90:	e0bfff17 	ldw	r2,-4(fp)
    cb94:	10800017 	ldw	r2,0(r2)
    cb98:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cb9c:	e0bfff17 	ldw	r2,-4(fp)
    cba0:	10bfff04 	addi	r2,r2,-4
    cba4:	e0bfff15 	stw	r2,-4(fp)
    cba8:	e0ffff17 	ldw	r3,-4(fp)
    cbac:	00800074 	movhi	r2,1
    cbb0:	10b85504 	addi	r2,r2,-7852
    cbb4:	18bff62e 	bgeu	r3,r2,cb90 <__alt_data_end+0xfc00cb90>
        (*ctor) (); 
}
    cbb8:	e037883a 	mov	sp,fp
    cbbc:	dfc00117 	ldw	ra,4(sp)
    cbc0:	df000017 	ldw	fp,0(sp)
    cbc4:	dec00204 	addi	sp,sp,8
    cbc8:	f800283a 	ret

0000cbcc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    cbcc:	defffd04 	addi	sp,sp,-12
    cbd0:	dfc00215 	stw	ra,8(sp)
    cbd4:	df000115 	stw	fp,4(sp)
    cbd8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cbdc:	00800074 	movhi	r2,1
    cbe0:	10b85404 	addi	r2,r2,-7856
    cbe4:	e0bfff15 	stw	r2,-4(fp)
    cbe8:	00000606 	br	cc04 <_do_dtors+0x38>
        (*dtor) (); 
    cbec:	e0bfff17 	ldw	r2,-4(fp)
    cbf0:	10800017 	ldw	r2,0(r2)
    cbf4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cbf8:	e0bfff17 	ldw	r2,-4(fp)
    cbfc:	10bfff04 	addi	r2,r2,-4
    cc00:	e0bfff15 	stw	r2,-4(fp)
    cc04:	e0ffff17 	ldw	r3,-4(fp)
    cc08:	00800074 	movhi	r2,1
    cc0c:	10b85504 	addi	r2,r2,-7852
    cc10:	18bff62e 	bgeu	r3,r2,cbec <__alt_data_end+0xfc00cbec>
        (*dtor) (); 
}
    cc14:	e037883a 	mov	sp,fp
    cc18:	dfc00117 	ldw	ra,4(sp)
    cc1c:	df000017 	ldw	fp,0(sp)
    cc20:	dec00204 	addi	sp,sp,8
    cc24:	f800283a 	ret

0000cc28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    cc28:	defffe04 	addi	sp,sp,-8
    cc2c:	dfc00115 	stw	ra,4(sp)
    cc30:	df000015 	stw	fp,0(sp)
    cc34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    cc38:	0009883a 	mov	r4,zero
    cc3c:	01440004 	movi	r5,4096
    cc40:	000dbf00 	call	dbf0 <alt_icache_flush>
#endif
}
    cc44:	e037883a 	mov	sp,fp
    cc48:	dfc00117 	ldw	ra,4(sp)
    cc4c:	df000017 	ldw	fp,0(sp)
    cc50:	dec00204 	addi	sp,sp,8
    cc54:	f800283a 	ret

0000cc58 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cc58:	defff904 	addi	sp,sp,-28
    cc5c:	dfc00615 	stw	ra,24(sp)
    cc60:	df000515 	stw	fp,20(sp)
    cc64:	df000504 	addi	fp,sp,20
    cc68:	e13ffc15 	stw	r4,-16(fp)
    cc6c:	e17ffd15 	stw	r5,-12(fp)
    cc70:	e1bffe15 	stw	r6,-8(fp)
    cc74:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    cc78:	e0800217 	ldw	r2,8(fp)
    cc7c:	d8800015 	stw	r2,0(sp)
    cc80:	e13ffc17 	ldw	r4,-16(fp)
    cc84:	e17ffd17 	ldw	r5,-12(fp)
    cc88:	e1bffe17 	ldw	r6,-8(fp)
    cc8c:	e1ffff17 	ldw	r7,-4(fp)
    cc90:	000ce300 	call	ce30 <alt_iic_isr_register>
}  
    cc94:	e037883a 	mov	sp,fp
    cc98:	dfc00117 	ldw	ra,4(sp)
    cc9c:	df000017 	ldw	fp,0(sp)
    cca0:	dec00204 	addi	sp,sp,8
    cca4:	f800283a 	ret

0000cca8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    cca8:	defff904 	addi	sp,sp,-28
    ccac:	df000615 	stw	fp,24(sp)
    ccb0:	df000604 	addi	fp,sp,24
    ccb4:	e13ffe15 	stw	r4,-8(fp)
    ccb8:	e17fff15 	stw	r5,-4(fp)
    ccbc:	e0bfff17 	ldw	r2,-4(fp)
    ccc0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ccc4:	0005303a 	rdctl	r2,status
    ccc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cccc:	e0fffb17 	ldw	r3,-20(fp)
    ccd0:	00bfff84 	movi	r2,-2
    ccd4:	1884703a 	and	r2,r3,r2
    ccd8:	1001703a 	wrctl	status,r2
  
  return context;
    ccdc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cce0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    cce4:	e0bffa17 	ldw	r2,-24(fp)
    cce8:	00c00044 	movi	r3,1
    ccec:	1884983a 	sll	r2,r3,r2
    ccf0:	1007883a 	mov	r3,r2
    ccf4:	00800074 	movhi	r2,1
    ccf8:	10866c04 	addi	r2,r2,6576
    ccfc:	10800017 	ldw	r2,0(r2)
    cd00:	1886b03a 	or	r3,r3,r2
    cd04:	00800074 	movhi	r2,1
    cd08:	10866c04 	addi	r2,r2,6576
    cd0c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cd10:	00800074 	movhi	r2,1
    cd14:	10866c04 	addi	r2,r2,6576
    cd18:	10800017 	ldw	r2,0(r2)
    cd1c:	100170fa 	wrctl	ienable,r2
    cd20:	e0bffc17 	ldw	r2,-16(fp)
    cd24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cd28:	e0bffd17 	ldw	r2,-12(fp)
    cd2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cd30:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    cd34:	e037883a 	mov	sp,fp
    cd38:	df000017 	ldw	fp,0(sp)
    cd3c:	dec00104 	addi	sp,sp,4
    cd40:	f800283a 	ret

0000cd44 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    cd44:	defff904 	addi	sp,sp,-28
    cd48:	df000615 	stw	fp,24(sp)
    cd4c:	df000604 	addi	fp,sp,24
    cd50:	e13ffe15 	stw	r4,-8(fp)
    cd54:	e17fff15 	stw	r5,-4(fp)
    cd58:	e0bfff17 	ldw	r2,-4(fp)
    cd5c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cd60:	0005303a 	rdctl	r2,status
    cd64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cd68:	e0fffb17 	ldw	r3,-20(fp)
    cd6c:	00bfff84 	movi	r2,-2
    cd70:	1884703a 	and	r2,r3,r2
    cd74:	1001703a 	wrctl	status,r2
  
  return context;
    cd78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cd7c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    cd80:	e0bffa17 	ldw	r2,-24(fp)
    cd84:	00c00044 	movi	r3,1
    cd88:	1884983a 	sll	r2,r3,r2
    cd8c:	0084303a 	nor	r2,zero,r2
    cd90:	1007883a 	mov	r3,r2
    cd94:	00800074 	movhi	r2,1
    cd98:	10866c04 	addi	r2,r2,6576
    cd9c:	10800017 	ldw	r2,0(r2)
    cda0:	1886703a 	and	r3,r3,r2
    cda4:	00800074 	movhi	r2,1
    cda8:	10866c04 	addi	r2,r2,6576
    cdac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cdb0:	00800074 	movhi	r2,1
    cdb4:	10866c04 	addi	r2,r2,6576
    cdb8:	10800017 	ldw	r2,0(r2)
    cdbc:	100170fa 	wrctl	ienable,r2
    cdc0:	e0bffc17 	ldw	r2,-16(fp)
    cdc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cdc8:	e0bffd17 	ldw	r2,-12(fp)
    cdcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cdd0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    cdd4:	e037883a 	mov	sp,fp
    cdd8:	df000017 	ldw	fp,0(sp)
    cddc:	dec00104 	addi	sp,sp,4
    cde0:	f800283a 	ret

0000cde4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    cde4:	defffc04 	addi	sp,sp,-16
    cde8:	df000315 	stw	fp,12(sp)
    cdec:	df000304 	addi	fp,sp,12
    cdf0:	e13ffe15 	stw	r4,-8(fp)
    cdf4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    cdf8:	000530fa 	rdctl	r2,ienable
    cdfc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ce00:	e0bfff17 	ldw	r2,-4(fp)
    ce04:	00c00044 	movi	r3,1
    ce08:	1884983a 	sll	r2,r3,r2
    ce0c:	1007883a 	mov	r3,r2
    ce10:	e0bffd17 	ldw	r2,-12(fp)
    ce14:	1884703a 	and	r2,r3,r2
    ce18:	1004c03a 	cmpne	r2,r2,zero
    ce1c:	10803fcc 	andi	r2,r2,255
}
    ce20:	e037883a 	mov	sp,fp
    ce24:	df000017 	ldw	fp,0(sp)
    ce28:	dec00104 	addi	sp,sp,4
    ce2c:	f800283a 	ret

0000ce30 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ce30:	defff504 	addi	sp,sp,-44
    ce34:	dfc00a15 	stw	ra,40(sp)
    ce38:	df000915 	stw	fp,36(sp)
    ce3c:	df000904 	addi	fp,sp,36
    ce40:	e13ffc15 	stw	r4,-16(fp)
    ce44:	e17ffd15 	stw	r5,-12(fp)
    ce48:	e1bffe15 	stw	r6,-8(fp)
    ce4c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    ce50:	00bffa84 	movi	r2,-22
    ce54:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ce58:	e0bffd17 	ldw	r2,-12(fp)
    ce5c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ce60:	e0bff817 	ldw	r2,-32(fp)
    ce64:	10800808 	cmpgei	r2,r2,32
    ce68:	1000271e 	bne	r2,zero,cf08 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce6c:	0005303a 	rdctl	r2,status
    ce70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce74:	e0fffa17 	ldw	r3,-24(fp)
    ce78:	00bfff84 	movi	r2,-2
    ce7c:	1884703a 	and	r2,r3,r2
    ce80:	1001703a 	wrctl	status,r2
  
  return context;
    ce84:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    ce88:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    ce8c:	00c000b4 	movhi	r3,2
    ce90:	18e30204 	addi	r3,r3,-29688
    ce94:	e0bff817 	ldw	r2,-32(fp)
    ce98:	100490fa 	slli	r2,r2,3
    ce9c:	1885883a 	add	r2,r3,r2
    cea0:	e0fffe17 	ldw	r3,-8(fp)
    cea4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    cea8:	00c000b4 	movhi	r3,2
    ceac:	18e30204 	addi	r3,r3,-29688
    ceb0:	e0bff817 	ldw	r2,-32(fp)
    ceb4:	100490fa 	slli	r2,r2,3
    ceb8:	1885883a 	add	r2,r3,r2
    cebc:	10800104 	addi	r2,r2,4
    cec0:	e0ffff17 	ldw	r3,-4(fp)
    cec4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    cec8:	e0bffe17 	ldw	r2,-8(fp)
    cecc:	10000526 	beq	r2,zero,cee4 <alt_iic_isr_register+0xb4>
    ced0:	e0bff817 	ldw	r2,-32(fp)
    ced4:	e13ffc17 	ldw	r4,-16(fp)
    ced8:	100b883a 	mov	r5,r2
    cedc:	000cca80 	call	cca8 <alt_ic_irq_enable>
    cee0:	00000406 	br	cef4 <alt_iic_isr_register+0xc4>
    cee4:	e0bff817 	ldw	r2,-32(fp)
    cee8:	e13ffc17 	ldw	r4,-16(fp)
    ceec:	100b883a 	mov	r5,r2
    cef0:	000cd440 	call	cd44 <alt_ic_irq_disable>
    cef4:	e0bff715 	stw	r2,-36(fp)
    cef8:	e0bff917 	ldw	r2,-28(fp)
    cefc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf00:	e0bffb17 	ldw	r2,-20(fp)
    cf04:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    cf08:	e0bff717 	ldw	r2,-36(fp)
}
    cf0c:	e037883a 	mov	sp,fp
    cf10:	dfc00117 	ldw	ra,4(sp)
    cf14:	df000017 	ldw	fp,0(sp)
    cf18:	dec00204 	addi	sp,sp,8
    cf1c:	f800283a 	ret

0000cf20 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    cf20:	defff904 	addi	sp,sp,-28
    cf24:	dfc00615 	stw	ra,24(sp)
    cf28:	df000515 	stw	fp,20(sp)
    cf2c:	df000504 	addi	fp,sp,20
    cf30:	e13ffc15 	stw	r4,-16(fp)
    cf34:	e17ffd15 	stw	r5,-12(fp)
    cf38:	e1bffe15 	stw	r6,-8(fp)
    cf3c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    cf40:	e13ffd17 	ldw	r4,-12(fp)
    cf44:	e17ffe17 	ldw	r5,-8(fp)
    cf48:	e1bfff17 	ldw	r6,-4(fp)
    cf4c:	000d1740 	call	d174 <open>
    cf50:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    cf54:	e0bffb17 	ldw	r2,-20(fp)
    cf58:	10001c16 	blt	r2,zero,cfcc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    cf5c:	00c00074 	movhi	r3,1
    cf60:	18fad104 	addi	r3,r3,-5308
    cf64:	e0bffb17 	ldw	r2,-20(fp)
    cf68:	10800324 	muli	r2,r2,12
    cf6c:	1885883a 	add	r2,r3,r2
    cf70:	10c00017 	ldw	r3,0(r2)
    cf74:	e0bffc17 	ldw	r2,-16(fp)
    cf78:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    cf7c:	00c00074 	movhi	r3,1
    cf80:	18fad104 	addi	r3,r3,-5308
    cf84:	e0bffb17 	ldw	r2,-20(fp)
    cf88:	10800324 	muli	r2,r2,12
    cf8c:	1885883a 	add	r2,r3,r2
    cf90:	10800104 	addi	r2,r2,4
    cf94:	10c00017 	ldw	r3,0(r2)
    cf98:	e0bffc17 	ldw	r2,-16(fp)
    cf9c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    cfa0:	00c00074 	movhi	r3,1
    cfa4:	18fad104 	addi	r3,r3,-5308
    cfa8:	e0bffb17 	ldw	r2,-20(fp)
    cfac:	10800324 	muli	r2,r2,12
    cfb0:	1885883a 	add	r2,r3,r2
    cfb4:	10800204 	addi	r2,r2,8
    cfb8:	10c00017 	ldw	r3,0(r2)
    cfbc:	e0bffc17 	ldw	r2,-16(fp)
    cfc0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    cfc4:	e13ffb17 	ldw	r4,-20(fp)
    cfc8:	00035780 	call	3578 <alt_release_fd>
  }
} 
    cfcc:	e037883a 	mov	sp,fp
    cfd0:	dfc00117 	ldw	ra,4(sp)
    cfd4:	df000017 	ldw	fp,0(sp)
    cfd8:	dec00204 	addi	sp,sp,8
    cfdc:	f800283a 	ret

0000cfe0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    cfe0:	defffb04 	addi	sp,sp,-20
    cfe4:	dfc00415 	stw	ra,16(sp)
    cfe8:	df000315 	stw	fp,12(sp)
    cfec:	df000304 	addi	fp,sp,12
    cff0:	e13ffd15 	stw	r4,-12(fp)
    cff4:	e17ffe15 	stw	r5,-8(fp)
    cff8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    cffc:	01000074 	movhi	r4,1
    d000:	213ad404 	addi	r4,r4,-5296
    d004:	e17ffd17 	ldw	r5,-12(fp)
    d008:	01800044 	movi	r6,1
    d00c:	01c07fc4 	movi	r7,511
    d010:	000cf200 	call	cf20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d014:	01000074 	movhi	r4,1
    d018:	213ad104 	addi	r4,r4,-5308
    d01c:	e17ffe17 	ldw	r5,-8(fp)
    d020:	000d883a 	mov	r6,zero
    d024:	01c07fc4 	movi	r7,511
    d028:	000cf200 	call	cf20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d02c:	01000074 	movhi	r4,1
    d030:	213ad704 	addi	r4,r4,-5284
    d034:	e17fff17 	ldw	r5,-4(fp)
    d038:	01800044 	movi	r6,1
    d03c:	01c07fc4 	movi	r7,511
    d040:	000cf200 	call	cf20 <alt_open_fd>
}  
    d044:	e037883a 	mov	sp,fp
    d048:	dfc00117 	ldw	ra,4(sp)
    d04c:	df000017 	ldw	fp,0(sp)
    d050:	dec00204 	addi	sp,sp,8
    d054:	f800283a 	ret

0000d058 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d058:	defffe04 	addi	sp,sp,-8
    d05c:	dfc00115 	stw	ra,4(sp)
    d060:	df000015 	stw	fp,0(sp)
    d064:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d068:	00800074 	movhi	r2,1
    d06c:	10bf6004 	addi	r2,r2,-640
    d070:	10800017 	ldw	r2,0(r2)
    d074:	10000526 	beq	r2,zero,d08c <alt_get_errno+0x34>
    d078:	00800074 	movhi	r2,1
    d07c:	10bf6004 	addi	r2,r2,-640
    d080:	10800017 	ldw	r2,0(r2)
    d084:	103ee83a 	callr	r2
    d088:	00000206 	br	d094 <alt_get_errno+0x3c>
    d08c:	00800074 	movhi	r2,1
    d090:	10864f04 	addi	r2,r2,6460
}
    d094:	e037883a 	mov	sp,fp
    d098:	dfc00117 	ldw	ra,4(sp)
    d09c:	df000017 	ldw	fp,0(sp)
    d0a0:	dec00204 	addi	sp,sp,8
    d0a4:	f800283a 	ret

0000d0a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d0a8:	defffd04 	addi	sp,sp,-12
    d0ac:	df000215 	stw	fp,8(sp)
    d0b0:	df000204 	addi	fp,sp,8
    d0b4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d0b8:	e0bfff17 	ldw	r2,-4(fp)
    d0bc:	10800217 	ldw	r2,8(r2)
    d0c0:	10d00034 	orhi	r3,r2,16384
    d0c4:	e0bfff17 	ldw	r2,-4(fp)
    d0c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d0cc:	e03ffe15 	stw	zero,-8(fp)
    d0d0:	00001d06 	br	d148 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d0d4:	00c00074 	movhi	r3,1
    d0d8:	18fad104 	addi	r3,r3,-5308
    d0dc:	e0bffe17 	ldw	r2,-8(fp)
    d0e0:	10800324 	muli	r2,r2,12
    d0e4:	1885883a 	add	r2,r3,r2
    d0e8:	10c00017 	ldw	r3,0(r2)
    d0ec:	e0bfff17 	ldw	r2,-4(fp)
    d0f0:	10800017 	ldw	r2,0(r2)
    d0f4:	1880111e 	bne	r3,r2,d13c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d0f8:	00c00074 	movhi	r3,1
    d0fc:	18fad104 	addi	r3,r3,-5308
    d100:	e0bffe17 	ldw	r2,-8(fp)
    d104:	10800324 	muli	r2,r2,12
    d108:	1885883a 	add	r2,r3,r2
    d10c:	10800204 	addi	r2,r2,8
    d110:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d114:	1000090e 	bge	r2,zero,d13c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    d118:	e0bffe17 	ldw	r2,-8(fp)
    d11c:	10c00324 	muli	r3,r2,12
    d120:	00800074 	movhi	r2,1
    d124:	10bad104 	addi	r2,r2,-5308
    d128:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d12c:	e0bfff17 	ldw	r2,-4(fp)
    d130:	18800226 	beq	r3,r2,d13c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d134:	00bffcc4 	movi	r2,-13
    d138:	00000a06 	br	d164 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d13c:	e0bffe17 	ldw	r2,-8(fp)
    d140:	10800044 	addi	r2,r2,1
    d144:	e0bffe15 	stw	r2,-8(fp)
    d148:	00800074 	movhi	r2,1
    d14c:	10bf5f04 	addi	r2,r2,-644
    d150:	10800017 	ldw	r2,0(r2)
    d154:	1007883a 	mov	r3,r2
    d158:	e0bffe17 	ldw	r2,-8(fp)
    d15c:	18bfdd2e 	bgeu	r3,r2,d0d4 <__alt_data_end+0xfc00d0d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d160:	0005883a 	mov	r2,zero
}
    d164:	e037883a 	mov	sp,fp
    d168:	df000017 	ldw	fp,0(sp)
    d16c:	dec00104 	addi	sp,sp,4
    d170:	f800283a 	ret

0000d174 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d174:	defff604 	addi	sp,sp,-40
    d178:	dfc00915 	stw	ra,36(sp)
    d17c:	df000815 	stw	fp,32(sp)
    d180:	df000804 	addi	fp,sp,32
    d184:	e13ffd15 	stw	r4,-12(fp)
    d188:	e17ffe15 	stw	r5,-8(fp)
    d18c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d190:	00bfffc4 	movi	r2,-1
    d194:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    d198:	00bffb44 	movi	r2,-19
    d19c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    d1a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d1a4:	e13ffd17 	ldw	r4,-12(fp)
    d1a8:	01400074 	movhi	r5,1
    d1ac:	297f5d04 	addi	r5,r5,-652
    d1b0:	000d9500 	call	d950 <alt_find_dev>
    d1b4:	e0bff815 	stw	r2,-32(fp)
    d1b8:	e0bff817 	ldw	r2,-32(fp)
    d1bc:	1000051e 	bne	r2,zero,d1d4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d1c0:	e13ffd17 	ldw	r4,-12(fp)
    d1c4:	000d9e00 	call	d9e0 <alt_find_file>
    d1c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    d1cc:	00800044 	movi	r2,1
    d1d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d1d4:	e0bff817 	ldw	r2,-32(fp)
    d1d8:	10002926 	beq	r2,zero,d280 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d1dc:	e13ff817 	ldw	r4,-32(fp)
    d1e0:	000daf40 	call	daf4 <alt_get_fd>
    d1e4:	e0bff915 	stw	r2,-28(fp)
    d1e8:	e0bff917 	ldw	r2,-28(fp)
    d1ec:	1000030e 	bge	r2,zero,d1fc <open+0x88>
    {
      status = index;
    d1f0:	e0bff917 	ldw	r2,-28(fp)
    d1f4:	e0bffa15 	stw	r2,-24(fp)
    d1f8:	00002306 	br	d288 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    d1fc:	e0bff917 	ldw	r2,-28(fp)
    d200:	10c00324 	muli	r3,r2,12
    d204:	00800074 	movhi	r2,1
    d208:	10bad104 	addi	r2,r2,-5308
    d20c:	1885883a 	add	r2,r3,r2
    d210:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d214:	e0fffe17 	ldw	r3,-8(fp)
    d218:	00900034 	movhi	r2,16384
    d21c:	10bfffc4 	addi	r2,r2,-1
    d220:	1886703a 	and	r3,r3,r2
    d224:	e0bffc17 	ldw	r2,-16(fp)
    d228:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d22c:	e0bffb17 	ldw	r2,-20(fp)
    d230:	1000051e 	bne	r2,zero,d248 <open+0xd4>
    d234:	e13ffc17 	ldw	r4,-16(fp)
    d238:	000d0a80 	call	d0a8 <alt_file_locked>
    d23c:	e0bffa15 	stw	r2,-24(fp)
    d240:	e0bffa17 	ldw	r2,-24(fp)
    d244:	10001016 	blt	r2,zero,d288 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d248:	e0bff817 	ldw	r2,-32(fp)
    d24c:	10800317 	ldw	r2,12(r2)
    d250:	10000826 	beq	r2,zero,d274 <open+0x100>
    d254:	e0bff817 	ldw	r2,-32(fp)
    d258:	10800317 	ldw	r2,12(r2)
    d25c:	e13ffc17 	ldw	r4,-16(fp)
    d260:	e17ffd17 	ldw	r5,-12(fp)
    d264:	e1bffe17 	ldw	r6,-8(fp)
    d268:	e1ffff17 	ldw	r7,-4(fp)
    d26c:	103ee83a 	callr	r2
    d270:	00000106 	br	d278 <open+0x104>
    d274:	0005883a 	mov	r2,zero
    d278:	e0bffa15 	stw	r2,-24(fp)
    d27c:	00000206 	br	d288 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d280:	00bffb44 	movi	r2,-19
    d284:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d288:	e0bffa17 	ldw	r2,-24(fp)
    d28c:	1000080e 	bge	r2,zero,d2b0 <open+0x13c>
  {
    alt_release_fd (index);  
    d290:	e13ff917 	ldw	r4,-28(fp)
    d294:	00035780 	call	3578 <alt_release_fd>
    ALT_ERRNO = -status;
    d298:	000d0580 	call	d058 <alt_get_errno>
    d29c:	e0fffa17 	ldw	r3,-24(fp)
    d2a0:	00c7c83a 	sub	r3,zero,r3
    d2a4:	10c00015 	stw	r3,0(r2)
    return -1;
    d2a8:	00bfffc4 	movi	r2,-1
    d2ac:	00000106 	br	d2b4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    d2b0:	e0bff917 	ldw	r2,-28(fp)
}
    d2b4:	e037883a 	mov	sp,fp
    d2b8:	dfc00117 	ldw	ra,4(sp)
    d2bc:	df000017 	ldw	fp,0(sp)
    d2c0:	dec00204 	addi	sp,sp,8
    d2c4:	f800283a 	ret

0000d2c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d2c8:	defffa04 	addi	sp,sp,-24
    d2cc:	df000515 	stw	fp,20(sp)
    d2d0:	df000504 	addi	fp,sp,20
    d2d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d2d8:	0005303a 	rdctl	r2,status
    d2dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d2e0:	e0fffc17 	ldw	r3,-16(fp)
    d2e4:	00bfff84 	movi	r2,-2
    d2e8:	1884703a 	and	r2,r3,r2
    d2ec:	1001703a 	wrctl	status,r2
  
  return context;
    d2f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d2f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    d2f8:	e0bfff17 	ldw	r2,-4(fp)
    d2fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d300:	e0bffd17 	ldw	r2,-12(fp)
    d304:	10800017 	ldw	r2,0(r2)
    d308:	e0fffd17 	ldw	r3,-12(fp)
    d30c:	18c00117 	ldw	r3,4(r3)
    d310:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    d314:	e0bffd17 	ldw	r2,-12(fp)
    d318:	10800117 	ldw	r2,4(r2)
    d31c:	e0fffd17 	ldw	r3,-12(fp)
    d320:	18c00017 	ldw	r3,0(r3)
    d324:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d328:	e0bffd17 	ldw	r2,-12(fp)
    d32c:	e0fffd17 	ldw	r3,-12(fp)
    d330:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    d334:	e0bffd17 	ldw	r2,-12(fp)
    d338:	e0fffd17 	ldw	r3,-12(fp)
    d33c:	10c00015 	stw	r3,0(r2)
    d340:	e0bffb17 	ldw	r2,-20(fp)
    d344:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d348:	e0bffe17 	ldw	r2,-8(fp)
    d34c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    d350:	e037883a 	mov	sp,fp
    d354:	df000017 	ldw	fp,0(sp)
    d358:	dec00104 	addi	sp,sp,4
    d35c:	f800283a 	ret

0000d360 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d360:	defffb04 	addi	sp,sp,-20
    d364:	dfc00415 	stw	ra,16(sp)
    d368:	df000315 	stw	fp,12(sp)
    d36c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d370:	d0a02b17 	ldw	r2,-32596(gp)
    d374:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d378:	d0a71717 	ldw	r2,-25508(gp)
    d37c:	10800044 	addi	r2,r2,1
    d380:	d0a71715 	stw	r2,-25508(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d384:	00002e06 	br	d440 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    d388:	e0bffd17 	ldw	r2,-12(fp)
    d38c:	10800017 	ldw	r2,0(r2)
    d390:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d394:	e0bffd17 	ldw	r2,-12(fp)
    d398:	10800403 	ldbu	r2,16(r2)
    d39c:	10803fcc 	andi	r2,r2,255
    d3a0:	10000426 	beq	r2,zero,d3b4 <alt_tick+0x54>
    d3a4:	d0a71717 	ldw	r2,-25508(gp)
    d3a8:	1000021e 	bne	r2,zero,d3b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    d3ac:	e0bffd17 	ldw	r2,-12(fp)
    d3b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d3b4:	e0bffd17 	ldw	r2,-12(fp)
    d3b8:	10800217 	ldw	r2,8(r2)
    d3bc:	d0e71717 	ldw	r3,-25508(gp)
    d3c0:	18801d36 	bltu	r3,r2,d438 <alt_tick+0xd8>
    d3c4:	e0bffd17 	ldw	r2,-12(fp)
    d3c8:	10800403 	ldbu	r2,16(r2)
    d3cc:	10803fcc 	andi	r2,r2,255
    d3d0:	1000191e 	bne	r2,zero,d438 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    d3d4:	e0bffd17 	ldw	r2,-12(fp)
    d3d8:	10800317 	ldw	r2,12(r2)
    d3dc:	e0fffd17 	ldw	r3,-12(fp)
    d3e0:	18c00517 	ldw	r3,20(r3)
    d3e4:	1809883a 	mov	r4,r3
    d3e8:	103ee83a 	callr	r2
    d3ec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d3f0:	e0bfff17 	ldw	r2,-4(fp)
    d3f4:	1000031e 	bne	r2,zero,d404 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    d3f8:	e13ffd17 	ldw	r4,-12(fp)
    d3fc:	000d2c80 	call	d2c8 <alt_alarm_stop>
    d400:	00000d06 	br	d438 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    d404:	e0bffd17 	ldw	r2,-12(fp)
    d408:	10c00217 	ldw	r3,8(r2)
    d40c:	e0bfff17 	ldw	r2,-4(fp)
    d410:	1887883a 	add	r3,r3,r2
    d414:	e0bffd17 	ldw	r2,-12(fp)
    d418:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d41c:	e0bffd17 	ldw	r2,-12(fp)
    d420:	10c00217 	ldw	r3,8(r2)
    d424:	d0a71717 	ldw	r2,-25508(gp)
    d428:	1880032e 	bgeu	r3,r2,d438 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    d42c:	e0bffd17 	ldw	r2,-12(fp)
    d430:	00c00044 	movi	r3,1
    d434:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    d438:	e0bffe17 	ldw	r2,-8(fp)
    d43c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d440:	e0fffd17 	ldw	r3,-12(fp)
    d444:	d0a02b04 	addi	r2,gp,-32596
    d448:	18bfcf1e 	bne	r3,r2,d388 <__alt_data_end+0xfc00d388>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    d44c:	00047780 	call	4778 <OSTimeTick>
}
    d450:	e037883a 	mov	sp,fp
    d454:	dfc00117 	ldw	ra,4(sp)
    d458:	df000017 	ldw	fp,0(sp)
    d45c:	dec00204 	addi	sp,sp,8
    d460:	f800283a 	ret

0000d464 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    d464:	deffff04 	addi	sp,sp,-4
    d468:	df000015 	stw	fp,0(sp)
    d46c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d470:	000170fa 	wrctl	ienable,zero
}
    d474:	e037883a 	mov	sp,fp
    d478:	df000017 	ldw	fp,0(sp)
    d47c:	dec00104 	addi	sp,sp,4
    d480:	f800283a 	ret

0000d484 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    d484:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    d488:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    d48c:	d1271017 	ldw	r4,-25536(gp)

      stw ra,  0(sp)
    d490:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    d494:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    d498:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    d49c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    d4a0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    d4a4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    d4a8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    d4ac:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    d4b0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    d4b4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    d4b8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    d4bc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    d4c0:	000d8880 	call	d888 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    d4c4:	d1270b17 	ldw	r4,-25556(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    d4c8:	d1670307 	ldb	r5,-25588(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    d4cc:	d1271015 	stw	r4,-25536(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    d4d0:	d1670345 	stb	r5,-25587(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    d4d4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    d4d8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    d4dc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    d4e0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    d4e4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    d4e8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    d4ec:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    d4f0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    d4f4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    d4f8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    d4fc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    d500:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    d504:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    d508:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    d50c:	f800283a 	ret

0000d510 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    d510:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    d514:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    d518:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    d51c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    d520:	000d8880 	call	d888 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    d524:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    d528:	d4a70145 	stb	r18,-25595(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    d52c:	003fe506 	br	d4c4 <__alt_data_end+0xfc00d4c4>

0000d530 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    d530:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    d534:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    d538:	10800054 	ori	r2,r2,1
      wrctl status, r2
    d53c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    d540:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    d544:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    d548:	dec00204 	addi	sp,sp,8

      callr r2
    d54c:	103ee83a 	callr	r2

      nop
    d550:	0001883a 	nop

0000d554 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    d554:	defff704 	addi	sp,sp,-36
    d558:	dfc00815 	stw	ra,32(sp)
    d55c:	df000715 	stw	fp,28(sp)
    d560:	df000704 	addi	fp,sp,28
    d564:	e13ffc15 	stw	r4,-16(fp)
    d568:	e17ffd15 	stw	r5,-12(fp)
    d56c:	e1bffe15 	stw	r6,-8(fp)
    d570:	3805883a 	mov	r2,r7
    d574:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    d578:	e0fffe17 	ldw	r3,-8(fp)
    d57c:	00bfff04 	movi	r2,-4
    d580:	1884703a 	and	r2,r3,r2
    d584:	10bef704 	addi	r2,r2,-1060
    d588:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    d58c:	e0bff917 	ldw	r2,-28(fp)
    d590:	10000015 	stw	zero,0(r2)
    d594:	e0bff917 	ldw	r2,-28(fp)
    d598:	10c0bb04 	addi	r3,r2,748
    d59c:	e0bff917 	ldw	r2,-28(fp)
    d5a0:	10c00115 	stw	r3,4(r2)
    d5a4:	e0bff917 	ldw	r2,-28(fp)
    d5a8:	10c0d504 	addi	r3,r2,852
    d5ac:	e0bff917 	ldw	r2,-28(fp)
    d5b0:	10c00215 	stw	r3,8(r2)
    d5b4:	e0bff917 	ldw	r2,-28(fp)
    d5b8:	10c0ef04 	addi	r3,r2,956
    d5bc:	e0bff917 	ldw	r2,-28(fp)
    d5c0:	10c00315 	stw	r3,12(r2)
    d5c4:	e0bff917 	ldw	r2,-28(fp)
    d5c8:	10000415 	stw	zero,16(r2)
    d5cc:	e0bff917 	ldw	r2,-28(fp)
    d5d0:	10800504 	addi	r2,r2,20
    d5d4:	1009883a 	mov	r4,r2
    d5d8:	000b883a 	mov	r5,zero
    d5dc:	01800644 	movi	r6,25
    d5e0:	00028300 	call	2830 <memset>
    d5e4:	e0bff917 	ldw	r2,-28(fp)
    d5e8:	10000c15 	stw	zero,48(r2)
    d5ec:	e0bff917 	ldw	r2,-28(fp)
    d5f0:	00c00074 	movhi	r3,1
    d5f4:	18f8bb04 	addi	r3,r3,-7444
    d5f8:	10c00d15 	stw	r3,52(r2)
    d5fc:	e0bff917 	ldw	r2,-28(fp)
    d600:	10000e15 	stw	zero,56(r2)
    d604:	e0bff917 	ldw	r2,-28(fp)
    d608:	10000f15 	stw	zero,60(r2)
    d60c:	e0bff917 	ldw	r2,-28(fp)
    d610:	10001015 	stw	zero,64(r2)
    d614:	e0bff917 	ldw	r2,-28(fp)
    d618:	10001115 	stw	zero,68(r2)
    d61c:	e0bff917 	ldw	r2,-28(fp)
    d620:	10001215 	stw	zero,72(r2)
    d624:	e0bff917 	ldw	r2,-28(fp)
    d628:	10001315 	stw	zero,76(r2)
    d62c:	e0bff917 	ldw	r2,-28(fp)
    d630:	10001415 	stw	zero,80(r2)
    d634:	e0bff917 	ldw	r2,-28(fp)
    d638:	10001515 	stw	zero,84(r2)
    d63c:	e0bff917 	ldw	r2,-28(fp)
    d640:	10001615 	stw	zero,88(r2)
    d644:	e0bff917 	ldw	r2,-28(fp)
    d648:	10001715 	stw	zero,92(r2)
    d64c:	e0bff917 	ldw	r2,-28(fp)
    d650:	10001805 	stb	zero,96(r2)
    d654:	e0bff917 	ldw	r2,-28(fp)
    d658:	10801f04 	addi	r2,r2,124
    d65c:	1009883a 	mov	r4,r2
    d660:	000b883a 	mov	r5,zero
    d664:	01800904 	movi	r6,36
    d668:	00028300 	call	2830 <memset>
    d66c:	e0bff917 	ldw	r2,-28(fp)
    d670:	10002815 	stw	zero,160(r2)
    d674:	e0bff917 	ldw	r2,-28(fp)
    d678:	00c00044 	movi	r3,1
    d67c:	10c02915 	stw	r3,164(r2)
    d680:	10002a15 	stw	zero,168(r2)
    d684:	e0bff917 	ldw	r2,-28(fp)
    d688:	00ccc384 	movi	r3,13070
    d68c:	10c02b0d 	sth	r3,172(r2)
    d690:	e0bff917 	ldw	r2,-28(fp)
    d694:	00eaf344 	movi	r3,-21555
    d698:	10c02b8d 	sth	r3,174(r2)
    d69c:	e0bff917 	ldw	r2,-28(fp)
    d6a0:	00c48d04 	movi	r3,4660
    d6a4:	10c02c0d 	sth	r3,176(r2)
    d6a8:	e0bff917 	ldw	r2,-28(fp)
    d6ac:	00f99b44 	movi	r3,-6547
    d6b0:	10c02c8d 	sth	r3,178(r2)
    d6b4:	e0bff917 	ldw	r2,-28(fp)
    d6b8:	00f7bb04 	movi	r3,-8468
    d6bc:	10c02d0d 	sth	r3,180(r2)
    d6c0:	e0bff917 	ldw	r2,-28(fp)
    d6c4:	00c00144 	movi	r3,5
    d6c8:	10c02d8d 	sth	r3,182(r2)
    d6cc:	e0bff917 	ldw	r2,-28(fp)
    d6d0:	00c002c4 	movi	r3,11
    d6d4:	10c02e0d 	sth	r3,184(r2)
    d6d8:	e0bff917 	ldw	r2,-28(fp)
    d6dc:	10002f15 	stw	zero,188(r2)
    d6e0:	e0bff917 	ldw	r2,-28(fp)
    d6e4:	10003015 	stw	zero,192(r2)
    d6e8:	e0bff917 	ldw	r2,-28(fp)
    d6ec:	10003115 	stw	zero,196(r2)
    d6f0:	e0bff917 	ldw	r2,-28(fp)
    d6f4:	10003215 	stw	zero,200(r2)
    d6f8:	e0bff917 	ldw	r2,-28(fp)
    d6fc:	10003315 	stw	zero,204(r2)
    d700:	e0bff917 	ldw	r2,-28(fp)
    d704:	10003415 	stw	zero,208(r2)
    d708:	e0bff917 	ldw	r2,-28(fp)
    d70c:	10003e15 	stw	zero,248(r2)
    d710:	e0bff917 	ldw	r2,-28(fp)
    d714:	10003f15 	stw	zero,252(r2)
    d718:	e0bff917 	ldw	r2,-28(fp)
    d71c:	10004015 	stw	zero,256(r2)
    d720:	e0bff917 	ldw	r2,-28(fp)
    d724:	10004115 	stw	zero,260(r2)
    d728:	e0bff917 	ldw	r2,-28(fp)
    d72c:	10004215 	stw	zero,264(r2)
    d730:	e0bff917 	ldw	r2,-28(fp)
    d734:	10004315 	stw	zero,268(r2)
    d738:	e0bff917 	ldw	r2,-28(fp)
    d73c:	10004415 	stw	zero,272(r2)
    d740:	e0bff917 	ldw	r2,-28(fp)
    d744:	10004515 	stw	zero,276(r2)
    d748:	e0bff917 	ldw	r2,-28(fp)
    d74c:	10004615 	stw	zero,280(r2)
    d750:	e0bff917 	ldw	r2,-28(fp)
    d754:	10004715 	stw	zero,284(r2)
    d758:	e0bff917 	ldw	r2,-28(fp)
    d75c:	10003505 	stb	zero,212(r2)
    d760:	e0bff917 	ldw	r2,-28(fp)
    d764:	10003705 	stb	zero,220(r2)
    d768:	e0bff917 	ldw	r2,-28(fp)
    d76c:	10003d15 	stw	zero,244(r2)
    d770:	e0bff917 	ldw	r2,-28(fp)
    d774:	10005215 	stw	zero,328(r2)
    d778:	e0bff917 	ldw	r2,-28(fp)
    d77c:	10005315 	stw	zero,332(r2)
    d780:	e0bff917 	ldw	r2,-28(fp)
    d784:	10005415 	stw	zero,336(r2)
    d788:	e0bff917 	ldw	r2,-28(fp)
    d78c:	10005515 	stw	zero,340(r2)
    d790:	e0bff917 	ldw	r2,-28(fp)
    d794:	1000b515 	stw	zero,724(r2)
    d798:	e0bff917 	ldw	r2,-28(fp)
    d79c:	10007515 	stw	zero,468(r2)
    d7a0:	e0bff917 	ldw	r2,-28(fp)
    d7a4:	1000b715 	stw	zero,732(r2)
    d7a8:	e0bff917 	ldw	r2,-28(fp)
    d7ac:	1000b815 	stw	zero,736(r2)
    d7b0:	e0bff917 	ldw	r2,-28(fp)
    d7b4:	1000b915 	stw	zero,740(r2)
    d7b8:	e0bff917 	ldw	r2,-28(fp)
    d7bc:	1000ba15 	stw	zero,744(r2)
    d7c0:	e0bff917 	ldw	r2,-28(fp)
    d7c4:	1080bb04 	addi	r2,r2,748
    d7c8:	1009883a 	mov	r4,r2
    d7cc:	000b883a 	mov	r5,zero
    d7d0:	01804e04 	movi	r6,312
    d7d4:	00028300 	call	2830 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    d7d8:	e0bff917 	ldw	r2,-28(fp)
    d7dc:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    d7e0:	e0bffa17 	ldw	r2,-24(fp)
    d7e4:	10bff304 	addi	r2,r2,-52
    d7e8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    d7ec:	e0bffb17 	ldw	r2,-20(fp)
    d7f0:	10800c04 	addi	r2,r2,48
    d7f4:	e0fffc17 	ldw	r3,-16(fp)
    d7f8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    d7fc:	e0bffb17 	ldw	r2,-20(fp)
    d800:	10800b04 	addi	r2,r2,44
    d804:	e0fffd17 	ldw	r3,-12(fp)
    d808:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    d80c:	e0bffb17 	ldw	r2,-20(fp)
    d810:	10800a04 	addi	r2,r2,40
    d814:	e0fff917 	ldw	r3,-28(fp)
    d818:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    d81c:	00800074 	movhi	r2,1
    d820:	10b54c04 	addi	r2,r2,-10960
    d824:	10c00104 	addi	r3,r2,4
    d828:	e0bffb17 	ldw	r2,-20(fp)
    d82c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    d830:	e0bffb17 	ldw	r2,-20(fp)
}
    d834:	e037883a 	mov	sp,fp
    d838:	dfc00117 	ldw	ra,4(sp)
    d83c:	df000017 	ldw	fp,0(sp)
    d840:	dec00204 	addi	sp,sp,8
    d844:	f800283a 	ret

0000d848 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    d848:	defffe04 	addi	sp,sp,-8
    d84c:	df000115 	stw	fp,4(sp)
    d850:	df000104 	addi	fp,sp,4
    d854:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    d858:	e037883a 	mov	sp,fp
    d85c:	df000017 	ldw	fp,0(sp)
    d860:	dec00104 	addi	sp,sp,4
    d864:	f800283a 	ret

0000d868 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    d868:	defffe04 	addi	sp,sp,-8
    d86c:	df000115 	stw	fp,4(sp)
    d870:	df000104 	addi	fp,sp,4
    d874:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    d878:	e037883a 	mov	sp,fp
    d87c:	df000017 	ldw	fp,0(sp)
    d880:	dec00104 	addi	sp,sp,4
    d884:	f800283a 	ret

0000d888 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    d888:	deffff04 	addi	sp,sp,-4
    d88c:	df000015 	stw	fp,0(sp)
    d890:	d839883a 	mov	fp,sp
}
    d894:	e037883a 	mov	sp,fp
    d898:	df000017 	ldw	fp,0(sp)
    d89c:	dec00104 	addi	sp,sp,4
    d8a0:	f800283a 	ret

0000d8a4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    d8a4:	deffff04 	addi	sp,sp,-4
    d8a8:	df000015 	stw	fp,0(sp)
    d8ac:	d839883a 	mov	fp,sp
}
    d8b0:	e037883a 	mov	sp,fp
    d8b4:	df000017 	ldw	fp,0(sp)
    d8b8:	dec00104 	addi	sp,sp,4
    d8bc:	f800283a 	ret

0000d8c0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    d8c0:	deffff04 	addi	sp,sp,-4
    d8c4:	df000015 	stw	fp,0(sp)
    d8c8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    d8cc:	e037883a 	mov	sp,fp
    d8d0:	df000017 	ldw	fp,0(sp)
    d8d4:	dec00104 	addi	sp,sp,4
    d8d8:	f800283a 	ret

0000d8dc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    d8dc:	deffff04 	addi	sp,sp,-4
    d8e0:	df000015 	stw	fp,0(sp)
    d8e4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    d8e8:	e037883a 	mov	sp,fp
    d8ec:	df000017 	ldw	fp,0(sp)
    d8f0:	dec00104 	addi	sp,sp,4
    d8f4:	f800283a 	ret

0000d8f8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    d8f8:	deffff04 	addi	sp,sp,-4
    d8fc:	df000015 	stw	fp,0(sp)
    d900:	d839883a 	mov	fp,sp
}
    d904:	e037883a 	mov	sp,fp
    d908:	df000017 	ldw	fp,0(sp)
    d90c:	dec00104 	addi	sp,sp,4
    d910:	f800283a 	ret

0000d914 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    d914:	deffff04 	addi	sp,sp,-4
    d918:	df000015 	stw	fp,0(sp)
    d91c:	d839883a 	mov	fp,sp
}
    d920:	e037883a 	mov	sp,fp
    d924:	df000017 	ldw	fp,0(sp)
    d928:	dec00104 	addi	sp,sp,4
    d92c:	f800283a 	ret

0000d930 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    d930:	defffe04 	addi	sp,sp,-8
    d934:	df000115 	stw	fp,4(sp)
    d938:	df000104 	addi	fp,sp,4
    d93c:	e13fff15 	stw	r4,-4(fp)
}
    d940:	e037883a 	mov	sp,fp
    d944:	df000017 	ldw	fp,0(sp)
    d948:	dec00104 	addi	sp,sp,4
    d94c:	f800283a 	ret

0000d950 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d950:	defffa04 	addi	sp,sp,-24
    d954:	dfc00515 	stw	ra,20(sp)
    d958:	df000415 	stw	fp,16(sp)
    d95c:	df000404 	addi	fp,sp,16
    d960:	e13ffe15 	stw	r4,-8(fp)
    d964:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d968:	e0bfff17 	ldw	r2,-4(fp)
    d96c:	10800017 	ldw	r2,0(r2)
    d970:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d974:	e13ffe17 	ldw	r4,-8(fp)
    d978:	00003e00 	call	3e0 <strlen>
    d97c:	10800044 	addi	r2,r2,1
    d980:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d984:	00000d06 	br	d9bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d988:	e0bffc17 	ldw	r2,-16(fp)
    d98c:	10c00217 	ldw	r3,8(r2)
    d990:	e0bffd17 	ldw	r2,-12(fp)
    d994:	1809883a 	mov	r4,r3
    d998:	e17ffe17 	ldw	r5,-8(fp)
    d99c:	100d883a 	mov	r6,r2
    d9a0:	000dcc80 	call	dcc8 <memcmp>
    d9a4:	1000021e 	bne	r2,zero,d9b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d9a8:	e0bffc17 	ldw	r2,-16(fp)
    d9ac:	00000706 	br	d9cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d9b0:	e0bffc17 	ldw	r2,-16(fp)
    d9b4:	10800017 	ldw	r2,0(r2)
    d9b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d9bc:	e0fffc17 	ldw	r3,-16(fp)
    d9c0:	e0bfff17 	ldw	r2,-4(fp)
    d9c4:	18bff01e 	bne	r3,r2,d988 <__alt_data_end+0xfc00d988>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d9c8:	0005883a 	mov	r2,zero
}
    d9cc:	e037883a 	mov	sp,fp
    d9d0:	dfc00117 	ldw	ra,4(sp)
    d9d4:	df000017 	ldw	fp,0(sp)
    d9d8:	dec00204 	addi	sp,sp,8
    d9dc:	f800283a 	ret

0000d9e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d9e0:	defffb04 	addi	sp,sp,-20
    d9e4:	dfc00415 	stw	ra,16(sp)
    d9e8:	df000315 	stw	fp,12(sp)
    d9ec:	df000304 	addi	fp,sp,12
    d9f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d9f4:	00800074 	movhi	r2,1
    d9f8:	10bf5b04 	addi	r2,r2,-660
    d9fc:	10800017 	ldw	r2,0(r2)
    da00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    da04:	00003106 	br	dacc <alt_find_file+0xec>
  {
    len = strlen(next->name);
    da08:	e0bffd17 	ldw	r2,-12(fp)
    da0c:	10800217 	ldw	r2,8(r2)
    da10:	1009883a 	mov	r4,r2
    da14:	00003e00 	call	3e0 <strlen>
    da18:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    da1c:	e0bffd17 	ldw	r2,-12(fp)
    da20:	10c00217 	ldw	r3,8(r2)
    da24:	e0bffe17 	ldw	r2,-8(fp)
    da28:	10bfffc4 	addi	r2,r2,-1
    da2c:	1885883a 	add	r2,r3,r2
    da30:	10800003 	ldbu	r2,0(r2)
    da34:	10803fcc 	andi	r2,r2,255
    da38:	1080201c 	xori	r2,r2,128
    da3c:	10bfe004 	addi	r2,r2,-128
    da40:	10800bd8 	cmpnei	r2,r2,47
    da44:	1000031e 	bne	r2,zero,da54 <alt_find_file+0x74>
    {
      len -= 1;
    da48:	e0bffe17 	ldw	r2,-8(fp)
    da4c:	10bfffc4 	addi	r2,r2,-1
    da50:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    da54:	e0bffe17 	ldw	r2,-8(fp)
    da58:	e0ffff17 	ldw	r3,-4(fp)
    da5c:	1885883a 	add	r2,r3,r2
    da60:	10800003 	ldbu	r2,0(r2)
    da64:	10803fcc 	andi	r2,r2,255
    da68:	1080201c 	xori	r2,r2,128
    da6c:	10bfe004 	addi	r2,r2,-128
    da70:	10800be0 	cmpeqi	r2,r2,47
    da74:	1000081e 	bne	r2,zero,da98 <alt_find_file+0xb8>
    da78:	e0bffe17 	ldw	r2,-8(fp)
    da7c:	e0ffff17 	ldw	r3,-4(fp)
    da80:	1885883a 	add	r2,r3,r2
    da84:	10800003 	ldbu	r2,0(r2)
    da88:	10803fcc 	andi	r2,r2,255
    da8c:	1080201c 	xori	r2,r2,128
    da90:	10bfe004 	addi	r2,r2,-128
    da94:	10000a1e 	bne	r2,zero,dac0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    da98:	e0bffd17 	ldw	r2,-12(fp)
    da9c:	10c00217 	ldw	r3,8(r2)
    daa0:	e0bffe17 	ldw	r2,-8(fp)
    daa4:	1809883a 	mov	r4,r3
    daa8:	e17fff17 	ldw	r5,-4(fp)
    daac:	100d883a 	mov	r6,r2
    dab0:	000dcc80 	call	dcc8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    dab4:	1000021e 	bne	r2,zero,dac0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    dab8:	e0bffd17 	ldw	r2,-12(fp)
    dabc:	00000806 	br	dae0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    dac0:	e0bffd17 	ldw	r2,-12(fp)
    dac4:	10800017 	ldw	r2,0(r2)
    dac8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    dacc:	e0fffd17 	ldw	r3,-12(fp)
    dad0:	00800074 	movhi	r2,1
    dad4:	10bf5b04 	addi	r2,r2,-660
    dad8:	18bfcb1e 	bne	r3,r2,da08 <__alt_data_end+0xfc00da08>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    dadc:	0005883a 	mov	r2,zero
}
    dae0:	e037883a 	mov	sp,fp
    dae4:	dfc00117 	ldw	ra,4(sp)
    dae8:	df000017 	ldw	fp,0(sp)
    daec:	dec00204 	addi	sp,sp,8
    daf0:	f800283a 	ret

0000daf4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    daf4:	defff904 	addi	sp,sp,-28
    daf8:	dfc00615 	stw	ra,24(sp)
    dafc:	df000515 	stw	fp,20(sp)
    db00:	df000504 	addi	fp,sp,20
    db04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    db08:	00bffa04 	movi	r2,-24
    db0c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    db10:	00800074 	movhi	r2,1
    db14:	10865004 	addi	r2,r2,6464
    db18:	10800017 	ldw	r2,0(r2)
    db1c:	e0bffd15 	stw	r2,-12(fp)
    db20:	e03ffe0d 	sth	zero,-8(fp)
    db24:	e0fffe0b 	ldhu	r3,-8(fp)
    db28:	e0bffe84 	addi	r2,fp,-6
    db2c:	e13ffd17 	ldw	r4,-12(fp)
    db30:	180b883a 	mov	r5,r3
    db34:	100d883a 	mov	r6,r2
    db38:	000920c0 	call	920c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    db3c:	e03ffb15 	stw	zero,-20(fp)
    db40:	00001d06 	br	dbb8 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
    db44:	00c00074 	movhi	r3,1
    db48:	18fad104 	addi	r3,r3,-5308
    db4c:	e0bffb17 	ldw	r2,-20(fp)
    db50:	10800324 	muli	r2,r2,12
    db54:	1885883a 	add	r2,r3,r2
    db58:	10800017 	ldw	r2,0(r2)
    db5c:	1000131e 	bne	r2,zero,dbac <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
    db60:	00c00074 	movhi	r3,1
    db64:	18fad104 	addi	r3,r3,-5308
    db68:	e0bffb17 	ldw	r2,-20(fp)
    db6c:	10800324 	muli	r2,r2,12
    db70:	1885883a 	add	r2,r3,r2
    db74:	e0ffff17 	ldw	r3,-4(fp)
    db78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    db7c:	00800074 	movhi	r2,1
    db80:	10bf5f04 	addi	r2,r2,-644
    db84:	10c00017 	ldw	r3,0(r2)
    db88:	e0bffb17 	ldw	r2,-20(fp)
    db8c:	1880040e 	bge	r3,r2,dba0 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
    db90:	00800074 	movhi	r2,1
    db94:	10bf5f04 	addi	r2,r2,-644
    db98:	e0fffb17 	ldw	r3,-20(fp)
    db9c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    dba0:	e0bffb17 	ldw	r2,-20(fp)
    dba4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    dba8:	00000606 	br	dbc4 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    dbac:	e0bffb17 	ldw	r2,-20(fp)
    dbb0:	10800044 	addi	r2,r2,1
    dbb4:	e0bffb15 	stw	r2,-20(fp)
    dbb8:	e0bffb17 	ldw	r2,-20(fp)
    dbbc:	10800810 	cmplti	r2,r2,32
    dbc0:	103fe01e 	bne	r2,zero,db44 <__alt_data_end+0xfc00db44>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    dbc4:	00800074 	movhi	r2,1
    dbc8:	10865004 	addi	r2,r2,6464
    dbcc:	10800017 	ldw	r2,0(r2)
    dbd0:	1009883a 	mov	r4,r2
    dbd4:	00095e80 	call	95e8 <OSSemPost>

  return rc;
    dbd8:	e0bffc17 	ldw	r2,-16(fp)
}
    dbdc:	e037883a 	mov	sp,fp
    dbe0:	dfc00117 	ldw	ra,4(sp)
    dbe4:	df000017 	ldw	fp,0(sp)
    dbe8:	dec00204 	addi	sp,sp,8
    dbec:	f800283a 	ret

0000dbf0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    dbf0:	defffb04 	addi	sp,sp,-20
    dbf4:	df000415 	stw	fp,16(sp)
    dbf8:	df000404 	addi	fp,sp,16
    dbfc:	e13ffe15 	stw	r4,-8(fp)
    dc00:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    dc04:	e0bfff17 	ldw	r2,-4(fp)
    dc08:	10840070 	cmpltui	r2,r2,4097
    dc0c:	1000021e 	bne	r2,zero,dc18 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    dc10:	00840004 	movi	r2,4096
    dc14:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    dc18:	e0fffe17 	ldw	r3,-8(fp)
    dc1c:	e0bfff17 	ldw	r2,-4(fp)
    dc20:	1885883a 	add	r2,r3,r2
    dc24:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    dc28:	e0bffe17 	ldw	r2,-8(fp)
    dc2c:	e0bffc15 	stw	r2,-16(fp)
    dc30:	00000506 	br	dc48 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    dc34:	e0bffc17 	ldw	r2,-16(fp)
    dc38:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    dc3c:	e0bffc17 	ldw	r2,-16(fp)
    dc40:	10800804 	addi	r2,r2,32
    dc44:	e0bffc15 	stw	r2,-16(fp)
    dc48:	e0fffc17 	ldw	r3,-16(fp)
    dc4c:	e0bffd17 	ldw	r2,-12(fp)
    dc50:	18bff836 	bltu	r3,r2,dc34 <__alt_data_end+0xfc00dc34>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    dc54:	e0bffe17 	ldw	r2,-8(fp)
    dc58:	108007cc 	andi	r2,r2,31
    dc5c:	10000226 	beq	r2,zero,dc68 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    dc60:	e0bffc17 	ldw	r2,-16(fp)
    dc64:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    dc68:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    dc6c:	e037883a 	mov	sp,fp
    dc70:	df000017 	ldw	fp,0(sp)
    dc74:	dec00104 	addi	sp,sp,4
    dc78:	f800283a 	ret

0000dc7c <atexit>:
    dc7c:	200b883a 	mov	r5,r4
    dc80:	000d883a 	mov	r6,zero
    dc84:	0009883a 	mov	r4,zero
    dc88:	000f883a 	mov	r7,zero
    dc8c:	000dd441 	jmpi	dd44 <__register_exitproc>

0000dc90 <exit>:
    dc90:	defffe04 	addi	sp,sp,-8
    dc94:	000b883a 	mov	r5,zero
    dc98:	dc000015 	stw	r16,0(sp)
    dc9c:	dfc00115 	stw	ra,4(sp)
    dca0:	2021883a 	mov	r16,r4
    dca4:	000de600 	call	de60 <__call_exitprocs>
    dca8:	00800074 	movhi	r2,1
    dcac:	10bf5704 	addi	r2,r2,-676
    dcb0:	11000017 	ldw	r4,0(r2)
    dcb4:	20800f17 	ldw	r2,60(r4)
    dcb8:	10000126 	beq	r2,zero,dcc0 <exit+0x30>
    dcbc:	103ee83a 	callr	r2
    dcc0:	8009883a 	mov	r4,r16
    dcc4:	000e1180 	call	e118 <_exit>

0000dcc8 <memcmp>:
    dcc8:	01c000c4 	movi	r7,3
    dccc:	3980192e 	bgeu	r7,r6,dd34 <memcmp+0x6c>
    dcd0:	2144b03a 	or	r2,r4,r5
    dcd4:	11c4703a 	and	r2,r2,r7
    dcd8:	10000f26 	beq	r2,zero,dd18 <memcmp+0x50>
    dcdc:	21c00003 	ldbu	r7,0(r4)
    dce0:	28800003 	ldbu	r2,0(r5)
    dce4:	3880151e 	bne	r7,r2,dd3c <memcmp+0x74>
    dce8:	30ffff84 	addi	r3,r6,-2
    dcec:	01bfffc4 	movi	r6,-1
    dcf0:	00000406 	br	dd04 <memcmp+0x3c>
    dcf4:	21c00003 	ldbu	r7,0(r4)
    dcf8:	28800003 	ldbu	r2,0(r5)
    dcfc:	18ffffc4 	addi	r3,r3,-1
    dd00:	38800e1e 	bne	r7,r2,dd3c <memcmp+0x74>
    dd04:	21000044 	addi	r4,r4,1
    dd08:	29400044 	addi	r5,r5,1
    dd0c:	19bff91e 	bne	r3,r6,dcf4 <__alt_data_end+0xfc00dcf4>
    dd10:	0005883a 	mov	r2,zero
    dd14:	f800283a 	ret
    dd18:	20c00017 	ldw	r3,0(r4)
    dd1c:	28800017 	ldw	r2,0(r5)
    dd20:	1880041e 	bne	r3,r2,dd34 <memcmp+0x6c>
    dd24:	31bfff04 	addi	r6,r6,-4
    dd28:	21000104 	addi	r4,r4,4
    dd2c:	29400104 	addi	r5,r5,4
    dd30:	39bff936 	bltu	r7,r6,dd18 <__alt_data_end+0xfc00dd18>
    dd34:	303fe91e 	bne	r6,zero,dcdc <__alt_data_end+0xfc00dcdc>
    dd38:	003ff506 	br	dd10 <__alt_data_end+0xfc00dd10>
    dd3c:	3885c83a 	sub	r2,r7,r2
    dd40:	f800283a 	ret

0000dd44 <__register_exitproc>:
    dd44:	defffa04 	addi	sp,sp,-24
    dd48:	00800074 	movhi	r2,1
    dd4c:	10bf5704 	addi	r2,r2,-676
    dd50:	dc000315 	stw	r16,12(sp)
    dd54:	14000017 	ldw	r16,0(r2)
    dd58:	dc400415 	stw	r17,16(sp)
    dd5c:	dfc00515 	stw	ra,20(sp)
    dd60:	80805217 	ldw	r2,328(r16)
    dd64:	2023883a 	mov	r17,r4
    dd68:	10003a26 	beq	r2,zero,de54 <__register_exitproc+0x110>
    dd6c:	10c00117 	ldw	r3,4(r2)
    dd70:	020007c4 	movi	r8,31
    dd74:	40c0190e 	bge	r8,r3,dddc <__register_exitproc+0x98>
    dd78:	00800034 	movhi	r2,0
    dd7c:	10800004 	addi	r2,r2,0
    dd80:	1000061e 	bne	r2,zero,dd9c <__register_exitproc+0x58>
    dd84:	00bfffc4 	movi	r2,-1
    dd88:	dfc00517 	ldw	ra,20(sp)
    dd8c:	dc400417 	ldw	r17,16(sp)
    dd90:	dc000317 	ldw	r16,12(sp)
    dd94:	dec00604 	addi	sp,sp,24
    dd98:	f800283a 	ret
    dd9c:	01006404 	movi	r4,400
    dda0:	d9400015 	stw	r5,0(sp)
    dda4:	d9800115 	stw	r6,4(sp)
    dda8:	d9c00215 	stw	r7,8(sp)
    ddac:	00000000 	call	0 <__reset>
    ddb0:	d9400017 	ldw	r5,0(sp)
    ddb4:	d9800117 	ldw	r6,4(sp)
    ddb8:	d9c00217 	ldw	r7,8(sp)
    ddbc:	103ff126 	beq	r2,zero,dd84 <__alt_data_end+0xfc00dd84>
    ddc0:	81005217 	ldw	r4,328(r16)
    ddc4:	10000115 	stw	zero,4(r2)
    ddc8:	0007883a 	mov	r3,zero
    ddcc:	11000015 	stw	r4,0(r2)
    ddd0:	80805215 	stw	r2,328(r16)
    ddd4:	10006215 	stw	zero,392(r2)
    ddd8:	10006315 	stw	zero,396(r2)
    dddc:	88000d1e 	bne	r17,zero,de14 <__register_exitproc+0xd0>
    dde0:	19000084 	addi	r4,r3,2
    dde4:	2109883a 	add	r4,r4,r4
    dde8:	18c00044 	addi	r3,r3,1
    ddec:	2109883a 	add	r4,r4,r4
    ddf0:	10c00115 	stw	r3,4(r2)
    ddf4:	1105883a 	add	r2,r2,r4
    ddf8:	11400015 	stw	r5,0(r2)
    ddfc:	0005883a 	mov	r2,zero
    de00:	dfc00517 	ldw	ra,20(sp)
    de04:	dc400417 	ldw	r17,16(sp)
    de08:	dc000317 	ldw	r16,12(sp)
    de0c:	dec00604 	addi	sp,sp,24
    de10:	f800283a 	ret
    de14:	18c9883a 	add	r4,r3,r3
    de18:	2109883a 	add	r4,r4,r4
    de1c:	1109883a 	add	r4,r2,r4
    de20:	21802215 	stw	r6,136(r4)
    de24:	01800044 	movi	r6,1
    de28:	12006217 	ldw	r8,392(r2)
    de2c:	30cc983a 	sll	r6,r6,r3
    de30:	4190b03a 	or	r8,r8,r6
    de34:	12006215 	stw	r8,392(r2)
    de38:	21c04215 	stw	r7,264(r4)
    de3c:	01000084 	movi	r4,2
    de40:	893fe71e 	bne	r17,r4,dde0 <__alt_data_end+0xfc00dde0>
    de44:	11006317 	ldw	r4,396(r2)
    de48:	218cb03a 	or	r6,r4,r6
    de4c:	11806315 	stw	r6,396(r2)
    de50:	003fe306 	br	dde0 <__alt_data_end+0xfc00dde0>
    de54:	80805304 	addi	r2,r16,332
    de58:	80805215 	stw	r2,328(r16)
    de5c:	003fc306 	br	dd6c <__alt_data_end+0xfc00dd6c>

0000de60 <__call_exitprocs>:
    de60:	00800074 	movhi	r2,1
    de64:	10bf5704 	addi	r2,r2,-676
    de68:	10800017 	ldw	r2,0(r2)
    de6c:	defff304 	addi	sp,sp,-52
    de70:	df000b15 	stw	fp,44(sp)
    de74:	d8800015 	stw	r2,0(sp)
    de78:	10805204 	addi	r2,r2,328
    de7c:	dd400815 	stw	r21,32(sp)
    de80:	dfc00c15 	stw	ra,48(sp)
    de84:	ddc00a15 	stw	r23,40(sp)
    de88:	dd800915 	stw	r22,36(sp)
    de8c:	dd000715 	stw	r20,28(sp)
    de90:	dcc00615 	stw	r19,24(sp)
    de94:	dc800515 	stw	r18,20(sp)
    de98:	dc400415 	stw	r17,16(sp)
    de9c:	dc000315 	stw	r16,12(sp)
    dea0:	d9000115 	stw	r4,4(sp)
    dea4:	2839883a 	mov	fp,r5
    dea8:	d8800215 	stw	r2,8(sp)
    deac:	057fffc4 	movi	r21,-1
    deb0:	d8800017 	ldw	r2,0(sp)
    deb4:	14805217 	ldw	r18,328(r2)
    deb8:	90001826 	beq	r18,zero,df1c <__call_exitprocs+0xbc>
    debc:	ddc00217 	ldw	r23,8(sp)
    dec0:	90c00117 	ldw	r3,4(r18)
    dec4:	1c3fffc4 	addi	r16,r3,-1
    dec8:	80001116 	blt	r16,zero,df10 <__call_exitprocs+0xb0>
    decc:	18c00044 	addi	r3,r3,1
    ded0:	8427883a 	add	r19,r16,r16
    ded4:	18c7883a 	add	r3,r3,r3
    ded8:	95802204 	addi	r22,r18,136
    dedc:	9ce7883a 	add	r19,r19,r19
    dee0:	18c7883a 	add	r3,r3,r3
    dee4:	b4e7883a 	add	r19,r22,r19
    dee8:	90e3883a 	add	r17,r18,r3
    deec:	e0001726 	beq	fp,zero,df4c <__call_exitprocs+0xec>
    def0:	8c87c83a 	sub	r3,r17,r18
    def4:	b0c7883a 	add	r3,r22,r3
    def8:	18c01e17 	ldw	r3,120(r3)
    defc:	1f001326 	beq	r3,fp,df4c <__call_exitprocs+0xec>
    df00:	843fffc4 	addi	r16,r16,-1
    df04:	9cffff04 	addi	r19,r19,-4
    df08:	8c7fff04 	addi	r17,r17,-4
    df0c:	857ff71e 	bne	r16,r21,deec <__alt_data_end+0xfc00deec>
    df10:	00800034 	movhi	r2,0
    df14:	10800004 	addi	r2,r2,0
    df18:	10002a1e 	bne	r2,zero,dfc4 <__call_exitprocs+0x164>
    df1c:	dfc00c17 	ldw	ra,48(sp)
    df20:	df000b17 	ldw	fp,44(sp)
    df24:	ddc00a17 	ldw	r23,40(sp)
    df28:	dd800917 	ldw	r22,36(sp)
    df2c:	dd400817 	ldw	r21,32(sp)
    df30:	dd000717 	ldw	r20,28(sp)
    df34:	dcc00617 	ldw	r19,24(sp)
    df38:	dc800517 	ldw	r18,20(sp)
    df3c:	dc400417 	ldw	r17,16(sp)
    df40:	dc000317 	ldw	r16,12(sp)
    df44:	dec00d04 	addi	sp,sp,52
    df48:	f800283a 	ret
    df4c:	91000117 	ldw	r4,4(r18)
    df50:	88c00017 	ldw	r3,0(r17)
    df54:	213fffc4 	addi	r4,r4,-1
    df58:	24001526 	beq	r4,r16,dfb0 <__call_exitprocs+0x150>
    df5c:	88000015 	stw	zero,0(r17)
    df60:	183fe726 	beq	r3,zero,df00 <__alt_data_end+0xfc00df00>
    df64:	00800044 	movi	r2,1
    df68:	1408983a 	sll	r4,r2,r16
    df6c:	91406217 	ldw	r5,392(r18)
    df70:	95000117 	ldw	r20,4(r18)
    df74:	214a703a 	and	r5,r4,r5
    df78:	28000b26 	beq	r5,zero,dfa8 <__call_exitprocs+0x148>
    df7c:	91406317 	ldw	r5,396(r18)
    df80:	2148703a 	and	r4,r4,r5
    df84:	20000c1e 	bne	r4,zero,dfb8 <__call_exitprocs+0x158>
    df88:	99400017 	ldw	r5,0(r19)
    df8c:	d9000117 	ldw	r4,4(sp)
    df90:	183ee83a 	callr	r3
    df94:	90c00117 	ldw	r3,4(r18)
    df98:	1d3fc51e 	bne	r3,r20,deb0 <__alt_data_end+0xfc00deb0>
    df9c:	b8c00017 	ldw	r3,0(r23)
    dfa0:	1cbfd726 	beq	r3,r18,df00 <__alt_data_end+0xfc00df00>
    dfa4:	003fc206 	br	deb0 <__alt_data_end+0xfc00deb0>
    dfa8:	183ee83a 	callr	r3
    dfac:	003ff906 	br	df94 <__alt_data_end+0xfc00df94>
    dfb0:	94000115 	stw	r16,4(r18)
    dfb4:	003fea06 	br	df60 <__alt_data_end+0xfc00df60>
    dfb8:	99000017 	ldw	r4,0(r19)
    dfbc:	183ee83a 	callr	r3
    dfc0:	003ff406 	br	df94 <__alt_data_end+0xfc00df94>
    dfc4:	90c00117 	ldw	r3,4(r18)
    dfc8:	1800081e 	bne	r3,zero,dfec <__call_exitprocs+0x18c>
    dfcc:	90c00017 	ldw	r3,0(r18)
    dfd0:	18000a26 	beq	r3,zero,dffc <__call_exitprocs+0x19c>
    dfd4:	9009883a 	mov	r4,r18
    dfd8:	b8c00015 	stw	r3,0(r23)
    dfdc:	00000000 	call	0 <__reset>
    dfe0:	bc800017 	ldw	r18,0(r23)
    dfe4:	903fb61e 	bne	r18,zero,dec0 <__alt_data_end+0xfc00dec0>
    dfe8:	003fcc06 	br	df1c <__alt_data_end+0xfc00df1c>
    dfec:	90c00017 	ldw	r3,0(r18)
    dff0:	902f883a 	mov	r23,r18
    dff4:	1825883a 	mov	r18,r3
    dff8:	003ffa06 	br	dfe4 <__alt_data_end+0xfc00dfe4>
    dffc:	0007883a 	mov	r3,zero
    e000:	003ffb06 	br	dff0 <__alt_data_end+0xfc00dff0>

0000e004 <udivmodsi4>:
    e004:	2900182e 	bgeu	r5,r4,e068 <udivmodsi4+0x64>
    e008:	28001716 	blt	r5,zero,e068 <udivmodsi4+0x64>
    e00c:	00800804 	movi	r2,32
    e010:	00c00044 	movi	r3,1
    e014:	00000206 	br	e020 <udivmodsi4+0x1c>
    e018:	10001126 	beq	r2,zero,e060 <udivmodsi4+0x5c>
    e01c:	28000516 	blt	r5,zero,e034 <udivmodsi4+0x30>
    e020:	294b883a 	add	r5,r5,r5
    e024:	10bfffc4 	addi	r2,r2,-1
    e028:	18c7883a 	add	r3,r3,r3
    e02c:	293ffa36 	bltu	r5,r4,e018 <__alt_data_end+0xfc00e018>
    e030:	18000b26 	beq	r3,zero,e060 <udivmodsi4+0x5c>
    e034:	0005883a 	mov	r2,zero
    e038:	21400236 	bltu	r4,r5,e044 <udivmodsi4+0x40>
    e03c:	2149c83a 	sub	r4,r4,r5
    e040:	10c4b03a 	or	r2,r2,r3
    e044:	1806d07a 	srli	r3,r3,1
    e048:	280ad07a 	srli	r5,r5,1
    e04c:	183ffa1e 	bne	r3,zero,e038 <__alt_data_end+0xfc00e038>
    e050:	3000011e 	bne	r6,zero,e058 <udivmodsi4+0x54>
    e054:	f800283a 	ret
    e058:	2005883a 	mov	r2,r4
    e05c:	f800283a 	ret
    e060:	0005883a 	mov	r2,zero
    e064:	003ffa06 	br	e050 <__alt_data_end+0xfc00e050>
    e068:	00c00044 	movi	r3,1
    e06c:	0005883a 	mov	r2,zero
    e070:	003ff106 	br	e038 <__alt_data_end+0xfc00e038>

0000e074 <__divsi3>:
    e074:	deffff04 	addi	sp,sp,-4
    e078:	dfc00015 	stw	ra,0(sp)
    e07c:	20000916 	blt	r4,zero,e0a4 <__divsi3+0x30>
    e080:	000f883a 	mov	r7,zero
    e084:	28000a16 	blt	r5,zero,e0b0 <__divsi3+0x3c>
    e088:	000d883a 	mov	r6,zero
    e08c:	000e0040 	call	e004 <udivmodsi4>
    e090:	38000126 	beq	r7,zero,e098 <__divsi3+0x24>
    e094:	0085c83a 	sub	r2,zero,r2
    e098:	dfc00017 	ldw	ra,0(sp)
    e09c:	dec00104 	addi	sp,sp,4
    e0a0:	f800283a 	ret
    e0a4:	0109c83a 	sub	r4,zero,r4
    e0a8:	01c00044 	movi	r7,1
    e0ac:	283ff60e 	bge	r5,zero,e088 <__alt_data_end+0xfc00e088>
    e0b0:	014bc83a 	sub	r5,zero,r5
    e0b4:	39c0005c 	xori	r7,r7,1
    e0b8:	003ff306 	br	e088 <__alt_data_end+0xfc00e088>

0000e0bc <__modsi3>:
    e0bc:	20000316 	blt	r4,zero,e0cc <__modsi3+0x10>
    e0c0:	28000c16 	blt	r5,zero,e0f4 <__modsi3+0x38>
    e0c4:	01800044 	movi	r6,1
    e0c8:	000e0041 	jmpi	e004 <udivmodsi4>
    e0cc:	deffff04 	addi	sp,sp,-4
    e0d0:	dfc00015 	stw	ra,0(sp)
    e0d4:	0109c83a 	sub	r4,zero,r4
    e0d8:	28000916 	blt	r5,zero,e100 <__modsi3+0x44>
    e0dc:	01800044 	movi	r6,1
    e0e0:	000e0040 	call	e004 <udivmodsi4>
    e0e4:	0085c83a 	sub	r2,zero,r2
    e0e8:	dfc00017 	ldw	ra,0(sp)
    e0ec:	dec00104 	addi	sp,sp,4
    e0f0:	f800283a 	ret
    e0f4:	014bc83a 	sub	r5,zero,r5
    e0f8:	01800044 	movi	r6,1
    e0fc:	000e0041 	jmpi	e004 <udivmodsi4>
    e100:	014bc83a 	sub	r5,zero,r5
    e104:	003ff506 	br	e0dc <__alt_data_end+0xfc00e0dc>

0000e108 <__udivsi3>:
    e108:	000d883a 	mov	r6,zero
    e10c:	000e0041 	jmpi	e004 <udivmodsi4>

0000e110 <__umodsi3>:
    e110:	01800044 	movi	r6,1
    e114:	000e0041 	jmpi	e004 <udivmodsi4>

0000e118 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e118:	defffd04 	addi	sp,sp,-12
    e11c:	df000215 	stw	fp,8(sp)
    e120:	df000204 	addi	fp,sp,8
    e124:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    e128:	00800074 	movhi	r2,1
    e12c:	10865844 	addi	r2,r2,6497
    e130:	10000005 	stb	zero,0(r2)
    e134:	e0bfff17 	ldw	r2,-4(fp)
    e138:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    e13c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e140:	10000226 	beq	r2,zero,e14c <_exit+0x34>
    ALT_SIM_FAIL();
    e144:	002af070 	cmpltui	zero,zero,43969
    e148:	00000106 	br	e150 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    e14c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e150:	003fff06 	br	e150 <__alt_data_end+0xfc00e150>
