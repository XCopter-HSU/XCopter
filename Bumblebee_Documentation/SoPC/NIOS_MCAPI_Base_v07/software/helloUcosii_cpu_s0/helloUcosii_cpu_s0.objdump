
helloUcosii_cpu_s0.elf:     file format elf32-littlenios2
helloUcosii_cpu_s0.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f1a8 memsz 0x0000f1a8 flags r-x
    LOAD off    0x000101c8 vaddr 0x0000f1c8 paddr 0x00010c98 align 2**12
         filesz 0x00001ad0 memsz 0x00001ad0 flags rw-
    LOAD off    0x00012768 vaddr 0x00012768 paddr 0x00012768 align 2**12
         filesz 0x00000000 memsz 0x00007f1c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ed64  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002a4  0000ef24  0000ef24  0000ff24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ad0  0000f1c8  00010c98  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007f1c  00012768  00012768  00012768  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011c98  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ca0  00000000  00000000  00011cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002454c  00000000  00000000  00012960  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008a67  00000000  00000000  00036eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a017  00000000  00000000  0003f913  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001e38  00000000  00000000  0004992c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000356b  00000000  00000000  0004b764  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000082e5  00000000  00000000  0004eccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  00056fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  00056fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000006  00000000  00000000  0005b4a9  2**0
                  CONTENTS, READONLY
 17 .cpu          00000006  00000000  00000000  0005b4af  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005b4b5  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005b4b6  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000010  00000000  00000000  0005b4b7  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000010  00000000  00000000  0005b4c7  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000010  00000000  00000000  0005b4d7  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000a  00000000  00000000  0005b4e7  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000042  00000000  00000000  0005b4f1  2**0
                  CONTENTS, READONLY
 25 .jdi          00011508  00000000  00000000  0005b533  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     002e2898  00000000  00000000  0006ca3b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
0000ef24 l    d  .rodata	00000000 .rodata
0000f1c8 l    d  .rwdata	00000000 .rwdata
00012768 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UcosiiBSP_for_cpu_s0//obj/HAL/src/crt0.o
000001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0000f1c8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00001da8 l     F .text	00000008 __fp_lock
00001db0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00002d74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00002e8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00002eb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00002fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000030a4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003190 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000337c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00010c0c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000035cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00010c10 l     O .rwdata	00000004 lockid
00012788 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00010c14 l     O .rwdata	00000004 lockid
00012790 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00005014 l     F .text	00000044 OS_InitMisc
00005058 l     F .text	0000006c OS_InitRdyList
000051bc l     F .text	000000e0 OS_InitTCBList
00004f38 l     F .text	000000dc OS_InitEventList
000050c4 l     F .text	0000007c OS_InitTaskIdle
00005140 l     F .text	0000007c OS_InitTaskStat
00005428 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00007240 l     F .text	0000010c OS_FlagTaskRdy
00006f9c l     F .text	000001c0 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b7d8 l     F .text	00000038 alt_dev_reg
0000fb78 l     O .rwdata	0000106c jtag_uart_cpu_s0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000bb30 l     F .text	000002b0 altera_avalon_jtag_uart_irq
0000bde0 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c5dc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c830 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ca08 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ccf0 l     F .text	00000050 alt_get_errno
0000cd40 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000dd30 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000e824 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00010c62 g     O .rwdata	00000002 OSTaskNameSize
00002c38 g     F .text	00000064 _isatty_r
000032b0 g     F .text	000000cc alt_main
0000ee9c g     F .text	00000044 __ashldi3
00000318 g     F .text	00000084 _puts_r
0001a3f4 g     O .bss	00000100 alt_irq
00002c9c g     F .text	0000006c _lseek_r
00007aa4 g     F .text	000000d0 OS_MemInit
00010c98 g       *ABS*	00000000 __flash_rwdata_start
0000b774 g     F .text	00000064 OSTimeSet
00003c6c g     F .text	0000063c OSEventPendMulti
0001a684 g       *ABS*	00000000 __alt_heap_start
0000d4e0 g     F .text	00000020 OSTaskCreateHook
00012820 g     O .bss	00002000 task1_stk
00010c3a g     O .rwdata	00000002 OSMboxEn
000042fc g     F .text	0000007c OSIntEnter
0000294c g     F .text	0000005c __sseek
00001e38 g     F .text	0000010c __sinit
00010c4a g     O .rwdata	00000002 OSQEn
00001dc4 g     F .text	00000064 __sfmoreglue
00003934 g     F .text	000000d4 __malloc_unlock
0000d53c g     F .text	0000001c OSTaskStatHook
00012798 g     O .bss	00000001 OSLockNesting
00010c88 g     O .rwdata	00000002 OSDataSize
00012799 g     O .bss	00000001 OSRunning
00001294 g     F .text	00000128 memmove
0000d574 g     F .text	0000001c OSInitHookBegin
00010c80 g     O .rwdata	00000002 OSTmrSize
00001e28 g     F .text	00000010 _cleanup
0001279c g     O .bss	00000004 OSIdleCtr
0000d1c8 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00005754 g     F .text	000002d8 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00010c86 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00010c26 g     O .rwdata	00000002 OSEventSize
000127a0 g     O .bss	00000001 OSPrioHighRdy
00002bd0 g     F .text	00000068 _fstat_r
0000d500 g     F .text	00000020 OSTaskDelHook
00012774 g     O .bss	00000004 errno
0000d1a8 g       .text	00000000 OSStartHighRdy
00009fa4 g     F .text	000001f4 OSTaskCreateExt
00006adc g     F .text	00000068 OSFlagPendGetFlagsRdy
00010c66 g     O .rwdata	00000002 OSTaskStatStkSize
00005bb8 g     F .text	00000308 OSFlagAccept
0000817c g     F .text	000000b8 OSQFlush
00007b74 g     F .text	00000140 OSQAccept
00012780 g     O .bss	00000004 alt_argv
00018be4 g       *ABS*	00000000 _gp
00009de8 g     F .text	000001bc OSTaskCreate
000098c0 g     F .text	00000528 OSTaskChangePrio
00012794 g     O .bss	00000004 alt_heapsem
00005a2c g     F .text	0000018c OSDebugInit
0000a198 g     F .text	000003dc OSTaskDel
0000f9f8 g     O .rwdata	00000180 alt_fd_list
00016820 g     O .bss	00000370 OSFlagTbl
00004d28 g     F .text	000000b0 OS_EventTaskRemove
0000d5e8 g     F .text	00000090 alt_find_dev
0000119c g     F .text	000000f8 memcpy
00010c50 g     O .rwdata	00000002 OSRdyTblSize
00001db8 g     F .text	0000000c _cleanup_r
0000cac8 g     F .text	00000078 alt_io_redirect
0000ef24 g       *ABS*	00000000 __DTOR_END__
0000039c g     F .text	00000014 puts
00003a08 g     F .text	00000120 OSEventNameGet
00010c34 g     O .rwdata	00000002 OSFlagMax
00004378 g     F .text	000000f4 OSIntExit
00010c6e g     O .rwdata	00000002 OSTCBSize
000127a1 g     O .bss	00000001 OSPrioCur
0000c048 g     F .text	000002c4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000e944 g     F .text	00000008 __udivsi3
00003004 g     F .text	000000a0 isatty
00010c54 g     O .rwdata	00000002 OSStkWidth
00010c48 g     O .rwdata	00000002 OSPtrSize
00010c28 g     O .rwdata	00000002 OSEventTblSize
0000dcac g     F .text	00000084 __fixunsdfsi
0000d11c g       .text	00000000 OSCtxSw
0000d888 g     F .text	0000008c alt_icache_flush
00012770 g     O .bss	00000004 __malloc_top_pad
000127a4 g     O .bss	00000004 OSTCBList
00012778 g     O .bss	00000004 alt_fd_list_lock
0000043c g     F .text	000004e4 __sfvwrite_r
00016b90 g     O .bss	00000c30 OSMemTbl
000127a8 g     O .bss	00000001 OSTickStepState
000019b8 g     F .text	00000064 _sbrk_r
00010c4c g     O .rwdata	00000002 OSQMax
000177c0 g     O .bss	00000800 OSTaskStatStk
000076d0 g     F .text	000000f8 OSMemNameGet
00010c2c g     O .rwdata	00000002 OSFlagEn
00002d08 g     F .text	0000006c _read_r
00010c72 g     O .rwdata	00000002 OSTimeTickHookEn
000086a4 g     F .text	00000168 OSQPost
0000734c g     F .text	000000a0 OS_FlagUnlink
00010c04 g     O .rwdata	00000004 alt_max_fd
000052f0 g     F .text	0000006c OS_MemCopy
0000ec84 g     F .text	00000104 __unpack_d
0000535c g     F .text	000000cc OS_Sched
00002a80 g     F .text	0000013c _fclose_r
000075e0 g     F .text	000000f0 OSMemGet
0000a874 g     F .text	000001c4 OSTaskNameSet
00001d78 g     F .text	00000030 fflush
0001276c g     O .bss	00000004 __malloc_max_sbrked_mem
000127ac g     O .bss	00000004 OSCtxSwCtr
0000d558 g     F .text	0000001c OSTimeTickHook
0000cb40 g     F .text	000001b0 alt_irq_register
00010c36 g     O .rwdata	00000002 OSFlagNameSize
00004dd8 g     F .text	000000f8 OS_EventTaskRemoveMulti
0000e084 g     F .text	00000054 __adddf3
00004be0 g     F .text	00000148 OS_EventTaskWaitMulti
00010c4e g     O .rwdata	00000002 OSQSize
000031e0 g     F .text	000000d0 lseek
000091b8 g     F .text	0000026c OSSemPend
00010be4 g     O .rwdata	00000004 _global_impure_ptr
000013bc g     F .text	000005fc _realloc_r
00010c38 g     O .rwdata	00000002 OSLowestPrio
0001a684 g       *ABS*	00000000 __bss_end
0000d5c8 g     F .text	00000020 OSTCBInitHook
00010c7e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000cff8 g     F .text	00000104 alt_tick
00010c20 g     O .rwdata	00000002 OSEventEn
00010c7a g     O .rwdata	00000002 OSTmrCfgNameSize
0000e708 g     F .text	0000011c __floatunsidf
00002050 g     F .text	00000018 __fp_lock_all
0000715c g     F .text	000000e4 OS_FlagInit
0000cf60 g     F .text	00000098 alt_alarm_stop
00010c5c g     O .rwdata	00000002 OSTaskIdleStkSize
000127ec g     O .bss	00000004 alt_irq_active
00008d98 g     F .text	000000b0 OSSemAccept
000078e4 g     F .text	000000d8 OSMemPut
000073ec g     F .text	000001f4 OSMemCreate
000127b0 g     O .bss	00000004 OSIdleCtrMax
000000ec g     F .exceptions	000000d4 alt_irq_handler
0000f9d0 g     O .rwdata	00000028 alt_dev_null
00010c70 g     O .rwdata	00000002 OSTicksPerSec
0000d11c g       .text	00000000 OSIntCtxSw
0000c814 g     F .text	0000001c alt_dcache_flush_all
0000e634 g     F .text	000000d4 __fixdfsi
000127b4 g     O .bss	00000004 OSTCBFreeList
00010c98 g       *ABS*	00000000 __ram_rwdata_end
00009424 g     F .text	00000174 OSSemPendAbort
00010bfc g     O .rwdata	00000008 alt_dev_list
0000361c g     F .text	000000ec write
00010c74 g     O .rwdata	00000002 OSVersionNbr
0000f1c8 g       *ABS*	00000000 __ram_rodata_end
00002f08 g     F .text	000000ac fstat
0000ee58 g     F .text	00000044 __lshrdi3
00010c1c g     O .rwdata	00000004 OSEndiannessTest
0000e94c g     F .text	00000008 __umodsi3
00010c2e g     O .rwdata	00000002 OSFlagGrpSize
0001a684 g       *ABS*	00000000 end
0000ba00 g     F .text	00000130 altera_avalon_jtag_uart_init
000055c4 g     F .text	000000c8 OS_TaskStat
0000ef24 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000c654 g     F .text	00000080 alt_avalon_timer_sc_init
0000e9b4 g     F .text	000000ac __clzsi2
0000c30c g     F .text	000002d0 altera_avalon_jtag_uart_write
00002040 g     F .text	00000004 __sfp_lock_acquire
000010a4 g     F .text	000000f8 memchr
0000529c g     F .text	00000054 OS_MemClr
0000d1ec g     F .text	000002f4 OSTaskStkInit
000001fc g     F .text	00000038 task1
000021bc g     F .text	000002d0 _free_r
00004940 g     F .text	00000198 OS_EventTaskRdy
0000db0c g     F .text	000001a0 __call_exitprocs
000127b8 g     O .bss	00000001 OSCPUUsage
00010bec g     O .rwdata	00000004 __malloc_sbrk_base
000001c0 g     F .text	0000003c _start
00000234 g     F .text	00000038 task2
000127f0 g     O .bss	00000004 _alt_tick_rate
00008234 g     F .text	000002fc OSQPend
0000b1ac g     F .text	00000148 OSTimeDly
000127f4 g     O .bss	00000004 _alt_nticks
000033cc g     F .text	000000f0 read
0000b844 g     F .text	00000058 alt_sys_init
0000d9dc g     F .text	00000130 __register_exitproc
000127b9 g     O .bss	00000001 OSTaskCtr
0000b2f4 g     F .text	00000230 OSTimeDlyHMSM
0000beec g     F .text	00000068 altera_avalon_jtag_uart_close
0000f1c8 g       *ABS*	00000000 __ram_rwdata_start
0000ef24 g       *ABS*	00000000 __ram_rodata_start
000127f8 g     O .bss	00000028 __malloc_current_mallinfo
00010c22 g     O .rwdata	00000002 OSEventMax
00009598 g     F .text	00000110 OSSemPost
000044f4 g     F .text	000000d8 OSSchedUnlock
0000b89c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000d78c g     F .text	000000fc alt_get_fd
000127bc g     O .bss	00000004 OSMemFreeList
00004638 g     F .text	000000ac OSStatInit
00006ed8 g     F .text	000000c4 OSFlagQuery
0000ed88 g     F .text	000000d0 __fpcmp_parts_d
00010c58 g     O .rwdata	00000002 OSTaskCreateExtEn
00002a1c g     F .text	00000064 _close_r
0000d960 g     F .text	0000007c memcmp
00004924 g     F .text	0000001c OS_Dummy
0000b95c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001a684 g       *ABS*	00000000 __alt_stack_base
0000b9ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00001a1c g     F .text	00000174 __swsetup_r
00017fc0 g     O .bss	000001e0 OSQTbl
0000e41c g     F .text	000001b4 __divdf3
00001f44 g     F .text	000000fc __sfp
0000f5c8 g     O .rwdata	00000408 __malloc_av_
0000204c g     F .text	00000004 __sinit_lock_release
0000e138 g     F .text	000002e4 __muldf3
000127c0 g     O .bss	00000004 OSTCBHighRdy
00002870 g     F .text	00000054 __sread
000127c4 g     O .bss	00000004 OSQFreeList
0000d678 g     F .text	00000114 alt_find_file
0000c880 g     F .text	000000a0 alt_dev_llist_insert
00003820 g     F .text	00000114 __malloc_lock
0000351c g     F .text	000000b0 sbrk
00003b28 g     F .text	00000144 OSEventNameSet
00001b90 g     F .text	000001e8 _fflush_r
000127c8 g     O .bss	00000001 OSRdyGrp
00012768 g       *ABS*	00000000 __bss_start
00002794 g     F .text	000000dc memset
0000026c g     F .text	000000ac main
00012784 g     O .bss	00000004 alt_envp
00012768 g     O .bss	00000004 __malloc_max_total_mem
0000b8fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ef78 g     O .rodata	00000100 OSUnMapTbl
00010c52 g     O .rwdata	00000002 OSSemEn
00006b44 g     F .text	00000394 OSFlagPost
000029a8 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00002bbc g     F .text	00000014 fclose
00004ad8 g     F .text	00000108 OS_EventTaskWait
00014820 g     O .bss	00002000 task2_stk
0000568c g     F .text	000000c8 OS_TaskStatStkChk
0001a4f4 g     O .bss	00000190 _atexit0
0000a574 g     F .text	00000158 OSTaskDelReq
00000920 g     F .text	00000784 _malloc_r
00010c08 g     O .rwdata	00000004 alt_errno
000045cc g     F .text	0000006c OSStart
000037c0 g     F .text	00000060 __env_unlock
0000248c g     F .text	000000a8 _fwalk
0000aa38 g     F .text	000001f4 OSTaskResume
000079bc g     F .text	000000e8 OSMemQuery
00010c64 g     O .rwdata	00000002 OSTaskStatEn
00010c3e g     O .rwdata	00000002 OSMemMax
0000880c g     F .text	00000170 OSQPostFront
0000e898 g     F .text	00000050 __divsi3
000127c9 g     O .bss	00000006 OSRdyTbl
00010c18 g     O .rwdata	00000002 OSDebugEn
0000f0b4 g     O .rodata	00000014 __thenan_df
00002080 g     F .text	0000013c _malloc_trim_r
0000ef24 g       *ABS*	00000000 __CTOR_END__
00010c30 g     O .rwdata	00000002 OSFlagNodeSize
00010c78 g     O .rwdata	00000002 OSTmrCfgMax
00007cb4 g     F .text	000001f8 OSQCreate
0000a6cc g     F .text	000001a8 OSTaskNameGet
0000ef24 g       *ABS*	00000000 __flash_rodata_start
0000897c g     F .text	0000020c OSQPostOpt
000046e4 g     F .text	00000220 OSTimeTick
00010c60 g     O .rwdata	00000002 OSTaskMax
0000ef24 g       *ABS*	00000000 __DTOR_LIST__
00008e48 g     F .text	00000100 OSSemCreate
00010c84 g     O .rwdata	00000002 OSTmrWheelSize
00010c5a g     O .rwdata	00000002 OSTaskDelEn
000096a8 g     F .text	00000118 OSSemQuery
00007eac g     F .text	000002d0 OSQDel
00008530 g     F .text	00000174 OSQPendAbort
0000b810 g     F .text	00000034 alt_irq_init
000034bc g     F .text	00000060 alt_release_fd
0000f0c8 g     O .rodata	00000100 __clz_tab
0000d914 g     F .text	00000014 atexit
000029b0 g     F .text	0000006c _write_r
0000446c g     F .text	00000088 OSSchedLock
00005ec0 g     F .text	00000128 OSFlagCreate
00010be8 g     O .rwdata	00000004 _impure_ptr
0001277c g     O .bss	00000004 alt_argc
0000c97c g     F .text	0000005c _do_dtors
00010c2a g     O .rwdata	00000002 OSEventMultiEn
00005fe8 g     F .text	00000270 OSFlagDel
000127d0 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000064dc g     F .text	00000600 OSFlagPend
00010c76 g     O .rwdata	00000002 OSTmrEn
00002068 g     F .text	00000018 __fp_unlock_all
00010bf4 g     O .rwdata	00000008 alt_fs_list
00005498 g     F .text	0000007c OS_StrCopy
00010c40 g     O .rwdata	00000002 OSMemNameSize
0000d590 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00010c6c g     O .rwdata	00000002 OSTCBPrioTblMax
00010c68 g     O .rwdata	00000002 OSTaskStatStkChkEn
00010c3c g     O .rwdata	00000002 OSMemEn
00010c46 g     O .rwdata	00000002 OSMutexEn
00010c98 g       *ABS*	00000000 _edata
0001a684 g       *ABS*	00000000 _end
000127d4 g     O .bss	00000001 OSIntNesting
000001c0 g       *ABS*	00000000 __ram_exceptions_end
0000bf54 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000b524 g     F .text	000001ec OSTimeDlyResume
00006388 g     F .text	00000154 OSFlagNameSet
0000ac2c g     F .text	000001d4 OSTaskStkChk
00010c42 g     O .rwdata	00000002 OSMemSize
000028c4 g     F .text	00000088 __swrite
00010bf0 g     O .rwdata	00000004 __malloc_trim_threshold
0000d0fc g     F .text	00000020 altera_nios2_qsys_irq_init
000127d8 g     O .bss	00000004 OSTCBCur
0000d928 g     F .text	00000038 exit
00010c44 g     O .rwdata	00000002 OSMemTblSize
00002534 g     F .text	000000b8 _fwalk_reent
0000e8e8 g     F .text	0000005c __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002044 g     F .text	00000004 __sfp_lock_release
000042a8 g     F .text	00000054 OSInit
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000b010 g     F .text	0000012c OSTaskQuery
00008cec g     F .text	000000ac OS_QInit
00005514 g     F .text	00000054 OS_StrLen
000077c8 g     F .text	0000011c OSMemNameSet
00010c5e g     O .rwdata	00000002 OSTaskProfileEn
000127dc g     O .bss	00000004 OSTime
000181a0 g     O .bss	00000800 OSTaskIdleStk
0000eee0 g     F .text	00000044 _exit
0000c6d4 g     F .text	00000140 alt_alarm_start
00006258 g     F .text	00000130 OSFlagNameGet
0000b710 g     F .text	00000064 OSTimeGet
0000e954 g     F .text	00000060 __muldi3
000025ec g     F .text	000001a8 __smakebuf_r
000003b0 g     F .text	0000008c strlen
0000d520 g     F .text	0000001c OSTaskSwHook
0000ce0c g     F .text	00000154 open
000189a0 g     O .bss	00000c30 OSEventTbl
0000e5d0 g     F .text	00000064 __gedf2
000195d0 g     O .bss	00000d80 OSTCBTbl
000097c0 g     F .text	00000100 OSSemSet
0000c9d8 g     F .text	00000030 alt_icache_flush_all
00010c8c g     O .rwdata	00000004 alt_priority_mask
00008f48 g     F .text	00000270 OSSemDel
000127e0 g     O .bss	00000004 OSFlagFreeList
00010c24 g     O .rwdata	00000002 OSEventNameSize
000127e4 g     O .bss	00000001 OSStatRdy
0001a350 g     O .bss	000000a4 OSTCBPrioTbl
00003708 g     F .text	000000b8 __env_lock
00010c6a g     O .rwdata	00000002 OSTaskSwHookEn
0000e0d8 g     F .text	00000060 __subdf3
00010c90 g     O .rwdata	00000008 alt_alarm_list
00010c32 g     O .rwdata	00000002 OSFlagWidth
0000c920 g     F .text	0000005c _do_ctors
00002dc4 g     F .text	000000c8 close
0001278c g     O .bss	00000004 alt_envsem
000127e8 g     O .bss	00000004 OSIdleCtrRun
00004904 g     F .text	00000020 OSVersion
00010c7c g     O .rwdata	00000002 OSTmrCfgWheelSize
00003110 g     F .text	00000080 alt_load
0000b13c g     F .text	00000070 OS_TaskStkClr
0000ea60 g     F .text	00000224 __pack_d
00010c56 g     O .rwdata	00000002 OSTaskCreateEn
00004ed0 g     F .text	00000068 OS_EventWaitListInit
0000d5ac g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00002048 g     F .text	00000004 __sinit_lock_acquire
0000ae00 g     F .text	00000210 OSTaskSuspend
00005568 g     F .text	0000005c OS_TaskIdle
00010c82 g     O .rwdata	00000002 OSTmrTblSize
00008b88 g     F .text	00000164 OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08407014 	ori	at,at,448
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	00042fc0 	call	42fc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001826 	beq	r2,zero,18c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	00c000b4 	movhi	r3,2
 130:	18e8fd04 	addi	r3,r3,-23564
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	010000b4 	movhi	r4,2
 148:	2128fd04 	addi	r4,r4,-23564
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	183ee83a 	callr	r3
#endif
        break;
 16c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 170:	0005313a 	rdctl	r2,ipending
 174:	e0bfff15 	stw	r2,-4(fp)

  return active;
 178:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 17c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 180:	e0bffb17 	ldw	r2,-20(fp)
 184:	103fe21e 	bne	r2,zero,110 <alt_irq_handler+0x24>
 188:	00000706 	br	1a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fdd06 	br	11c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a8:	00043780 	call	4378 <OSIntExit>
}
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c0:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     1c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1cc:	d6a2f914 	ori	gp,gp,35812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d4:	1089da14 	ori	r2,r2,10088

    movhi r3, %hi(__bss_end)
     1d8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1dc:	18e9a114 	ori	r3,r3,42628

    beq r2, r3, 1f
     1e0:	10c00326 	beq	r2,r3,1f0 <_start+0x30>

0:
    stw zero, (r2)
     1e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ec:	10fffd36 	bltu	r2,r3,1e4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f0:	00031100 	call	3110 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f4:	00032b00 	call	32b0 <alt_main>

000001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f8:	003fff06 	br	1f8 <alt_after_alt_main>

000001fc <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     1fc:	defffd04 	addi	sp,sp,-12
     200:	dfc00215 	stw	ra,8(sp)
     204:	df000115 	stw	fp,4(sp)
     208:	df000104 	addi	fp,sp,4
     20c:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
     210:	01000074 	movhi	r4,1
     214:	213bc904 	addi	r4,r4,-4316
     218:	000039c0 	call	39c <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     21c:	0009883a 	mov	r4,zero
     220:	000b883a 	mov	r5,zero
     224:	018000c4 	movi	r6,3
     228:	000f883a 	mov	r7,zero
     22c:	000b2f40 	call	b2f4 <OSTimeDlyHMSM>
  }
     230:	003ff706 	br	210 <task1+0x14>

00000234 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
     234:	defffd04 	addi	sp,sp,-12
     238:	dfc00215 	stw	ra,8(sp)
     23c:	df000115 	stw	fp,4(sp)
     240:	df000104 	addi	fp,sp,4
     244:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
     248:	01000074 	movhi	r4,1
     24c:	213bce04 	addi	r4,r4,-4296
     250:	000039c0 	call	39c <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     254:	0009883a 	mov	r4,zero
     258:	000b883a 	mov	r5,zero
     25c:	018000c4 	movi	r6,3
     260:	000f883a 	mov	r7,zero
     264:	000b2f40 	call	b2f4 <OSTimeDlyHMSM>
  }
     268:	003ff706 	br	248 <task2+0x14>

0000026c <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
     26c:	defff904 	addi	sp,sp,-28
     270:	dfc00615 	stw	ra,24(sp)
     274:	df000515 	stw	fp,20(sp)
     278:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
     27c:	00800044 	movi	r2,1
     280:	d8800015 	stw	r2,0(sp)
     284:	00800074 	movhi	r2,1
     288:	108a0804 	addi	r2,r2,10272
     28c:	d8800115 	stw	r2,4(sp)
     290:	00820004 	movi	r2,2048
     294:	d8800215 	stw	r2,8(sp)
     298:	d8000315 	stw	zero,12(sp)
     29c:	d8000415 	stw	zero,16(sp)
     2a0:	01000034 	movhi	r4,0
     2a4:	21007f04 	addi	r4,r4,508
     2a8:	000b883a 	mov	r5,zero
     2ac:	01800074 	movhi	r6,1
     2b0:	31920704 	addi	r6,r6,18460
     2b4:	01c00044 	movi	r7,1
     2b8:	0009fa40 	call	9fa4 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
     2bc:	00800084 	movi	r2,2
     2c0:	d8800015 	stw	r2,0(sp)
     2c4:	00800074 	movhi	r2,1
     2c8:	10920804 	addi	r2,r2,18464
     2cc:	d8800115 	stw	r2,4(sp)
     2d0:	00820004 	movi	r2,2048
     2d4:	d8800215 	stw	r2,8(sp)
     2d8:	d8000315 	stw	zero,12(sp)
     2dc:	d8000415 	stw	zero,16(sp)
     2e0:	01000034 	movhi	r4,0
     2e4:	21008d04 	addi	r4,r4,564
     2e8:	000b883a 	mov	r5,zero
     2ec:	01800074 	movhi	r6,1
     2f0:	319a0704 	addi	r6,r6,26652
     2f4:	01c00084 	movi	r7,2
     2f8:	0009fa40 	call	9fa4 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     2fc:	00045cc0 	call	45cc <OSStart>
  return 0;
     300:	0005883a 	mov	r2,zero
}
     304:	e037883a 	mov	sp,fp
     308:	dfc00117 	ldw	ra,4(sp)
     30c:	df000017 	ldw	fp,0(sp)
     310:	dec00204 	addi	sp,sp,8
     314:	f800283a 	ret

00000318 <_puts_r>:
     318:	defff604 	addi	sp,sp,-40
     31c:	dc400815 	stw	r17,32(sp)
     320:	2023883a 	mov	r17,r4
     324:	2809883a 	mov	r4,r5
     328:	dc000715 	stw	r16,28(sp)
     32c:	dfc00915 	stw	ra,36(sp)
     330:	2821883a 	mov	r16,r5
     334:	00003b00 	call	3b0 <strlen>
     338:	10c00044 	addi	r3,r2,1
     33c:	d8800115 	stw	r2,4(sp)
     340:	89400217 	ldw	r5,8(r17)
     344:	00800074 	movhi	r2,1
     348:	10bbd304 	addi	r2,r2,-4276
     34c:	d8800215 	stw	r2,8(sp)
     350:	00800044 	movi	r2,1
     354:	d8800315 	stw	r2,12(sp)
     358:	8809883a 	mov	r4,r17
     35c:	00800084 	movi	r2,2
     360:	d9800404 	addi	r6,sp,16
     364:	dc000015 	stw	r16,0(sp)
     368:	d8c00615 	stw	r3,24(sp)
     36c:	dec00415 	stw	sp,16(sp)
     370:	d8800515 	stw	r2,20(sp)
     374:	000043c0 	call	43c <__sfvwrite_r>
     378:	1000061e 	bne	r2,zero,394 <_puts_r+0x7c>
     37c:	00800284 	movi	r2,10
     380:	dfc00917 	ldw	ra,36(sp)
     384:	dc400817 	ldw	r17,32(sp)
     388:	dc000717 	ldw	r16,28(sp)
     38c:	dec00a04 	addi	sp,sp,40
     390:	f800283a 	ret
     394:	00bfffc4 	movi	r2,-1
     398:	003ff906 	br	380 <_puts_r+0x68>

0000039c <puts>:
     39c:	00800074 	movhi	r2,1
     3a0:	1082fa04 	addi	r2,r2,3048
     3a4:	200b883a 	mov	r5,r4
     3a8:	11000017 	ldw	r4,0(r2)
     3ac:	00003181 	jmpi	318 <_puts_r>

000003b0 <strlen>:
     3b0:	208000cc 	andi	r2,r4,3
     3b4:	10001f1e 	bne	r2,zero,434 <strlen+0x84>
     3b8:	20800017 	ldw	r2,0(r4)
     3bc:	01ffbff4 	movhi	r7,65279
     3c0:	39ffbfc4 	addi	r7,r7,-257
     3c4:	01a02074 	movhi	r6,32897
     3c8:	31a02004 	addi	r6,r6,-32640
     3cc:	11c7883a 	add	r3,r2,r7
     3d0:	0084303a 	nor	r2,zero,r2
     3d4:	1886703a 	and	r3,r3,r2
     3d8:	1986703a 	and	r3,r3,r6
     3dc:	2005883a 	mov	r2,r4
     3e0:	1800101e 	bne	r3,zero,424 <strlen+0x74>
     3e4:	10800104 	addi	r2,r2,4
     3e8:	10c00017 	ldw	r3,0(r2)
     3ec:	19cb883a 	add	r5,r3,r7
     3f0:	00c6303a 	nor	r3,zero,r3
     3f4:	28c6703a 	and	r3,r5,r3
     3f8:	1986703a 	and	r3,r3,r6
     3fc:	1800091e 	bne	r3,zero,424 <strlen+0x74>
     400:	10800104 	addi	r2,r2,4
     404:	10c00017 	ldw	r3,0(r2)
     408:	19cb883a 	add	r5,r3,r7
     40c:	00c6303a 	nor	r3,zero,r3
     410:	28c6703a 	and	r3,r5,r3
     414:	1986703a 	and	r3,r3,r6
     418:	183ff226 	beq	r3,zero,3e4 <strlen+0x34>
     41c:	00000106 	br	424 <strlen+0x74>
     420:	10800044 	addi	r2,r2,1
     424:	10c00007 	ldb	r3,0(r2)
     428:	183ffd1e 	bne	r3,zero,420 <strlen+0x70>
     42c:	1105c83a 	sub	r2,r2,r4
     430:	f800283a 	ret
     434:	2005883a 	mov	r2,r4
     438:	003ffa06 	br	424 <strlen+0x74>

0000043c <__sfvwrite_r>:
     43c:	30800217 	ldw	r2,8(r6)
     440:	defff504 	addi	sp,sp,-44
     444:	dd400615 	stw	r21,24(sp)
     448:	dd000515 	stw	r20,20(sp)
     44c:	dc000115 	stw	r16,4(sp)
     450:	dfc00a15 	stw	ra,40(sp)
     454:	df000915 	stw	fp,36(sp)
     458:	ddc00815 	stw	r23,32(sp)
     45c:	dd800715 	stw	r22,28(sp)
     460:	dcc00415 	stw	r19,16(sp)
     464:	dc800315 	stw	r18,12(sp)
     468:	dc400215 	stw	r17,8(sp)
     46c:	3029883a 	mov	r20,r6
     470:	202b883a 	mov	r21,r4
     474:	2821883a 	mov	r16,r5
     478:	10002126 	beq	r2,zero,500 <__sfvwrite_r+0xc4>
     47c:	2880030b 	ldhu	r2,12(r5)
     480:	10c0020c 	andi	r3,r2,8
     484:	18ffffcc 	andi	r3,r3,65535
     488:	18e0001c 	xori	r3,r3,32768
     48c:	18e00004 	addi	r3,r3,-32768
     490:	18002826 	beq	r3,zero,534 <__sfvwrite_r+0xf8>
     494:	28c00417 	ldw	r3,16(r5)
     498:	18002626 	beq	r3,zero,534 <__sfvwrite_r+0xf8>
     49c:	10c0008c 	andi	r3,r2,2
     4a0:	18ffffcc 	andi	r3,r3,65535
     4a4:	18e0001c 	xori	r3,r3,32768
     4a8:	18e00004 	addi	r3,r3,-32768
     4ac:	a4400017 	ldw	r17,0(r20)
     4b0:	18002b26 	beq	r3,zero,560 <__sfvwrite_r+0x124>
     4b4:	0027883a 	mov	r19,zero
     4b8:	0025883a 	mov	r18,zero
     4bc:	05810004 	movi	r22,1024
     4c0:	980d883a 	mov	r6,r19
     4c4:	a809883a 	mov	r4,r21
     4c8:	90004f26 	beq	r18,zero,608 <__sfvwrite_r+0x1cc>
     4cc:	900f883a 	mov	r7,r18
     4d0:	81400717 	ldw	r5,28(r16)
     4d4:	b480012e 	bgeu	r22,r18,4dc <__sfvwrite_r+0xa0>
     4d8:	01c10004 	movi	r7,1024
     4dc:	80800917 	ldw	r2,36(r16)
     4e0:	103ee83a 	callr	r2
     4e4:	0080540e 	bge	zero,r2,638 <__sfvwrite_r+0x1fc>
     4e8:	a0c00217 	ldw	r3,8(r20)
     4ec:	98a7883a 	add	r19,r19,r2
     4f0:	90a5c83a 	sub	r18,r18,r2
     4f4:	1885c83a 	sub	r2,r3,r2
     4f8:	a0800215 	stw	r2,8(r20)
     4fc:	103ff01e 	bne	r2,zero,4c0 <__sfvwrite_r+0x84>
     500:	0005883a 	mov	r2,zero
     504:	dfc00a17 	ldw	ra,40(sp)
     508:	df000917 	ldw	fp,36(sp)
     50c:	ddc00817 	ldw	r23,32(sp)
     510:	dd800717 	ldw	r22,28(sp)
     514:	dd400617 	ldw	r21,24(sp)
     518:	dd000517 	ldw	r20,20(sp)
     51c:	dcc00417 	ldw	r19,16(sp)
     520:	dc800317 	ldw	r18,12(sp)
     524:	dc400217 	ldw	r17,8(sp)
     528:	dc000117 	ldw	r16,4(sp)
     52c:	dec00b04 	addi	sp,sp,44
     530:	f800283a 	ret
     534:	a809883a 	mov	r4,r21
     538:	800b883a 	mov	r5,r16
     53c:	0001a1c0 	call	1a1c <__swsetup_r>
     540:	1000f01e 	bne	r2,zero,904 <__sfvwrite_r+0x4c8>
     544:	8080030b 	ldhu	r2,12(r16)
     548:	a4400017 	ldw	r17,0(r20)
     54c:	10c0008c 	andi	r3,r2,2
     550:	18ffffcc 	andi	r3,r3,65535
     554:	18e0001c 	xori	r3,r3,32768
     558:	18e00004 	addi	r3,r3,-32768
     55c:	183fd51e 	bne	r3,zero,4b4 <__sfvwrite_r+0x78>
     560:	10c0004c 	andi	r3,r2,1
     564:	002d883a 	mov	r22,zero
     568:	1800381e 	bne	r3,zero,64c <__sfvwrite_r+0x210>
     56c:	0025883a 	mov	r18,zero
     570:	90002126 	beq	r18,zero,5f8 <__sfvwrite_r+0x1bc>
     574:	10c0800c 	andi	r3,r2,512
     578:	18ffffcc 	andi	r3,r3,65535
     57c:	18e0001c 	xori	r3,r3,32768
     580:	18e00004 	addi	r3,r3,-32768
     584:	84c00217 	ldw	r19,8(r16)
     588:	18006b26 	beq	r3,zero,738 <__sfvwrite_r+0x2fc>
     58c:	980f883a 	mov	r7,r19
     590:	94c08636 	bltu	r18,r19,7ac <__sfvwrite_r+0x370>
     594:	10c1200c 	andi	r3,r2,1152
     598:	18009f1e 	bne	r3,zero,818 <__sfvwrite_r+0x3dc>
     59c:	81000017 	ldw	r4,0(r16)
     5a0:	982f883a 	mov	r23,r19
     5a4:	9039883a 	mov	fp,r18
     5a8:	9027883a 	mov	r19,r18
     5ac:	380d883a 	mov	r6,r7
     5b0:	b00b883a 	mov	r5,r22
     5b4:	d9c00015 	stw	r7,0(sp)
     5b8:	00012940 	call	1294 <memmove>
     5bc:	d9c00017 	ldw	r7,0(sp)
     5c0:	81000217 	ldw	r4,8(r16)
     5c4:	80800017 	ldw	r2,0(r16)
     5c8:	25efc83a 	sub	r23,r4,r23
     5cc:	11cf883a 	add	r7,r2,r7
     5d0:	85c00215 	stw	r23,8(r16)
     5d4:	81c00015 	stw	r7,0(r16)
     5d8:	a0800217 	ldw	r2,8(r20)
     5dc:	b72d883a 	add	r22,r22,fp
     5e0:	9725c83a 	sub	r18,r18,fp
     5e4:	14e7c83a 	sub	r19,r2,r19
     5e8:	a4c00215 	stw	r19,8(r20)
     5ec:	983fc426 	beq	r19,zero,500 <__sfvwrite_r+0xc4>
     5f0:	8080030b 	ldhu	r2,12(r16)
     5f4:	903fdf1e 	bne	r18,zero,574 <__sfvwrite_r+0x138>
     5f8:	8d800017 	ldw	r22,0(r17)
     5fc:	8c800117 	ldw	r18,4(r17)
     600:	8c400204 	addi	r17,r17,8
     604:	003fda06 	br	570 <__sfvwrite_r+0x134>
     608:	8cc00017 	ldw	r19,0(r17)
     60c:	8c800117 	ldw	r18,4(r17)
     610:	8c400204 	addi	r17,r17,8
     614:	003faa06 	br	4c0 <__sfvwrite_r+0x84>
     618:	00013bc0 	call	13bc <_realloc_r>
     61c:	102f883a 	mov	r23,r2
     620:	10009f1e 	bne	r2,zero,8a0 <__sfvwrite_r+0x464>
     624:	81400417 	ldw	r5,16(r16)
     628:	a809883a 	mov	r4,r21
     62c:	00021bc0 	call	21bc <_free_r>
     630:	00800304 	movi	r2,12
     634:	a8800015 	stw	r2,0(r21)
     638:	80c0030b 	ldhu	r3,12(r16)
     63c:	00bfffc4 	movi	r2,-1
     640:	18c01014 	ori	r3,r3,64
     644:	80c0030d 	sth	r3,12(r16)
     648:	003fae06 	br	504 <__sfvwrite_r+0xc8>
     64c:	0007883a 	mov	r3,zero
     650:	0039883a 	mov	fp,zero
     654:	0025883a 	mov	r18,zero
     658:	90001e26 	beq	r18,zero,6d4 <__sfvwrite_r+0x298>
     65c:	18006526 	beq	r3,zero,7f4 <__sfvwrite_r+0x3b8>
     660:	b02f883a 	mov	r23,r22
     664:	9580012e 	bgeu	r18,r22,66c <__sfvwrite_r+0x230>
     668:	902f883a 	mov	r23,r18
     66c:	81000017 	ldw	r4,0(r16)
     670:	80800417 	ldw	r2,16(r16)
     674:	84c00217 	ldw	r19,8(r16)
     678:	81c00517 	ldw	r7,20(r16)
     67c:	1100022e 	bgeu	r2,r4,688 <__sfvwrite_r+0x24c>
     680:	99e7883a 	add	r19,r19,r7
     684:	9dc01816 	blt	r19,r23,6e8 <__sfvwrite_r+0x2ac>
     688:	b9c03b16 	blt	r23,r7,778 <__sfvwrite_r+0x33c>
     68c:	80800917 	ldw	r2,36(r16)
     690:	81400717 	ldw	r5,28(r16)
     694:	a809883a 	mov	r4,r21
     698:	d8c00015 	stw	r3,0(sp)
     69c:	e00d883a 	mov	r6,fp
     6a0:	103ee83a 	callr	r2
     6a4:	1027883a 	mov	r19,r2
     6a8:	d8c00017 	ldw	r3,0(sp)
     6ac:	00bfe20e 	bge	zero,r2,638 <__sfvwrite_r+0x1fc>
     6b0:	b4edc83a 	sub	r22,r22,r19
     6b4:	b0001a26 	beq	r22,zero,720 <__sfvwrite_r+0x2e4>
     6b8:	a0800217 	ldw	r2,8(r20)
     6bc:	e4f9883a 	add	fp,fp,r19
     6c0:	94e5c83a 	sub	r18,r18,r19
     6c4:	14e7c83a 	sub	r19,r2,r19
     6c8:	a4c00215 	stw	r19,8(r20)
     6cc:	983f8c26 	beq	r19,zero,500 <__sfvwrite_r+0xc4>
     6d0:	903fe21e 	bne	r18,zero,65c <__sfvwrite_r+0x220>
     6d4:	8f000017 	ldw	fp,0(r17)
     6d8:	8c800117 	ldw	r18,4(r17)
     6dc:	0007883a 	mov	r3,zero
     6e0:	8c400204 	addi	r17,r17,8
     6e4:	003fdc06 	br	658 <__sfvwrite_r+0x21c>
     6e8:	e00b883a 	mov	r5,fp
     6ec:	980d883a 	mov	r6,r19
     6f0:	d8c00015 	stw	r3,0(sp)
     6f4:	00012940 	call	1294 <memmove>
     6f8:	80800017 	ldw	r2,0(r16)
     6fc:	a809883a 	mov	r4,r21
     700:	800b883a 	mov	r5,r16
     704:	14c5883a 	add	r2,r2,r19
     708:	80800015 	stw	r2,0(r16)
     70c:	0001b900 	call	1b90 <_fflush_r>
     710:	d8c00017 	ldw	r3,0(sp)
     714:	103fc81e 	bne	r2,zero,638 <__sfvwrite_r+0x1fc>
     718:	b4edc83a 	sub	r22,r22,r19
     71c:	b03fe61e 	bne	r22,zero,6b8 <__sfvwrite_r+0x27c>
     720:	a809883a 	mov	r4,r21
     724:	800b883a 	mov	r5,r16
     728:	0001b900 	call	1b90 <_fflush_r>
     72c:	103fc21e 	bne	r2,zero,638 <__sfvwrite_r+0x1fc>
     730:	0007883a 	mov	r3,zero
     734:	003fe006 	br	6b8 <__sfvwrite_r+0x27c>
     738:	81000017 	ldw	r4,0(r16)
     73c:	80800417 	ldw	r2,16(r16)
     740:	1100022e 	bgeu	r2,r4,74c <__sfvwrite_r+0x310>
     744:	9839883a 	mov	fp,r19
     748:	9c806036 	bltu	r19,r18,8cc <__sfvwrite_r+0x490>
     74c:	81c00517 	ldw	r7,20(r16)
     750:	91c01c36 	bltu	r18,r7,7c4 <__sfvwrite_r+0x388>
     754:	80800917 	ldw	r2,36(r16)
     758:	81400717 	ldw	r5,28(r16)
     75c:	a809883a 	mov	r4,r21
     760:	b00d883a 	mov	r6,r22
     764:	103ee83a 	callr	r2
     768:	1027883a 	mov	r19,r2
     76c:	00bfb20e 	bge	zero,r2,638 <__sfvwrite_r+0x1fc>
     770:	1039883a 	mov	fp,r2
     774:	003f9806 	br	5d8 <__sfvwrite_r+0x19c>
     778:	b80d883a 	mov	r6,r23
     77c:	e00b883a 	mov	r5,fp
     780:	d8c00015 	stw	r3,0(sp)
     784:	00012940 	call	1294 <memmove>
     788:	80800217 	ldw	r2,8(r16)
     78c:	81000017 	ldw	r4,0(r16)
     790:	b827883a 	mov	r19,r23
     794:	15c5c83a 	sub	r2,r2,r23
     798:	25ef883a 	add	r23,r4,r23
     79c:	80800215 	stw	r2,8(r16)
     7a0:	85c00015 	stw	r23,0(r16)
     7a4:	d8c00017 	ldw	r3,0(sp)
     7a8:	003fc106 	br	6b0 <__sfvwrite_r+0x274>
     7ac:	81000017 	ldw	r4,0(r16)
     7b0:	902f883a 	mov	r23,r18
     7b4:	9039883a 	mov	fp,r18
     7b8:	9027883a 	mov	r19,r18
     7bc:	900f883a 	mov	r7,r18
     7c0:	003f7a06 	br	5ac <__sfvwrite_r+0x170>
     7c4:	b00b883a 	mov	r5,r22
     7c8:	900d883a 	mov	r6,r18
     7cc:	00012940 	call	1294 <memmove>
     7d0:	80c00217 	ldw	r3,8(r16)
     7d4:	80800017 	ldw	r2,0(r16)
     7d8:	9027883a 	mov	r19,r18
     7dc:	1c87c83a 	sub	r3,r3,r18
     7e0:	1485883a 	add	r2,r2,r18
     7e4:	80c00215 	stw	r3,8(r16)
     7e8:	80800015 	stw	r2,0(r16)
     7ec:	9039883a 	mov	fp,r18
     7f0:	003f7906 	br	5d8 <__sfvwrite_r+0x19c>
     7f4:	e009883a 	mov	r4,fp
     7f8:	01400284 	movi	r5,10
     7fc:	900d883a 	mov	r6,r18
     800:	00010a40 	call	10a4 <memchr>
     804:	10003c26 	beq	r2,zero,8f8 <__sfvwrite_r+0x4bc>
     808:	15800044 	addi	r22,r2,1
     80c:	b72dc83a 	sub	r22,r22,fp
     810:	00c00044 	movi	r3,1
     814:	003f9206 	br	660 <__sfvwrite_r+0x224>
     818:	81000517 	ldw	r4,20(r16)
     81c:	81400417 	ldw	r5,16(r16)
     820:	80c00017 	ldw	r3,0(r16)
     824:	210d883a 	add	r6,r4,r4
     828:	3109883a 	add	r4,r6,r4
     82c:	2026d7fa 	srli	r19,r4,31
     830:	1979c83a 	sub	fp,r3,r5
     834:	e1800044 	addi	r6,fp,1
     838:	9909883a 	add	r4,r19,r4
     83c:	2027d07a 	srai	r19,r4,1
     840:	3489883a 	add	r4,r6,r18
     844:	980d883a 	mov	r6,r19
     848:	9900022e 	bgeu	r19,r4,854 <__sfvwrite_r+0x418>
     84c:	2027883a 	mov	r19,r4
     850:	200d883a 	mov	r6,r4
     854:	1081000c 	andi	r2,r2,1024
     858:	10bfffcc 	andi	r2,r2,65535
     85c:	10a0001c 	xori	r2,r2,32768
     860:	10a00004 	addi	r2,r2,-32768
     864:	a809883a 	mov	r4,r21
     868:	103f6b26 	beq	r2,zero,618 <__sfvwrite_r+0x1dc>
     86c:	300b883a 	mov	r5,r6
     870:	00009200 	call	920 <_malloc_r>
     874:	102f883a 	mov	r23,r2
     878:	103f6d26 	beq	r2,zero,630 <__sfvwrite_r+0x1f4>
     87c:	81400417 	ldw	r5,16(r16)
     880:	1009883a 	mov	r4,r2
     884:	e00d883a 	mov	r6,fp
     888:	000119c0 	call	119c <memcpy>
     88c:	8080030b 	ldhu	r2,12(r16)
     890:	00fedfc4 	movi	r3,-1153
     894:	10c4703a 	and	r2,r2,r3
     898:	10802014 	ori	r2,r2,128
     89c:	8080030d 	sth	r2,12(r16)
     8a0:	bf09883a 	add	r4,r23,fp
     8a4:	9f07c83a 	sub	r3,r19,fp
     8a8:	85c00415 	stw	r23,16(r16)
     8ac:	84c00515 	stw	r19,20(r16)
     8b0:	81000015 	stw	r4,0(r16)
     8b4:	902f883a 	mov	r23,r18
     8b8:	80c00215 	stw	r3,8(r16)
     8bc:	9039883a 	mov	fp,r18
     8c0:	9027883a 	mov	r19,r18
     8c4:	900f883a 	mov	r7,r18
     8c8:	003f3806 	br	5ac <__sfvwrite_r+0x170>
     8cc:	b00b883a 	mov	r5,r22
     8d0:	980d883a 	mov	r6,r19
     8d4:	00012940 	call	1294 <memmove>
     8d8:	80800017 	ldw	r2,0(r16)
     8dc:	a809883a 	mov	r4,r21
     8e0:	800b883a 	mov	r5,r16
     8e4:	14c5883a 	add	r2,r2,r19
     8e8:	80800015 	stw	r2,0(r16)
     8ec:	0001b900 	call	1b90 <_fflush_r>
     8f0:	103f3926 	beq	r2,zero,5d8 <__sfvwrite_r+0x19c>
     8f4:	003f5006 	br	638 <__sfvwrite_r+0x1fc>
     8f8:	95800044 	addi	r22,r18,1
     8fc:	00c00044 	movi	r3,1
     900:	003f5706 	br	660 <__sfvwrite_r+0x224>
     904:	80c0030b 	ldhu	r3,12(r16)
     908:	00bfffc4 	movi	r2,-1
     90c:	18c01014 	ori	r3,r3,64
     910:	80c0030d 	sth	r3,12(r16)
     914:	00c00244 	movi	r3,9
     918:	a8c00015 	stw	r3,0(r21)
     91c:	003ef906 	br	504 <__sfvwrite_r+0xc8>

00000920 <_malloc_r>:
     920:	defff604 	addi	sp,sp,-40
     924:	dc800215 	stw	r18,8(sp)
     928:	dfc00915 	stw	ra,36(sp)
     92c:	df000815 	stw	fp,32(sp)
     930:	ddc00715 	stw	r23,28(sp)
     934:	dd800615 	stw	r22,24(sp)
     938:	dd400515 	stw	r21,20(sp)
     93c:	dd000415 	stw	r20,16(sp)
     940:	dcc00315 	stw	r19,12(sp)
     944:	dc400115 	stw	r17,4(sp)
     948:	dc000015 	stw	r16,0(sp)
     94c:	288002c4 	addi	r2,r5,11
     950:	00c00584 	movi	r3,22
     954:	2025883a 	mov	r18,r4
     958:	18802b2e 	bgeu	r3,r2,a08 <_malloc_r+0xe8>
     95c:	047ffe04 	movi	r17,-8
     960:	1462703a 	and	r17,r2,r17
     964:	88002a16 	blt	r17,zero,a10 <_malloc_r+0xf0>
     968:	89402936 	bltu	r17,r5,a10 <_malloc_r+0xf0>
     96c:	9009883a 	mov	r4,r18
     970:	00038200 	call	3820 <__malloc_lock>
     974:	00807dc4 	movi	r2,503
     978:	14402936 	bltu	r2,r17,a20 <_malloc_r+0x100>
     97c:	8808d0fa 	srli	r4,r17,3
     980:	04c00074 	movhi	r19,1
     984:	9cfd7204 	addi	r19,r19,-2616
     988:	2105883a 	add	r2,r4,r4
     98c:	1085883a 	add	r2,r2,r2
     990:	1085883a 	add	r2,r2,r2
     994:	9885883a 	add	r2,r19,r2
     998:	14000317 	ldw	r16,12(r2)
     99c:	80815526 	beq	r16,r2,ef4 <_malloc_r+0x5d4>
     9a0:	81000117 	ldw	r4,4(r16)
     9a4:	00bfff04 	movi	r2,-4
     9a8:	80c00317 	ldw	r3,12(r16)
     9ac:	2084703a 	and	r2,r4,r2
     9b0:	8085883a 	add	r2,r16,r2
     9b4:	11800117 	ldw	r6,4(r2)
     9b8:	81400217 	ldw	r5,8(r16)
     9bc:	9009883a 	mov	r4,r18
     9c0:	31800054 	ori	r6,r6,1
     9c4:	11800115 	stw	r6,4(r2)
     9c8:	28c00315 	stw	r3,12(r5)
     9cc:	19400215 	stw	r5,8(r3)
     9d0:	00039340 	call	3934 <__malloc_unlock>
     9d4:	80800204 	addi	r2,r16,8
     9d8:	dfc00917 	ldw	ra,36(sp)
     9dc:	df000817 	ldw	fp,32(sp)
     9e0:	ddc00717 	ldw	r23,28(sp)
     9e4:	dd800617 	ldw	r22,24(sp)
     9e8:	dd400517 	ldw	r21,20(sp)
     9ec:	dd000417 	ldw	r20,16(sp)
     9f0:	dcc00317 	ldw	r19,12(sp)
     9f4:	dc800217 	ldw	r18,8(sp)
     9f8:	dc400117 	ldw	r17,4(sp)
     9fc:	dc000017 	ldw	r16,0(sp)
     a00:	dec00a04 	addi	sp,sp,40
     a04:	f800283a 	ret
     a08:	04400404 	movi	r17,16
     a0c:	897fd72e 	bgeu	r17,r5,96c <_malloc_r+0x4c>
     a10:	00800304 	movi	r2,12
     a14:	90800015 	stw	r2,0(r18)
     a18:	0005883a 	mov	r2,zero
     a1c:	003fee06 	br	9d8 <_malloc_r+0xb8>
     a20:	8808d27a 	srli	r4,r17,9
     a24:	20007126 	beq	r4,zero,bec <_malloc_r+0x2cc>
     a28:	00800104 	movi	r2,4
     a2c:	1100eb36 	bltu	r2,r4,ddc <_malloc_r+0x4bc>
     a30:	8808d1ba 	srli	r4,r17,6
     a34:	21000e04 	addi	r4,r4,56
     a38:	210b883a 	add	r5,r4,r4
     a3c:	294b883a 	add	r5,r5,r5
     a40:	294b883a 	add	r5,r5,r5
     a44:	04c00074 	movhi	r19,1
     a48:	9cfd7204 	addi	r19,r19,-2616
     a4c:	994b883a 	add	r5,r19,r5
     a50:	2c000317 	ldw	r16,12(r5)
     a54:	2c000e26 	beq	r5,r16,a90 <_malloc_r+0x170>
     a58:	80c00117 	ldw	r3,4(r16)
     a5c:	01ffff04 	movi	r7,-4
     a60:	018003c4 	movi	r6,15
     a64:	19c6703a 	and	r3,r3,r7
     a68:	1c45c83a 	sub	r2,r3,r17
     a6c:	30800716 	blt	r6,r2,a8c <_malloc_r+0x16c>
     a70:	1000610e 	bge	r2,zero,bf8 <_malloc_r+0x2d8>
     a74:	84000317 	ldw	r16,12(r16)
     a78:	2c000526 	beq	r5,r16,a90 <_malloc_r+0x170>
     a7c:	80c00117 	ldw	r3,4(r16)
     a80:	19c6703a 	and	r3,r3,r7
     a84:	1c45c83a 	sub	r2,r3,r17
     a88:	30bff90e 	bge	r6,r2,a70 <_malloc_r+0x150>
     a8c:	213fffc4 	addi	r4,r4,-1
     a90:	21000044 	addi	r4,r4,1
     a94:	9c000417 	ldw	r16,16(r19)
     a98:	00c00074 	movhi	r3,1
     a9c:	18fd7204 	addi	r3,r3,-2616
     aa0:	1a400204 	addi	r9,r3,8
     aa4:	8240ff26 	beq	r16,r9,ea4 <_malloc_r+0x584>
     aa8:	81400117 	ldw	r5,4(r16)
     aac:	00bfff04 	movi	r2,-4
     ab0:	018003c4 	movi	r6,15
     ab4:	2884703a 	and	r2,r5,r2
     ab8:	144bc83a 	sub	r5,r2,r17
     abc:	3140ea16 	blt	r6,r5,e68 <_malloc_r+0x548>
     ac0:	1a400515 	stw	r9,20(r3)
     ac4:	1a400415 	stw	r9,16(r3)
     ac8:	2800570e 	bge	r5,zero,c28 <_malloc_r+0x308>
     acc:	01407fc4 	movi	r5,511
     ad0:	2880ca36 	bltu	r5,r2,dfc <_malloc_r+0x4dc>
     ad4:	1004d0fa 	srli	r2,r2,3
     ad8:	02000044 	movi	r8,1
     adc:	19c00117 	ldw	r7,4(r3)
     ae0:	108b883a 	add	r5,r2,r2
     ae4:	294b883a 	add	r5,r5,r5
     ae8:	1005d0ba 	srai	r2,r2,2
     aec:	294b883a 	add	r5,r5,r5
     af0:	28cb883a 	add	r5,r5,r3
     af4:	29800217 	ldw	r6,8(r5)
     af8:	4084983a 	sll	r2,r8,r2
     afc:	81400315 	stw	r5,12(r16)
     b00:	81800215 	stw	r6,8(r16)
     b04:	11c4b03a 	or	r2,r2,r7
     b08:	18800115 	stw	r2,4(r3)
     b0c:	2c000215 	stw	r16,8(r5)
     b10:	34000315 	stw	r16,12(r6)
     b14:	200bd0ba 	srai	r5,r4,2
     b18:	00c00044 	movi	r3,1
     b1c:	194a983a 	sll	r5,r3,r5
     b20:	11404936 	bltu	r2,r5,c48 <_malloc_r+0x328>
     b24:	1146703a 	and	r3,r2,r5
     b28:	18000a1e 	bne	r3,zero,b54 <_malloc_r+0x234>
     b2c:	00ffff04 	movi	r3,-4
     b30:	294b883a 	add	r5,r5,r5
     b34:	20c8703a 	and	r4,r4,r3
     b38:	1146703a 	and	r3,r2,r5
     b3c:	21000104 	addi	r4,r4,4
     b40:	1800041e 	bne	r3,zero,b54 <_malloc_r+0x234>
     b44:	294b883a 	add	r5,r5,r5
     b48:	1146703a 	and	r3,r2,r5
     b4c:	21000104 	addi	r4,r4,4
     b50:	183ffc26 	beq	r3,zero,b44 <_malloc_r+0x224>
     b54:	023fff04 	movi	r8,-4
     b58:	01c003c4 	movi	r7,15
     b5c:	2105883a 	add	r2,r4,r4
     b60:	1085883a 	add	r2,r2,r2
     b64:	1085883a 	add	r2,r2,r2
     b68:	9899883a 	add	r12,r19,r2
     b6c:	62800304 	addi	r10,r12,12
     b70:	2017883a 	mov	r11,r4
     b74:	54000017 	ldw	r16,0(r10)
     b78:	51bffd04 	addi	r6,r10,-12
     b7c:	8180041e 	bne	r16,r6,b90 <_malloc_r+0x270>
     b80:	0000ca06 	br	eac <_malloc_r+0x58c>
     b84:	10001c0e 	bge	r2,zero,bf8 <_malloc_r+0x2d8>
     b88:	84000317 	ldw	r16,12(r16)
     b8c:	8180c726 	beq	r16,r6,eac <_malloc_r+0x58c>
     b90:	80c00117 	ldw	r3,4(r16)
     b94:	1a06703a 	and	r3,r3,r8
     b98:	1c45c83a 	sub	r2,r3,r17
     b9c:	38bff90e 	bge	r7,r2,b84 <_malloc_r+0x264>
     ba0:	81000317 	ldw	r4,12(r16)
     ba4:	81400217 	ldw	r5,8(r16)
     ba8:	8447883a 	add	r3,r16,r17
     bac:	8c400054 	ori	r17,r17,1
     bb0:	29000315 	stw	r4,12(r5)
     bb4:	21400215 	stw	r5,8(r4)
     bb8:	84400115 	stw	r17,4(r16)
     bbc:	1889883a 	add	r4,r3,r2
     bc0:	11400054 	ori	r5,r2,1
     bc4:	98c00515 	stw	r3,20(r19)
     bc8:	98c00415 	stw	r3,16(r19)
     bcc:	20800015 	stw	r2,0(r4)
     bd0:	1a400315 	stw	r9,12(r3)
     bd4:	1a400215 	stw	r9,8(r3)
     bd8:	19400115 	stw	r5,4(r3)
     bdc:	9009883a 	mov	r4,r18
     be0:	00039340 	call	3934 <__malloc_unlock>
     be4:	80800204 	addi	r2,r16,8
     be8:	003f7b06 	br	9d8 <_malloc_r+0xb8>
     bec:	8808d0fa 	srli	r4,r17,3
     bf0:	210b883a 	add	r5,r4,r4
     bf4:	003f9106 	br	a3c <_malloc_r+0x11c>
     bf8:	80c7883a 	add	r3,r16,r3
     bfc:	19400117 	ldw	r5,4(r3)
     c00:	80800317 	ldw	r2,12(r16)
     c04:	81000217 	ldw	r4,8(r16)
     c08:	29400054 	ori	r5,r5,1
     c0c:	19400115 	stw	r5,4(r3)
     c10:	20800315 	stw	r2,12(r4)
     c14:	11000215 	stw	r4,8(r2)
     c18:	9009883a 	mov	r4,r18
     c1c:	00039340 	call	3934 <__malloc_unlock>
     c20:	80800204 	addi	r2,r16,8
     c24:	003f6c06 	br	9d8 <_malloc_r+0xb8>
     c28:	8085883a 	add	r2,r16,r2
     c2c:	10c00117 	ldw	r3,4(r2)
     c30:	9009883a 	mov	r4,r18
     c34:	18c00054 	ori	r3,r3,1
     c38:	10c00115 	stw	r3,4(r2)
     c3c:	00039340 	call	3934 <__malloc_unlock>
     c40:	80800204 	addi	r2,r16,8
     c44:	003f6406 	br	9d8 <_malloc_r+0xb8>
     c48:	9c000217 	ldw	r16,8(r19)
     c4c:	00bfff04 	movi	r2,-4
     c50:	85400117 	ldw	r21,4(r16)
     c54:	a8aa703a 	and	r21,r21,r2
     c58:	ac400336 	bltu	r21,r17,c68 <_malloc_r+0x348>
     c5c:	ac45c83a 	sub	r2,r21,r17
     c60:	00c003c4 	movi	r3,15
     c64:	18805316 	blt	r3,r2,db4 <_malloc_r+0x494>
     c68:	d5e6e317 	ldw	r23,-25716(gp)
     c6c:	d0e00217 	ldw	r3,-32760(gp)
     c70:	00bfffc4 	movi	r2,-1
     c74:	8579883a 	add	fp,r16,r21
     c78:	8def883a 	add	r23,r17,r23
     c7c:	1880d226 	beq	r3,r2,fc8 <_malloc_r+0x6a8>
     c80:	bdc403c4 	addi	r23,r23,4111
     c84:	00bc0004 	movi	r2,-4096
     c88:	b8ae703a 	and	r23,r23,r2
     c8c:	9009883a 	mov	r4,r18
     c90:	b80b883a 	mov	r5,r23
     c94:	00019b80 	call	19b8 <_sbrk_r>
     c98:	1029883a 	mov	r20,r2
     c9c:	00bfffc4 	movi	r2,-1
     ca0:	a080d126 	beq	r20,r2,fe8 <_malloc_r+0x6c8>
     ca4:	a7009f36 	bltu	r20,fp,f24 <_malloc_r+0x604>
     ca8:	05800074 	movhi	r22,1
     cac:	b589fe04 	addi	r22,r22,10232
     cb0:	b0800017 	ldw	r2,0(r22)
     cb4:	b885883a 	add	r2,r23,r2
     cb8:	b0800015 	stw	r2,0(r22)
     cbc:	e500cf26 	beq	fp,r20,ffc <_malloc_r+0x6dc>
     cc0:	d1200217 	ldw	r4,-32760(gp)
     cc4:	00ffffc4 	movi	r3,-1
     cc8:	20c0e026 	beq	r4,r3,104c <_malloc_r+0x72c>
     ccc:	a739c83a 	sub	fp,r20,fp
     cd0:	1705883a 	add	r2,r2,fp
     cd4:	b0800015 	stw	r2,0(r22)
     cd8:	a08001cc 	andi	r2,r20,7
     cdc:	1000a526 	beq	r2,zero,f74 <_malloc_r+0x654>
     ce0:	a0a9c83a 	sub	r20,r20,r2
     ce4:	00c40204 	movi	r3,4104
     ce8:	a5000204 	addi	r20,r20,8
     cec:	1885c83a 	sub	r2,r3,r2
     cf0:	a5c7883a 	add	r3,r20,r23
     cf4:	18c3ffcc 	andi	r3,r3,4095
     cf8:	10efc83a 	sub	r23,r2,r3
     cfc:	9009883a 	mov	r4,r18
     d00:	b80b883a 	mov	r5,r23
     d04:	00019b80 	call	19b8 <_sbrk_r>
     d08:	00ffffc4 	movi	r3,-1
     d0c:	10c0cc26 	beq	r2,r3,1040 <_malloc_r+0x720>
     d10:	1505c83a 	sub	r2,r2,r20
     d14:	b887883a 	add	r3,r23,r2
     d18:	18c00054 	ori	r3,r3,1
     d1c:	b0800017 	ldw	r2,0(r22)
     d20:	9d000215 	stw	r20,8(r19)
     d24:	a0c00115 	stw	r3,4(r20)
     d28:	b885883a 	add	r2,r23,r2
     d2c:	b0800015 	stw	r2,0(r22)
     d30:	84c00e26 	beq	r16,r19,d6c <_malloc_r+0x44c>
     d34:	00c003c4 	movi	r3,15
     d38:	1d40902e 	bgeu	r3,r21,f7c <_malloc_r+0x65c>
     d3c:	ad7ffd04 	addi	r21,r21,-12
     d40:	013ffe04 	movi	r4,-8
     d44:	a908703a 	and	r4,r21,r4
     d48:	810b883a 	add	r5,r16,r4
     d4c:	01800144 	movi	r6,5
     d50:	29800115 	stw	r6,4(r5)
     d54:	29800215 	stw	r6,8(r5)
     d58:	81400117 	ldw	r5,4(r16)
     d5c:	2940004c 	andi	r5,r5,1
     d60:	214ab03a 	or	r5,r4,r5
     d64:	81400115 	stw	r5,4(r16)
     d68:	1900ae36 	bltu	r3,r4,1024 <_malloc_r+0x704>
     d6c:	d0e6e217 	ldw	r3,-25720(gp)
     d70:	1880012e 	bgeu	r3,r2,d78 <_malloc_r+0x458>
     d74:	d0a6e215 	stw	r2,-25720(gp)
     d78:	d0e6e117 	ldw	r3,-25724(gp)
     d7c:	9c000217 	ldw	r16,8(r19)
     d80:	1880012e 	bgeu	r3,r2,d88 <_malloc_r+0x468>
     d84:	d0a6e115 	stw	r2,-25724(gp)
     d88:	80c00117 	ldw	r3,4(r16)
     d8c:	00bfff04 	movi	r2,-4
     d90:	1886703a 	and	r3,r3,r2
     d94:	1c45c83a 	sub	r2,r3,r17
     d98:	1c400236 	bltu	r3,r17,da4 <_malloc_r+0x484>
     d9c:	00c003c4 	movi	r3,15
     da0:	18800416 	blt	r3,r2,db4 <_malloc_r+0x494>
     da4:	9009883a 	mov	r4,r18
     da8:	00039340 	call	3934 <__malloc_unlock>
     dac:	0005883a 	mov	r2,zero
     db0:	003f0906 	br	9d8 <_malloc_r+0xb8>
     db4:	88c00054 	ori	r3,r17,1
     db8:	10800054 	ori	r2,r2,1
     dbc:	80c00115 	stw	r3,4(r16)
     dc0:	8463883a 	add	r17,r16,r17
     dc4:	88800115 	stw	r2,4(r17)
     dc8:	9009883a 	mov	r4,r18
     dcc:	9c400215 	stw	r17,8(r19)
     dd0:	00039340 	call	3934 <__malloc_unlock>
     dd4:	80800204 	addi	r2,r16,8
     dd8:	003eff06 	br	9d8 <_malloc_r+0xb8>
     ddc:	00800504 	movi	r2,20
     de0:	1100492e 	bgeu	r2,r4,f08 <_malloc_r+0x5e8>
     de4:	00801504 	movi	r2,84
     de8:	11005c36 	bltu	r2,r4,f5c <_malloc_r+0x63c>
     dec:	8808d33a 	srli	r4,r17,12
     df0:	21001b84 	addi	r4,r4,110
     df4:	210b883a 	add	r5,r4,r4
     df8:	003f1006 	br	a3c <_malloc_r+0x11c>
     dfc:	1006d27a 	srli	r3,r2,9
     e00:	01400104 	movi	r5,4
     e04:	28c0432e 	bgeu	r5,r3,f14 <_malloc_r+0x5f4>
     e08:	01400504 	movi	r5,20
     e0c:	28c07036 	bltu	r5,r3,fd0 <_malloc_r+0x6b0>
     e10:	194016c4 	addi	r5,r3,91
     e14:	294d883a 	add	r6,r5,r5
     e18:	318d883a 	add	r6,r6,r6
     e1c:	318d883a 	add	r6,r6,r6
     e20:	998d883a 	add	r6,r19,r6
     e24:	30c00217 	ldw	r3,8(r6)
     e28:	01c00074 	movhi	r7,1
     e2c:	39fd7204 	addi	r7,r7,-2616
     e30:	19805726 	beq	r3,r6,f90 <_malloc_r+0x670>
     e34:	01ffff04 	movi	r7,-4
     e38:	19400117 	ldw	r5,4(r3)
     e3c:	29ca703a 	and	r5,r5,r7
     e40:	1140022e 	bgeu	r2,r5,e4c <_malloc_r+0x52c>
     e44:	18c00217 	ldw	r3,8(r3)
     e48:	30fffb1e 	bne	r6,r3,e38 <_malloc_r+0x518>
     e4c:	19400317 	ldw	r5,12(r3)
     e50:	98800117 	ldw	r2,4(r19)
     e54:	81400315 	stw	r5,12(r16)
     e58:	80c00215 	stw	r3,8(r16)
     e5c:	2c000215 	stw	r16,8(r5)
     e60:	1c000315 	stw	r16,12(r3)
     e64:	003f2b06 	br	b14 <_malloc_r+0x1f4>
     e68:	8445883a 	add	r2,r16,r17
     e6c:	8c400054 	ori	r17,r17,1
     e70:	18800515 	stw	r2,20(r3)
     e74:	18800415 	stw	r2,16(r3)
     e78:	29000054 	ori	r4,r5,1
     e7c:	1147883a 	add	r3,r2,r5
     e80:	84400115 	stw	r17,4(r16)
     e84:	11000115 	stw	r4,4(r2)
     e88:	12400315 	stw	r9,12(r2)
     e8c:	12400215 	stw	r9,8(r2)
     e90:	19400015 	stw	r5,0(r3)
     e94:	9009883a 	mov	r4,r18
     e98:	00039340 	call	3934 <__malloc_unlock>
     e9c:	80800204 	addi	r2,r16,8
     ea0:	003ecd06 	br	9d8 <_malloc_r+0xb8>
     ea4:	18800117 	ldw	r2,4(r3)
     ea8:	003f1a06 	br	b14 <_malloc_r+0x1f4>
     eac:	5ac00044 	addi	r11,r11,1
     eb0:	588000cc 	andi	r2,r11,3
     eb4:	52800204 	addi	r10,r10,8
     eb8:	103f2e1e 	bne	r2,zero,b74 <_malloc_r+0x254>
     ebc:	20c000cc 	andi	r3,r4,3
     ec0:	60bffe04 	addi	r2,r12,-8
     ec4:	18006f26 	beq	r3,zero,1084 <_malloc_r+0x764>
     ec8:	63000017 	ldw	r12,0(r12)
     ecc:	213fffc4 	addi	r4,r4,-1
     ed0:	60bffa26 	beq	r12,r2,ebc <_malloc_r+0x59c>
     ed4:	98800117 	ldw	r2,4(r19)
     ed8:	294b883a 	add	r5,r5,r5
     edc:	117f5a36 	bltu	r2,r5,c48 <_malloc_r+0x328>
     ee0:	283f5926 	beq	r5,zero,c48 <_malloc_r+0x328>
     ee4:	1146703a 	and	r3,r2,r5
     ee8:	18001626 	beq	r3,zero,f44 <_malloc_r+0x624>
     eec:	5809883a 	mov	r4,r11
     ef0:	003f1a06 	br	b5c <_malloc_r+0x23c>
     ef4:	80800204 	addi	r2,r16,8
     ef8:	84000517 	ldw	r16,20(r16)
     efc:	143ea81e 	bne	r2,r16,9a0 <_malloc_r+0x80>
     f00:	21000084 	addi	r4,r4,2
     f04:	003ee306 	br	a94 <_malloc_r+0x174>
     f08:	210016c4 	addi	r4,r4,91
     f0c:	210b883a 	add	r5,r4,r4
     f10:	003eca06 	br	a3c <_malloc_r+0x11c>
     f14:	100ad1ba 	srli	r5,r2,6
     f18:	29400e04 	addi	r5,r5,56
     f1c:	294d883a 	add	r6,r5,r5
     f20:	003fbd06 	br	e18 <_malloc_r+0x4f8>
     f24:	84ff6026 	beq	r16,r19,ca8 <_malloc_r+0x388>
     f28:	00800074 	movhi	r2,1
     f2c:	10bd7204 	addi	r2,r2,-2616
     f30:	14000217 	ldw	r16,8(r2)
     f34:	00bfff04 	movi	r2,-4
     f38:	80c00117 	ldw	r3,4(r16)
     f3c:	1886703a 	and	r3,r3,r2
     f40:	003f9406 	br	d94 <_malloc_r+0x474>
     f44:	294b883a 	add	r5,r5,r5
     f48:	1146703a 	and	r3,r2,r5
     f4c:	5ac00104 	addi	r11,r11,4
     f50:	183ffc26 	beq	r3,zero,f44 <_malloc_r+0x624>
     f54:	5809883a 	mov	r4,r11
     f58:	003f0006 	br	b5c <_malloc_r+0x23c>
     f5c:	00805504 	movi	r2,340
     f60:	11001336 	bltu	r2,r4,fb0 <_malloc_r+0x690>
     f64:	8808d3fa 	srli	r4,r17,15
     f68:	21001dc4 	addi	r4,r4,119
     f6c:	210b883a 	add	r5,r4,r4
     f70:	003eb206 	br	a3c <_malloc_r+0x11c>
     f74:	00840004 	movi	r2,4096
     f78:	003f5d06 	br	cf0 <_malloc_r+0x3d0>
     f7c:	00800044 	movi	r2,1
     f80:	a0800115 	stw	r2,4(r20)
     f84:	a021883a 	mov	r16,r20
     f88:	0007883a 	mov	r3,zero
     f8c:	003f8106 	br	d94 <_malloc_r+0x474>
     f90:	280bd0ba 	srai	r5,r5,2
     f94:	01800044 	movi	r6,1
     f98:	38800117 	ldw	r2,4(r7)
     f9c:	314c983a 	sll	r6,r6,r5
     fa0:	180b883a 	mov	r5,r3
     fa4:	3084b03a 	or	r2,r6,r2
     fa8:	38800115 	stw	r2,4(r7)
     fac:	003fa906 	br	e54 <_malloc_r+0x534>
     fb0:	00815504 	movi	r2,1364
     fb4:	11001836 	bltu	r2,r4,1018 <_malloc_r+0x6f8>
     fb8:	8808d4ba 	srli	r4,r17,18
     fbc:	21001f04 	addi	r4,r4,124
     fc0:	210b883a 	add	r5,r4,r4
     fc4:	003e9d06 	br	a3c <_malloc_r+0x11c>
     fc8:	bdc00404 	addi	r23,r23,16
     fcc:	003f2f06 	br	c8c <_malloc_r+0x36c>
     fd0:	01401504 	movi	r5,84
     fd4:	28c01f36 	bltu	r5,r3,1054 <_malloc_r+0x734>
     fd8:	100ad33a 	srli	r5,r2,12
     fdc:	29401b84 	addi	r5,r5,110
     fe0:	294d883a 	add	r6,r5,r5
     fe4:	003f8c06 	br	e18 <_malloc_r+0x4f8>
     fe8:	9c000217 	ldw	r16,8(r19)
     fec:	00bfff04 	movi	r2,-4
     ff0:	80c00117 	ldw	r3,4(r16)
     ff4:	1886703a 	and	r3,r3,r2
     ff8:	003f6606 	br	d94 <_malloc_r+0x474>
     ffc:	e0c3ffcc 	andi	r3,fp,4095
    1000:	183f2f1e 	bne	r3,zero,cc0 <_malloc_r+0x3a0>
    1004:	98c00217 	ldw	r3,8(r19)
    1008:	bd49883a 	add	r4,r23,r21
    100c:	21000054 	ori	r4,r4,1
    1010:	19000115 	stw	r4,4(r3)
    1014:	003f5506 	br	d6c <_malloc_r+0x44c>
    1018:	01403f04 	movi	r5,252
    101c:	01001f84 	movi	r4,126
    1020:	003e8606 	br	a3c <_malloc_r+0x11c>
    1024:	9009883a 	mov	r4,r18
    1028:	81400204 	addi	r5,r16,8
    102c:	00021bc0 	call	21bc <_free_r>
    1030:	00800074 	movhi	r2,1
    1034:	1089fe04 	addi	r2,r2,10232
    1038:	10800017 	ldw	r2,0(r2)
    103c:	003f4b06 	br	d6c <_malloc_r+0x44c>
    1040:	00c00044 	movi	r3,1
    1044:	002f883a 	mov	r23,zero
    1048:	003f3406 	br	d1c <_malloc_r+0x3fc>
    104c:	d5200215 	stw	r20,-32760(gp)
    1050:	003f2106 	br	cd8 <_malloc_r+0x3b8>
    1054:	01405504 	movi	r5,340
    1058:	28c00436 	bltu	r5,r3,106c <_malloc_r+0x74c>
    105c:	100ad3fa 	srli	r5,r2,15
    1060:	29401dc4 	addi	r5,r5,119
    1064:	294d883a 	add	r6,r5,r5
    1068:	003f6b06 	br	e18 <_malloc_r+0x4f8>
    106c:	01415504 	movi	r5,1364
    1070:	28c00936 	bltu	r5,r3,1098 <_malloc_r+0x778>
    1074:	100ad4ba 	srli	r5,r2,18
    1078:	29401f04 	addi	r5,r5,124
    107c:	294d883a 	add	r6,r5,r5
    1080:	003f6506 	br	e18 <_malloc_r+0x4f8>
    1084:	98800117 	ldw	r2,4(r19)
    1088:	0146303a 	nor	r3,zero,r5
    108c:	1884703a 	and	r2,r3,r2
    1090:	98800115 	stw	r2,4(r19)
    1094:	003f9006 	br	ed8 <_malloc_r+0x5b8>
    1098:	01803f04 	movi	r6,252
    109c:	01401f84 	movi	r5,126
    10a0:	003f5d06 	br	e18 <_malloc_r+0x4f8>

000010a4 <memchr>:
    10a4:	008000c4 	movi	r2,3
    10a8:	29403fcc 	andi	r5,r5,255
    10ac:	1180282e 	bgeu	r2,r6,1150 <memchr+0xac>
    10b0:	2086703a 	and	r3,r4,r2
    10b4:	1800351e 	bne	r3,zero,118c <memchr+0xe8>
    10b8:	2816923a 	slli	r11,r5,8
    10bc:	2093883a 	add	r9,r4,r2
    10c0:	22000084 	addi	r8,r4,2
    10c4:	5957883a 	add	r11,r11,r5
    10c8:	5816923a 	slli	r11,r11,8
    10cc:	20c00044 	addi	r3,r4,1
    10d0:	037fbff4 	movhi	r13,65279
    10d4:	6b7fbfc4 	addi	r13,r13,-257
    10d8:	5957883a 	add	r11,r11,r5
    10dc:	5816923a 	slli	r11,r11,8
    10e0:	03202074 	movhi	r12,32897
    10e4:	63202004 	addi	r12,r12,-32640
    10e8:	101d883a 	mov	r14,r2
    10ec:	5957883a 	add	r11,r11,r5
    10f0:	21c00017 	ldw	r7,0(r4)
    10f4:	31bfff04 	addi	r6,r6,-4
    10f8:	1805883a 	mov	r2,r3
    10fc:	3acef03a 	xor	r7,r7,r11
    1100:	3b55883a 	add	r10,r7,r13
    1104:	01ce303a 	nor	r7,zero,r7
    1108:	51ce703a 	and	r7,r10,r7
    110c:	3b0e703a 	and	r7,r7,r12
    1110:	38000a26 	beq	r7,zero,113c <memchr+0x98>
    1114:	21c00003 	ldbu	r7,0(r4)
    1118:	39401e26 	beq	r7,r5,1194 <memchr+0xf0>
    111c:	19c00003 	ldbu	r7,0(r3)
    1120:	39401926 	beq	r7,r5,1188 <memchr+0xe4>
    1124:	41c00003 	ldbu	r7,0(r8)
    1128:	4005883a 	mov	r2,r8
    112c:	39401626 	beq	r7,r5,1188 <memchr+0xe4>
    1130:	49c00003 	ldbu	r7,0(r9)
    1134:	4805883a 	mov	r2,r9
    1138:	39401326 	beq	r7,r5,1188 <memchr+0xe4>
    113c:	21000104 	addi	r4,r4,4
    1140:	4a400104 	addi	r9,r9,4
    1144:	42000104 	addi	r8,r8,4
    1148:	18c00104 	addi	r3,r3,4
    114c:	71bfe836 	bltu	r14,r6,10f0 <memchr+0x4c>
    1150:	2005883a 	mov	r2,r4
    1154:	30000a26 	beq	r6,zero,1180 <memchr+0xdc>
    1158:	10c00003 	ldbu	r3,0(r2)
    115c:	19400a26 	beq	r3,r5,1188 <memchr+0xe4>
    1160:	10c00044 	addi	r3,r2,1
    1164:	118d883a 	add	r6,r2,r6
    1168:	00000306 	br	1178 <memchr+0xd4>
    116c:	11000003 	ldbu	r4,0(r2)
    1170:	18c00044 	addi	r3,r3,1
    1174:	21400426 	beq	r4,r5,1188 <memchr+0xe4>
    1178:	1805883a 	mov	r2,r3
    117c:	19bffb1e 	bne	r3,r6,116c <memchr+0xc8>
    1180:	0005883a 	mov	r2,zero
    1184:	f800283a 	ret
    1188:	f800283a 	ret
    118c:	2005883a 	mov	r2,r4
    1190:	003ff106 	br	1158 <memchr+0xb4>
    1194:	2005883a 	mov	r2,r4
    1198:	f800283a 	ret

0000119c <memcpy>:
    119c:	00c003c4 	movi	r3,15
    11a0:	2005883a 	mov	r2,r4
    11a4:	3009883a 	mov	r4,r6
    11a8:	1980032e 	bgeu	r3,r6,11b8 <memcpy+0x1c>
    11ac:	2886b03a 	or	r3,r5,r2
    11b0:	18c000cc 	andi	r3,r3,3
    11b4:	18000926 	beq	r3,zero,11dc <memcpy+0x40>
    11b8:	1007883a 	mov	r3,r2
    11bc:	290f883a 	add	r7,r5,r4
    11c0:	20000526 	beq	r4,zero,11d8 <memcpy+0x3c>
    11c4:	29800003 	ldbu	r6,0(r5)
    11c8:	18c00044 	addi	r3,r3,1
    11cc:	29400044 	addi	r5,r5,1
    11d0:	19bfffc5 	stb	r6,-1(r3)
    11d4:	29fffb1e 	bne	r5,r7,11c4 <memcpy+0x28>
    11d8:	f800283a 	ret
    11dc:	327ffc04 	addi	r9,r6,-16
    11e0:	4812d13a 	srli	r9,r9,4
    11e4:	11000404 	addi	r4,r2,16
    11e8:	1007883a 	mov	r3,r2
    11ec:	4810913a 	slli	r8,r9,4
    11f0:	280f883a 	mov	r7,r5
    11f4:	2209883a 	add	r4,r4,r8
    11f8:	3a000017 	ldw	r8,0(r7)
    11fc:	18c00404 	addi	r3,r3,16
    1200:	39c00404 	addi	r7,r7,16
    1204:	1a3ffc15 	stw	r8,-16(r3)
    1208:	3a3ffd17 	ldw	r8,-12(r7)
    120c:	1a3ffd15 	stw	r8,-12(r3)
    1210:	3a3ffe17 	ldw	r8,-8(r7)
    1214:	1a3ffe15 	stw	r8,-8(r3)
    1218:	3a3fff17 	ldw	r8,-4(r7)
    121c:	1a3fff15 	stw	r8,-4(r3)
    1220:	193ff51e 	bne	r3,r4,11f8 <memcpy+0x5c>
    1224:	49c00044 	addi	r7,r9,1
    1228:	380e913a 	slli	r7,r7,4
    122c:	310003cc 	andi	r4,r6,15
    1230:	018000c4 	movi	r6,3
    1234:	11c7883a 	add	r3,r2,r7
    1238:	29cb883a 	add	r5,r5,r7
    123c:	313fdf2e 	bgeu	r6,r4,11bc <memcpy+0x20>
    1240:	213fff04 	addi	r4,r4,-4
    1244:	2014d0ba 	srli	r10,r4,2
    1248:	1a400104 	addi	r9,r3,4
    124c:	180d883a 	mov	r6,r3
    1250:	528f883a 	add	r7,r10,r10
    1254:	39cf883a 	add	r7,r7,r7
    1258:	49d3883a 	add	r9,r9,r7
    125c:	280f883a 	mov	r7,r5
    1260:	3a000017 	ldw	r8,0(r7)
    1264:	31800104 	addi	r6,r6,4
    1268:	39c00104 	addi	r7,r7,4
    126c:	323fff15 	stw	r8,-4(r6)
    1270:	327ffb1e 	bne	r6,r9,1260 <memcpy+0xc4>
    1274:	51800044 	addi	r6,r10,1
    1278:	52bfff24 	muli	r10,r10,-4
    127c:	318d883a 	add	r6,r6,r6
    1280:	318d883a 	add	r6,r6,r6
    1284:	5109883a 	add	r4,r10,r4
    1288:	298b883a 	add	r5,r5,r6
    128c:	1987883a 	add	r3,r3,r6
    1290:	003fca06 	br	11bc <memcpy+0x20>

00001294 <memmove>:
    1294:	2005883a 	mov	r2,r4
    1298:	300f883a 	mov	r7,r6
    129c:	29000b2e 	bgeu	r5,r4,12cc <memmove+0x38>
    12a0:	2987883a 	add	r3,r5,r6
    12a4:	20c0092e 	bgeu	r4,r3,12cc <memmove+0x38>
    12a8:	218b883a 	add	r5,r4,r6
    12ac:	198fc83a 	sub	r7,r3,r6
    12b0:	30003f26 	beq	r6,zero,13b0 <memmove+0x11c>
    12b4:	18ffffc4 	addi	r3,r3,-1
    12b8:	19000003 	ldbu	r4,0(r3)
    12bc:	297fffc4 	addi	r5,r5,-1
    12c0:	29000005 	stb	r4,0(r5)
    12c4:	19fffb1e 	bne	r3,r7,12b4 <memmove+0x20>
    12c8:	f800283a 	ret
    12cc:	00c003c4 	movi	r3,15
    12d0:	1980382e 	bgeu	r3,r6,13b4 <memmove+0x120>
    12d4:	2886b03a 	or	r3,r5,r2
    12d8:	18c000cc 	andi	r3,r3,3
    12dc:	1800351e 	bne	r3,zero,13b4 <memmove+0x120>
    12e0:	327ffc04 	addi	r9,r6,-16
    12e4:	4812d13a 	srli	r9,r9,4
    12e8:	12000404 	addi	r8,r2,16
    12ec:	1007883a 	mov	r3,r2
    12f0:	4808913a 	slli	r4,r9,4
    12f4:	280f883a 	mov	r7,r5
    12f8:	4111883a 	add	r8,r8,r4
    12fc:	39000017 	ldw	r4,0(r7)
    1300:	18c00404 	addi	r3,r3,16
    1304:	39c00404 	addi	r7,r7,16
    1308:	193ffc15 	stw	r4,-16(r3)
    130c:	393ffd17 	ldw	r4,-12(r7)
    1310:	193ffd15 	stw	r4,-12(r3)
    1314:	393ffe17 	ldw	r4,-8(r7)
    1318:	193ffe15 	stw	r4,-8(r3)
    131c:	393fff17 	ldw	r4,-4(r7)
    1320:	193fff15 	stw	r4,-4(r3)
    1324:	1a3ff51e 	bne	r3,r8,12fc <memmove+0x68>
    1328:	49000044 	addi	r4,r9,1
    132c:	2008913a 	slli	r4,r4,4
    1330:	31c003cc 	andi	r7,r6,15
    1334:	1107883a 	add	r3,r2,r4
    1338:	290b883a 	add	r5,r5,r4
    133c:	010000c4 	movi	r4,3
    1340:	21c0142e 	bgeu	r4,r7,1394 <memmove+0x100>
    1344:	39ffff04 	addi	r7,r7,-4
    1348:	3814d0ba 	srli	r10,r7,2
    134c:	1a400104 	addi	r9,r3,4
    1350:	180d883a 	mov	r6,r3
    1354:	5289883a 	add	r4,r10,r10
    1358:	2109883a 	add	r4,r4,r4
    135c:	4913883a 	add	r9,r9,r4
    1360:	2809883a 	mov	r4,r5
    1364:	22000017 	ldw	r8,0(r4)
    1368:	31800104 	addi	r6,r6,4
    136c:	21000104 	addi	r4,r4,4
    1370:	323fff15 	stw	r8,-4(r6)
    1374:	327ffb1e 	bne	r6,r9,1364 <memmove+0xd0>
    1378:	51000044 	addi	r4,r10,1
    137c:	52bfff24 	muli	r10,r10,-4
    1380:	2109883a 	add	r4,r4,r4
    1384:	2109883a 	add	r4,r4,r4
    1388:	51cf883a 	add	r7,r10,r7
    138c:	290b883a 	add	r5,r5,r4
    1390:	1907883a 	add	r3,r3,r4
    1394:	38000626 	beq	r7,zero,13b0 <memmove+0x11c>
    1398:	19cf883a 	add	r7,r3,r7
    139c:	29800003 	ldbu	r6,0(r5)
    13a0:	18c00044 	addi	r3,r3,1
    13a4:	29400044 	addi	r5,r5,1
    13a8:	19bfffc5 	stb	r6,-1(r3)
    13ac:	19fffb1e 	bne	r3,r7,139c <memmove+0x108>
    13b0:	f800283a 	ret
    13b4:	1007883a 	mov	r3,r2
    13b8:	003ff606 	br	1394 <memmove+0x100>

000013bc <_realloc_r>:
    13bc:	defff504 	addi	sp,sp,-44
    13c0:	dd400615 	stw	r21,24(sp)
    13c4:	dc800315 	stw	r18,12(sp)
    13c8:	dc000115 	stw	r16,4(sp)
    13cc:	dfc00a15 	stw	ra,40(sp)
    13d0:	df000915 	stw	fp,36(sp)
    13d4:	ddc00815 	stw	r23,32(sp)
    13d8:	dd800715 	stw	r22,28(sp)
    13dc:	dd000515 	stw	r20,20(sp)
    13e0:	dcc00415 	stw	r19,16(sp)
    13e4:	dc400215 	stw	r17,8(sp)
    13e8:	2821883a 	mov	r16,r5
    13ec:	202b883a 	mov	r21,r4
    13f0:	3025883a 	mov	r18,r6
    13f4:	28009626 	beq	r5,zero,1650 <_realloc_r+0x294>
    13f8:	00038200 	call	3820 <__malloc_lock>
    13fc:	80bfff17 	ldw	r2,-4(r16)
    1400:	04ffff04 	movi	r19,-4
    1404:	90c002c4 	addi	r3,r18,11
    1408:	01000584 	movi	r4,22
    140c:	85bffe04 	addi	r22,r16,-8
    1410:	14e6703a 	and	r19,r2,r19
    1414:	20c0372e 	bgeu	r4,r3,14f4 <_realloc_r+0x138>
    1418:	047ffe04 	movi	r17,-8
    141c:	1c62703a 	and	r17,r3,r17
    1420:	8807883a 	mov	r3,r17
    1424:	88005a16 	blt	r17,zero,1590 <_realloc_r+0x1d4>
    1428:	8c805936 	bltu	r17,r18,1590 <_realloc_r+0x1d4>
    142c:	98c0340e 	bge	r19,r3,1500 <_realloc_r+0x144>
    1430:	07000074 	movhi	fp,1
    1434:	e73d7204 	addi	fp,fp,-2616
    1438:	e1400217 	ldw	r5,8(fp)
    143c:	b4c9883a 	add	r4,r22,r19
    1440:	29009026 	beq	r5,r4,1684 <_realloc_r+0x2c8>
    1444:	21800117 	ldw	r6,4(r4)
    1448:	01ffff84 	movi	r7,-2
    144c:	31ce703a 	and	r7,r6,r7
    1450:	21cf883a 	add	r7,r4,r7
    1454:	39c00117 	ldw	r7,4(r7)
    1458:	39c0004c 	andi	r7,r7,1
    145c:	38004326 	beq	r7,zero,156c <_realloc_r+0x1b0>
    1460:	000d883a 	mov	r6,zero
    1464:	0009883a 	mov	r4,zero
    1468:	1080004c 	andi	r2,r2,1
    146c:	10005a1e 	bne	r2,zero,15d8 <_realloc_r+0x21c>
    1470:	85fffe17 	ldw	r23,-8(r16)
    1474:	00bfff04 	movi	r2,-4
    1478:	b5efc83a 	sub	r23,r22,r23
    147c:	b9c00117 	ldw	r7,4(r23)
    1480:	388e703a 	and	r7,r7,r2
    1484:	3ccf883a 	add	r7,r7,r19
    1488:	20005226 	beq	r4,zero,15d4 <_realloc_r+0x218>
    148c:	31e9883a 	add	r20,r6,r7
    1490:	2140c726 	beq	r4,r5,17b0 <_realloc_r+0x3f4>
    1494:	a0c04f16 	blt	r20,r3,15d4 <_realloc_r+0x218>
    1498:	20800317 	ldw	r2,12(r4)
    149c:	20c00217 	ldw	r3,8(r4)
    14a0:	99bfff04 	addi	r6,r19,-4
    14a4:	01000904 	movi	r4,36
    14a8:	18800315 	stw	r2,12(r3)
    14ac:	10c00215 	stw	r3,8(r2)
    14b0:	b8c00217 	ldw	r3,8(r23)
    14b4:	b8800317 	ldw	r2,12(r23)
    14b8:	bc800204 	addi	r18,r23,8
    14bc:	18800315 	stw	r2,12(r3)
    14c0:	10c00215 	stw	r3,8(r2)
    14c4:	2180ed36 	bltu	r4,r6,187c <_realloc_r+0x4c0>
    14c8:	008004c4 	movi	r2,19
    14cc:	11809b2e 	bgeu	r2,r6,173c <_realloc_r+0x380>
    14d0:	80800017 	ldw	r2,0(r16)
    14d4:	b8800215 	stw	r2,8(r23)
    14d8:	80800117 	ldw	r2,4(r16)
    14dc:	b8800315 	stw	r2,12(r23)
    14e0:	008006c4 	movi	r2,27
    14e4:	1180f936 	bltu	r2,r6,18cc <_realloc_r+0x510>
    14e8:	b8800404 	addi	r2,r23,16
    14ec:	80c00204 	addi	r3,r16,8
    14f0:	00009406 	br	1744 <_realloc_r+0x388>
    14f4:	00c00404 	movi	r3,16
    14f8:	1823883a 	mov	r17,r3
    14fc:	003fca06 	br	1428 <_realloc_r+0x6c>
    1500:	9829883a 	mov	r20,r19
    1504:	a447c83a 	sub	r3,r20,r17
    1508:	010003c4 	movi	r4,15
    150c:	1080004c 	andi	r2,r2,1
    1510:	20c02336 	bltu	r4,r3,15a0 <_realloc_r+0x1e4>
    1514:	1504b03a 	or	r2,r2,r20
    1518:	b0800115 	stw	r2,4(r22)
    151c:	b52d883a 	add	r22,r22,r20
    1520:	b0800117 	ldw	r2,4(r22)
    1524:	10800054 	ori	r2,r2,1
    1528:	b0800115 	stw	r2,4(r22)
    152c:	a809883a 	mov	r4,r21
    1530:	00039340 	call	3934 <__malloc_unlock>
    1534:	8025883a 	mov	r18,r16
    1538:	9005883a 	mov	r2,r18
    153c:	dfc00a17 	ldw	ra,40(sp)
    1540:	df000917 	ldw	fp,36(sp)
    1544:	ddc00817 	ldw	r23,32(sp)
    1548:	dd800717 	ldw	r22,28(sp)
    154c:	dd400617 	ldw	r21,24(sp)
    1550:	dd000517 	ldw	r20,20(sp)
    1554:	dcc00417 	ldw	r19,16(sp)
    1558:	dc800317 	ldw	r18,12(sp)
    155c:	dc400217 	ldw	r17,8(sp)
    1560:	dc000117 	ldw	r16,4(sp)
    1564:	dec00b04 	addi	sp,sp,44
    1568:	f800283a 	ret
    156c:	01ffff04 	movi	r7,-4
    1570:	31cc703a 	and	r6,r6,r7
    1574:	34e9883a 	add	r20,r6,r19
    1578:	a0ffbb16 	blt	r20,r3,1468 <_realloc_r+0xac>
    157c:	20c00317 	ldw	r3,12(r4)
    1580:	21000217 	ldw	r4,8(r4)
    1584:	20c00315 	stw	r3,12(r4)
    1588:	19000215 	stw	r4,8(r3)
    158c:	003fdd06 	br	1504 <_realloc_r+0x148>
    1590:	00800304 	movi	r2,12
    1594:	a8800015 	stw	r2,0(r21)
    1598:	0025883a 	mov	r18,zero
    159c:	003fe606 	br	1538 <_realloc_r+0x17c>
    15a0:	1444b03a 	or	r2,r2,r17
    15a4:	b0800115 	stw	r2,4(r22)
    15a8:	b44b883a 	add	r5,r22,r17
    15ac:	18800054 	ori	r2,r3,1
    15b0:	28800115 	stw	r2,4(r5)
    15b4:	28c7883a 	add	r3,r5,r3
    15b8:	18800117 	ldw	r2,4(r3)
    15bc:	a809883a 	mov	r4,r21
    15c0:	29400204 	addi	r5,r5,8
    15c4:	10800054 	ori	r2,r2,1
    15c8:	18800115 	stw	r2,4(r3)
    15cc:	00021bc0 	call	21bc <_free_r>
    15d0:	003fd606 	br	152c <_realloc_r+0x170>
    15d4:	38c0330e 	bge	r7,r3,16a4 <_realloc_r+0x2e8>
    15d8:	900b883a 	mov	r5,r18
    15dc:	a809883a 	mov	r4,r21
    15e0:	00009200 	call	920 <_malloc_r>
    15e4:	1025883a 	mov	r18,r2
    15e8:	10001626 	beq	r2,zero,1644 <_realloc_r+0x288>
    15ec:	80bfff17 	ldw	r2,-4(r16)
    15f0:	00ffff84 	movi	r3,-2
    15f4:	913ffe04 	addi	r4,r18,-8
    15f8:	10c6703a 	and	r3,r2,r3
    15fc:	b0c7883a 	add	r3,r22,r3
    1600:	20c09926 	beq	r4,r3,1868 <_realloc_r+0x4ac>
    1604:	99bfff04 	addi	r6,r19,-4
    1608:	00800904 	movi	r2,36
    160c:	11806436 	bltu	r2,r6,17a0 <_realloc_r+0x3e4>
    1610:	00c004c4 	movi	r3,19
    1614:	19804036 	bltu	r3,r6,1718 <_realloc_r+0x35c>
    1618:	9005883a 	mov	r2,r18
    161c:	8007883a 	mov	r3,r16
    1620:	19000017 	ldw	r4,0(r3)
    1624:	11000015 	stw	r4,0(r2)
    1628:	19000117 	ldw	r4,4(r3)
    162c:	11000115 	stw	r4,4(r2)
    1630:	18c00217 	ldw	r3,8(r3)
    1634:	10c00215 	stw	r3,8(r2)
    1638:	a809883a 	mov	r4,r21
    163c:	800b883a 	mov	r5,r16
    1640:	00021bc0 	call	21bc <_free_r>
    1644:	a809883a 	mov	r4,r21
    1648:	00039340 	call	3934 <__malloc_unlock>
    164c:	003fba06 	br	1538 <_realloc_r+0x17c>
    1650:	300b883a 	mov	r5,r6
    1654:	dfc00a17 	ldw	ra,40(sp)
    1658:	df000917 	ldw	fp,36(sp)
    165c:	ddc00817 	ldw	r23,32(sp)
    1660:	dd800717 	ldw	r22,28(sp)
    1664:	dd400617 	ldw	r21,24(sp)
    1668:	dd000517 	ldw	r20,20(sp)
    166c:	dcc00417 	ldw	r19,16(sp)
    1670:	dc800317 	ldw	r18,12(sp)
    1674:	dc400217 	ldw	r17,8(sp)
    1678:	dc000117 	ldw	r16,4(sp)
    167c:	dec00b04 	addi	sp,sp,44
    1680:	00009201 	jmpi	920 <_malloc_r>
    1684:	29800117 	ldw	r6,4(r5)
    1688:	013fff04 	movi	r4,-4
    168c:	89c00404 	addi	r7,r17,16
    1690:	310c703a 	and	r6,r6,r4
    1694:	34c9883a 	add	r4,r6,r19
    1698:	21c0340e 	bge	r4,r7,176c <_realloc_r+0x3b0>
    169c:	2809883a 	mov	r4,r5
    16a0:	003f7106 	br	1468 <_realloc_r+0xac>
    16a4:	b8800317 	ldw	r2,12(r23)
    16a8:	b8c00217 	ldw	r3,8(r23)
    16ac:	99bfff04 	addi	r6,r19,-4
    16b0:	01000904 	movi	r4,36
    16b4:	18800315 	stw	r2,12(r3)
    16b8:	10c00215 	stw	r3,8(r2)
    16bc:	bc800204 	addi	r18,r23,8
    16c0:	21807836 	bltu	r4,r6,18a4 <_realloc_r+0x4e8>
    16c4:	008004c4 	movi	r2,19
    16c8:	1180732e 	bgeu	r2,r6,1898 <_realloc_r+0x4dc>
    16cc:	80800017 	ldw	r2,0(r16)
    16d0:	b8800215 	stw	r2,8(r23)
    16d4:	80800117 	ldw	r2,4(r16)
    16d8:	b8800315 	stw	r2,12(r23)
    16dc:	008006c4 	movi	r2,27
    16e0:	11808936 	bltu	r2,r6,1908 <_realloc_r+0x54c>
    16e4:	b8800404 	addi	r2,r23,16
    16e8:	80c00204 	addi	r3,r16,8
    16ec:	19000017 	ldw	r4,0(r3)
    16f0:	9021883a 	mov	r16,r18
    16f4:	3829883a 	mov	r20,r7
    16f8:	11000015 	stw	r4,0(r2)
    16fc:	19000117 	ldw	r4,4(r3)
    1700:	b82d883a 	mov	r22,r23
    1704:	11000115 	stw	r4,4(r2)
    1708:	18c00217 	ldw	r3,8(r3)
    170c:	10c00215 	stw	r3,8(r2)
    1710:	b8800117 	ldw	r2,4(r23)
    1714:	003f7b06 	br	1504 <_realloc_r+0x148>
    1718:	80c00017 	ldw	r3,0(r16)
    171c:	90c00015 	stw	r3,0(r18)
    1720:	80c00117 	ldw	r3,4(r16)
    1724:	90c00115 	stw	r3,4(r18)
    1728:	00c006c4 	movi	r3,27
    172c:	19804636 	bltu	r3,r6,1848 <_realloc_r+0x48c>
    1730:	90800204 	addi	r2,r18,8
    1734:	80c00204 	addi	r3,r16,8
    1738:	003fb906 	br	1620 <_realloc_r+0x264>
    173c:	9005883a 	mov	r2,r18
    1740:	8007883a 	mov	r3,r16
    1744:	19000017 	ldw	r4,0(r3)
    1748:	9021883a 	mov	r16,r18
    174c:	b82d883a 	mov	r22,r23
    1750:	11000015 	stw	r4,0(r2)
    1754:	19000117 	ldw	r4,4(r3)
    1758:	11000115 	stw	r4,4(r2)
    175c:	18c00217 	ldw	r3,8(r3)
    1760:	10c00215 	stw	r3,8(r2)
    1764:	b8800117 	ldw	r2,4(r23)
    1768:	003f6606 	br	1504 <_realloc_r+0x148>
    176c:	2445c83a 	sub	r2,r4,r17
    1770:	b46d883a 	add	r22,r22,r17
    1774:	10800054 	ori	r2,r2,1
    1778:	b0800115 	stw	r2,4(r22)
    177c:	80bfff17 	ldw	r2,-4(r16)
    1780:	a809883a 	mov	r4,r21
    1784:	e5800215 	stw	r22,8(fp)
    1788:	1080004c 	andi	r2,r2,1
    178c:	88a2b03a 	or	r17,r17,r2
    1790:	847fff15 	stw	r17,-4(r16)
    1794:	00039340 	call	3934 <__malloc_unlock>
    1798:	8025883a 	mov	r18,r16
    179c:	003f6606 	br	1538 <_realloc_r+0x17c>
    17a0:	9009883a 	mov	r4,r18
    17a4:	800b883a 	mov	r5,r16
    17a8:	00012940 	call	1294 <memmove>
    17ac:	003fa206 	br	1638 <_realloc_r+0x27c>
    17b0:	88800404 	addi	r2,r17,16
    17b4:	a0bf8716 	blt	r20,r2,15d4 <_realloc_r+0x218>
    17b8:	b8800317 	ldw	r2,12(r23)
    17bc:	b8c00217 	ldw	r3,8(r23)
    17c0:	99bfff04 	addi	r6,r19,-4
    17c4:	01000904 	movi	r4,36
    17c8:	18800315 	stw	r2,12(r3)
    17cc:	10c00215 	stw	r3,8(r2)
    17d0:	bc800204 	addi	r18,r23,8
    17d4:	21806536 	bltu	r4,r6,196c <_realloc_r+0x5b0>
    17d8:	008004c4 	movi	r2,19
    17dc:	1180592e 	bgeu	r2,r6,1944 <_realloc_r+0x588>
    17e0:	80800017 	ldw	r2,0(r16)
    17e4:	b8800215 	stw	r2,8(r23)
    17e8:	80800117 	ldw	r2,4(r16)
    17ec:	b8800315 	stw	r2,12(r23)
    17f0:	008006c4 	movi	r2,27
    17f4:	11806136 	bltu	r2,r6,197c <_realloc_r+0x5c0>
    17f8:	b8800404 	addi	r2,r23,16
    17fc:	80c00204 	addi	r3,r16,8
    1800:	19000017 	ldw	r4,0(r3)
    1804:	11000015 	stw	r4,0(r2)
    1808:	19000117 	ldw	r4,4(r3)
    180c:	11000115 	stw	r4,4(r2)
    1810:	18c00217 	ldw	r3,8(r3)
    1814:	10c00215 	stw	r3,8(r2)
    1818:	a447c83a 	sub	r3,r20,r17
    181c:	bc45883a 	add	r2,r23,r17
    1820:	18c00054 	ori	r3,r3,1
    1824:	10c00115 	stw	r3,4(r2)
    1828:	b8c00117 	ldw	r3,4(r23)
    182c:	e0800215 	stw	r2,8(fp)
    1830:	a809883a 	mov	r4,r21
    1834:	1880004c 	andi	r2,r3,1
    1838:	88a2b03a 	or	r17,r17,r2
    183c:	bc400115 	stw	r17,4(r23)
    1840:	00039340 	call	3934 <__malloc_unlock>
    1844:	003f3c06 	br	1538 <_realloc_r+0x17c>
    1848:	80c00217 	ldw	r3,8(r16)
    184c:	90c00215 	stw	r3,8(r18)
    1850:	80c00317 	ldw	r3,12(r16)
    1854:	90c00315 	stw	r3,12(r18)
    1858:	30802426 	beq	r6,r2,18ec <_realloc_r+0x530>
    185c:	90800404 	addi	r2,r18,16
    1860:	80c00404 	addi	r3,r16,16
    1864:	003f6e06 	br	1620 <_realloc_r+0x264>
    1868:	953fff17 	ldw	r20,-4(r18)
    186c:	00ffff04 	movi	r3,-4
    1870:	a0e8703a 	and	r20,r20,r3
    1874:	a4e9883a 	add	r20,r20,r19
    1878:	003f2206 	br	1504 <_realloc_r+0x148>
    187c:	800b883a 	mov	r5,r16
    1880:	9009883a 	mov	r4,r18
    1884:	00012940 	call	1294 <memmove>
    1888:	9021883a 	mov	r16,r18
    188c:	b8800117 	ldw	r2,4(r23)
    1890:	b82d883a 	mov	r22,r23
    1894:	003f1b06 	br	1504 <_realloc_r+0x148>
    1898:	9005883a 	mov	r2,r18
    189c:	8007883a 	mov	r3,r16
    18a0:	003f9206 	br	16ec <_realloc_r+0x330>
    18a4:	800b883a 	mov	r5,r16
    18a8:	9009883a 	mov	r4,r18
    18ac:	d9c00015 	stw	r7,0(sp)
    18b0:	00012940 	call	1294 <memmove>
    18b4:	d9c00017 	ldw	r7,0(sp)
    18b8:	9021883a 	mov	r16,r18
    18bc:	b8800117 	ldw	r2,4(r23)
    18c0:	3829883a 	mov	r20,r7
    18c4:	b82d883a 	mov	r22,r23
    18c8:	003f0e06 	br	1504 <_realloc_r+0x148>
    18cc:	80800217 	ldw	r2,8(r16)
    18d0:	b8800415 	stw	r2,16(r23)
    18d4:	80800317 	ldw	r2,12(r16)
    18d8:	b8800515 	stw	r2,20(r23)
    18dc:	31001226 	beq	r6,r4,1928 <_realloc_r+0x56c>
    18e0:	b8800604 	addi	r2,r23,24
    18e4:	80c00404 	addi	r3,r16,16
    18e8:	003f9606 	br	1744 <_realloc_r+0x388>
    18ec:	81000417 	ldw	r4,16(r16)
    18f0:	90800604 	addi	r2,r18,24
    18f4:	80c00604 	addi	r3,r16,24
    18f8:	91000415 	stw	r4,16(r18)
    18fc:	81000517 	ldw	r4,20(r16)
    1900:	91000515 	stw	r4,20(r18)
    1904:	003f4606 	br	1620 <_realloc_r+0x264>
    1908:	80800217 	ldw	r2,8(r16)
    190c:	b8800415 	stw	r2,16(r23)
    1910:	80800317 	ldw	r2,12(r16)
    1914:	b8800515 	stw	r2,20(r23)
    1918:	31000d26 	beq	r6,r4,1950 <_realloc_r+0x594>
    191c:	b8800604 	addi	r2,r23,24
    1920:	80c00404 	addi	r3,r16,16
    1924:	003f7106 	br	16ec <_realloc_r+0x330>
    1928:	81000417 	ldw	r4,16(r16)
    192c:	b8800804 	addi	r2,r23,32
    1930:	80c00604 	addi	r3,r16,24
    1934:	b9000615 	stw	r4,24(r23)
    1938:	81000517 	ldw	r4,20(r16)
    193c:	b9000715 	stw	r4,28(r23)
    1940:	003f8006 	br	1744 <_realloc_r+0x388>
    1944:	9005883a 	mov	r2,r18
    1948:	8007883a 	mov	r3,r16
    194c:	003fac06 	br	1800 <_realloc_r+0x444>
    1950:	81000417 	ldw	r4,16(r16)
    1954:	b8800804 	addi	r2,r23,32
    1958:	80c00604 	addi	r3,r16,24
    195c:	b9000615 	stw	r4,24(r23)
    1960:	81000517 	ldw	r4,20(r16)
    1964:	b9000715 	stw	r4,28(r23)
    1968:	003f6006 	br	16ec <_realloc_r+0x330>
    196c:	9009883a 	mov	r4,r18
    1970:	800b883a 	mov	r5,r16
    1974:	00012940 	call	1294 <memmove>
    1978:	003fa706 	br	1818 <_realloc_r+0x45c>
    197c:	80800217 	ldw	r2,8(r16)
    1980:	b8800415 	stw	r2,16(r23)
    1984:	80800317 	ldw	r2,12(r16)
    1988:	b8800515 	stw	r2,20(r23)
    198c:	31000326 	beq	r6,r4,199c <_realloc_r+0x5e0>
    1990:	b8800604 	addi	r2,r23,24
    1994:	80c00404 	addi	r3,r16,16
    1998:	003f9906 	br	1800 <_realloc_r+0x444>
    199c:	81000417 	ldw	r4,16(r16)
    19a0:	b8800804 	addi	r2,r23,32
    19a4:	80c00604 	addi	r3,r16,24
    19a8:	b9000615 	stw	r4,24(r23)
    19ac:	81000517 	ldw	r4,20(r16)
    19b0:	b9000715 	stw	r4,28(r23)
    19b4:	003f9206 	br	1800 <_realloc_r+0x444>

000019b8 <_sbrk_r>:
    19b8:	defffd04 	addi	sp,sp,-12
    19bc:	dc400115 	stw	r17,4(sp)
    19c0:	dc000015 	stw	r16,0(sp)
    19c4:	2023883a 	mov	r17,r4
    19c8:	04000074 	movhi	r16,1
    19cc:	8409dd04 	addi	r16,r16,10100
    19d0:	2809883a 	mov	r4,r5
    19d4:	dfc00215 	stw	ra,8(sp)
    19d8:	80000015 	stw	zero,0(r16)
    19dc:	000351c0 	call	351c <sbrk>
    19e0:	00ffffc4 	movi	r3,-1
    19e4:	10c00526 	beq	r2,r3,19fc <_sbrk_r+0x44>
    19e8:	dfc00217 	ldw	ra,8(sp)
    19ec:	dc400117 	ldw	r17,4(sp)
    19f0:	dc000017 	ldw	r16,0(sp)
    19f4:	dec00304 	addi	sp,sp,12
    19f8:	f800283a 	ret
    19fc:	80c00017 	ldw	r3,0(r16)
    1a00:	183ff926 	beq	r3,zero,19e8 <_sbrk_r+0x30>
    1a04:	88c00015 	stw	r3,0(r17)
    1a08:	dfc00217 	ldw	ra,8(sp)
    1a0c:	dc400117 	ldw	r17,4(sp)
    1a10:	dc000017 	ldw	r16,0(sp)
    1a14:	dec00304 	addi	sp,sp,12
    1a18:	f800283a 	ret

00001a1c <__swsetup_r>:
    1a1c:	00800074 	movhi	r2,1
    1a20:	1082fa04 	addi	r2,r2,3048
    1a24:	10800017 	ldw	r2,0(r2)
    1a28:	defffd04 	addi	sp,sp,-12
    1a2c:	dc400115 	stw	r17,4(sp)
    1a30:	dc000015 	stw	r16,0(sp)
    1a34:	dfc00215 	stw	ra,8(sp)
    1a38:	2023883a 	mov	r17,r4
    1a3c:	2821883a 	mov	r16,r5
    1a40:	10000226 	beq	r2,zero,1a4c <__swsetup_r+0x30>
    1a44:	10c00e17 	ldw	r3,56(r2)
    1a48:	18003d26 	beq	r3,zero,1b40 <__swsetup_r+0x124>
    1a4c:	8080030b 	ldhu	r2,12(r16)
    1a50:	10c0020c 	andi	r3,r2,8
    1a54:	18ffffcc 	andi	r3,r3,65535
    1a58:	18e0001c 	xori	r3,r3,32768
    1a5c:	18e00004 	addi	r3,r3,-32768
    1a60:	18001226 	beq	r3,zero,1aac <__swsetup_r+0x90>
    1a64:	80c00417 	ldw	r3,16(r16)
    1a68:	18001f26 	beq	r3,zero,1ae8 <__swsetup_r+0xcc>
    1a6c:	1100004c 	andi	r4,r2,1
    1a70:	2000261e 	bne	r4,zero,1b0c <__swsetup_r+0xf0>
    1a74:	1080008c 	andi	r2,r2,2
    1a78:	10bfffcc 	andi	r2,r2,65535
    1a7c:	10a0001c 	xori	r2,r2,32768
    1a80:	10a00004 	addi	r2,r2,-32768
    1a84:	1000311e 	bne	r2,zero,1b4c <__swsetup_r+0x130>
    1a88:	80800517 	ldw	r2,20(r16)
    1a8c:	80800215 	stw	r2,8(r16)
    1a90:	18002326 	beq	r3,zero,1b20 <__swsetup_r+0x104>
    1a94:	0005883a 	mov	r2,zero
    1a98:	dfc00217 	ldw	ra,8(sp)
    1a9c:	dc400117 	ldw	r17,4(sp)
    1aa0:	dc000017 	ldw	r16,0(sp)
    1aa4:	dec00304 	addi	sp,sp,12
    1aa8:	f800283a 	ret
    1aac:	10c0040c 	andi	r3,r2,16
    1ab0:	18ffffcc 	andi	r3,r3,65535
    1ab4:	18e0001c 	xori	r3,r3,32768
    1ab8:	18e00004 	addi	r3,r3,-32768
    1abc:	18001e26 	beq	r3,zero,1b38 <__swsetup_r+0x11c>
    1ac0:	10c0010c 	andi	r3,r2,4
    1ac4:	18ffffcc 	andi	r3,r3,65535
    1ac8:	18e0001c 	xori	r3,r3,32768
    1acc:	18e00004 	addi	r3,r3,-32768
    1ad0:	1800211e 	bne	r3,zero,1b58 <__swsetup_r+0x13c>
    1ad4:	80c00417 	ldw	r3,16(r16)
    1ad8:	11400214 	ori	r5,r2,8
    1adc:	8140030d 	sth	r5,12(r16)
    1ae0:	2805883a 	mov	r2,r5
    1ae4:	183fe11e 	bne	r3,zero,1a6c <__swsetup_r+0x50>
    1ae8:	1140a00c 	andi	r5,r2,640
    1aec:	01008004 	movi	r4,512
    1af0:	293fde26 	beq	r5,r4,1a6c <__swsetup_r+0x50>
    1af4:	8809883a 	mov	r4,r17
    1af8:	800b883a 	mov	r5,r16
    1afc:	00025ec0 	call	25ec <__smakebuf_r>
    1b00:	8080030b 	ldhu	r2,12(r16)
    1b04:	80c00417 	ldw	r3,16(r16)
    1b08:	003fd806 	br	1a6c <__swsetup_r+0x50>
    1b0c:	80800517 	ldw	r2,20(r16)
    1b10:	80000215 	stw	zero,8(r16)
    1b14:	0085c83a 	sub	r2,zero,r2
    1b18:	80800615 	stw	r2,24(r16)
    1b1c:	183fdd1e 	bne	r3,zero,1a94 <__swsetup_r+0x78>
    1b20:	8080030b 	ldhu	r2,12(r16)
    1b24:	1080200c 	andi	r2,r2,128
    1b28:	10bfffcc 	andi	r2,r2,65535
    1b2c:	10a0001c 	xori	r2,r2,32768
    1b30:	10a00004 	addi	r2,r2,-32768
    1b34:	103fd826 	beq	r2,zero,1a98 <__swsetup_r+0x7c>
    1b38:	00bfffc4 	movi	r2,-1
    1b3c:	003fd606 	br	1a98 <__swsetup_r+0x7c>
    1b40:	1009883a 	mov	r4,r2
    1b44:	0001e380 	call	1e38 <__sinit>
    1b48:	003fc006 	br	1a4c <__swsetup_r+0x30>
    1b4c:	0005883a 	mov	r2,zero
    1b50:	80800215 	stw	r2,8(r16)
    1b54:	003fce06 	br	1a90 <__swsetup_r+0x74>
    1b58:	81400c17 	ldw	r5,48(r16)
    1b5c:	28000626 	beq	r5,zero,1b78 <__swsetup_r+0x15c>
    1b60:	80c01004 	addi	r3,r16,64
    1b64:	28c00326 	beq	r5,r3,1b74 <__swsetup_r+0x158>
    1b68:	8809883a 	mov	r4,r17
    1b6c:	00021bc0 	call	21bc <_free_r>
    1b70:	8080030b 	ldhu	r2,12(r16)
    1b74:	80000c15 	stw	zero,48(r16)
    1b78:	80c00417 	ldw	r3,16(r16)
    1b7c:	013ff6c4 	movi	r4,-37
    1b80:	2084703a 	and	r2,r4,r2
    1b84:	80000115 	stw	zero,4(r16)
    1b88:	80c00015 	stw	r3,0(r16)
    1b8c:	003fd206 	br	1ad8 <__swsetup_r+0xbc>

00001b90 <_fflush_r>:
    1b90:	defffb04 	addi	sp,sp,-20
    1b94:	dcc00315 	stw	r19,12(sp)
    1b98:	dc400115 	stw	r17,4(sp)
    1b9c:	dfc00415 	stw	ra,16(sp)
    1ba0:	dc800215 	stw	r18,8(sp)
    1ba4:	dc000015 	stw	r16,0(sp)
    1ba8:	2027883a 	mov	r19,r4
    1bac:	2823883a 	mov	r17,r5
    1bb0:	20000226 	beq	r4,zero,1bbc <_fflush_r+0x2c>
    1bb4:	20800e17 	ldw	r2,56(r4)
    1bb8:	10005726 	beq	r2,zero,1d18 <_fflush_r+0x188>
    1bbc:	8880030b 	ldhu	r2,12(r17)
    1bc0:	10c0020c 	andi	r3,r2,8
    1bc4:	18ffffcc 	andi	r3,r3,65535
    1bc8:	18e0001c 	xori	r3,r3,32768
    1bcc:	18e00004 	addi	r3,r3,-32768
    1bd0:	1800311e 	bne	r3,zero,1c98 <_fflush_r+0x108>
    1bd4:	89000117 	ldw	r4,4(r17)
    1bd8:	10c20014 	ori	r3,r2,2048
    1bdc:	88c0030d 	sth	r3,12(r17)
    1be0:	180b883a 	mov	r5,r3
    1be4:	0100520e 	bge	zero,r4,1d30 <_fflush_r+0x1a0>
    1be8:	88c00a17 	ldw	r3,40(r17)
    1bec:	18002226 	beq	r3,zero,1c78 <_fflush_r+0xe8>
    1bf0:	1084000c 	andi	r2,r2,4096
    1bf4:	10bfffcc 	andi	r2,r2,65535
    1bf8:	10a0001c 	xori	r2,r2,32768
    1bfc:	10a00004 	addi	r2,r2,-32768
    1c00:	10004e26 	beq	r2,zero,1d3c <_fflush_r+0x1ac>
    1c04:	8c001417 	ldw	r16,80(r17)
    1c08:	2940010c 	andi	r5,r5,4
    1c0c:	297fffcc 	andi	r5,r5,65535
    1c10:	2960001c 	xori	r5,r5,32768
    1c14:	29600004 	addi	r5,r5,-32768
    1c18:	28000626 	beq	r5,zero,1c34 <_fflush_r+0xa4>
    1c1c:	89000117 	ldw	r4,4(r17)
    1c20:	88800c17 	ldw	r2,48(r17)
    1c24:	8121c83a 	sub	r16,r16,r4
    1c28:	10000226 	beq	r2,zero,1c34 <_fflush_r+0xa4>
    1c2c:	88800f17 	ldw	r2,60(r17)
    1c30:	80a1c83a 	sub	r16,r16,r2
    1c34:	89400717 	ldw	r5,28(r17)
    1c38:	9809883a 	mov	r4,r19
    1c3c:	800d883a 	mov	r6,r16
    1c40:	000f883a 	mov	r7,zero
    1c44:	183ee83a 	callr	r3
    1c48:	8080281e 	bne	r16,r2,1cec <_fflush_r+0x15c>
    1c4c:	8880030b 	ldhu	r2,12(r17)
    1c50:	88c00417 	ldw	r3,16(r17)
    1c54:	88000115 	stw	zero,4(r17)
    1c58:	113dffcc 	andi	r4,r2,63487
    1c5c:	1084000c 	andi	r2,r2,4096
    1c60:	10bfffcc 	andi	r2,r2,65535
    1c64:	10a0001c 	xori	r2,r2,32768
    1c68:	8900030d 	sth	r4,12(r17)
    1c6c:	88c00015 	stw	r3,0(r17)
    1c70:	10a00004 	addi	r2,r2,-32768
    1c74:	10002c1e 	bne	r2,zero,1d28 <_fflush_r+0x198>
    1c78:	0005883a 	mov	r2,zero
    1c7c:	dfc00417 	ldw	ra,16(sp)
    1c80:	dcc00317 	ldw	r19,12(sp)
    1c84:	dc800217 	ldw	r18,8(sp)
    1c88:	dc400117 	ldw	r17,4(sp)
    1c8c:	dc000017 	ldw	r16,0(sp)
    1c90:	dec00504 	addi	sp,sp,20
    1c94:	f800283a 	ret
    1c98:	8c800417 	ldw	r18,16(r17)
    1c9c:	903ff626 	beq	r18,zero,1c78 <_fflush_r+0xe8>
    1ca0:	8c000017 	ldw	r16,0(r17)
    1ca4:	108000cc 	andi	r2,r2,3
    1ca8:	8c800015 	stw	r18,0(r17)
    1cac:	84a1c83a 	sub	r16,r16,r18
    1cb0:	10001b1e 	bne	r2,zero,1d20 <_fflush_r+0x190>
    1cb4:	88800517 	ldw	r2,20(r17)
    1cb8:	88800215 	stw	r2,8(r17)
    1cbc:	04000316 	blt	zero,r16,1ccc <_fflush_r+0x13c>
    1cc0:	003fed06 	br	1c78 <_fflush_r+0xe8>
    1cc4:	90a5883a 	add	r18,r18,r2
    1cc8:	043feb0e 	bge	zero,r16,1c78 <_fflush_r+0xe8>
    1ccc:	88800917 	ldw	r2,36(r17)
    1cd0:	89400717 	ldw	r5,28(r17)
    1cd4:	800f883a 	mov	r7,r16
    1cd8:	900d883a 	mov	r6,r18
    1cdc:	9809883a 	mov	r4,r19
    1ce0:	103ee83a 	callr	r2
    1ce4:	80a1c83a 	sub	r16,r16,r2
    1ce8:	00bff616 	blt	zero,r2,1cc4 <_fflush_r+0x134>
    1cec:	88c0030b 	ldhu	r3,12(r17)
    1cf0:	00bfffc4 	movi	r2,-1
    1cf4:	18c01014 	ori	r3,r3,64
    1cf8:	88c0030d 	sth	r3,12(r17)
    1cfc:	dfc00417 	ldw	ra,16(sp)
    1d00:	dcc00317 	ldw	r19,12(sp)
    1d04:	dc800217 	ldw	r18,8(sp)
    1d08:	dc400117 	ldw	r17,4(sp)
    1d0c:	dc000017 	ldw	r16,0(sp)
    1d10:	dec00504 	addi	sp,sp,20
    1d14:	f800283a 	ret
    1d18:	0001e380 	call	1e38 <__sinit>
    1d1c:	003fa706 	br	1bbc <_fflush_r+0x2c>
    1d20:	0005883a 	mov	r2,zero
    1d24:	003fe406 	br	1cb8 <_fflush_r+0x128>
    1d28:	8c001415 	stw	r16,80(r17)
    1d2c:	003fd206 	br	1c78 <_fflush_r+0xe8>
    1d30:	88c00f17 	ldw	r3,60(r17)
    1d34:	00ffac16 	blt	zero,r3,1be8 <_fflush_r+0x58>
    1d38:	003fcf06 	br	1c78 <_fflush_r+0xe8>
    1d3c:	89400717 	ldw	r5,28(r17)
    1d40:	9809883a 	mov	r4,r19
    1d44:	000d883a 	mov	r6,zero
    1d48:	01c00044 	movi	r7,1
    1d4c:	183ee83a 	callr	r3
    1d50:	1021883a 	mov	r16,r2
    1d54:	00bfffc4 	movi	r2,-1
    1d58:	80800326 	beq	r16,r2,1d68 <_fflush_r+0x1d8>
    1d5c:	8940030b 	ldhu	r5,12(r17)
    1d60:	88c00a17 	ldw	r3,40(r17)
    1d64:	003fa806 	br	1c08 <_fflush_r+0x78>
    1d68:	98c00017 	ldw	r3,0(r19)
    1d6c:	00800744 	movi	r2,29
    1d70:	18bfde1e 	bne	r3,r2,1cec <_fflush_r+0x15c>
    1d74:	003fc006 	br	1c78 <_fflush_r+0xe8>

00001d78 <fflush>:
    1d78:	200b883a 	mov	r5,r4
    1d7c:	20000426 	beq	r4,zero,1d90 <fflush+0x18>
    1d80:	00800074 	movhi	r2,1
    1d84:	1082fa04 	addi	r2,r2,3048
    1d88:	11000017 	ldw	r4,0(r2)
    1d8c:	0001b901 	jmpi	1b90 <_fflush_r>
    1d90:	00800074 	movhi	r2,1
    1d94:	1082f904 	addi	r2,r2,3044
    1d98:	11000017 	ldw	r4,0(r2)
    1d9c:	01400034 	movhi	r5,0
    1da0:	2946e404 	addi	r5,r5,7056
    1da4:	00025341 	jmpi	2534 <_fwalk_reent>

00001da8 <__fp_lock>:
    1da8:	0005883a 	mov	r2,zero
    1dac:	f800283a 	ret

00001db0 <__fp_unlock>:
    1db0:	0005883a 	mov	r2,zero
    1db4:	f800283a 	ret

00001db8 <_cleanup_r>:
    1db8:	01400034 	movhi	r5,0
    1dbc:	294aef04 	addi	r5,r5,11196
    1dc0:	000248c1 	jmpi	248c <_fwalk>

00001dc4 <__sfmoreglue>:
    1dc4:	defffc04 	addi	sp,sp,-16
    1dc8:	dc400115 	stw	r17,4(sp)
    1dcc:	2c401724 	muli	r17,r5,92
    1dd0:	dc800215 	stw	r18,8(sp)
    1dd4:	2825883a 	mov	r18,r5
    1dd8:	89400304 	addi	r5,r17,12
    1ddc:	dc000015 	stw	r16,0(sp)
    1de0:	dfc00315 	stw	ra,12(sp)
    1de4:	00009200 	call	920 <_malloc_r>
    1de8:	1021883a 	mov	r16,r2
    1dec:	10000726 	beq	r2,zero,1e0c <__sfmoreglue+0x48>
    1df0:	11000304 	addi	r4,r2,12
    1df4:	10000015 	stw	zero,0(r2)
    1df8:	14800115 	stw	r18,4(r2)
    1dfc:	11000215 	stw	r4,8(r2)
    1e00:	000b883a 	mov	r5,zero
    1e04:	880d883a 	mov	r6,r17
    1e08:	00027940 	call	2794 <memset>
    1e0c:	8005883a 	mov	r2,r16
    1e10:	dfc00317 	ldw	ra,12(sp)
    1e14:	dc800217 	ldw	r18,8(sp)
    1e18:	dc400117 	ldw	r17,4(sp)
    1e1c:	dc000017 	ldw	r16,0(sp)
    1e20:	dec00404 	addi	sp,sp,16
    1e24:	f800283a 	ret

00001e28 <_cleanup>:
    1e28:	00800074 	movhi	r2,1
    1e2c:	1082f904 	addi	r2,r2,3044
    1e30:	11000017 	ldw	r4,0(r2)
    1e34:	0001db81 	jmpi	1db8 <_cleanup_r>

00001e38 <__sinit>:
    1e38:	20800e17 	ldw	r2,56(r4)
    1e3c:	1000401e 	bne	r2,zero,1f40 <__sinit+0x108>
    1e40:	21400117 	ldw	r5,4(r4)
    1e44:	01800034 	movhi	r6,0
    1e48:	31876e04 	addi	r6,r6,7608
    1e4c:	20c00217 	ldw	r3,8(r4)
    1e50:	21800f15 	stw	r6,60(r4)
    1e54:	2080bb04 	addi	r2,r4,748
    1e58:	02400044 	movi	r9,1
    1e5c:	018000c4 	movi	r6,3
    1e60:	2180b915 	stw	r6,740(r4)
    1e64:	2080ba15 	stw	r2,744(r4)
    1e68:	22400e15 	stw	r9,56(r4)
    1e6c:	20800317 	ldw	r2,12(r4)
    1e70:	2000b815 	stw	zero,736(r4)
    1e74:	02000034 	movhi	r8,0
    1e78:	420a1c04 	addi	r8,r8,10352
    1e7c:	01c00034 	movhi	r7,0
    1e80:	39ca3104 	addi	r7,r7,10436
    1e84:	01800034 	movhi	r6,0
    1e88:	318a5304 	addi	r6,r6,10572
    1e8c:	01000034 	movhi	r4,0
    1e90:	210a6a04 	addi	r4,r4,10664
    1e94:	02800104 	movi	r10,4
    1e98:	28000015 	stw	zero,0(r5)
    1e9c:	28000115 	stw	zero,4(r5)
    1ea0:	28000215 	stw	zero,8(r5)
    1ea4:	2a80030d 	sth	r10,12(r5)
    1ea8:	2800038d 	sth	zero,14(r5)
    1eac:	28000415 	stw	zero,16(r5)
    1eb0:	28000515 	stw	zero,20(r5)
    1eb4:	28000615 	stw	zero,24(r5)
    1eb8:	29400715 	stw	r5,28(r5)
    1ebc:	2a000815 	stw	r8,32(r5)
    1ec0:	29c00915 	stw	r7,36(r5)
    1ec4:	29800a15 	stw	r6,40(r5)
    1ec8:	29000b15 	stw	r4,44(r5)
    1ecc:	01400284 	movi	r5,10
    1ed0:	18000015 	stw	zero,0(r3)
    1ed4:	18000115 	stw	zero,4(r3)
    1ed8:	18000215 	stw	zero,8(r3)
    1edc:	1940030d 	sth	r5,12(r3)
    1ee0:	1a40038d 	sth	r9,14(r3)
    1ee4:	18000415 	stw	zero,16(r3)
    1ee8:	18000515 	stw	zero,20(r3)
    1eec:	18000615 	stw	zero,24(r3)
    1ef0:	18c00715 	stw	r3,28(r3)
    1ef4:	1a000815 	stw	r8,32(r3)
    1ef8:	19c00915 	stw	r7,36(r3)
    1efc:	19800a15 	stw	r6,40(r3)
    1f00:	19000b15 	stw	r4,44(r3)
    1f04:	00c00484 	movi	r3,18
    1f08:	10c0030d 	sth	r3,12(r2)
    1f0c:	00c00084 	movi	r3,2
    1f10:	10000015 	stw	zero,0(r2)
    1f14:	10000115 	stw	zero,4(r2)
    1f18:	10000215 	stw	zero,8(r2)
    1f1c:	10c0038d 	sth	r3,14(r2)
    1f20:	10000415 	stw	zero,16(r2)
    1f24:	10000515 	stw	zero,20(r2)
    1f28:	10000615 	stw	zero,24(r2)
    1f2c:	10800715 	stw	r2,28(r2)
    1f30:	12000815 	stw	r8,32(r2)
    1f34:	11c00915 	stw	r7,36(r2)
    1f38:	11800a15 	stw	r6,40(r2)
    1f3c:	11000b15 	stw	r4,44(r2)
    1f40:	f800283a 	ret

00001f44 <__sfp>:
    1f44:	defffc04 	addi	sp,sp,-16
    1f48:	00800074 	movhi	r2,1
    1f4c:	1082f904 	addi	r2,r2,3044
    1f50:	dc400115 	stw	r17,4(sp)
    1f54:	14400017 	ldw	r17,0(r2)
    1f58:	dc800215 	stw	r18,8(sp)
    1f5c:	dfc00315 	stw	ra,12(sp)
    1f60:	88800e17 	ldw	r2,56(r17)
    1f64:	dc000015 	stw	r16,0(sp)
    1f68:	2025883a 	mov	r18,r4
    1f6c:	10002826 	beq	r2,zero,2010 <__sfp+0xcc>
    1f70:	8c40b804 	addi	r17,r17,736
    1f74:	043fffc4 	movi	r16,-1
    1f78:	89400117 	ldw	r5,4(r17)
    1f7c:	88800217 	ldw	r2,8(r17)
    1f80:	297fffc4 	addi	r5,r5,-1
    1f84:	28000a16 	blt	r5,zero,1fb0 <__sfp+0x6c>
    1f88:	10c0030f 	ldh	r3,12(r2)
    1f8c:	18000c26 	beq	r3,zero,1fc0 <__sfp+0x7c>
    1f90:	10c01a04 	addi	r3,r2,104
    1f94:	00000206 	br	1fa0 <__sfp+0x5c>
    1f98:	19bfe90f 	ldh	r6,-92(r3)
    1f9c:	30000826 	beq	r6,zero,1fc0 <__sfp+0x7c>
    1fa0:	297fffc4 	addi	r5,r5,-1
    1fa4:	18bffd04 	addi	r2,r3,-12
    1fa8:	18c01704 	addi	r3,r3,92
    1fac:	2c3ffa1e 	bne	r5,r16,1f98 <__sfp+0x54>
    1fb0:	88800017 	ldw	r2,0(r17)
    1fb4:	10001926 	beq	r2,zero,201c <__sfp+0xd8>
    1fb8:	1023883a 	mov	r17,r2
    1fbc:	003fee06 	br	1f78 <__sfp+0x34>
    1fc0:	00ffffc4 	movi	r3,-1
    1fc4:	10c0038d 	sth	r3,14(r2)
    1fc8:	00c00044 	movi	r3,1
    1fcc:	10c0030d 	sth	r3,12(r2)
    1fd0:	10000015 	stw	zero,0(r2)
    1fd4:	10000215 	stw	zero,8(r2)
    1fd8:	10000115 	stw	zero,4(r2)
    1fdc:	10000415 	stw	zero,16(r2)
    1fe0:	10000515 	stw	zero,20(r2)
    1fe4:	10000615 	stw	zero,24(r2)
    1fe8:	10000c15 	stw	zero,48(r2)
    1fec:	10000d15 	stw	zero,52(r2)
    1ff0:	10001115 	stw	zero,68(r2)
    1ff4:	10001215 	stw	zero,72(r2)
    1ff8:	dfc00317 	ldw	ra,12(sp)
    1ffc:	dc800217 	ldw	r18,8(sp)
    2000:	dc400117 	ldw	r17,4(sp)
    2004:	dc000017 	ldw	r16,0(sp)
    2008:	dec00404 	addi	sp,sp,16
    200c:	f800283a 	ret
    2010:	8809883a 	mov	r4,r17
    2014:	0001e380 	call	1e38 <__sinit>
    2018:	003fd506 	br	1f70 <__sfp+0x2c>
    201c:	9009883a 	mov	r4,r18
    2020:	01400104 	movi	r5,4
    2024:	0001dc40 	call	1dc4 <__sfmoreglue>
    2028:	88800015 	stw	r2,0(r17)
    202c:	103fe21e 	bne	r2,zero,1fb8 <__sfp+0x74>
    2030:	00800304 	movi	r2,12
    2034:	90800015 	stw	r2,0(r18)
    2038:	0005883a 	mov	r2,zero
    203c:	003fee06 	br	1ff8 <__sfp+0xb4>

00002040 <__sfp_lock_acquire>:
    2040:	f800283a 	ret

00002044 <__sfp_lock_release>:
    2044:	f800283a 	ret

00002048 <__sinit_lock_acquire>:
    2048:	f800283a 	ret

0000204c <__sinit_lock_release>:
    204c:	f800283a 	ret

00002050 <__fp_lock_all>:
    2050:	00800074 	movhi	r2,1
    2054:	1082fa04 	addi	r2,r2,3048
    2058:	11000017 	ldw	r4,0(r2)
    205c:	01400034 	movhi	r5,0
    2060:	29476a04 	addi	r5,r5,7592
    2064:	000248c1 	jmpi	248c <_fwalk>

00002068 <__fp_unlock_all>:
    2068:	00800074 	movhi	r2,1
    206c:	1082fa04 	addi	r2,r2,3048
    2070:	11000017 	ldw	r4,0(r2)
    2074:	01400034 	movhi	r5,0
    2078:	29476c04 	addi	r5,r5,7600
    207c:	000248c1 	jmpi	248c <_fwalk>

00002080 <_malloc_trim_r>:
    2080:	defffb04 	addi	sp,sp,-20
    2084:	dcc00315 	stw	r19,12(sp)
    2088:	dc800215 	stw	r18,8(sp)
    208c:	dc400115 	stw	r17,4(sp)
    2090:	dc000015 	stw	r16,0(sp)
    2094:	2827883a 	mov	r19,r5
    2098:	dfc00415 	stw	ra,16(sp)
    209c:	04400074 	movhi	r17,1
    20a0:	8c7d7204 	addi	r17,r17,-2616
    20a4:	2021883a 	mov	r16,r4
    20a8:	00038200 	call	3820 <__malloc_lock>
    20ac:	88800217 	ldw	r2,8(r17)
    20b0:	14800117 	ldw	r18,4(r2)
    20b4:	00bfff04 	movi	r2,-4
    20b8:	90a4703a 	and	r18,r18,r2
    20bc:	9083fbc4 	addi	r2,r18,4079
    20c0:	14e7c83a 	sub	r19,r2,r19
    20c4:	9826d33a 	srli	r19,r19,12
    20c8:	0083ffc4 	movi	r2,4095
    20cc:	9cffffc4 	addi	r19,r19,-1
    20d0:	9826933a 	slli	r19,r19,12
    20d4:	14c0060e 	bge	r2,r19,20f0 <_malloc_trim_r+0x70>
    20d8:	8009883a 	mov	r4,r16
    20dc:	000b883a 	mov	r5,zero
    20e0:	00019b80 	call	19b8 <_sbrk_r>
    20e4:	88c00217 	ldw	r3,8(r17)
    20e8:	1c87883a 	add	r3,r3,r18
    20ec:	10c00a26 	beq	r2,r3,2118 <_malloc_trim_r+0x98>
    20f0:	8009883a 	mov	r4,r16
    20f4:	00039340 	call	3934 <__malloc_unlock>
    20f8:	0005883a 	mov	r2,zero
    20fc:	dfc00417 	ldw	ra,16(sp)
    2100:	dcc00317 	ldw	r19,12(sp)
    2104:	dc800217 	ldw	r18,8(sp)
    2108:	dc400117 	ldw	r17,4(sp)
    210c:	dc000017 	ldw	r16,0(sp)
    2110:	dec00504 	addi	sp,sp,20
    2114:	f800283a 	ret
    2118:	8009883a 	mov	r4,r16
    211c:	04cbc83a 	sub	r5,zero,r19
    2120:	00019b80 	call	19b8 <_sbrk_r>
    2124:	00ffffc4 	movi	r3,-1
    2128:	10c01326 	beq	r2,r3,2178 <_malloc_trim_r+0xf8>
    212c:	00800074 	movhi	r2,1
    2130:	1089fe04 	addi	r2,r2,10232
    2134:	11000017 	ldw	r4,0(r2)
    2138:	88c00217 	ldw	r3,8(r17)
    213c:	94e5c83a 	sub	r18,r18,r19
    2140:	94800054 	ori	r18,r18,1
    2144:	24e7c83a 	sub	r19,r4,r19
    2148:	1c800115 	stw	r18,4(r3)
    214c:	8009883a 	mov	r4,r16
    2150:	14c00015 	stw	r19,0(r2)
    2154:	00039340 	call	3934 <__malloc_unlock>
    2158:	00800044 	movi	r2,1
    215c:	dfc00417 	ldw	ra,16(sp)
    2160:	dcc00317 	ldw	r19,12(sp)
    2164:	dc800217 	ldw	r18,8(sp)
    2168:	dc400117 	ldw	r17,4(sp)
    216c:	dc000017 	ldw	r16,0(sp)
    2170:	dec00504 	addi	sp,sp,20
    2174:	f800283a 	ret
    2178:	8009883a 	mov	r4,r16
    217c:	000b883a 	mov	r5,zero
    2180:	00019b80 	call	19b8 <_sbrk_r>
    2184:	88c00217 	ldw	r3,8(r17)
    2188:	014003c4 	movi	r5,15
    218c:	10c9c83a 	sub	r4,r2,r3
    2190:	293fd70e 	bge	r5,r4,20f0 <_malloc_trim_r+0x70>
    2194:	01400074 	movhi	r5,1
    2198:	2942fb04 	addi	r5,r5,3052
    219c:	29400017 	ldw	r5,0(r5)
    21a0:	21000054 	ori	r4,r4,1
    21a4:	19000115 	stw	r4,4(r3)
    21a8:	1145c83a 	sub	r2,r2,r5
    21ac:	01400074 	movhi	r5,1
    21b0:	2949fe04 	addi	r5,r5,10232
    21b4:	28800015 	stw	r2,0(r5)
    21b8:	003fcd06 	br	20f0 <_malloc_trim_r+0x70>

000021bc <_free_r>:
    21bc:	defffd04 	addi	sp,sp,-12
    21c0:	dc400115 	stw	r17,4(sp)
    21c4:	dc000015 	stw	r16,0(sp)
    21c8:	dfc00215 	stw	ra,8(sp)
    21cc:	2821883a 	mov	r16,r5
    21d0:	2023883a 	mov	r17,r4
    21d4:	28004b26 	beq	r5,zero,2304 <_free_r+0x148>
    21d8:	00038200 	call	3820 <__malloc_lock>
    21dc:	823fff17 	ldw	r8,-4(r16)
    21e0:	00bfff84 	movi	r2,-2
    21e4:	81bffe04 	addi	r6,r16,-8
    21e8:	4084703a 	and	r2,r8,r2
    21ec:	3087883a 	add	r3,r6,r2
    21f0:	01400074 	movhi	r5,1
    21f4:	297d7204 	addi	r5,r5,-2616
    21f8:	1a400117 	ldw	r9,4(r3)
    21fc:	29000217 	ldw	r4,8(r5)
    2200:	01ffff04 	movi	r7,-4
    2204:	49ce703a 	and	r7,r9,r7
    2208:	20c06526 	beq	r4,r3,23a0 <_free_r+0x1e4>
    220c:	19c00115 	stw	r7,4(r3)
    2210:	4200004c 	andi	r8,r8,1
    2214:	40003026 	beq	r8,zero,22d8 <_free_r+0x11c>
    2218:	0009883a 	mov	r4,zero
    221c:	19d1883a 	add	r8,r3,r7
    2220:	42000117 	ldw	r8,4(r8)
    2224:	4200004c 	andi	r8,r8,1
    2228:	4000061e 	bne	r8,zero,2244 <_free_r+0x88>
    222c:	11c5883a 	add	r2,r2,r7
    2230:	19c00217 	ldw	r7,8(r3)
    2234:	20004e26 	beq	r4,zero,2370 <_free_r+0x1b4>
    2238:	18c00317 	ldw	r3,12(r3)
    223c:	38c00315 	stw	r3,12(r7)
    2240:	19c00215 	stw	r7,8(r3)
    2244:	11c00054 	ori	r7,r2,1
    2248:	3087883a 	add	r3,r6,r2
    224c:	31c00115 	stw	r7,4(r6)
    2250:	18800015 	stw	r2,0(r3)
    2254:	20001a1e 	bne	r4,zero,22c0 <_free_r+0x104>
    2258:	00c07fc4 	movi	r3,511
    225c:	18802e2e 	bgeu	r3,r2,2318 <_free_r+0x15c>
    2260:	1006d27a 	srli	r3,r2,9
    2264:	01000104 	movi	r4,4
    2268:	20c06636 	bltu	r4,r3,2404 <_free_r+0x248>
    226c:	1008d1ba 	srli	r4,r2,6
    2270:	21000e04 	addi	r4,r4,56
    2274:	210f883a 	add	r7,r4,r4
    2278:	39cf883a 	add	r7,r7,r7
    227c:	39cf883a 	add	r7,r7,r7
    2280:	29cf883a 	add	r7,r5,r7
    2284:	38c00217 	ldw	r3,8(r7)
    2288:	01400074 	movhi	r5,1
    228c:	297d7204 	addi	r5,r5,-2616
    2290:	19c06126 	beq	r3,r7,2418 <_free_r+0x25c>
    2294:	013fff04 	movi	r4,-4
    2298:	19400117 	ldw	r5,4(r3)
    229c:	290a703a 	and	r5,r5,r4
    22a0:	1140022e 	bgeu	r2,r5,22ac <_free_r+0xf0>
    22a4:	18c00217 	ldw	r3,8(r3)
    22a8:	38fffb1e 	bne	r7,r3,2298 <_free_r+0xdc>
    22ac:	18800317 	ldw	r2,12(r3)
    22b0:	30800315 	stw	r2,12(r6)
    22b4:	30c00215 	stw	r3,8(r6)
    22b8:	11800215 	stw	r6,8(r2)
    22bc:	19800315 	stw	r6,12(r3)
    22c0:	8809883a 	mov	r4,r17
    22c4:	dfc00217 	ldw	ra,8(sp)
    22c8:	dc400117 	ldw	r17,4(sp)
    22cc:	dc000017 	ldw	r16,0(sp)
    22d0:	dec00304 	addi	sp,sp,12
    22d4:	00039341 	jmpi	3934 <__malloc_unlock>
    22d8:	813ffe17 	ldw	r4,-8(r16)
    22dc:	2a400204 	addi	r9,r5,8
    22e0:	310dc83a 	sub	r6,r6,r4
    22e4:	32000217 	ldw	r8,8(r6)
    22e8:	1105883a 	add	r2,r2,r4
    22ec:	42404326 	beq	r8,r9,23fc <_free_r+0x240>
    22f0:	32400317 	ldw	r9,12(r6)
    22f4:	0009883a 	mov	r4,zero
    22f8:	42400315 	stw	r9,12(r8)
    22fc:	4a000215 	stw	r8,8(r9)
    2300:	003fc606 	br	221c <_free_r+0x60>
    2304:	dfc00217 	ldw	ra,8(sp)
    2308:	dc400117 	ldw	r17,4(sp)
    230c:	dc000017 	ldw	r16,0(sp)
    2310:	dec00304 	addi	sp,sp,12
    2314:	f800283a 	ret
    2318:	1004d0fa 	srli	r2,r2,3
    231c:	02000044 	movi	r8,1
    2320:	29c00117 	ldw	r7,4(r5)
    2324:	1087883a 	add	r3,r2,r2
    2328:	18c7883a 	add	r3,r3,r3
    232c:	1005d0ba 	srai	r2,r2,2
    2330:	18c7883a 	add	r3,r3,r3
    2334:	28c7883a 	add	r3,r5,r3
    2338:	19000217 	ldw	r4,8(r3)
    233c:	4084983a 	sll	r2,r8,r2
    2340:	30c00315 	stw	r3,12(r6)
    2344:	31000215 	stw	r4,8(r6)
    2348:	11c4b03a 	or	r2,r2,r7
    234c:	21800315 	stw	r6,12(r4)
    2350:	8809883a 	mov	r4,r17
    2354:	28800115 	stw	r2,4(r5)
    2358:	19800215 	stw	r6,8(r3)
    235c:	dfc00217 	ldw	ra,8(sp)
    2360:	dc400117 	ldw	r17,4(sp)
    2364:	dc000017 	ldw	r16,0(sp)
    2368:	dec00304 	addi	sp,sp,12
    236c:	00039341 	jmpi	3934 <__malloc_unlock>
    2370:	02000074 	movhi	r8,1
    2374:	423d7404 	addi	r8,r8,-2608
    2378:	3a3faf1e 	bne	r7,r8,2238 <_free_r+0x7c>
    237c:	29800515 	stw	r6,20(r5)
    2380:	29800415 	stw	r6,16(r5)
    2384:	11000054 	ori	r4,r2,1
    2388:	3087883a 	add	r3,r6,r2
    238c:	31c00315 	stw	r7,12(r6)
    2390:	31c00215 	stw	r7,8(r6)
    2394:	31000115 	stw	r4,4(r6)
    2398:	18800015 	stw	r2,0(r3)
    239c:	003fc806 	br	22c0 <_free_r+0x104>
    23a0:	4200004c 	andi	r8,r8,1
    23a4:	3885883a 	add	r2,r7,r2
    23a8:	4000071e 	bne	r8,zero,23c8 <_free_r+0x20c>
    23ac:	81fffe17 	ldw	r7,-8(r16)
    23b0:	31cdc83a 	sub	r6,r6,r7
    23b4:	30c00317 	ldw	r3,12(r6)
    23b8:	31000217 	ldw	r4,8(r6)
    23bc:	11c5883a 	add	r2,r2,r7
    23c0:	20c00315 	stw	r3,12(r4)
    23c4:	19000215 	stw	r4,8(r3)
    23c8:	00c00074 	movhi	r3,1
    23cc:	18c2fc04 	addi	r3,r3,3056
    23d0:	18c00017 	ldw	r3,0(r3)
    23d4:	11000054 	ori	r4,r2,1
    23d8:	31000115 	stw	r4,4(r6)
    23dc:	29800215 	stw	r6,8(r5)
    23e0:	10ffb736 	bltu	r2,r3,22c0 <_free_r+0x104>
    23e4:	00800074 	movhi	r2,1
    23e8:	1089dc04 	addi	r2,r2,10096
    23ec:	11400017 	ldw	r5,0(r2)
    23f0:	8809883a 	mov	r4,r17
    23f4:	00020800 	call	2080 <_malloc_trim_r>
    23f8:	003fb106 	br	22c0 <_free_r+0x104>
    23fc:	01000044 	movi	r4,1
    2400:	003f8606 	br	221c <_free_r+0x60>
    2404:	01000504 	movi	r4,20
    2408:	20c00b36 	bltu	r4,r3,2438 <_free_r+0x27c>
    240c:	190016c4 	addi	r4,r3,91
    2410:	210f883a 	add	r7,r4,r4
    2414:	003f9806 	br	2278 <_free_r+0xbc>
    2418:	2009d0ba 	srai	r4,r4,2
    241c:	00800044 	movi	r2,1
    2420:	29c00117 	ldw	r7,4(r5)
    2424:	1108983a 	sll	r4,r2,r4
    2428:	1805883a 	mov	r2,r3
    242c:	21c8b03a 	or	r4,r4,r7
    2430:	29000115 	stw	r4,4(r5)
    2434:	003f9e06 	br	22b0 <_free_r+0xf4>
    2438:	01001504 	movi	r4,84
    243c:	20c00436 	bltu	r4,r3,2450 <_free_r+0x294>
    2440:	1008d33a 	srli	r4,r2,12
    2444:	21001b84 	addi	r4,r4,110
    2448:	210f883a 	add	r7,r4,r4
    244c:	003f8a06 	br	2278 <_free_r+0xbc>
    2450:	01005504 	movi	r4,340
    2454:	20c00436 	bltu	r4,r3,2468 <_free_r+0x2ac>
    2458:	1008d3fa 	srli	r4,r2,15
    245c:	21001dc4 	addi	r4,r4,119
    2460:	210f883a 	add	r7,r4,r4
    2464:	003f8406 	br	2278 <_free_r+0xbc>
    2468:	01015504 	movi	r4,1364
    246c:	20c00436 	bltu	r4,r3,2480 <_free_r+0x2c4>
    2470:	1008d4ba 	srli	r4,r2,18
    2474:	21001f04 	addi	r4,r4,124
    2478:	210f883a 	add	r7,r4,r4
    247c:	003f7e06 	br	2278 <_free_r+0xbc>
    2480:	01c03f04 	movi	r7,252
    2484:	01001f84 	movi	r4,126
    2488:	003f7b06 	br	2278 <_free_r+0xbc>

0000248c <_fwalk>:
    248c:	defff904 	addi	sp,sp,-28
    2490:	dcc00315 	stw	r19,12(sp)
    2494:	24c0b804 	addi	r19,r4,736
    2498:	dd400515 	stw	r21,20(sp)
    249c:	dd000415 	stw	r20,16(sp)
    24a0:	dfc00615 	stw	ra,24(sp)
    24a4:	dc800215 	stw	r18,8(sp)
    24a8:	dc400115 	stw	r17,4(sp)
    24ac:	dc000015 	stw	r16,0(sp)
    24b0:	282b883a 	mov	r21,r5
    24b4:	0029883a 	mov	r20,zero
    24b8:	00020400 	call	2040 <__sfp_lock_acquire>
    24bc:	98001226 	beq	r19,zero,2508 <_fwalk+0x7c>
    24c0:	04bfffc4 	movi	r18,-1
    24c4:	9c400117 	ldw	r17,4(r19)
    24c8:	9c000217 	ldw	r16,8(r19)
    24cc:	8c7fffc4 	addi	r17,r17,-1
    24d0:	88000b16 	blt	r17,zero,2500 <_fwalk+0x74>
    24d4:	84000304 	addi	r16,r16,12
    24d8:	80c0000f 	ldh	r3,0(r16)
    24dc:	8c7fffc4 	addi	r17,r17,-1
    24e0:	813ffd04 	addi	r4,r16,-12
    24e4:	18000426 	beq	r3,zero,24f8 <_fwalk+0x6c>
    24e8:	80c0008f 	ldh	r3,2(r16)
    24ec:	1c800226 	beq	r3,r18,24f8 <_fwalk+0x6c>
    24f0:	a83ee83a 	callr	r21
    24f4:	a0a8b03a 	or	r20,r20,r2
    24f8:	84001704 	addi	r16,r16,92
    24fc:	8cbff61e 	bne	r17,r18,24d8 <_fwalk+0x4c>
    2500:	9cc00017 	ldw	r19,0(r19)
    2504:	983fef1e 	bne	r19,zero,24c4 <_fwalk+0x38>
    2508:	00020440 	call	2044 <__sfp_lock_release>
    250c:	a005883a 	mov	r2,r20
    2510:	dfc00617 	ldw	ra,24(sp)
    2514:	dd400517 	ldw	r21,20(sp)
    2518:	dd000417 	ldw	r20,16(sp)
    251c:	dcc00317 	ldw	r19,12(sp)
    2520:	dc800217 	ldw	r18,8(sp)
    2524:	dc400117 	ldw	r17,4(sp)
    2528:	dc000017 	ldw	r16,0(sp)
    252c:	dec00704 	addi	sp,sp,28
    2530:	f800283a 	ret

00002534 <_fwalk_reent>:
    2534:	defff804 	addi	sp,sp,-32
    2538:	dcc00315 	stw	r19,12(sp)
    253c:	24c0b804 	addi	r19,r4,736
    2540:	dd800615 	stw	r22,24(sp)
    2544:	dd400515 	stw	r21,20(sp)
    2548:	dd000415 	stw	r20,16(sp)
    254c:	dfc00715 	stw	ra,28(sp)
    2550:	dc800215 	stw	r18,8(sp)
    2554:	dc400115 	stw	r17,4(sp)
    2558:	dc000015 	stw	r16,0(sp)
    255c:	2029883a 	mov	r20,r4
    2560:	282b883a 	mov	r21,r5
    2564:	002d883a 	mov	r22,zero
    2568:	00020400 	call	2040 <__sfp_lock_acquire>
    256c:	98001326 	beq	r19,zero,25bc <_fwalk_reent+0x88>
    2570:	04bfffc4 	movi	r18,-1
    2574:	9c400117 	ldw	r17,4(r19)
    2578:	9c000217 	ldw	r16,8(r19)
    257c:	8c7fffc4 	addi	r17,r17,-1
    2580:	88000c16 	blt	r17,zero,25b4 <_fwalk_reent+0x80>
    2584:	84000304 	addi	r16,r16,12
    2588:	80c0000f 	ldh	r3,0(r16)
    258c:	8c7fffc4 	addi	r17,r17,-1
    2590:	817ffd04 	addi	r5,r16,-12
    2594:	18000526 	beq	r3,zero,25ac <_fwalk_reent+0x78>
    2598:	80c0008f 	ldh	r3,2(r16)
    259c:	a009883a 	mov	r4,r20
    25a0:	1c800226 	beq	r3,r18,25ac <_fwalk_reent+0x78>
    25a4:	a83ee83a 	callr	r21
    25a8:	b0acb03a 	or	r22,r22,r2
    25ac:	84001704 	addi	r16,r16,92
    25b0:	8cbff51e 	bne	r17,r18,2588 <_fwalk_reent+0x54>
    25b4:	9cc00017 	ldw	r19,0(r19)
    25b8:	983fee1e 	bne	r19,zero,2574 <_fwalk_reent+0x40>
    25bc:	00020440 	call	2044 <__sfp_lock_release>
    25c0:	b005883a 	mov	r2,r22
    25c4:	dfc00717 	ldw	ra,28(sp)
    25c8:	dd800617 	ldw	r22,24(sp)
    25cc:	dd400517 	ldw	r21,20(sp)
    25d0:	dd000417 	ldw	r20,16(sp)
    25d4:	dcc00317 	ldw	r19,12(sp)
    25d8:	dc800217 	ldw	r18,8(sp)
    25dc:	dc400117 	ldw	r17,4(sp)
    25e0:	dc000017 	ldw	r16,0(sp)
    25e4:	dec00804 	addi	sp,sp,32
    25e8:	f800283a 	ret

000025ec <__smakebuf_r>:
    25ec:	2880030b 	ldhu	r2,12(r5)
    25f0:	deffed04 	addi	sp,sp,-76
    25f4:	dc401015 	stw	r17,64(sp)
    25f8:	10c0008c 	andi	r3,r2,2
    25fc:	18ffffcc 	andi	r3,r3,65535
    2600:	18e0001c 	xori	r3,r3,32768
    2604:	dc000f15 	stw	r16,60(sp)
    2608:	dfc01215 	stw	ra,72(sp)
    260c:	dc801115 	stw	r18,68(sp)
    2610:	18e00004 	addi	r3,r3,-32768
    2614:	2821883a 	mov	r16,r5
    2618:	2023883a 	mov	r17,r4
    261c:	1800381e 	bne	r3,zero,2700 <__smakebuf_r+0x114>
    2620:	2940038f 	ldh	r5,14(r5)
    2624:	28002d16 	blt	r5,zero,26dc <__smakebuf_r+0xf0>
    2628:	d80d883a 	mov	r6,sp
    262c:	0002bd00 	call	2bd0 <_fstat_r>
    2630:	10002916 	blt	r2,zero,26d8 <__smakebuf_r+0xec>
    2634:	d8800117 	ldw	r2,4(sp)
    2638:	00e00014 	movui	r3,32768
    263c:	10bc000c 	andi	r2,r2,61440
    2640:	10c03c26 	beq	r2,r3,2734 <__smakebuf_r+0x148>
    2644:	80c0030b 	ldhu	r3,12(r16)
    2648:	18c20014 	ori	r3,r3,2048
    264c:	80c0030d 	sth	r3,12(r16)
    2650:	00c80004 	movi	r3,8192
    2654:	10c00c1e 	bne	r2,r3,2688 <__smakebuf_r+0x9c>
    2658:	8140038f 	ldh	r5,14(r16)
    265c:	8809883a 	mov	r4,r17
    2660:	0002c380 	call	2c38 <_isatty_r>
    2664:	10000826 	beq	r2,zero,2688 <__smakebuf_r+0x9c>
    2668:	80c0030b 	ldhu	r3,12(r16)
    266c:	808010c4 	addi	r2,r16,67
    2670:	80800015 	stw	r2,0(r16)
    2674:	18c00054 	ori	r3,r3,1
    2678:	80800415 	stw	r2,16(r16)
    267c:	00800044 	movi	r2,1
    2680:	80c0030d 	sth	r3,12(r16)
    2684:	80800515 	stw	r2,20(r16)
    2688:	04810004 	movi	r18,1024
    268c:	8809883a 	mov	r4,r17
    2690:	900b883a 	mov	r5,r18
    2694:	00009200 	call	920 <_malloc_r>
    2698:	10003026 	beq	r2,zero,275c <__smakebuf_r+0x170>
    269c:	80c0030b 	ldhu	r3,12(r16)
    26a0:	01000034 	movhi	r4,0
    26a4:	21076e04 	addi	r4,r4,7608
    26a8:	89000f15 	stw	r4,60(r17)
    26ac:	18c02014 	ori	r3,r3,128
    26b0:	80c0030d 	sth	r3,12(r16)
    26b4:	80800015 	stw	r2,0(r16)
    26b8:	80800415 	stw	r2,16(r16)
    26bc:	84800515 	stw	r18,20(r16)
    26c0:	dfc01217 	ldw	ra,72(sp)
    26c4:	dc801117 	ldw	r18,68(sp)
    26c8:	dc401017 	ldw	r17,64(sp)
    26cc:	dc000f17 	ldw	r16,60(sp)
    26d0:	dec01304 	addi	sp,sp,76
    26d4:	f800283a 	ret
    26d8:	8080030b 	ldhu	r2,12(r16)
    26dc:	10c0200c 	andi	r3,r2,128
    26e0:	18ffffcc 	andi	r3,r3,65535
    26e4:	18e0001c 	xori	r3,r3,32768
    26e8:	18e00004 	addi	r3,r3,-32768
    26ec:	18000f1e 	bne	r3,zero,272c <__smakebuf_r+0x140>
    26f0:	04810004 	movi	r18,1024
    26f4:	10820014 	ori	r2,r2,2048
    26f8:	8080030d 	sth	r2,12(r16)
    26fc:	003fe306 	br	268c <__smakebuf_r+0xa0>
    2700:	288010c4 	addi	r2,r5,67
    2704:	28800015 	stw	r2,0(r5)
    2708:	28800415 	stw	r2,16(r5)
    270c:	00800044 	movi	r2,1
    2710:	28800515 	stw	r2,20(r5)
    2714:	dfc01217 	ldw	ra,72(sp)
    2718:	dc801117 	ldw	r18,68(sp)
    271c:	dc401017 	ldw	r17,64(sp)
    2720:	dc000f17 	ldw	r16,60(sp)
    2724:	dec01304 	addi	sp,sp,76
    2728:	f800283a 	ret
    272c:	04801004 	movi	r18,64
    2730:	003ff006 	br	26f4 <__smakebuf_r+0x108>
    2734:	81000a17 	ldw	r4,40(r16)
    2738:	00c00034 	movhi	r3,0
    273c:	18ca5304 	addi	r3,r3,10572
    2740:	20ffc01e 	bne	r4,r3,2644 <__smakebuf_r+0x58>
    2744:	8080030b 	ldhu	r2,12(r16)
    2748:	00c10004 	movi	r3,1024
    274c:	80c01315 	stw	r3,76(r16)
    2750:	10c4b03a 	or	r2,r2,r3
    2754:	8080030d 	sth	r2,12(r16)
    2758:	003fcb06 	br	2688 <__smakebuf_r+0x9c>
    275c:	8080030b 	ldhu	r2,12(r16)
    2760:	10c0800c 	andi	r3,r2,512
    2764:	18ffffcc 	andi	r3,r3,65535
    2768:	18e0001c 	xori	r3,r3,32768
    276c:	18e00004 	addi	r3,r3,-32768
    2770:	183fd31e 	bne	r3,zero,26c0 <__smakebuf_r+0xd4>
    2774:	10800094 	ori	r2,r2,2
    2778:	80c010c4 	addi	r3,r16,67
    277c:	8080030d 	sth	r2,12(r16)
    2780:	00800044 	movi	r2,1
    2784:	80c00015 	stw	r3,0(r16)
    2788:	80c00415 	stw	r3,16(r16)
    278c:	80800515 	stw	r2,20(r16)
    2790:	003fcb06 	br	26c0 <__smakebuf_r+0xd4>

00002794 <memset>:
    2794:	00c000c4 	movi	r3,3
    2798:	2005883a 	mov	r2,r4
    279c:	29403fcc 	andi	r5,r5,255
    27a0:	19802d2e 	bgeu	r3,r6,2858 <memset+0xc4>
    27a4:	20c6703a 	and	r3,r4,r3
    27a8:	18002e1e 	bne	r3,zero,2864 <memset+0xd0>
    27ac:	2806923a 	slli	r3,r5,8
    27b0:	010003c4 	movi	r4,15
    27b4:	3011883a 	mov	r8,r6
    27b8:	1946b03a 	or	r3,r3,r5
    27bc:	180e943a 	slli	r7,r3,16
    27c0:	38ceb03a 	or	r7,r7,r3
    27c4:	1007883a 	mov	r3,r2
    27c8:	21800f2e 	bgeu	r4,r6,2808 <memset+0x74>
    27cc:	19c00015 	stw	r7,0(r3)
    27d0:	19c00115 	stw	r7,4(r3)
    27d4:	19c00215 	stw	r7,8(r3)
    27d8:	19c00315 	stw	r7,12(r3)
    27dc:	423ffc04 	addi	r8,r8,-16
    27e0:	18c00404 	addi	r3,r3,16
    27e4:	223ff936 	bltu	r4,r8,27cc <memset+0x38>
    27e8:	30fffc04 	addi	r3,r6,-16
    27ec:	1806d13a 	srli	r3,r3,4
    27f0:	318003cc 	andi	r6,r6,15
    27f4:	010000c4 	movi	r4,3
    27f8:	18c00044 	addi	r3,r3,1
    27fc:	1806913a 	slli	r3,r3,4
    2800:	10c7883a 	add	r3,r2,r3
    2804:	21800e2e 	bgeu	r4,r6,2840 <memset+0xac>
    2808:	1813883a 	mov	r9,r3
    280c:	3011883a 	mov	r8,r6
    2810:	010000c4 	movi	r4,3
    2814:	49c00015 	stw	r7,0(r9)
    2818:	423fff04 	addi	r8,r8,-4
    281c:	4a400104 	addi	r9,r9,4
    2820:	223ffc36 	bltu	r4,r8,2814 <memset+0x80>
    2824:	313fff04 	addi	r4,r6,-4
    2828:	2008d0ba 	srli	r4,r4,2
    282c:	318000cc 	andi	r6,r6,3
    2830:	21000044 	addi	r4,r4,1
    2834:	2109883a 	add	r4,r4,r4
    2838:	2109883a 	add	r4,r4,r4
    283c:	1907883a 	add	r3,r3,r4
    2840:	30000a26 	beq	r6,zero,286c <memset+0xd8>
    2844:	198d883a 	add	r6,r3,r6
    2848:	19400005 	stb	r5,0(r3)
    284c:	18c00044 	addi	r3,r3,1
    2850:	19bffd1e 	bne	r3,r6,2848 <memset+0xb4>
    2854:	f800283a 	ret
    2858:	2007883a 	mov	r3,r4
    285c:	303ff91e 	bne	r6,zero,2844 <memset+0xb0>
    2860:	00000206 	br	286c <memset+0xd8>
    2864:	2007883a 	mov	r3,r4
    2868:	003ff606 	br	2844 <memset+0xb0>
    286c:	f800283a 	ret

00002870 <__sread>:
    2870:	defffe04 	addi	sp,sp,-8
    2874:	dc000015 	stw	r16,0(sp)
    2878:	2821883a 	mov	r16,r5
    287c:	2940038f 	ldh	r5,14(r5)
    2880:	dfc00115 	stw	ra,4(sp)
    2884:	0002d080 	call	2d08 <_read_r>
    2888:	10000716 	blt	r2,zero,28a8 <__sread+0x38>
    288c:	80c01417 	ldw	r3,80(r16)
    2890:	1887883a 	add	r3,r3,r2
    2894:	80c01415 	stw	r3,80(r16)
    2898:	dfc00117 	ldw	ra,4(sp)
    289c:	dc000017 	ldw	r16,0(sp)
    28a0:	dec00204 	addi	sp,sp,8
    28a4:	f800283a 	ret
    28a8:	80c0030b 	ldhu	r3,12(r16)
    28ac:	18fbffcc 	andi	r3,r3,61439
    28b0:	80c0030d 	sth	r3,12(r16)
    28b4:	dfc00117 	ldw	ra,4(sp)
    28b8:	dc000017 	ldw	r16,0(sp)
    28bc:	dec00204 	addi	sp,sp,8
    28c0:	f800283a 	ret

000028c4 <__swrite>:
    28c4:	2880030b 	ldhu	r2,12(r5)
    28c8:	defffb04 	addi	sp,sp,-20
    28cc:	dcc00315 	stw	r19,12(sp)
    28d0:	10c0400c 	andi	r3,r2,256
    28d4:	18ffffcc 	andi	r3,r3,65535
    28d8:	18e0001c 	xori	r3,r3,32768
    28dc:	dc800215 	stw	r18,8(sp)
    28e0:	dc400115 	stw	r17,4(sp)
    28e4:	dc000015 	stw	r16,0(sp)
    28e8:	dfc00415 	stw	ra,16(sp)
    28ec:	18e00004 	addi	r3,r3,-32768
    28f0:	2821883a 	mov	r16,r5
    28f4:	2027883a 	mov	r19,r4
    28f8:	3025883a 	mov	r18,r6
    28fc:	3823883a 	mov	r17,r7
    2900:	18000526 	beq	r3,zero,2918 <__swrite+0x54>
    2904:	2940038f 	ldh	r5,14(r5)
    2908:	000d883a 	mov	r6,zero
    290c:	01c00084 	movi	r7,2
    2910:	0002c9c0 	call	2c9c <_lseek_r>
    2914:	8080030b 	ldhu	r2,12(r16)
    2918:	8140038f 	ldh	r5,14(r16)
    291c:	10bbffcc 	andi	r2,r2,61439
    2920:	9809883a 	mov	r4,r19
    2924:	900d883a 	mov	r6,r18
    2928:	880f883a 	mov	r7,r17
    292c:	8080030d 	sth	r2,12(r16)
    2930:	dfc00417 	ldw	ra,16(sp)
    2934:	dcc00317 	ldw	r19,12(sp)
    2938:	dc800217 	ldw	r18,8(sp)
    293c:	dc400117 	ldw	r17,4(sp)
    2940:	dc000017 	ldw	r16,0(sp)
    2944:	dec00504 	addi	sp,sp,20
    2948:	00029b01 	jmpi	29b0 <_write_r>

0000294c <__sseek>:
    294c:	defffe04 	addi	sp,sp,-8
    2950:	dc000015 	stw	r16,0(sp)
    2954:	2821883a 	mov	r16,r5
    2958:	2940038f 	ldh	r5,14(r5)
    295c:	dfc00115 	stw	ra,4(sp)
    2960:	0002c9c0 	call	2c9c <_lseek_r>
    2964:	00ffffc4 	movi	r3,-1
    2968:	10c00826 	beq	r2,r3,298c <__sseek+0x40>
    296c:	80c0030b 	ldhu	r3,12(r16)
    2970:	80801415 	stw	r2,80(r16)
    2974:	18c40014 	ori	r3,r3,4096
    2978:	80c0030d 	sth	r3,12(r16)
    297c:	dfc00117 	ldw	ra,4(sp)
    2980:	dc000017 	ldw	r16,0(sp)
    2984:	dec00204 	addi	sp,sp,8
    2988:	f800283a 	ret
    298c:	80c0030b 	ldhu	r3,12(r16)
    2990:	18fbffcc 	andi	r3,r3,61439
    2994:	80c0030d 	sth	r3,12(r16)
    2998:	dfc00117 	ldw	ra,4(sp)
    299c:	dc000017 	ldw	r16,0(sp)
    29a0:	dec00204 	addi	sp,sp,8
    29a4:	f800283a 	ret

000029a8 <__sclose>:
    29a8:	2940038f 	ldh	r5,14(r5)
    29ac:	0002a1c1 	jmpi	2a1c <_close_r>

000029b0 <_write_r>:
    29b0:	defffd04 	addi	sp,sp,-12
    29b4:	dc400115 	stw	r17,4(sp)
    29b8:	dc000015 	stw	r16,0(sp)
    29bc:	2023883a 	mov	r17,r4
    29c0:	04000074 	movhi	r16,1
    29c4:	8409dd04 	addi	r16,r16,10100
    29c8:	2809883a 	mov	r4,r5
    29cc:	300b883a 	mov	r5,r6
    29d0:	380d883a 	mov	r6,r7
    29d4:	dfc00215 	stw	ra,8(sp)
    29d8:	80000015 	stw	zero,0(r16)
    29dc:	000361c0 	call	361c <write>
    29e0:	00ffffc4 	movi	r3,-1
    29e4:	10c00526 	beq	r2,r3,29fc <_write_r+0x4c>
    29e8:	dfc00217 	ldw	ra,8(sp)
    29ec:	dc400117 	ldw	r17,4(sp)
    29f0:	dc000017 	ldw	r16,0(sp)
    29f4:	dec00304 	addi	sp,sp,12
    29f8:	f800283a 	ret
    29fc:	80c00017 	ldw	r3,0(r16)
    2a00:	183ff926 	beq	r3,zero,29e8 <_write_r+0x38>
    2a04:	88c00015 	stw	r3,0(r17)
    2a08:	dfc00217 	ldw	ra,8(sp)
    2a0c:	dc400117 	ldw	r17,4(sp)
    2a10:	dc000017 	ldw	r16,0(sp)
    2a14:	dec00304 	addi	sp,sp,12
    2a18:	f800283a 	ret

00002a1c <_close_r>:
    2a1c:	defffd04 	addi	sp,sp,-12
    2a20:	dc400115 	stw	r17,4(sp)
    2a24:	dc000015 	stw	r16,0(sp)
    2a28:	2023883a 	mov	r17,r4
    2a2c:	04000074 	movhi	r16,1
    2a30:	8409dd04 	addi	r16,r16,10100
    2a34:	2809883a 	mov	r4,r5
    2a38:	dfc00215 	stw	ra,8(sp)
    2a3c:	80000015 	stw	zero,0(r16)
    2a40:	0002dc40 	call	2dc4 <close>
    2a44:	00ffffc4 	movi	r3,-1
    2a48:	10c00526 	beq	r2,r3,2a60 <_close_r+0x44>
    2a4c:	dfc00217 	ldw	ra,8(sp)
    2a50:	dc400117 	ldw	r17,4(sp)
    2a54:	dc000017 	ldw	r16,0(sp)
    2a58:	dec00304 	addi	sp,sp,12
    2a5c:	f800283a 	ret
    2a60:	80c00017 	ldw	r3,0(r16)
    2a64:	183ff926 	beq	r3,zero,2a4c <_close_r+0x30>
    2a68:	88c00015 	stw	r3,0(r17)
    2a6c:	dfc00217 	ldw	ra,8(sp)
    2a70:	dc400117 	ldw	r17,4(sp)
    2a74:	dc000017 	ldw	r16,0(sp)
    2a78:	dec00304 	addi	sp,sp,12
    2a7c:	f800283a 	ret

00002a80 <_fclose_r>:
    2a80:	defffc04 	addi	sp,sp,-16
    2a84:	dc400115 	stw	r17,4(sp)
    2a88:	dc000015 	stw	r16,0(sp)
    2a8c:	dfc00315 	stw	ra,12(sp)
    2a90:	dc800215 	stw	r18,8(sp)
    2a94:	2821883a 	mov	r16,r5
    2a98:	2023883a 	mov	r17,r4
    2a9c:	28003426 	beq	r5,zero,2b70 <_fclose_r+0xf0>
    2aa0:	00020400 	call	2040 <__sfp_lock_acquire>
    2aa4:	88000226 	beq	r17,zero,2ab0 <_fclose_r+0x30>
    2aa8:	88800e17 	ldw	r2,56(r17)
    2aac:	10003826 	beq	r2,zero,2b90 <_fclose_r+0x110>
    2ab0:	8080030f 	ldh	r2,12(r16)
    2ab4:	10002526 	beq	r2,zero,2b4c <_fclose_r+0xcc>
    2ab8:	8809883a 	mov	r4,r17
    2abc:	800b883a 	mov	r5,r16
    2ac0:	0001b900 	call	1b90 <_fflush_r>
    2ac4:	1025883a 	mov	r18,r2
    2ac8:	80800b17 	ldw	r2,44(r16)
    2acc:	10000426 	beq	r2,zero,2ae0 <_fclose_r+0x60>
    2ad0:	81400717 	ldw	r5,28(r16)
    2ad4:	8809883a 	mov	r4,r17
    2ad8:	103ee83a 	callr	r2
    2adc:	10003516 	blt	r2,zero,2bb4 <_fclose_r+0x134>
    2ae0:	8080030b 	ldhu	r2,12(r16)
    2ae4:	1080200c 	andi	r2,r2,128
    2ae8:	10bfffcc 	andi	r2,r2,65535
    2aec:	10a0001c 	xori	r2,r2,32768
    2af0:	10a00004 	addi	r2,r2,-32768
    2af4:	10002b1e 	bne	r2,zero,2ba4 <_fclose_r+0x124>
    2af8:	81400c17 	ldw	r5,48(r16)
    2afc:	28000526 	beq	r5,zero,2b14 <_fclose_r+0x94>
    2b00:	80801004 	addi	r2,r16,64
    2b04:	28800226 	beq	r5,r2,2b10 <_fclose_r+0x90>
    2b08:	8809883a 	mov	r4,r17
    2b0c:	00021bc0 	call	21bc <_free_r>
    2b10:	80000c15 	stw	zero,48(r16)
    2b14:	81401117 	ldw	r5,68(r16)
    2b18:	28000326 	beq	r5,zero,2b28 <_fclose_r+0xa8>
    2b1c:	8809883a 	mov	r4,r17
    2b20:	00021bc0 	call	21bc <_free_r>
    2b24:	80001115 	stw	zero,68(r16)
    2b28:	8000030d 	sth	zero,12(r16)
    2b2c:	00020440 	call	2044 <__sfp_lock_release>
    2b30:	9005883a 	mov	r2,r18
    2b34:	dfc00317 	ldw	ra,12(sp)
    2b38:	dc800217 	ldw	r18,8(sp)
    2b3c:	dc400117 	ldw	r17,4(sp)
    2b40:	dc000017 	ldw	r16,0(sp)
    2b44:	dec00404 	addi	sp,sp,16
    2b48:	f800283a 	ret
    2b4c:	00020440 	call	2044 <__sfp_lock_release>
    2b50:	0025883a 	mov	r18,zero
    2b54:	9005883a 	mov	r2,r18
    2b58:	dfc00317 	ldw	ra,12(sp)
    2b5c:	dc800217 	ldw	r18,8(sp)
    2b60:	dc400117 	ldw	r17,4(sp)
    2b64:	dc000017 	ldw	r16,0(sp)
    2b68:	dec00404 	addi	sp,sp,16
    2b6c:	f800283a 	ret
    2b70:	0025883a 	mov	r18,zero
    2b74:	9005883a 	mov	r2,r18
    2b78:	dfc00317 	ldw	ra,12(sp)
    2b7c:	dc800217 	ldw	r18,8(sp)
    2b80:	dc400117 	ldw	r17,4(sp)
    2b84:	dc000017 	ldw	r16,0(sp)
    2b88:	dec00404 	addi	sp,sp,16
    2b8c:	f800283a 	ret
    2b90:	8809883a 	mov	r4,r17
    2b94:	0001e380 	call	1e38 <__sinit>
    2b98:	8080030f 	ldh	r2,12(r16)
    2b9c:	103fc61e 	bne	r2,zero,2ab8 <_fclose_r+0x38>
    2ba0:	003fea06 	br	2b4c <_fclose_r+0xcc>
    2ba4:	81400417 	ldw	r5,16(r16)
    2ba8:	8809883a 	mov	r4,r17
    2bac:	00021bc0 	call	21bc <_free_r>
    2bb0:	003fd106 	br	2af8 <_fclose_r+0x78>
    2bb4:	04bfffc4 	movi	r18,-1
    2bb8:	003fc906 	br	2ae0 <_fclose_r+0x60>

00002bbc <fclose>:
    2bbc:	00800074 	movhi	r2,1
    2bc0:	1082fa04 	addi	r2,r2,3048
    2bc4:	200b883a 	mov	r5,r4
    2bc8:	11000017 	ldw	r4,0(r2)
    2bcc:	0002a801 	jmpi	2a80 <_fclose_r>

00002bd0 <_fstat_r>:
    2bd0:	defffd04 	addi	sp,sp,-12
    2bd4:	dc400115 	stw	r17,4(sp)
    2bd8:	dc000015 	stw	r16,0(sp)
    2bdc:	2023883a 	mov	r17,r4
    2be0:	04000074 	movhi	r16,1
    2be4:	8409dd04 	addi	r16,r16,10100
    2be8:	2809883a 	mov	r4,r5
    2bec:	300b883a 	mov	r5,r6
    2bf0:	dfc00215 	stw	ra,8(sp)
    2bf4:	80000015 	stw	zero,0(r16)
    2bf8:	0002f080 	call	2f08 <fstat>
    2bfc:	00ffffc4 	movi	r3,-1
    2c00:	10c00526 	beq	r2,r3,2c18 <_fstat_r+0x48>
    2c04:	dfc00217 	ldw	ra,8(sp)
    2c08:	dc400117 	ldw	r17,4(sp)
    2c0c:	dc000017 	ldw	r16,0(sp)
    2c10:	dec00304 	addi	sp,sp,12
    2c14:	f800283a 	ret
    2c18:	80c00017 	ldw	r3,0(r16)
    2c1c:	183ff926 	beq	r3,zero,2c04 <_fstat_r+0x34>
    2c20:	88c00015 	stw	r3,0(r17)
    2c24:	dfc00217 	ldw	ra,8(sp)
    2c28:	dc400117 	ldw	r17,4(sp)
    2c2c:	dc000017 	ldw	r16,0(sp)
    2c30:	dec00304 	addi	sp,sp,12
    2c34:	f800283a 	ret

00002c38 <_isatty_r>:
    2c38:	defffd04 	addi	sp,sp,-12
    2c3c:	dc400115 	stw	r17,4(sp)
    2c40:	dc000015 	stw	r16,0(sp)
    2c44:	2023883a 	mov	r17,r4
    2c48:	04000074 	movhi	r16,1
    2c4c:	8409dd04 	addi	r16,r16,10100
    2c50:	2809883a 	mov	r4,r5
    2c54:	dfc00215 	stw	ra,8(sp)
    2c58:	80000015 	stw	zero,0(r16)
    2c5c:	00030040 	call	3004 <isatty>
    2c60:	00ffffc4 	movi	r3,-1
    2c64:	10c00526 	beq	r2,r3,2c7c <_isatty_r+0x44>
    2c68:	dfc00217 	ldw	ra,8(sp)
    2c6c:	dc400117 	ldw	r17,4(sp)
    2c70:	dc000017 	ldw	r16,0(sp)
    2c74:	dec00304 	addi	sp,sp,12
    2c78:	f800283a 	ret
    2c7c:	80c00017 	ldw	r3,0(r16)
    2c80:	183ff926 	beq	r3,zero,2c68 <_isatty_r+0x30>
    2c84:	88c00015 	stw	r3,0(r17)
    2c88:	dfc00217 	ldw	ra,8(sp)
    2c8c:	dc400117 	ldw	r17,4(sp)
    2c90:	dc000017 	ldw	r16,0(sp)
    2c94:	dec00304 	addi	sp,sp,12
    2c98:	f800283a 	ret

00002c9c <_lseek_r>:
    2c9c:	defffd04 	addi	sp,sp,-12
    2ca0:	dc400115 	stw	r17,4(sp)
    2ca4:	dc000015 	stw	r16,0(sp)
    2ca8:	2023883a 	mov	r17,r4
    2cac:	04000074 	movhi	r16,1
    2cb0:	8409dd04 	addi	r16,r16,10100
    2cb4:	2809883a 	mov	r4,r5
    2cb8:	300b883a 	mov	r5,r6
    2cbc:	380d883a 	mov	r6,r7
    2cc0:	dfc00215 	stw	ra,8(sp)
    2cc4:	80000015 	stw	zero,0(r16)
    2cc8:	00031e00 	call	31e0 <lseek>
    2ccc:	00ffffc4 	movi	r3,-1
    2cd0:	10c00526 	beq	r2,r3,2ce8 <_lseek_r+0x4c>
    2cd4:	dfc00217 	ldw	ra,8(sp)
    2cd8:	dc400117 	ldw	r17,4(sp)
    2cdc:	dc000017 	ldw	r16,0(sp)
    2ce0:	dec00304 	addi	sp,sp,12
    2ce4:	f800283a 	ret
    2ce8:	80c00017 	ldw	r3,0(r16)
    2cec:	183ff926 	beq	r3,zero,2cd4 <_lseek_r+0x38>
    2cf0:	88c00015 	stw	r3,0(r17)
    2cf4:	dfc00217 	ldw	ra,8(sp)
    2cf8:	dc400117 	ldw	r17,4(sp)
    2cfc:	dc000017 	ldw	r16,0(sp)
    2d00:	dec00304 	addi	sp,sp,12
    2d04:	f800283a 	ret

00002d08 <_read_r>:
    2d08:	defffd04 	addi	sp,sp,-12
    2d0c:	dc400115 	stw	r17,4(sp)
    2d10:	dc000015 	stw	r16,0(sp)
    2d14:	2023883a 	mov	r17,r4
    2d18:	04000074 	movhi	r16,1
    2d1c:	8409dd04 	addi	r16,r16,10100
    2d20:	2809883a 	mov	r4,r5
    2d24:	300b883a 	mov	r5,r6
    2d28:	380d883a 	mov	r6,r7
    2d2c:	dfc00215 	stw	ra,8(sp)
    2d30:	80000015 	stw	zero,0(r16)
    2d34:	00033cc0 	call	33cc <read>
    2d38:	00ffffc4 	movi	r3,-1
    2d3c:	10c00526 	beq	r2,r3,2d54 <_read_r+0x4c>
    2d40:	dfc00217 	ldw	ra,8(sp)
    2d44:	dc400117 	ldw	r17,4(sp)
    2d48:	dc000017 	ldw	r16,0(sp)
    2d4c:	dec00304 	addi	sp,sp,12
    2d50:	f800283a 	ret
    2d54:	80c00017 	ldw	r3,0(r16)
    2d58:	183ff926 	beq	r3,zero,2d40 <_read_r+0x38>
    2d5c:	88c00015 	stw	r3,0(r17)
    2d60:	dfc00217 	ldw	ra,8(sp)
    2d64:	dc400117 	ldw	r17,4(sp)
    2d68:	dc000017 	ldw	r16,0(sp)
    2d6c:	dec00304 	addi	sp,sp,12
    2d70:	f800283a 	ret

00002d74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2d74:	defffe04 	addi	sp,sp,-8
    2d78:	dfc00115 	stw	ra,4(sp)
    2d7c:	df000015 	stw	fp,0(sp)
    2d80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2d84:	00800074 	movhi	r2,1
    2d88:	10830204 	addi	r2,r2,3080
    2d8c:	10800017 	ldw	r2,0(r2)
    2d90:	10000526 	beq	r2,zero,2da8 <alt_get_errno+0x34>
    2d94:	00800074 	movhi	r2,1
    2d98:	10830204 	addi	r2,r2,3080
    2d9c:	10800017 	ldw	r2,0(r2)
    2da0:	103ee83a 	callr	r2
    2da4:	00000206 	br	2db0 <alt_get_errno+0x3c>
    2da8:	00800074 	movhi	r2,1
    2dac:	1089dd04 	addi	r2,r2,10100
}
    2db0:	e037883a 	mov	sp,fp
    2db4:	dfc00117 	ldw	ra,4(sp)
    2db8:	df000017 	ldw	fp,0(sp)
    2dbc:	dec00204 	addi	sp,sp,8
    2dc0:	f800283a 	ret

00002dc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2dc4:	defffb04 	addi	sp,sp,-20
    2dc8:	dfc00415 	stw	ra,16(sp)
    2dcc:	df000315 	stw	fp,12(sp)
    2dd0:	df000304 	addi	fp,sp,12
    2dd4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2dd8:	e0bfff17 	ldw	r2,-4(fp)
    2ddc:	10000616 	blt	r2,zero,2df8 <close+0x34>
    2de0:	e0bfff17 	ldw	r2,-4(fp)
    2de4:	10c00324 	muli	r3,r2,12
    2de8:	00800074 	movhi	r2,1
    2dec:	10be7e04 	addi	r2,r2,-1544
    2df0:	1885883a 	add	r2,r3,r2
    2df4:	00000106 	br	2dfc <close+0x38>
    2df8:	0005883a 	mov	r2,zero
    2dfc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    2e00:	e0bffd17 	ldw	r2,-12(fp)
    2e04:	10001826 	beq	r2,zero,2e68 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2e08:	e0bffd17 	ldw	r2,-12(fp)
    2e0c:	10800017 	ldw	r2,0(r2)
    2e10:	10800417 	ldw	r2,16(r2)
    2e14:	10000626 	beq	r2,zero,2e30 <close+0x6c>
    2e18:	e0bffd17 	ldw	r2,-12(fp)
    2e1c:	10800017 	ldw	r2,0(r2)
    2e20:	10800417 	ldw	r2,16(r2)
    2e24:	e13ffd17 	ldw	r4,-12(fp)
    2e28:	103ee83a 	callr	r2
    2e2c:	00000106 	br	2e34 <close+0x70>
    2e30:	0005883a 	mov	r2,zero
    2e34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2e38:	e13fff17 	ldw	r4,-4(fp)
    2e3c:	00034bc0 	call	34bc <alt_release_fd>
    if (rval < 0)
    2e40:	e0bffe17 	ldw	r2,-8(fp)
    2e44:	1000060e 	bge	r2,zero,2e60 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    2e48:	0002d740 	call	2d74 <alt_get_errno>
    2e4c:	e0fffe17 	ldw	r3,-8(fp)
    2e50:	00c7c83a 	sub	r3,zero,r3
    2e54:	10c00015 	stw	r3,0(r2)
      return -1;
    2e58:	00bfffc4 	movi	r2,-1
    2e5c:	00000606 	br	2e78 <close+0xb4>
    }
    return 0;
    2e60:	0005883a 	mov	r2,zero
    2e64:	00000406 	br	2e78 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2e68:	0002d740 	call	2d74 <alt_get_errno>
    2e6c:	00c01444 	movi	r3,81
    2e70:	10c00015 	stw	r3,0(r2)
    return -1;
    2e74:	00bfffc4 	movi	r2,-1
  }
}
    2e78:	e037883a 	mov	sp,fp
    2e7c:	dfc00117 	ldw	ra,4(sp)
    2e80:	df000017 	ldw	fp,0(sp)
    2e84:	dec00204 	addi	sp,sp,8
    2e88:	f800283a 	ret

00002e8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2e8c:	defffc04 	addi	sp,sp,-16
    2e90:	df000315 	stw	fp,12(sp)
    2e94:	df000304 	addi	fp,sp,12
    2e98:	e13ffd15 	stw	r4,-12(fp)
    2e9c:	e17ffe15 	stw	r5,-8(fp)
    2ea0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2ea4:	e0bfff17 	ldw	r2,-4(fp)
}
    2ea8:	e037883a 	mov	sp,fp
    2eac:	df000017 	ldw	fp,0(sp)
    2eb0:	dec00104 	addi	sp,sp,4
    2eb4:	f800283a 	ret

00002eb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2eb8:	defffe04 	addi	sp,sp,-8
    2ebc:	dfc00115 	stw	ra,4(sp)
    2ec0:	df000015 	stw	fp,0(sp)
    2ec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2ec8:	00800074 	movhi	r2,1
    2ecc:	10830204 	addi	r2,r2,3080
    2ed0:	10800017 	ldw	r2,0(r2)
    2ed4:	10000526 	beq	r2,zero,2eec <alt_get_errno+0x34>
    2ed8:	00800074 	movhi	r2,1
    2edc:	10830204 	addi	r2,r2,3080
    2ee0:	10800017 	ldw	r2,0(r2)
    2ee4:	103ee83a 	callr	r2
    2ee8:	00000206 	br	2ef4 <alt_get_errno+0x3c>
    2eec:	00800074 	movhi	r2,1
    2ef0:	1089dd04 	addi	r2,r2,10100
}
    2ef4:	e037883a 	mov	sp,fp
    2ef8:	dfc00117 	ldw	ra,4(sp)
    2efc:	df000017 	ldw	fp,0(sp)
    2f00:	dec00204 	addi	sp,sp,8
    2f04:	f800283a 	ret

00002f08 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    2f08:	defffb04 	addi	sp,sp,-20
    2f0c:	dfc00415 	stw	ra,16(sp)
    2f10:	df000315 	stw	fp,12(sp)
    2f14:	df000304 	addi	fp,sp,12
    2f18:	e13ffe15 	stw	r4,-8(fp)
    2f1c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2f20:	e0bffe17 	ldw	r2,-8(fp)
    2f24:	10000616 	blt	r2,zero,2f40 <fstat+0x38>
    2f28:	e0bffe17 	ldw	r2,-8(fp)
    2f2c:	10c00324 	muli	r3,r2,12
    2f30:	00800074 	movhi	r2,1
    2f34:	10be7e04 	addi	r2,r2,-1544
    2f38:	1885883a 	add	r2,r3,r2
    2f3c:	00000106 	br	2f44 <fstat+0x3c>
    2f40:	0005883a 	mov	r2,zero
    2f44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    2f48:	e0bffd17 	ldw	r2,-12(fp)
    2f4c:	10001026 	beq	r2,zero,2f90 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    2f50:	e0bffd17 	ldw	r2,-12(fp)
    2f54:	10800017 	ldw	r2,0(r2)
    2f58:	10800817 	ldw	r2,32(r2)
    2f5c:	10000726 	beq	r2,zero,2f7c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    2f60:	e0bffd17 	ldw	r2,-12(fp)
    2f64:	10800017 	ldw	r2,0(r2)
    2f68:	10800817 	ldw	r2,32(r2)
    2f6c:	e13ffd17 	ldw	r4,-12(fp)
    2f70:	e17fff17 	ldw	r5,-4(fp)
    2f74:	103ee83a 	callr	r2
    2f78:	00000906 	br	2fa0 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    2f7c:	e0bfff17 	ldw	r2,-4(fp)
    2f80:	00c80004 	movi	r3,8192
    2f84:	10c00115 	stw	r3,4(r2)
      return 0;
    2f88:	0005883a 	mov	r2,zero
    2f8c:	00000406 	br	2fa0 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2f90:	0002eb80 	call	2eb8 <alt_get_errno>
    2f94:	00c01444 	movi	r3,81
    2f98:	10c00015 	stw	r3,0(r2)
    return -1;
    2f9c:	00bfffc4 	movi	r2,-1
  }
}
    2fa0:	e037883a 	mov	sp,fp
    2fa4:	dfc00117 	ldw	ra,4(sp)
    2fa8:	df000017 	ldw	fp,0(sp)
    2fac:	dec00204 	addi	sp,sp,8
    2fb0:	f800283a 	ret

00002fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2fb4:	defffe04 	addi	sp,sp,-8
    2fb8:	dfc00115 	stw	ra,4(sp)
    2fbc:	df000015 	stw	fp,0(sp)
    2fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2fc4:	00800074 	movhi	r2,1
    2fc8:	10830204 	addi	r2,r2,3080
    2fcc:	10800017 	ldw	r2,0(r2)
    2fd0:	10000526 	beq	r2,zero,2fe8 <alt_get_errno+0x34>
    2fd4:	00800074 	movhi	r2,1
    2fd8:	10830204 	addi	r2,r2,3080
    2fdc:	10800017 	ldw	r2,0(r2)
    2fe0:	103ee83a 	callr	r2
    2fe4:	00000206 	br	2ff0 <alt_get_errno+0x3c>
    2fe8:	00800074 	movhi	r2,1
    2fec:	1089dd04 	addi	r2,r2,10100
}
    2ff0:	e037883a 	mov	sp,fp
    2ff4:	dfc00117 	ldw	ra,4(sp)
    2ff8:	df000017 	ldw	fp,0(sp)
    2ffc:	dec00204 	addi	sp,sp,8
    3000:	f800283a 	ret

00003004 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3004:	deffed04 	addi	sp,sp,-76
    3008:	dfc01215 	stw	ra,72(sp)
    300c:	df001115 	stw	fp,68(sp)
    3010:	df001104 	addi	fp,sp,68
    3014:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3018:	e0bfff17 	ldw	r2,-4(fp)
    301c:	10000616 	blt	r2,zero,3038 <isatty+0x34>
    3020:	e0bfff17 	ldw	r2,-4(fp)
    3024:	10c00324 	muli	r3,r2,12
    3028:	00800074 	movhi	r2,1
    302c:	10be7e04 	addi	r2,r2,-1544
    3030:	1885883a 	add	r2,r3,r2
    3034:	00000106 	br	303c <isatty+0x38>
    3038:	0005883a 	mov	r2,zero
    303c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3040:	e0bfef17 	ldw	r2,-68(fp)
    3044:	10000e26 	beq	r2,zero,3080 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3048:	e0bfef17 	ldw	r2,-68(fp)
    304c:	10800017 	ldw	r2,0(r2)
    3050:	10800817 	ldw	r2,32(r2)
    3054:	1000021e 	bne	r2,zero,3060 <isatty+0x5c>
    {
      return 1;
    3058:	00800044 	movi	r2,1
    305c:	00000c06 	br	3090 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3060:	e0bff004 	addi	r2,fp,-64
    3064:	e13fff17 	ldw	r4,-4(fp)
    3068:	100b883a 	mov	r5,r2
    306c:	0002f080 	call	2f08 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3070:	e0bff117 	ldw	r2,-60(fp)
    3074:	10880020 	cmpeqi	r2,r2,8192
    3078:	10803fcc 	andi	r2,r2,255
    307c:	00000406 	br	3090 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3080:	0002fb40 	call	2fb4 <alt_get_errno>
    3084:	00c01444 	movi	r3,81
    3088:	10c00015 	stw	r3,0(r2)
    return 0;
    308c:	0005883a 	mov	r2,zero
  }
}
    3090:	e037883a 	mov	sp,fp
    3094:	dfc00117 	ldw	ra,4(sp)
    3098:	df000017 	ldw	fp,0(sp)
    309c:	dec00204 	addi	sp,sp,8
    30a0:	f800283a 	ret

000030a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    30a4:	defffc04 	addi	sp,sp,-16
    30a8:	df000315 	stw	fp,12(sp)
    30ac:	df000304 	addi	fp,sp,12
    30b0:	e13ffd15 	stw	r4,-12(fp)
    30b4:	e17ffe15 	stw	r5,-8(fp)
    30b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    30bc:	e0fffe17 	ldw	r3,-8(fp)
    30c0:	e0bffd17 	ldw	r2,-12(fp)
    30c4:	18800e26 	beq	r3,r2,3100 <alt_load_section+0x5c>
  {
    while( to != end )
    30c8:	00000a06 	br	30f4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    30cc:	e0bffd17 	ldw	r2,-12(fp)
    30d0:	10c00017 	ldw	r3,0(r2)
    30d4:	e0bffe17 	ldw	r2,-8(fp)
    30d8:	10c00015 	stw	r3,0(r2)
    30dc:	e0bffe17 	ldw	r2,-8(fp)
    30e0:	10800104 	addi	r2,r2,4
    30e4:	e0bffe15 	stw	r2,-8(fp)
    30e8:	e0bffd17 	ldw	r2,-12(fp)
    30ec:	10800104 	addi	r2,r2,4
    30f0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    30f4:	e0fffe17 	ldw	r3,-8(fp)
    30f8:	e0bfff17 	ldw	r2,-4(fp)
    30fc:	18bff31e 	bne	r3,r2,30cc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3100:	e037883a 	mov	sp,fp
    3104:	df000017 	ldw	fp,0(sp)
    3108:	dec00104 	addi	sp,sp,4
    310c:	f800283a 	ret

00003110 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3110:	defffe04 	addi	sp,sp,-8
    3114:	dfc00115 	stw	ra,4(sp)
    3118:	df000015 	stw	fp,0(sp)
    311c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3120:	01000074 	movhi	r4,1
    3124:	21032604 	addi	r4,r4,3224
    3128:	01400074 	movhi	r5,1
    312c:	297c7204 	addi	r5,r5,-3640
    3130:	01800074 	movhi	r6,1
    3134:	31832604 	addi	r6,r6,3224
    3138:	00030a40 	call	30a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    313c:	01000034 	movhi	r4,0
    3140:	21000804 	addi	r4,r4,32
    3144:	01400034 	movhi	r5,0
    3148:	29400804 	addi	r5,r5,32
    314c:	01800034 	movhi	r6,0
    3150:	31807004 	addi	r6,r6,448
    3154:	00030a40 	call	30a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3158:	01000074 	movhi	r4,1
    315c:	213bc904 	addi	r4,r4,-4316
    3160:	01400074 	movhi	r5,1
    3164:	297bc904 	addi	r5,r5,-4316
    3168:	01800074 	movhi	r6,1
    316c:	31bc7204 	addi	r6,r6,-3640
    3170:	00030a40 	call	30a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3174:	000c8140 	call	c814 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3178:	000c9d80 	call	c9d8 <alt_icache_flush_all>
}
    317c:	e037883a 	mov	sp,fp
    3180:	dfc00117 	ldw	ra,4(sp)
    3184:	df000017 	ldw	fp,0(sp)
    3188:	dec00204 	addi	sp,sp,8
    318c:	f800283a 	ret

00003190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3190:	defffe04 	addi	sp,sp,-8
    3194:	dfc00115 	stw	ra,4(sp)
    3198:	df000015 	stw	fp,0(sp)
    319c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    31a0:	00800074 	movhi	r2,1
    31a4:	10830204 	addi	r2,r2,3080
    31a8:	10800017 	ldw	r2,0(r2)
    31ac:	10000526 	beq	r2,zero,31c4 <alt_get_errno+0x34>
    31b0:	00800074 	movhi	r2,1
    31b4:	10830204 	addi	r2,r2,3080
    31b8:	10800017 	ldw	r2,0(r2)
    31bc:	103ee83a 	callr	r2
    31c0:	00000206 	br	31cc <alt_get_errno+0x3c>
    31c4:	00800074 	movhi	r2,1
    31c8:	1089dd04 	addi	r2,r2,10100
}
    31cc:	e037883a 	mov	sp,fp
    31d0:	dfc00117 	ldw	ra,4(sp)
    31d4:	df000017 	ldw	fp,0(sp)
    31d8:	dec00204 	addi	sp,sp,8
    31dc:	f800283a 	ret

000031e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    31e0:	defff904 	addi	sp,sp,-28
    31e4:	dfc00615 	stw	ra,24(sp)
    31e8:	df000515 	stw	fp,20(sp)
    31ec:	df000504 	addi	fp,sp,20
    31f0:	e13ffd15 	stw	r4,-12(fp)
    31f4:	e17ffe15 	stw	r5,-8(fp)
    31f8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    31fc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3200:	e0bffd17 	ldw	r2,-12(fp)
    3204:	10000616 	blt	r2,zero,3220 <lseek+0x40>
    3208:	e0bffd17 	ldw	r2,-12(fp)
    320c:	10c00324 	muli	r3,r2,12
    3210:	00800074 	movhi	r2,1
    3214:	10be7e04 	addi	r2,r2,-1544
    3218:	1885883a 	add	r2,r3,r2
    321c:	00000106 	br	3224 <lseek+0x44>
    3220:	0005883a 	mov	r2,zero
    3224:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    3228:	e0bffc17 	ldw	r2,-16(fp)
    322c:	10001026 	beq	r2,zero,3270 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3230:	e0bffc17 	ldw	r2,-16(fp)
    3234:	10800017 	ldw	r2,0(r2)
    3238:	10800717 	ldw	r2,28(r2)
    323c:	10000926 	beq	r2,zero,3264 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3240:	e0bffc17 	ldw	r2,-16(fp)
    3244:	10800017 	ldw	r2,0(r2)
    3248:	10800717 	ldw	r2,28(r2)
    324c:	e13ffc17 	ldw	r4,-16(fp)
    3250:	e17ffe17 	ldw	r5,-8(fp)
    3254:	e1bfff17 	ldw	r6,-4(fp)
    3258:	103ee83a 	callr	r2
    325c:	e0bffb15 	stw	r2,-20(fp)
    3260:	00000506 	br	3278 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3264:	00bfde84 	movi	r2,-134
    3268:	e0bffb15 	stw	r2,-20(fp)
    326c:	00000206 	br	3278 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    3270:	00bfebc4 	movi	r2,-81
    3274:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3278:	e0bffb17 	ldw	r2,-20(fp)
    327c:	1000060e 	bge	r2,zero,3298 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
    3280:	00031900 	call	3190 <alt_get_errno>
    3284:	e0fffb17 	ldw	r3,-20(fp)
    3288:	00c7c83a 	sub	r3,zero,r3
    328c:	10c00015 	stw	r3,0(r2)
    rc = -1;
    3290:	00bfffc4 	movi	r2,-1
    3294:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3298:	e0bffb17 	ldw	r2,-20(fp)
}
    329c:	e037883a 	mov	sp,fp
    32a0:	dfc00117 	ldw	ra,4(sp)
    32a4:	df000017 	ldw	fp,0(sp)
    32a8:	dec00204 	addi	sp,sp,8
    32ac:	f800283a 	ret

000032b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    32b0:	defffb04 	addi	sp,sp,-20
    32b4:	dfc00415 	stw	ra,16(sp)
    32b8:	df000315 	stw	fp,12(sp)
    32bc:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    32c0:	0009883a 	mov	r4,zero
    32c4:	000b8100 	call	b810 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    32c8:	00042a80 	call	42a8 <OSInit>
    32cc:	01000044 	movi	r4,1
    32d0:	0008e480 	call	8e48 <OSSemCreate>
    32d4:	00c00074 	movhi	r3,1
    32d8:	18c9e304 	addi	r3,r3,10124
    32dc:	18800015 	stw	r2,0(r3)
    32e0:	01000044 	movi	r4,1
    32e4:	0008e480 	call	8e48 <OSSemCreate>
    32e8:	00c00074 	movhi	r3,1
    32ec:	18c9e504 	addi	r3,r3,10132
    32f0:	18800015 	stw	r2,0(r3)
    32f4:	00800074 	movhi	r2,1
    32f8:	1089de04 	addi	r2,r2,10104
    32fc:	e0bffe15 	stw	r2,-8(fp)
    3300:	00800044 	movi	r2,1
    3304:	e0bfff0d 	sth	r2,-4(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    3308:	e0bfff0b 	ldhu	r2,-4(fp)
    330c:	1009883a 	mov	r4,r2
    3310:	0008e480 	call	8e48 <OSSemCreate>
    3314:	e0fffe17 	ldw	r3,-8(fp)
    3318:	18800015 	stw	r2,0(r3)
  return *sem ? 0 : -1;
    331c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3320:	000b8440 	call	b844 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3324:	01000074 	movhi	r4,1
    3328:	213bd804 	addi	r4,r4,-4256
    332c:	01400074 	movhi	r5,1
    3330:	297bd804 	addi	r5,r5,-4256
    3334:	01800074 	movhi	r6,1
    3338:	31bbd804 	addi	r6,r6,-4256
    333c:	000cac80 	call	cac8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3340:	000c9200 	call	c920 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3344:	01000074 	movhi	r4,1
    3348:	21325f04 	addi	r4,r4,-13956
    334c:	000d9140 	call	d914 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3350:	d126e617 	ldw	r4,-25704(gp)
    3354:	d0e6e717 	ldw	r3,-25700(gp)
    3358:	d0a6e817 	ldw	r2,-25696(gp)
    335c:	180b883a 	mov	r5,r3
    3360:	100d883a 	mov	r6,r2
    3364:	000026c0 	call	26c <main>
    3368:	e0bffd15 	stw	r2,-12(fp)
  close(STDOUT_FILENO);
    336c:	01000044 	movi	r4,1
    3370:	0002dc40 	call	2dc4 <close>
  exit (result);
    3374:	e13ffd17 	ldw	r4,-12(fp)
    3378:	000d9280 	call	d928 <exit>

0000337c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    337c:	defffe04 	addi	sp,sp,-8
    3380:	dfc00115 	stw	ra,4(sp)
    3384:	df000015 	stw	fp,0(sp)
    3388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    338c:	00800074 	movhi	r2,1
    3390:	10830204 	addi	r2,r2,3080
    3394:	10800017 	ldw	r2,0(r2)
    3398:	10000526 	beq	r2,zero,33b0 <alt_get_errno+0x34>
    339c:	00800074 	movhi	r2,1
    33a0:	10830204 	addi	r2,r2,3080
    33a4:	10800017 	ldw	r2,0(r2)
    33a8:	103ee83a 	callr	r2
    33ac:	00000206 	br	33b8 <alt_get_errno+0x3c>
    33b0:	00800074 	movhi	r2,1
    33b4:	1089dd04 	addi	r2,r2,10100
}
    33b8:	e037883a 	mov	sp,fp
    33bc:	dfc00117 	ldw	ra,4(sp)
    33c0:	df000017 	ldw	fp,0(sp)
    33c4:	dec00204 	addi	sp,sp,8
    33c8:	f800283a 	ret

000033cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    33cc:	defff904 	addi	sp,sp,-28
    33d0:	dfc00615 	stw	ra,24(sp)
    33d4:	df000515 	stw	fp,20(sp)
    33d8:	df000504 	addi	fp,sp,20
    33dc:	e13ffd15 	stw	r4,-12(fp)
    33e0:	e17ffe15 	stw	r5,-8(fp)
    33e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    33e8:	e0bffd17 	ldw	r2,-12(fp)
    33ec:	10000616 	blt	r2,zero,3408 <read+0x3c>
    33f0:	e0bffd17 	ldw	r2,-12(fp)
    33f4:	10c00324 	muli	r3,r2,12
    33f8:	00800074 	movhi	r2,1
    33fc:	10be7e04 	addi	r2,r2,-1544
    3400:	1885883a 	add	r2,r3,r2
    3404:	00000106 	br	340c <read+0x40>
    3408:	0005883a 	mov	r2,zero
    340c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3410:	e0bffb17 	ldw	r2,-20(fp)
    3414:	10002026 	beq	r2,zero,3498 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3418:	e0bffb17 	ldw	r2,-20(fp)
    341c:	10800217 	ldw	r2,8(r2)
    3420:	108000cc 	andi	r2,r2,3
    3424:	10800060 	cmpeqi	r2,r2,1
    3428:	1000171e 	bne	r2,zero,3488 <read+0xbc>
        (fd->dev->read))
    342c:	e0bffb17 	ldw	r2,-20(fp)
    3430:	10800017 	ldw	r2,0(r2)
    3434:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3438:	10001326 	beq	r2,zero,3488 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    343c:	e0bffb17 	ldw	r2,-20(fp)
    3440:	10800017 	ldw	r2,0(r2)
    3444:	10c00517 	ldw	r3,20(r2)
    3448:	e0bfff17 	ldw	r2,-4(fp)
    344c:	e13ffb17 	ldw	r4,-20(fp)
    3450:	e17ffe17 	ldw	r5,-8(fp)
    3454:	100d883a 	mov	r6,r2
    3458:	183ee83a 	callr	r3
    345c:	e0bffc15 	stw	r2,-16(fp)
    3460:	e0bffc17 	ldw	r2,-16(fp)
    3464:	1000060e 	bge	r2,zero,3480 <read+0xb4>
        {
          ALT_ERRNO = -rval;
    3468:	000337c0 	call	337c <alt_get_errno>
    346c:	e0fffc17 	ldw	r3,-16(fp)
    3470:	00c7c83a 	sub	r3,zero,r3
    3474:	10c00015 	stw	r3,0(r2)
          return -1;
    3478:	00bfffc4 	movi	r2,-1
    347c:	00000a06 	br	34a8 <read+0xdc>
        }
        return rval;
    3480:	e0bffc17 	ldw	r2,-16(fp)
    3484:	00000806 	br	34a8 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3488:	000337c0 	call	337c <alt_get_errno>
    348c:	00c00344 	movi	r3,13
    3490:	10c00015 	stw	r3,0(r2)
    3494:	00000306 	br	34a4 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3498:	000337c0 	call	337c <alt_get_errno>
    349c:	00c01444 	movi	r3,81
    34a0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    34a4:	00bfffc4 	movi	r2,-1
}
    34a8:	e037883a 	mov	sp,fp
    34ac:	dfc00117 	ldw	ra,4(sp)
    34b0:	df000017 	ldw	fp,0(sp)
    34b4:	dec00204 	addi	sp,sp,8
    34b8:	f800283a 	ret

000034bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    34bc:	defffe04 	addi	sp,sp,-8
    34c0:	df000115 	stw	fp,4(sp)
    34c4:	df000104 	addi	fp,sp,4
    34c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    34cc:	e0bfff17 	ldw	r2,-4(fp)
    34d0:	108000d0 	cmplti	r2,r2,3
    34d4:	10000d1e 	bne	r2,zero,350c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    34d8:	00c00074 	movhi	r3,1
    34dc:	18fe7e04 	addi	r3,r3,-1544
    34e0:	e0bfff17 	ldw	r2,-4(fp)
    34e4:	10800324 	muli	r2,r2,12
    34e8:	1885883a 	add	r2,r3,r2
    34ec:	10800204 	addi	r2,r2,8
    34f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    34f4:	00c00074 	movhi	r3,1
    34f8:	18fe7e04 	addi	r3,r3,-1544
    34fc:	e0bfff17 	ldw	r2,-4(fp)
    3500:	10800324 	muli	r2,r2,12
    3504:	1885883a 	add	r2,r3,r2
    3508:	10000015 	stw	zero,0(r2)
  }
}
    350c:	e037883a 	mov	sp,fp
    3510:	df000017 	ldw	fp,0(sp)
    3514:	dec00104 	addi	sp,sp,4
    3518:	f800283a 	ret

0000351c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    351c:	defff904 	addi	sp,sp,-28
    3520:	df000615 	stw	fp,24(sp)
    3524:	df000604 	addi	fp,sp,24
    3528:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    352c:	0005303a 	rdctl	r2,status
    3530:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3534:	e0fffc17 	ldw	r3,-16(fp)
    3538:	00bfff84 	movi	r2,-2
    353c:	1884703a 	and	r2,r3,r2
    3540:	1001703a 	wrctl	status,r2
  
  return context;
    3544:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3548:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    354c:	d0a00a17 	ldw	r2,-32728(gp)
    3550:	10c000c4 	addi	r3,r2,3
    3554:	00bfff04 	movi	r2,-4
    3558:	1884703a 	and	r2,r3,r2
    355c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3560:	d0e00a17 	ldw	r3,-32728(gp)
    3564:	e0bfff17 	ldw	r2,-4(fp)
    3568:	1885883a 	add	r2,r3,r2
    356c:	00c10034 	movhi	r3,1024
    3570:	18c00004 	addi	r3,r3,0
    3574:	1880062e 	bgeu	r3,r2,3590 <sbrk+0x74>
    3578:	e0bffa17 	ldw	r2,-24(fp)
    357c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3580:	e0bffd17 	ldw	r2,-12(fp)
    3584:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3588:	00bfffc4 	movi	r2,-1
    358c:	00000b06 	br	35bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3590:	d0a00a17 	ldw	r2,-32728(gp)
    3594:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    3598:	d0e00a17 	ldw	r3,-32728(gp)
    359c:	e0bfff17 	ldw	r2,-4(fp)
    35a0:	1885883a 	add	r2,r3,r2
    35a4:	d0a00a15 	stw	r2,-32728(gp)
    35a8:	e0bffa17 	ldw	r2,-24(fp)
    35ac:	e0bffe15 	stw	r2,-8(fp)
    35b0:	e0bffe17 	ldw	r2,-8(fp)
    35b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    35b8:	e0bffb17 	ldw	r2,-20(fp)
} 
    35bc:	e037883a 	mov	sp,fp
    35c0:	df000017 	ldw	fp,0(sp)
    35c4:	dec00104 	addi	sp,sp,4
    35c8:	f800283a 	ret

000035cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    35cc:	defffe04 	addi	sp,sp,-8
    35d0:	dfc00115 	stw	ra,4(sp)
    35d4:	df000015 	stw	fp,0(sp)
    35d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    35dc:	00800074 	movhi	r2,1
    35e0:	10830204 	addi	r2,r2,3080
    35e4:	10800017 	ldw	r2,0(r2)
    35e8:	10000526 	beq	r2,zero,3600 <alt_get_errno+0x34>
    35ec:	00800074 	movhi	r2,1
    35f0:	10830204 	addi	r2,r2,3080
    35f4:	10800017 	ldw	r2,0(r2)
    35f8:	103ee83a 	callr	r2
    35fc:	00000206 	br	3608 <alt_get_errno+0x3c>
    3600:	00800074 	movhi	r2,1
    3604:	1089dd04 	addi	r2,r2,10100
}
    3608:	e037883a 	mov	sp,fp
    360c:	dfc00117 	ldw	ra,4(sp)
    3610:	df000017 	ldw	fp,0(sp)
    3614:	dec00204 	addi	sp,sp,8
    3618:	f800283a 	ret

0000361c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    361c:	defff904 	addi	sp,sp,-28
    3620:	dfc00615 	stw	ra,24(sp)
    3624:	df000515 	stw	fp,20(sp)
    3628:	df000504 	addi	fp,sp,20
    362c:	e13ffd15 	stw	r4,-12(fp)
    3630:	e17ffe15 	stw	r5,-8(fp)
    3634:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3638:	e0bffd17 	ldw	r2,-12(fp)
    363c:	10000616 	blt	r2,zero,3658 <write+0x3c>
    3640:	e0bffd17 	ldw	r2,-12(fp)
    3644:	10c00324 	muli	r3,r2,12
    3648:	00800074 	movhi	r2,1
    364c:	10be7e04 	addi	r2,r2,-1544
    3650:	1885883a 	add	r2,r3,r2
    3654:	00000106 	br	365c <write+0x40>
    3658:	0005883a 	mov	r2,zero
    365c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3660:	e0bffb17 	ldw	r2,-20(fp)
    3664:	10001f26 	beq	r2,zero,36e4 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3668:	e0bffb17 	ldw	r2,-20(fp)
    366c:	10800217 	ldw	r2,8(r2)
    3670:	108000cc 	andi	r2,r2,3
    3674:	10001726 	beq	r2,zero,36d4 <write+0xb8>
    3678:	e0bffb17 	ldw	r2,-20(fp)
    367c:	10800017 	ldw	r2,0(r2)
    3680:	10800617 	ldw	r2,24(r2)
    3684:	10001326 	beq	r2,zero,36d4 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3688:	e0bffb17 	ldw	r2,-20(fp)
    368c:	10800017 	ldw	r2,0(r2)
    3690:	10c00617 	ldw	r3,24(r2)
    3694:	e0bfff17 	ldw	r2,-4(fp)
    3698:	e13ffb17 	ldw	r4,-20(fp)
    369c:	e17ffe17 	ldw	r5,-8(fp)
    36a0:	100d883a 	mov	r6,r2
    36a4:	183ee83a 	callr	r3
    36a8:	e0bffc15 	stw	r2,-16(fp)
    36ac:	e0bffc17 	ldw	r2,-16(fp)
    36b0:	1000060e 	bge	r2,zero,36cc <write+0xb0>
      {
        ALT_ERRNO = -rval;
    36b4:	00035cc0 	call	35cc <alt_get_errno>
    36b8:	e0fffc17 	ldw	r3,-16(fp)
    36bc:	00c7c83a 	sub	r3,zero,r3
    36c0:	10c00015 	stw	r3,0(r2)
        return -1;
    36c4:	00bfffc4 	movi	r2,-1
    36c8:	00000a06 	br	36f4 <write+0xd8>
      }
      return rval;
    36cc:	e0bffc17 	ldw	r2,-16(fp)
    36d0:	00000806 	br	36f4 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
    36d4:	00035cc0 	call	35cc <alt_get_errno>
    36d8:	00c00344 	movi	r3,13
    36dc:	10c00015 	stw	r3,0(r2)
    36e0:	00000306 	br	36f0 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    36e4:	00035cc0 	call	35cc <alt_get_errno>
    36e8:	00c01444 	movi	r3,81
    36ec:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    36f0:	00bfffc4 	movi	r2,-1
}
    36f4:	e037883a 	mov	sp,fp
    36f8:	dfc00117 	ldw	ra,4(sp)
    36fc:	df000017 	ldw	fp,0(sp)
    3700:	dec00204 	addi	sp,sp,8
    3704:	f800283a 	ret

00003708 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    3708:	deffde04 	addi	sp,sp,-136
    370c:	dfc02115 	stw	ra,132(sp)
    3710:	df002015 	stw	fp,128(sp)
    3714:	df002004 	addi	fp,sp,128
    3718:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    371c:	e0bfe104 	addi	r2,fp,-124
    3720:	01003fc4 	movi	r4,255
    3724:	100b883a 	mov	r5,r2
    3728:	000b0100 	call	b010 <OSTaskQuery>
    372c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    3730:	e0bffe83 	ldbu	r2,-6(fp)
    3734:	10803fcc 	andi	r2,r2,255
    3738:	10001c1e 	bne	r2,zero,37ac <__env_lock+0xa4>
    return;

  id = tcb.OSTCBPrio;
    373c:	e0bfed83 	ldbu	r2,-74(fp)
    3740:	10803fcc 	andi	r2,r2,255
    3744:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    3748:	d0e6ea17 	ldw	r3,-25688(gp)
    374c:	e0bffc04 	addi	r2,fp,-16
    3750:	1809883a 	mov	r4,r3
    3754:	100b883a 	mov	r5,r2
    3758:	00096a80 	call	96a8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    375c:	e0bffe03 	ldbu	r2,-8(fp)
    3760:	10803fcc 	andi	r2,r2,255
    3764:	10000726 	beq	r2,zero,3784 <__env_lock+0x7c>
    3768:	d0a00b17 	ldw	r2,-32724(gp)
    376c:	e0ffe017 	ldw	r3,-128(fp)
    3770:	1880041e 	bne	r3,r2,3784 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    3774:	d0a6e917 	ldw	r2,-25692(gp)
    3778:	10800044 	addi	r2,r2,1
    377c:	d0a6e915 	stw	r2,-25692(gp)
    3780:	00000a06 	br	37ac <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    3784:	d0e6ea17 	ldw	r3,-25688(gp)
    3788:	e0bffe84 	addi	r2,fp,-6
    378c:	1809883a 	mov	r4,r3
    3790:	000b883a 	mov	r5,zero
    3794:	100d883a 	mov	r6,r2
    3798:	00091b80 	call	91b8 <OSSemPend>
    locks  = 1;
    379c:	00800044 	movi	r2,1
    37a0:	d0a6e915 	stw	r2,-25692(gp)
    lockid = id;
    37a4:	e0bfe017 	ldw	r2,-128(fp)
    37a8:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    37ac:	e037883a 	mov	sp,fp
    37b0:	dfc00117 	ldw	ra,4(sp)
    37b4:	df000017 	ldw	fp,0(sp)
    37b8:	dec00204 	addi	sp,sp,8
    37bc:	f800283a 	ret

000037c0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    37c0:	defffd04 	addi	sp,sp,-12
    37c4:	dfc00215 	stw	ra,8(sp)
    37c8:	df000115 	stw	fp,4(sp)
    37cc:	df000104 	addi	fp,sp,4
    37d0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    37d4:	d0a6e917 	ldw	r2,-25692(gp)
    37d8:	10000b26 	beq	r2,zero,3808 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    37dc:	d0a6e917 	ldw	r2,-25692(gp)
    37e0:	10bfffc4 	addi	r2,r2,-1
    37e4:	d0a6e915 	stw	r2,-25692(gp)
    37e8:	d0a6e917 	ldw	r2,-25692(gp)
    37ec:	1000071e 	bne	r2,zero,380c <__env_unlock+0x4c>
  {
    lockid = -1;
    37f0:	00bfffc4 	movi	r2,-1
    37f4:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
    37f8:	d0a6ea17 	ldw	r2,-25688(gp)
    37fc:	1009883a 	mov	r4,r2
    3800:	00095980 	call	9598 <OSSemPost>
    3804:	00000106 	br	380c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    3808:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    380c:	e037883a 	mov	sp,fp
    3810:	dfc00117 	ldw	ra,4(sp)
    3814:	df000017 	ldw	fp,0(sp)
    3818:	dec00204 	addi	sp,sp,8
    381c:	f800283a 	ret

00003820 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    3820:	deffda04 	addi	sp,sp,-152
    3824:	dfc02515 	stw	ra,148(sp)
    3828:	df002415 	stw	fp,144(sp)
    382c:	df002404 	addi	fp,sp,144
    3830:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3834:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    3838:	00800074 	movhi	r2,1
    383c:	1089e644 	addi	r2,r2,10137
    3840:	10800003 	ldbu	r2,0(r2)
    3844:	10803fcc 	andi	r2,r2,255
    3848:	10800058 	cmpnei	r2,r2,1
    384c:	1000341e 	bne	r2,zero,3920 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3850:	e0bfe104 	addi	r2,fp,-124
    3854:	01003fc4 	movi	r4,255
    3858:	100b883a 	mov	r5,r2
    385c:	000b0100 	call	b010 <OSTaskQuery>
    3860:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    3864:	e0bffe83 	ldbu	r2,-6(fp)
    3868:	10803fcc 	andi	r2,r2,255
    386c:	10002c1e 	bne	r2,zero,3920 <__malloc_lock+0x100>
    return;

  id = tcb.OSTCBPrio;
    3870:	e0bfed83 	ldbu	r2,-74(fp)
    3874:	10803fcc 	andi	r2,r2,255
    3878:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    387c:	d0e6ec17 	ldw	r3,-25680(gp)
    3880:	e0bffc04 	addi	r2,fp,-16
    3884:	1809883a 	mov	r4,r3
    3888:	100b883a 	mov	r5,r2
    388c:	00096a80 	call	96a8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3890:	0005303a 	rdctl	r2,status
    3894:	e0bfde15 	stw	r2,-136(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3898:	e0ffde17 	ldw	r3,-136(fp)
    389c:	00bfff84 	movi	r2,-2
    38a0:	1884703a 	and	r2,r3,r2
    38a4:	1001703a 	wrctl	status,r2
  
  return context;
    38a8:	e0bfde17 	ldw	r2,-136(fp)
  
  OS_ENTER_CRITICAL();
    38ac:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
    38b0:	e0bffc0b 	ldhu	r2,-16(fp)
    38b4:	10bfffcc 	andi	r2,r2,65535
    38b8:	10000b1e 	bne	r2,zero,38e8 <__malloc_lock+0xc8>
    38bc:	d0a00c17 	ldw	r2,-32720(gp)
    38c0:	e0ffdd17 	ldw	r3,-140(fp)
    38c4:	1880081e 	bne	r3,r2,38e8 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
    38c8:	d0a6eb17 	ldw	r2,-25684(gp)
    38cc:	10800044 	addi	r2,r2,1
    38d0:	d0a6eb15 	stw	r2,-25684(gp)
    38d4:	e0bfdc17 	ldw	r2,-144(fp)
    38d8:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    38dc:	e0bfdf17 	ldw	r2,-132(fp)
    38e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    38e4:	00000e06 	br	3920 <__malloc_lock+0x100>
    38e8:	e0bfdc17 	ldw	r2,-144(fp)
    38ec:	e0bfe015 	stw	r2,-128(fp)
    38f0:	e0bfe017 	ldw	r2,-128(fp)
    38f4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    38f8:	d0e6ec17 	ldw	r3,-25680(gp)
    38fc:	e0bffe84 	addi	r2,fp,-6
    3900:	1809883a 	mov	r4,r3
    3904:	000b883a 	mov	r5,zero
    3908:	100d883a 	mov	r6,r2
    390c:	00091b80 	call	91b8 <OSSemPend>
    locks  = 1;
    3910:	00800044 	movi	r2,1
    3914:	d0a6eb15 	stw	r2,-25684(gp)
    lockid = id;
    3918:	e0bfdd17 	ldw	r2,-140(fp)
    391c:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    3920:	e037883a 	mov	sp,fp
    3924:	dfc00117 	ldw	ra,4(sp)
    3928:	df000017 	ldw	fp,0(sp)
    392c:	dec00204 	addi	sp,sp,8
    3930:	f800283a 	ret

00003934 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3934:	defff804 	addi	sp,sp,-32
    3938:	dfc00715 	stw	ra,28(sp)
    393c:	df000615 	stw	fp,24(sp)
    3940:	df000604 	addi	fp,sp,24
    3944:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3948:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    394c:	00800074 	movhi	r2,1
    3950:	1089e644 	addi	r2,r2,10137
    3954:	10800003 	ldbu	r2,0(r2)
    3958:	10803fcc 	andi	r2,r2,255
    395c:	10800060 	cmpeqi	r2,r2,1
    3960:	10002326 	beq	r2,zero,39f0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3964:	0005303a 	rdctl	r2,status
    3968:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    396c:	e0fffb17 	ldw	r3,-20(fp)
    3970:	00bfff84 	movi	r2,-2
    3974:	1884703a 	and	r2,r3,r2
    3978:	1001703a 	wrctl	status,r2
  
  return context;
    397c:	e0bffb17 	ldw	r2,-20(fp)
      return;

  OS_ENTER_CRITICAL();
    3980:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    3984:	d0a6eb17 	ldw	r2,-25684(gp)
    3988:	1000051e 	bne	r2,zero,39a0 <__malloc_unlock+0x6c>
    398c:	e0bffa17 	ldw	r2,-24(fp)
    3990:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3994:	e0bffc17 	ldw	r2,-16(fp)
    3998:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    399c:	00001506 	br	39f4 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    39a0:	d0a6eb17 	ldw	r2,-25684(gp)
    39a4:	10bfffc4 	addi	r2,r2,-1
    39a8:	d0a6eb15 	stw	r2,-25684(gp)
    39ac:	d0a6eb17 	ldw	r2,-25684(gp)
    39b0:	10000a1e 	bne	r2,zero,39dc <__malloc_unlock+0xa8>
  {
    lockid = -1;
    39b4:	00bfffc4 	movi	r2,-1
    39b8:	d0a00c15 	stw	r2,-32720(gp)
    39bc:	e0bffa17 	ldw	r2,-24(fp)
    39c0:	e0bffd15 	stw	r2,-12(fp)
    39c4:	e0bffd17 	ldw	r2,-12(fp)
    39c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    39cc:	d0a6ec17 	ldw	r2,-25680(gp)
    39d0:	1009883a 	mov	r4,r2
    39d4:	00095980 	call	9598 <OSSemPost>
    39d8:	00000606 	br	39f4 <__malloc_unlock+0xc0>
    39dc:	e0bffa17 	ldw	r2,-24(fp)
    39e0:	e0bffe15 	stw	r2,-8(fp)
    39e4:	e0bffe17 	ldw	r2,-8(fp)
    39e8:	1001703a 	wrctl	status,r2
    39ec:	00000106 	br	39f4 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    39f0:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    39f4:	e037883a 	mov	sp,fp
    39f8:	dfc00117 	ldw	ra,4(sp)
    39fc:	df000017 	ldw	fp,0(sp)
    3a00:	dec00204 	addi	sp,sp,8
    3a04:	f800283a 	ret

00003a08 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3a08:	defff704 	addi	sp,sp,-36
    3a0c:	dfc00815 	stw	ra,32(sp)
    3a10:	df000715 	stw	fp,28(sp)
    3a14:	df000704 	addi	fp,sp,28
    3a18:	e13ffd15 	stw	r4,-12(fp)
    3a1c:	e17ffe15 	stw	r5,-8(fp)
    3a20:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3a24:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3a28:	e0bfff17 	ldw	r2,-4(fp)
    3a2c:	1000021e 	bne	r2,zero,3a38 <OSEventNameGet+0x30>
        return (0);
    3a30:	0005883a 	mov	r2,zero
    3a34:	00003706 	br	3b14 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3a38:	e0bffd17 	ldw	r2,-12(fp)
    3a3c:	1000051e 	bne	r2,zero,3a54 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    3a40:	e0bfff17 	ldw	r2,-4(fp)
    3a44:	00c00104 	movi	r3,4
    3a48:	10c00005 	stb	r3,0(r2)
        return (0);
    3a4c:	0005883a 	mov	r2,zero
    3a50:	00003006 	br	3b14 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3a54:	e0bffe17 	ldw	r2,-8(fp)
    3a58:	1000051e 	bne	r2,zero,3a70 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3a5c:	e0bfff17 	ldw	r2,-4(fp)
    3a60:	00c00304 	movi	r3,12
    3a64:	10c00005 	stb	r3,0(r2)
        return (0);
    3a68:	0005883a 	mov	r2,zero
    3a6c:	00002906 	br	3b14 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3a70:	d0a6fc03 	ldbu	r2,-25616(gp)
    3a74:	10803fcc 	andi	r2,r2,255
    3a78:	10000526 	beq	r2,zero,3a90 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    3a7c:	e0bfff17 	ldw	r2,-4(fp)
    3a80:	00c00444 	movi	r3,17
    3a84:	10c00005 	stb	r3,0(r2)
        return (0);
    3a88:	0005883a 	mov	r2,zero
    3a8c:	00002106 	br	3b14 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    3a90:	e0bffd17 	ldw	r2,-12(fp)
    3a94:	10800003 	ldbu	r2,0(r2)
    3a98:	10803fcc 	andi	r2,r2,255
    3a9c:	10bfffc4 	addi	r2,r2,-1
    3aa0:	10800128 	cmpgeui	r2,r2,4
    3aa4:	1000171e 	bne	r2,zero,3b04 <OSEventNameGet+0xfc>
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    3aa8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3aac:	0005303a 	rdctl	r2,status
    3ab0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3ab4:	e0fffb17 	ldw	r3,-20(fp)
    3ab8:	00bfff84 	movi	r2,-2
    3abc:	1884703a 	and	r2,r3,r2
    3ac0:	1001703a 	wrctl	status,r2
  
  return context;
    3ac4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    3ac8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    3acc:	e0bffd17 	ldw	r2,-12(fp)
    3ad0:	10800444 	addi	r2,r2,17
    3ad4:	e13ffe17 	ldw	r4,-8(fp)
    3ad8:	100b883a 	mov	r5,r2
    3adc:	00054980 	call	5498 <OS_StrCopy>
    3ae0:	e0bffa05 	stb	r2,-24(fp)
    3ae4:	e0bff917 	ldw	r2,-28(fp)
    3ae8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3aec:	e0bffc17 	ldw	r2,-16(fp)
    3af0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3af4:	e0bfff17 	ldw	r2,-4(fp)
    3af8:	10000005 	stb	zero,0(r2)
    return (len);
    3afc:	e0bffa03 	ldbu	r2,-24(fp)
    3b00:	00000406 	br	3b14 <OSEventNameGet+0x10c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3b04:	e0bfff17 	ldw	r2,-4(fp)
    3b08:	00c00044 	movi	r3,1
    3b0c:	10c00005 	stb	r3,0(r2)
             return (0);
    3b10:	0005883a 	mov	r2,zero
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
    3b14:	e037883a 	mov	sp,fp
    3b18:	dfc00117 	ldw	ra,4(sp)
    3b1c:	df000017 	ldw	fp,0(sp)
    3b20:	dec00204 	addi	sp,sp,8
    3b24:	f800283a 	ret

00003b28 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3b28:	defff604 	addi	sp,sp,-40
    3b2c:	dfc00915 	stw	ra,36(sp)
    3b30:	df000815 	stw	fp,32(sp)
    3b34:	df000804 	addi	fp,sp,32
    3b38:	e13ffd15 	stw	r4,-12(fp)
    3b3c:	e17ffe15 	stw	r5,-8(fp)
    3b40:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3b44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3b48:	e0bfff17 	ldw	r2,-4(fp)
    3b4c:	10004126 	beq	r2,zero,3c54 <OSEventNameSet+0x12c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3b50:	e0bffd17 	ldw	r2,-12(fp)
    3b54:	1000041e 	bne	r2,zero,3b68 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    3b58:	e0bfff17 	ldw	r2,-4(fp)
    3b5c:	00c00104 	movi	r3,4
    3b60:	10c00005 	stb	r3,0(r2)
        return;
    3b64:	00003c06 	br	3c58 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3b68:	e0bffe17 	ldw	r2,-8(fp)
    3b6c:	1000041e 	bne	r2,zero,3b80 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    3b70:	e0bfff17 	ldw	r2,-4(fp)
    3b74:	00c00304 	movi	r3,12
    3b78:	10c00005 	stb	r3,0(r2)
        return;
    3b7c:	00003606 	br	3c58 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3b80:	d0a6fc03 	ldbu	r2,-25616(gp)
    3b84:	10803fcc 	andi	r2,r2,255
    3b88:	10000426 	beq	r2,zero,3b9c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    3b8c:	e0bfff17 	ldw	r2,-4(fp)
    3b90:	00c00484 	movi	r3,18
    3b94:	10c00005 	stb	r3,0(r2)
        return;
    3b98:	00002f06 	br	3c58 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
    3b9c:	e0bffd17 	ldw	r2,-12(fp)
    3ba0:	10800003 	ldbu	r2,0(r2)
    3ba4:	10803fcc 	andi	r2,r2,255
    3ba8:	10bfffc4 	addi	r2,r2,-1
    3bac:	10800128 	cmpgeui	r2,r2,4
    3bb0:	1000101e 	bne	r2,zero,3bf4 <OSEventNameSet+0xcc>
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    3bb4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3bb8:	0005303a 	rdctl	r2,status
    3bbc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3bc0:	e0fffa17 	ldw	r3,-24(fp)
    3bc4:	00bfff84 	movi	r2,-2
    3bc8:	1884703a 	and	r2,r3,r2
    3bcc:	1001703a 	wrctl	status,r2
  
  return context;
    3bd0:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    3bd4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    3bd8:	e13ffe17 	ldw	r4,-8(fp)
    3bdc:	00055140 	call	5514 <OS_StrLen>
    3be0:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    3be4:	e0bff903 	ldbu	r2,-28(fp)
    3be8:	10800830 	cmpltui	r2,r2,32
    3bec:	10000d1e 	bne	r2,zero,3c24 <OSEventNameSet+0xfc>
    3bf0:	00000406 	br	3c04 <OSEventNameSet+0xdc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3bf4:	e0bfff17 	ldw	r2,-4(fp)
    3bf8:	00c00044 	movi	r3,1
    3bfc:	10c00005 	stb	r3,0(r2)
             return;
    3c00:	00001506 	br	3c58 <OSEventNameSet+0x130>
    3c04:	e0bff817 	ldw	r2,-32(fp)
    3c08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3c0c:	e0bffb17 	ldw	r2,-20(fp)
    3c10:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    3c14:	e0bfff17 	ldw	r2,-4(fp)
    3c18:	00c002c4 	movi	r3,11
    3c1c:	10c00005 	stb	r3,0(r2)
        return;
    3c20:	00000d06 	br	3c58 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    3c24:	e0bffd17 	ldw	r2,-12(fp)
    3c28:	10800444 	addi	r2,r2,17
    3c2c:	1009883a 	mov	r4,r2
    3c30:	e17ffe17 	ldw	r5,-8(fp)
    3c34:	00054980 	call	5498 <OS_StrCopy>
    3c38:	e0bff817 	ldw	r2,-32(fp)
    3c3c:	e0bffc15 	stw	r2,-16(fp)
    3c40:	e0bffc17 	ldw	r2,-16(fp)
    3c44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3c48:	e0bfff17 	ldw	r2,-4(fp)
    3c4c:	10000005 	stb	zero,0(r2)
    3c50:	00000106 	br	3c58 <OSEventNameSet+0x130>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    3c54:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    3c58:	e037883a 	mov	sp,fp
    3c5c:	dfc00117 	ldw	ra,4(sp)
    3c60:	df000017 	ldw	fp,0(sp)
    3c64:	dec00204 	addi	sp,sp,8
    3c68:	f800283a 	ret

00003c6c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    3c6c:	deffed04 	addi	sp,sp,-76
    3c70:	dfc01215 	stw	ra,72(sp)
    3c74:	df001115 	stw	fp,68(sp)
    3c78:	df001104 	addi	fp,sp,68
    3c7c:	e13ffc15 	stw	r4,-16(fp)
    3c80:	e17ffd15 	stw	r5,-12(fp)
    3c84:	e1bffe15 	stw	r6,-8(fp)
    3c88:	3805883a 	mov	r2,r7
    3c8c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    3c90:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    3c94:	e0800217 	ldw	r2,8(fp)
    3c98:	1000021e 	bne	r2,zero,3ca4 <OSEventPendMulti+0x38>
        return (0);
    3c9c:	0005883a 	mov	r2,zero
    3ca0:	00017c06 	br	4294 <OSEventPendMulti+0x628>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    3ca4:	e0bffc17 	ldw	r2,-16(fp)
    3ca8:	1000051e 	bne	r2,zero,3cc0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    3cac:	e0800217 	ldw	r2,8(fp)
    3cb0:	00c00104 	movi	r3,4
    3cb4:	10c00005 	stb	r3,0(r2)
        return (0);
    3cb8:	0005883a 	mov	r2,zero
    3cbc:	00017506 	br	4294 <OSEventPendMulti+0x628>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    3cc0:	e0bffd17 	ldw	r2,-12(fp)
    3cc4:	1000051e 	bne	r2,zero,3cdc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    3cc8:	e0800217 	ldw	r2,8(fp)
    3ccc:	00c00104 	movi	r3,4
    3cd0:	10c00005 	stb	r3,0(r2)
        return (0);
    3cd4:	0005883a 	mov	r2,zero
    3cd8:	00016e06 	br	4294 <OSEventPendMulti+0x628>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    3cdc:	e0bffe17 	ldw	r2,-8(fp)
    3ce0:	1000051e 	bne	r2,zero,3cf8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    3ce4:	e0800217 	ldw	r2,8(fp)
    3ce8:	00c00104 	movi	r3,4
    3cec:	10c00005 	stb	r3,0(r2)
        return (0);
    3cf0:	0005883a 	mov	r2,zero
    3cf4:	00016706 	br	4294 <OSEventPendMulti+0x628>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    3cf8:	e0bffd17 	ldw	r2,-12(fp)
    3cfc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    3d00:	e0bffc17 	ldw	r2,-16(fp)
    3d04:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    3d08:	e0bfef17 	ldw	r2,-68(fp)
    3d0c:	10800017 	ldw	r2,0(r2)
    3d10:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    3d14:	00001906 	br	3d7c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    3d18:	e0bff017 	ldw	r2,-64(fp)
    3d1c:	10800003 	ldbu	r2,0(r2)
    3d20:	10803fcc 	andi	r2,r2,255
    3d24:	10c000a0 	cmpeqi	r3,r2,2
    3d28:	1800091e 	bne	r3,zero,3d50 <OSEventPendMulti+0xe4>
    3d2c:	10c000e0 	cmpeqi	r3,r2,3
    3d30:	1800091e 	bne	r3,zero,3d58 <OSEventPendMulti+0xec>
    3d34:	10800060 	cmpeqi	r2,r2,1
    3d38:	1000091e 	bne	r2,zero,3d60 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    3d3c:	e0800217 	ldw	r2,8(fp)
    3d40:	00c00044 	movi	r3,1
    3d44:	10c00005 	stb	r3,0(r2)
                 return (0);
    3d48:	0005883a 	mov	r2,zero
    3d4c:	00015106 	br	4294 <OSEventPendMulti+0x628>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    3d50:	0001883a 	nop
    3d54:	00000306 	br	3d64 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    3d58:	0001883a 	nop
    3d5c:	00000106 	br	3d64 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    3d60:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    3d64:	e0bfef17 	ldw	r2,-68(fp)
    3d68:	10800104 	addi	r2,r2,4
    3d6c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    3d70:	e0bfef17 	ldw	r2,-68(fp)
    3d74:	10800017 	ldw	r2,0(r2)
    3d78:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    3d7c:	e0bff017 	ldw	r2,-64(fp)
    3d80:	103fe51e 	bne	r2,zero,3d18 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    3d84:	d0a6fc03 	ldbu	r2,-25616(gp)
    3d88:	10803fcc 	andi	r2,r2,255
    3d8c:	10000526 	beq	r2,zero,3da4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    3d90:	e0800217 	ldw	r2,8(fp)
    3d94:	00c00084 	movi	r3,2
    3d98:	10c00005 	stb	r3,0(r2)
        return (0);
    3d9c:	0005883a 	mov	r2,zero
    3da0:	00013c06 	br	4294 <OSEventPendMulti+0x628>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    3da4:	d0a6ed03 	ldbu	r2,-25676(gp)
    3da8:	10803fcc 	andi	r2,r2,255
    3dac:	10000526 	beq	r2,zero,3dc4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    3db0:	e0800217 	ldw	r2,8(fp)
    3db4:	00c00344 	movi	r3,13
    3db8:	10c00005 	stb	r3,0(r2)
        return (0);
    3dbc:	0005883a 	mov	r2,zero
    3dc0:	00013406 	br	4294 <OSEventPendMulti+0x628>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3dc4:	0005303a 	rdctl	r2,status
    3dc8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3dcc:	e0fff517 	ldw	r3,-44(fp)
    3dd0:	00bfff84 	movi	r2,-2
    3dd4:	1884703a 	and	r2,r3,r2
    3dd8:	1001703a 	wrctl	status,r2
  
  return context;
    3ddc:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    3de0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    3de4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    3de8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    3dec:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    3df0:	e0bffc17 	ldw	r2,-16(fp)
    3df4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    3df8:	e0bfef17 	ldw	r2,-68(fp)
    3dfc:	10800017 	ldw	r2,0(r2)
    3e00:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    3e04:	00008706 	br	4024 <OSEventPendMulti+0x3b8>
        switch (pevent->OSEventType) {
    3e08:	e0bff017 	ldw	r2,-64(fp)
    3e0c:	10800003 	ldbu	r2,0(r2)
    3e10:	10803fcc 	andi	r2,r2,255
    3e14:	10c000a0 	cmpeqi	r3,r2,2
    3e18:	1800401e 	bne	r3,zero,3f1c <OSEventPendMulti+0x2b0>
    3e1c:	10c000e0 	cmpeqi	r3,r2,3
    3e20:	1800031e 	bne	r3,zero,3e30 <OSEventPendMulti+0x1c4>
    3e24:	10800060 	cmpeqi	r2,r2,1
    3e28:	1000201e 	bne	r2,zero,3eac <OSEventPendMulti+0x240>
    3e2c:	00006c06 	br	3fe0 <OSEventPendMulti+0x374>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    3e30:	e0bff017 	ldw	r2,-64(fp)
    3e34:	1080020b 	ldhu	r2,8(r2)
    3e38:	10bfffcc 	andi	r2,r2,65535
    3e3c:	10001726 	beq	r2,zero,3e9c <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    3e40:	e0bff017 	ldw	r2,-64(fp)
    3e44:	1080020b 	ldhu	r2,8(r2)
    3e48:	10bfffc4 	addi	r2,r2,-1
    3e4c:	1007883a 	mov	r3,r2
    3e50:	e0bff017 	ldw	r2,-64(fp)
    3e54:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    3e58:	e0bffd17 	ldw	r2,-12(fp)
    3e5c:	e0fff017 	ldw	r3,-64(fp)
    3e60:	10c00015 	stw	r3,0(r2)
    3e64:	e0bffd17 	ldw	r2,-12(fp)
    3e68:	10800104 	addi	r2,r2,4
    3e6c:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy   =  OS_TRUE;
    3e70:	00800044 	movi	r2,1
    3e74:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    3e78:	e0bffe17 	ldw	r2,-8(fp)
    3e7c:	10000015 	stw	zero,0(r2)
    3e80:	e0bffe17 	ldw	r2,-8(fp)
    3e84:	10800104 	addi	r2,r2,4
    3e88:	e0bffe15 	stw	r2,-8(fp)
                      events_rdy_nbr++;
    3e8c:	e0bff18b 	ldhu	r2,-58(fp)
    3e90:	10800044 	addi	r2,r2,1
    3e94:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    3e98:	00005c06 	br	400c <OSEventPendMulti+0x3a0>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    3e9c:	e0bff203 	ldbu	r2,-56(fp)
    3ea0:	10800054 	ori	r2,r2,1
    3ea4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    3ea8:	00005806 	br	400c <OSEventPendMulti+0x3a0>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    3eac:	e0bff017 	ldw	r2,-64(fp)
    3eb0:	10800117 	ldw	r2,4(r2)
    3eb4:	10001526 	beq	r2,zero,3f0c <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    3eb8:	e0bff017 	ldw	r2,-64(fp)
    3ebc:	10c00117 	ldw	r3,4(r2)
    3ec0:	e0bffe17 	ldw	r2,-8(fp)
    3ec4:	10c00015 	stw	r3,0(r2)
    3ec8:	e0bffe17 	ldw	r2,-8(fp)
    3ecc:	10800104 	addi	r2,r2,4
    3ed0:	e0bffe15 	stw	r2,-8(fp)
                     pevent->OSEventPtr  = (void *)0;
    3ed4:	e0bff017 	ldw	r2,-64(fp)
    3ed8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    3edc:	e0bffd17 	ldw	r2,-12(fp)
    3ee0:	e0fff017 	ldw	r3,-64(fp)
    3ee4:	10c00015 	stw	r3,0(r2)
    3ee8:	e0bffd17 	ldw	r2,-12(fp)
    3eec:	10800104 	addi	r2,r2,4
    3ef0:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy         =  OS_TRUE;
    3ef4:	00800044 	movi	r2,1
    3ef8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    3efc:	e0bff18b 	ldhu	r2,-58(fp)
    3f00:	10800044 	addi	r2,r2,1
    3f04:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    3f08:	00004006 	br	400c <OSEventPendMulti+0x3a0>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    3f0c:	e0bff203 	ldbu	r2,-56(fp)
    3f10:	10800094 	ori	r2,r2,2
    3f14:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    3f18:	00003c06 	br	400c <OSEventPendMulti+0x3a0>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    3f1c:	e0bff017 	ldw	r2,-64(fp)
    3f20:	10800117 	ldw	r2,4(r2)
    3f24:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    3f28:	e0bff417 	ldw	r2,-48(fp)
    3f2c:	1080058b 	ldhu	r2,22(r2)
    3f30:	10bfffcc 	andi	r2,r2,65535
    3f34:	10002626 	beq	r2,zero,3fd0 <OSEventPendMulti+0x364>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    3f38:	e0bff417 	ldw	r2,-48(fp)
    3f3c:	10800417 	ldw	r2,16(r2)
    3f40:	11000017 	ldw	r4,0(r2)
    3f44:	e0fffe17 	ldw	r3,-8(fp)
    3f48:	19000015 	stw	r4,0(r3)
    3f4c:	e0fffe17 	ldw	r3,-8(fp)
    3f50:	18c00104 	addi	r3,r3,4
    3f54:	e0fffe15 	stw	r3,-8(fp)
    3f58:	10c00104 	addi	r3,r2,4
    3f5c:	e0bff417 	ldw	r2,-48(fp)
    3f60:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    3f64:	e0bff417 	ldw	r2,-48(fp)
    3f68:	10c00417 	ldw	r3,16(r2)
    3f6c:	e0bff417 	ldw	r2,-48(fp)
    3f70:	10800217 	ldw	r2,8(r2)
    3f74:	1880041e 	bne	r3,r2,3f88 <OSEventPendMulti+0x31c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    3f78:	e0bff417 	ldw	r2,-48(fp)
    3f7c:	10c00117 	ldw	r3,4(r2)
    3f80:	e0bff417 	ldw	r2,-48(fp)
    3f84:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    3f88:	e0bff417 	ldw	r2,-48(fp)
    3f8c:	1080058b 	ldhu	r2,22(r2)
    3f90:	10bfffc4 	addi	r2,r2,-1
    3f94:	1007883a 	mov	r3,r2
    3f98:	e0bff417 	ldw	r2,-48(fp)
    3f9c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    3fa0:	e0bffd17 	ldw	r2,-12(fp)
    3fa4:	e0fff017 	ldw	r3,-64(fp)
    3fa8:	10c00015 	stw	r3,0(r2)
    3fac:	e0bffd17 	ldw	r2,-12(fp)
    3fb0:	10800104 	addi	r2,r2,4
    3fb4:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy   = OS_TRUE;
    3fb8:	00800044 	movi	r2,1
    3fbc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    3fc0:	e0bff18b 	ldhu	r2,-58(fp)
    3fc4:	10800044 	addi	r2,r2,1
    3fc8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    3fcc:	00000f06 	br	400c <OSEventPendMulti+0x3a0>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    3fd0:	e0bff203 	ldbu	r2,-56(fp)
    3fd4:	10800114 	ori	r2,r2,4
    3fd8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    3fdc:	00000b06 	br	400c <OSEventPendMulti+0x3a0>
    3fe0:	e0bff317 	ldw	r2,-52(fp)
    3fe4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3fe8:	e0bff617 	ldw	r2,-40(fp)
    3fec:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    3ff0:	e0bffd17 	ldw	r2,-12(fp)
    3ff4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    3ff8:	e0800217 	ldw	r2,8(fp)
    3ffc:	00c00044 	movi	r3,1
    4000:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    4004:	e0bff18b 	ldhu	r2,-58(fp)
    4008:	0000a206 	br	4294 <OSEventPendMulti+0x628>
        }
        pevents++;
    400c:	e0bfef17 	ldw	r2,-68(fp)
    4010:	10800104 	addi	r2,r2,4
    4014:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    4018:	e0bfef17 	ldw	r2,-68(fp)
    401c:	10800017 	ldw	r2,0(r2)
    4020:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    4024:	e0bff017 	ldw	r2,-64(fp)
    4028:	103f771e 	bne	r2,zero,3e08 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    402c:	e0bff103 	ldbu	r2,-60(fp)
    4030:	10800058 	cmpnei	r2,r2,1
    4034:	10000a1e 	bne	r2,zero,4060 <OSEventPendMulti+0x3f4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    4038:	e0bffd17 	ldw	r2,-12(fp)
    403c:	10000015 	stw	zero,0(r2)
    4040:	e0bff317 	ldw	r2,-52(fp)
    4044:	e0bff715 	stw	r2,-36(fp)
    4048:	e0bff717 	ldw	r2,-36(fp)
    404c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    4050:	e0800217 	ldw	r2,8(fp)
    4054:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    4058:	e0bff18b 	ldhu	r2,-58(fp)
    405c:	00008d06 	br	4294 <OSEventPendMulti+0x628>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    4060:	d0a6fd17 	ldw	r2,-25612(gp)
    4064:	d0e6fd17 	ldw	r3,-25612(gp)
    4068:	19000c03 	ldbu	r4,48(r3)
    406c:	e0fff203 	ldbu	r3,-56(fp)
    4070:	20c6b03a 	or	r3,r4,r3
    4074:	1809883a 	mov	r4,r3
    4078:	00ffe004 	movi	r3,-128
    407c:	20c6b03a 	or	r3,r4,r3
    4080:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    4084:	d0a6fd17 	ldw	r2,-25612(gp)
    4088:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    408c:	d0a6fd17 	ldw	r2,-25612(gp)
    4090:	e0ffff0b 	ldhu	r3,-4(fp)
    4094:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    4098:	e13ffc17 	ldw	r4,-16(fp)
    409c:	0004be00 	call	4be0 <OS_EventTaskWaitMulti>
    40a0:	e0bff317 	ldw	r2,-52(fp)
    40a4:	e0bff815 	stw	r2,-32(fp)
    40a8:	e0bff817 	ldw	r2,-32(fp)
    40ac:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    40b0:	000535c0 	call	535c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    40b4:	0005303a 	rdctl	r2,status
    40b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    40bc:	e0fff917 	ldw	r3,-28(fp)
    40c0:	00bfff84 	movi	r2,-2
    40c4:	1884703a 	and	r2,r3,r2
    40c8:	1001703a 	wrctl	status,r2
  
  return context;
    40cc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    40d0:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    40d4:	d0a6fd17 	ldw	r2,-25612(gp)
    40d8:	10800c43 	ldbu	r2,49(r2)
    40dc:	10803fcc 	andi	r2,r2,255
    40e0:	10000226 	beq	r2,zero,40ec <OSEventPendMulti+0x480>
    40e4:	108000a0 	cmpeqi	r2,r2,2
    40e8:	10001926 	beq	r2,zero,4150 <OSEventPendMulti+0x4e4>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    40ec:	d0a6fd17 	ldw	r2,-25612(gp)
    40f0:	10800717 	ldw	r2,28(r2)
    40f4:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    40f8:	e0bff017 	ldw	r2,-64(fp)
    40fc:	10000c26 	beq	r2,zero,4130 <OSEventPendMulti+0x4c4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    4100:	e0bffd17 	ldw	r2,-12(fp)
    4104:	e0fff017 	ldw	r3,-64(fp)
    4108:	10c00015 	stw	r3,0(r2)
    410c:	e0bffd17 	ldw	r2,-12(fp)
    4110:	10800104 	addi	r2,r2,4
    4114:	e0bffd15 	stw	r2,-12(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    4118:	e0bffd17 	ldw	r2,-12(fp)
    411c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    4120:	e0bff18b 	ldhu	r2,-58(fp)
    4124:	10800044 	addi	r2,r2,1
    4128:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    412c:	00000d06 	br	4164 <OSEventPendMulti+0x4f8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    4130:	d0a6fd17 	ldw	r2,-25612(gp)
    4134:	00c00044 	movi	r3,1
    4138:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    413c:	d0a6fd17 	ldw	r2,-25612(gp)
    4140:	1009883a 	mov	r4,r2
    4144:	e17ffc17 	ldw	r5,-16(fp)
    4148:	0004dd80 	call	4dd8 <OS_EventTaskRemoveMulti>
             }
			 break;
    414c:	00000506 	br	4164 <OSEventPendMulti+0x4f8>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    4150:	d0a6fd17 	ldw	r2,-25612(gp)
    4154:	1009883a 	mov	r4,r2
    4158:	e17ffc17 	ldw	r5,-16(fp)
    415c:	0004dd80 	call	4dd8 <OS_EventTaskRemoveMulti>
             break;
    4160:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    4164:	d0a6fd17 	ldw	r2,-25612(gp)
    4168:	10800c43 	ldbu	r2,49(r2)
    416c:	10803fcc 	andi	r2,r2,255
    4170:	10000326 	beq	r2,zero,4180 <OSEventPendMulti+0x514>
    4174:	108000a0 	cmpeqi	r2,r2,2
    4178:	1000251e 	bne	r2,zero,4210 <OSEventPendMulti+0x5a4>
    417c:	00002d06 	br	4234 <OSEventPendMulti+0x5c8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    4180:	e0bff017 	ldw	r2,-64(fp)
    4184:	10800003 	ldbu	r2,0(r2)
    4188:	10803fcc 	andi	r2,r2,255
    418c:	0080120e 	bge	zero,r2,41d8 <OSEventPendMulti+0x56c>
    4190:	10c000d0 	cmplti	r3,r2,3
    4194:	1800081e 	bne	r3,zero,41b8 <OSEventPendMulti+0x54c>
    4198:	108000e0 	cmpeqi	r2,r2,3
    419c:	10000e26 	beq	r2,zero,41d8 <OSEventPendMulti+0x56c>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    41a0:	e0bffe17 	ldw	r2,-8(fp)
    41a4:	10000015 	stw	zero,0(r2)
    41a8:	e0bffe17 	ldw	r2,-8(fp)
    41ac:	10800104 	addi	r2,r2,4
    41b0:	e0bffe15 	stw	r2,-8(fp)
                      break;
    41b4:	00001306 	br	4204 <OSEventPendMulti+0x598>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    41b8:	d0a6fd17 	ldw	r2,-25612(gp)
    41bc:	10c00917 	ldw	r3,36(r2)
    41c0:	e0bffe17 	ldw	r2,-8(fp)
    41c4:	10c00015 	stw	r3,0(r2)
    41c8:	e0bffe17 	ldw	r2,-8(fp)
    41cc:	10800104 	addi	r2,r2,4
    41d0:	e0bffe15 	stw	r2,-8(fp)
                      break;
    41d4:	00000b06 	br	4204 <OSEventPendMulti+0x598>
    41d8:	e0bff317 	ldw	r2,-52(fp)
    41dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    41e0:	e0bffa17 	ldw	r2,-24(fp)
    41e4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    41e8:	e0bffd17 	ldw	r2,-12(fp)
    41ec:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    41f0:	e0800217 	ldw	r2,8(fp)
    41f4:	00c00044 	movi	r3,1
    41f8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    41fc:	e0bff18b 	ldhu	r2,-58(fp)
    4200:	00002406 	br	4294 <OSEventPendMulti+0x628>
             }
            *perr = OS_ERR_NONE;
    4204:	e0800217 	ldw	r2,8(fp)
    4208:	10000005 	stb	zero,0(r2)
             break;
    420c:	00001206 	br	4258 <OSEventPendMulti+0x5ec>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    4210:	e0bffe17 	ldw	r2,-8(fp)
    4214:	10000015 	stw	zero,0(r2)
    4218:	e0bffe17 	ldw	r2,-8(fp)
    421c:	10800104 	addi	r2,r2,4
    4220:	e0bffe15 	stw	r2,-8(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    4224:	e0800217 	ldw	r2,8(fp)
    4228:	00c00384 	movi	r3,14
    422c:	10c00005 	stb	r3,0(r2)
             break;
    4230:	00000906 	br	4258 <OSEventPendMulti+0x5ec>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    4234:	e0bffe17 	ldw	r2,-8(fp)
    4238:	10000015 	stw	zero,0(r2)
    423c:	e0bffe17 	ldw	r2,-8(fp)
    4240:	10800104 	addi	r2,r2,4
    4244:	e0bffe15 	stw	r2,-8(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    4248:	e0800217 	ldw	r2,8(fp)
    424c:	00c00284 	movi	r3,10
    4250:	10c00005 	stb	r3,0(r2)
             break;
    4254:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    4258:	d0a6fd17 	ldw	r2,-25612(gp)
    425c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    4260:	d0a6fd17 	ldw	r2,-25612(gp)
    4264:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    4268:	d0a6fd17 	ldw	r2,-25612(gp)
    426c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    4270:	d0a6fd17 	ldw	r2,-25612(gp)
    4274:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    4278:	d0a6fd17 	ldw	r2,-25612(gp)
    427c:	10000915 	stw	zero,36(r2)
    4280:	e0bff317 	ldw	r2,-52(fp)
    4284:	e0bffb15 	stw	r2,-20(fp)
    4288:	e0bffb17 	ldw	r2,-20(fp)
    428c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    4290:	e0bff18b 	ldhu	r2,-58(fp)
}
    4294:	e037883a 	mov	sp,fp
    4298:	dfc00117 	ldw	ra,4(sp)
    429c:	df000017 	ldw	fp,0(sp)
    42a0:	dec00204 	addi	sp,sp,8
    42a4:	f800283a 	ret

000042a8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    42a8:	defffe04 	addi	sp,sp,-8
    42ac:	dfc00115 	stw	ra,4(sp)
    42b0:	df000015 	stw	fp,0(sp)
    42b4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    42b8:	000d5740 	call	d574 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    42bc:	00050140 	call	5014 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    42c0:	00050580 	call	5058 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    42c4:	00051bc0 	call	51bc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    42c8:	0004f380 	call	4f38 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    42cc:	000715c0 	call	715c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    42d0:	0007aa40 	call	7aa4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    42d4:	0008cec0 	call	8cec <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    42d8:	00050c40 	call	50c4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    42dc:	00051400 	call	5140 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    42e0:	000d5900 	call	d590 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    42e4:	0005a2c0 	call	5a2c <OSDebugInit>
#endif
}
    42e8:	e037883a 	mov	sp,fp
    42ec:	dfc00117 	ldw	ra,4(sp)
    42f0:	df000017 	ldw	fp,0(sp)
    42f4:	dec00204 	addi	sp,sp,8
    42f8:	f800283a 	ret

000042fc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    42fc:	defffc04 	addi	sp,sp,-16
    4300:	df000315 	stw	fp,12(sp)
    4304:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4308:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    430c:	d0a6ed43 	ldbu	r2,-25675(gp)
    4310:	10803fcc 	andi	r2,r2,255
    4314:	10800058 	cmpnei	r2,r2,1
    4318:	1000131e 	bne	r2,zero,4368 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    431c:	0005303a 	rdctl	r2,status
    4320:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4324:	e0fffe17 	ldw	r3,-8(fp)
    4328:	00bfff84 	movi	r2,-2
    432c:	1884703a 	and	r2,r3,r2
    4330:	1001703a 	wrctl	status,r2
  
  return context;
    4334:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    4338:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    433c:	d0a6fc03 	ldbu	r2,-25616(gp)
    4340:	10803fcc 	andi	r2,r2,255
    4344:	10803fe0 	cmpeqi	r2,r2,255
    4348:	1000031e 	bne	r2,zero,4358 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    434c:	d0a6fc03 	ldbu	r2,-25616(gp)
    4350:	10800044 	addi	r2,r2,1
    4354:	d0a6fc05 	stb	r2,-25616(gp)
    4358:	e0bffd17 	ldw	r2,-12(fp)
    435c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4360:	e0bfff17 	ldw	r2,-4(fp)
    4364:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    4368:	e037883a 	mov	sp,fp
    436c:	df000017 	ldw	fp,0(sp)
    4370:	dec00104 	addi	sp,sp,4
    4374:	f800283a 	ret

00004378 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    4378:	defffb04 	addi	sp,sp,-20
    437c:	dfc00415 	stw	ra,16(sp)
    4380:	df000315 	stw	fp,12(sp)
    4384:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4388:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    438c:	d0a6ed43 	ldbu	r2,-25675(gp)
    4390:	10803fcc 	andi	r2,r2,255
    4394:	10800058 	cmpnei	r2,r2,1
    4398:	10002f1e 	bne	r2,zero,4458 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    439c:	0005303a 	rdctl	r2,status
    43a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    43a4:	e0fffe17 	ldw	r3,-8(fp)
    43a8:	00bfff84 	movi	r2,-2
    43ac:	1884703a 	and	r2,r3,r2
    43b0:	1001703a 	wrctl	status,r2
  
  return context;
    43b4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    43b8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    43bc:	d0a6fc03 	ldbu	r2,-25616(gp)
    43c0:	10803fcc 	andi	r2,r2,255
    43c4:	10000326 	beq	r2,zero,43d4 <OSIntExit+0x5c>
            OSIntNesting--;
    43c8:	d0a6fc03 	ldbu	r2,-25616(gp)
    43cc:	10bfffc4 	addi	r2,r2,-1
    43d0:	d0a6fc05 	stb	r2,-25616(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    43d4:	d0a6fc03 	ldbu	r2,-25616(gp)
    43d8:	10803fcc 	andi	r2,r2,255
    43dc:	10001a1e 	bne	r2,zero,4448 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    43e0:	d0a6ed03 	ldbu	r2,-25676(gp)
    43e4:	10803fcc 	andi	r2,r2,255
    43e8:	1000171e 	bne	r2,zero,4448 <OSIntExit+0xd0>
                OS_SchedNew();
    43ec:	00054280 	call	5428 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    43f0:	d0e6ef03 	ldbu	r3,-25668(gp)
    43f4:	d0a6ef43 	ldbu	r2,-25667(gp)
    43f8:	18c03fcc 	andi	r3,r3,255
    43fc:	10803fcc 	andi	r2,r2,255
    4400:	18801126 	beq	r3,r2,4448 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    4404:	d0a6ef03 	ldbu	r2,-25668(gp)
    4408:	10803fcc 	andi	r2,r2,255
    440c:	00c000b4 	movhi	r3,2
    4410:	18e8d404 	addi	r3,r3,-23728
    4414:	1085883a 	add	r2,r2,r2
    4418:	1085883a 	add	r2,r2,r2
    441c:	1885883a 	add	r2,r3,r2
    4420:	10800017 	ldw	r2,0(r2)
    4424:	d0a6f715 	stw	r2,-25636(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    4428:	d0a6f717 	ldw	r2,-25636(gp)
    442c:	10c00e17 	ldw	r3,56(r2)
    4430:	18c00044 	addi	r3,r3,1
    4434:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    4438:	d0a6f217 	ldw	r2,-25656(gp)
    443c:	10800044 	addi	r2,r2,1
    4440:	d0a6f215 	stw	r2,-25656(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    4444:	000d11c0 	call	d11c <OSCtxSw>
    4448:	e0bffd17 	ldw	r2,-12(fp)
    444c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4450:	e0bfff17 	ldw	r2,-4(fp)
    4454:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    4458:	e037883a 	mov	sp,fp
    445c:	dfc00117 	ldw	ra,4(sp)
    4460:	df000017 	ldw	fp,0(sp)
    4464:	dec00204 	addi	sp,sp,8
    4468:	f800283a 	ret

0000446c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    446c:	defffc04 	addi	sp,sp,-16
    4470:	df000315 	stw	fp,12(sp)
    4474:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4478:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    447c:	d0a6ed43 	ldbu	r2,-25675(gp)
    4480:	10803fcc 	andi	r2,r2,255
    4484:	10800058 	cmpnei	r2,r2,1
    4488:	1000161e 	bne	r2,zero,44e4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    448c:	0005303a 	rdctl	r2,status
    4490:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4494:	e0fffe17 	ldw	r3,-8(fp)
    4498:	00bfff84 	movi	r2,-2
    449c:	1884703a 	and	r2,r3,r2
    44a0:	1001703a 	wrctl	status,r2
  
  return context;
    44a4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    44a8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    44ac:	d0a6fc03 	ldbu	r2,-25616(gp)
    44b0:	10803fcc 	andi	r2,r2,255
    44b4:	1000071e 	bne	r2,zero,44d4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    44b8:	d0a6ed03 	ldbu	r2,-25676(gp)
    44bc:	10803fcc 	andi	r2,r2,255
    44c0:	10803fe0 	cmpeqi	r2,r2,255
    44c4:	1000031e 	bne	r2,zero,44d4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    44c8:	d0a6ed03 	ldbu	r2,-25676(gp)
    44cc:	10800044 	addi	r2,r2,1
    44d0:	d0a6ed05 	stb	r2,-25676(gp)
    44d4:	e0bffd17 	ldw	r2,-12(fp)
    44d8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    44dc:	e0bfff17 	ldw	r2,-4(fp)
    44e0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    44e4:	e037883a 	mov	sp,fp
    44e8:	df000017 	ldw	fp,0(sp)
    44ec:	dec00104 	addi	sp,sp,4
    44f0:	f800283a 	ret

000044f4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    44f4:	defff804 	addi	sp,sp,-32
    44f8:	dfc00715 	stw	ra,28(sp)
    44fc:	df000615 	stw	fp,24(sp)
    4500:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4504:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    4508:	d0a6ed43 	ldbu	r2,-25675(gp)
    450c:	10803fcc 	andi	r2,r2,255
    4510:	10800058 	cmpnei	r2,r2,1
    4514:	1000281e 	bne	r2,zero,45b8 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4518:	0005303a 	rdctl	r2,status
    451c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4520:	e0fffb17 	ldw	r3,-20(fp)
    4524:	00bfff84 	movi	r2,-2
    4528:	1884703a 	and	r2,r3,r2
    452c:	1001703a 	wrctl	status,r2
  
  return context;
    4530:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    4534:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    4538:	d0a6ed03 	ldbu	r2,-25676(gp)
    453c:	10803fcc 	andi	r2,r2,255
    4540:	10001926 	beq	r2,zero,45a8 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    4544:	d0a6ed03 	ldbu	r2,-25676(gp)
    4548:	10bfffc4 	addi	r2,r2,-1
    454c:	d0a6ed05 	stb	r2,-25676(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    4550:	d0a6ed03 	ldbu	r2,-25676(gp)
    4554:	10803fcc 	andi	r2,r2,255
    4558:	10000e1e 	bne	r2,zero,4594 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    455c:	d0a6fc03 	ldbu	r2,-25616(gp)
    4560:	10803fcc 	andi	r2,r2,255
    4564:	1000061e 	bne	r2,zero,4580 <OSSchedUnlock+0x8c>
    4568:	e0bffa17 	ldw	r2,-24(fp)
    456c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4570:	e0bffc17 	ldw	r2,-16(fp)
    4574:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    4578:	000535c0 	call	535c <OS_Sched>
    457c:	00000e06 	br	45b8 <OSSchedUnlock+0xc4>
    4580:	e0bffa17 	ldw	r2,-24(fp)
    4584:	e0bffd15 	stw	r2,-12(fp)
    4588:	e0bffd17 	ldw	r2,-12(fp)
    458c:	1001703a 	wrctl	status,r2
    4590:	00000906 	br	45b8 <OSSchedUnlock+0xc4>
    4594:	e0bffa17 	ldw	r2,-24(fp)
    4598:	e0bffe15 	stw	r2,-8(fp)
    459c:	e0bffe17 	ldw	r2,-8(fp)
    45a0:	1001703a 	wrctl	status,r2
    45a4:	00000406 	br	45b8 <OSSchedUnlock+0xc4>
    45a8:	e0bffa17 	ldw	r2,-24(fp)
    45ac:	e0bfff15 	stw	r2,-4(fp)
    45b0:	e0bfff17 	ldw	r2,-4(fp)
    45b4:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    45b8:	e037883a 	mov	sp,fp
    45bc:	dfc00117 	ldw	ra,4(sp)
    45c0:	df000017 	ldw	fp,0(sp)
    45c4:	dec00204 	addi	sp,sp,8
    45c8:	f800283a 	ret

000045cc <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    45cc:	defffe04 	addi	sp,sp,-8
    45d0:	dfc00115 	stw	ra,4(sp)
    45d4:	df000015 	stw	fp,0(sp)
    45d8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    45dc:	d0a6ed43 	ldbu	r2,-25675(gp)
    45e0:	10803fcc 	andi	r2,r2,255
    45e4:	10000f1e 	bne	r2,zero,4624 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    45e8:	00054280 	call	5428 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    45ec:	d0a6ef03 	ldbu	r2,-25668(gp)
    45f0:	d0a6ef45 	stb	r2,-25667(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    45f4:	d0a6ef03 	ldbu	r2,-25668(gp)
    45f8:	10803fcc 	andi	r2,r2,255
    45fc:	00c000b4 	movhi	r3,2
    4600:	18e8d404 	addi	r3,r3,-23728
    4604:	1085883a 	add	r2,r2,r2
    4608:	1085883a 	add	r2,r2,r2
    460c:	1885883a 	add	r2,r3,r2
    4610:	10800017 	ldw	r2,0(r2)
    4614:	d0a6f715 	stw	r2,-25636(gp)
        OSTCBCur      = OSTCBHighRdy;
    4618:	d0a6f717 	ldw	r2,-25636(gp)
    461c:	d0a6fd15 	stw	r2,-25612(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    4620:	000d1a80 	call	d1a8 <OSStartHighRdy>
    }
}
    4624:	e037883a 	mov	sp,fp
    4628:	dfc00117 	ldw	ra,4(sp)
    462c:	df000017 	ldw	fp,0(sp)
    4630:	dec00204 	addi	sp,sp,8
    4634:	f800283a 	ret

00004638 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    4638:	defff904 	addi	sp,sp,-28
    463c:	dfc00615 	stw	ra,24(sp)
    4640:	df000515 	stw	fp,20(sp)
    4644:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4648:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    464c:	01000084 	movi	r4,2
    4650:	000b1ac0 	call	b1ac <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4654:	0005303a 	rdctl	r2,status
    4658:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    465c:	e0fffc17 	ldw	r3,-16(fp)
    4660:	00bfff84 	movi	r2,-2
    4664:	1884703a 	and	r2,r3,r2
    4668:	1001703a 	wrctl	status,r2
  
  return context;
    466c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    4670:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    4674:	d026ee15 	stw	zero,-25672(gp)
    4678:	e0bffb17 	ldw	r2,-20(fp)
    467c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4680:	e0bffd17 	ldw	r2,-12(fp)
    4684:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    4688:	01000284 	movi	r4,10
    468c:	000b1ac0 	call	b1ac <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4690:	0005303a 	rdctl	r2,status
    4694:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4698:	e0fffe17 	ldw	r3,-8(fp)
    469c:	00bfff84 	movi	r2,-2
    46a0:	1884703a 	and	r2,r3,r2
    46a4:	1001703a 	wrctl	status,r2
  
  return context;
    46a8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    46ac:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    46b0:	d0a6ee17 	ldw	r2,-25672(gp)
    46b4:	d0a6f315 	stw	r2,-25652(gp)
    OSStatRdy    = OS_TRUE;
    46b8:	00800044 	movi	r2,1
    46bc:	d0a70005 	stb	r2,-25600(gp)
    46c0:	e0bffb17 	ldw	r2,-20(fp)
    46c4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46c8:	e0bfff17 	ldw	r2,-4(fp)
    46cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    46d0:	e037883a 	mov	sp,fp
    46d4:	dfc00117 	ldw	ra,4(sp)
    46d8:	df000017 	ldw	fp,0(sp)
    46dc:	dec00204 	addi	sp,sp,8
    46e0:	f800283a 	ret

000046e4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    46e4:	defff704 	addi	sp,sp,-36
    46e8:	dfc00815 	stw	ra,32(sp)
    46ec:	df000715 	stw	fp,28(sp)
    46f0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    46f4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    46f8:	000d5580 	call	d558 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46fc:	0005303a 	rdctl	r2,status
    4700:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4704:	e0fffc17 	ldw	r3,-16(fp)
    4708:	00bfff84 	movi	r2,-2
    470c:	1884703a 	and	r2,r3,r2
    4710:	1001703a 	wrctl	status,r2
  
  return context;
    4714:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    4718:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    471c:	d0a6fe17 	ldw	r2,-25608(gp)
    4720:	10800044 	addi	r2,r2,1
    4724:	d0a6fe15 	stw	r2,-25608(gp)
    4728:	e0bffb17 	ldw	r2,-20(fp)
    472c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4730:	e0bffd17 	ldw	r2,-12(fp)
    4734:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    4738:	d0a6ed43 	ldbu	r2,-25675(gp)
    473c:	10803fcc 	andi	r2,r2,255
    4740:	10800058 	cmpnei	r2,r2,1
    4744:	10006a1e 	bne	r2,zero,48f0 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    4748:	d0a6f103 	ldbu	r2,-25660(gp)
    474c:	10803fcc 	andi	r2,r2,255
    4750:	10c00060 	cmpeqi	r3,r2,1
    4754:	1800061e 	bne	r3,zero,4770 <OSTimeTick+0x8c>
    4758:	10c000a0 	cmpeqi	r3,r2,2
    475c:	1800061e 	bne	r3,zero,4778 <OSTimeTick+0x94>
    4760:	10000a1e 	bne	r2,zero,478c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    4764:	00800044 	movi	r2,1
    4768:	e0bffa05 	stb	r2,-24(fp)
                 break;
    476c:	00000b06 	br	479c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    4770:	e03ffa05 	stb	zero,-24(fp)
                 break;
    4774:	00000906 	br	479c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    4778:	00800044 	movi	r2,1
    477c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    4780:	00800044 	movi	r2,1
    4784:	d0a6f105 	stb	r2,-25660(gp)
                 break;
    4788:	00000406 	br	479c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    478c:	00800044 	movi	r2,1
    4790:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    4794:	d026f105 	stb	zero,-25660(gp)
                 break;
    4798:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    479c:	e0bffa03 	ldbu	r2,-24(fp)
    47a0:	10005226 	beq	r2,zero,48ec <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    47a4:	d0a6f017 	ldw	r2,-25664(gp)
    47a8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    47ac:	00004906 	br	48d4 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    47b0:	0005303a 	rdctl	r2,status
    47b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    47b8:	e0fffe17 	ldw	r3,-8(fp)
    47bc:	00bfff84 	movi	r2,-2
    47c0:	1884703a 	and	r2,r3,r2
    47c4:	1001703a 	wrctl	status,r2
  
  return context;
    47c8:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    47cc:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    47d0:	e0bff917 	ldw	r2,-28(fp)
    47d4:	10800b8b 	ldhu	r2,46(r2)
    47d8:	10bfffcc 	andi	r2,r2,65535
    47dc:	10003626 	beq	r2,zero,48b8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    47e0:	e0bff917 	ldw	r2,-28(fp)
    47e4:	10800b8b 	ldhu	r2,46(r2)
    47e8:	10bfffc4 	addi	r2,r2,-1
    47ec:	1007883a 	mov	r3,r2
    47f0:	e0bff917 	ldw	r2,-28(fp)
    47f4:	10c00b8d 	sth	r3,46(r2)
    47f8:	e0bff917 	ldw	r2,-28(fp)
    47fc:	10800b8b 	ldhu	r2,46(r2)
    4800:	10bfffcc 	andi	r2,r2,65535
    4804:	10002c1e 	bne	r2,zero,48b8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    4808:	e0bff917 	ldw	r2,-28(fp)
    480c:	10800c03 	ldbu	r2,48(r2)
    4810:	10803fcc 	andi	r2,r2,255
    4814:	10800dcc 	andi	r2,r2,55
    4818:	10000b26 	beq	r2,zero,4848 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    481c:	e0bff917 	ldw	r2,-28(fp)
    4820:	10c00c03 	ldbu	r3,48(r2)
    4824:	00bff204 	movi	r2,-56
    4828:	1884703a 	and	r2,r3,r2
    482c:	1007883a 	mov	r3,r2
    4830:	e0bff917 	ldw	r2,-28(fp)
    4834:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    4838:	e0bff917 	ldw	r2,-28(fp)
    483c:	00c00044 	movi	r3,1
    4840:	10c00c45 	stb	r3,49(r2)
    4844:	00000206 	br	4850 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    4848:	e0bff917 	ldw	r2,-28(fp)
    484c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    4850:	e0bff917 	ldw	r2,-28(fp)
    4854:	10800c03 	ldbu	r2,48(r2)
    4858:	10803fcc 	andi	r2,r2,255
    485c:	1080020c 	andi	r2,r2,8
    4860:	1000151e 	bne	r2,zero,48b8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    4864:	e0bff917 	ldw	r2,-28(fp)
    4868:	10c00d83 	ldbu	r3,54(r2)
    486c:	d0a6f903 	ldbu	r2,-25628(gp)
    4870:	1884b03a 	or	r2,r3,r2
    4874:	d0a6f905 	stb	r2,-25628(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4878:	e0bff917 	ldw	r2,-28(fp)
    487c:	10800d03 	ldbu	r2,52(r2)
    4880:	11003fcc 	andi	r4,r2,255
    4884:	e0bff917 	ldw	r2,-28(fp)
    4888:	10800d03 	ldbu	r2,52(r2)
    488c:	10c03fcc 	andi	r3,r2,255
    4890:	d0a6f944 	addi	r2,gp,-25627
    4894:	1885883a 	add	r2,r3,r2
    4898:	10c00003 	ldbu	r3,0(r2)
    489c:	e0bff917 	ldw	r2,-28(fp)
    48a0:	10800d43 	ldbu	r2,53(r2)
    48a4:	1884b03a 	or	r2,r3,r2
    48a8:	1007883a 	mov	r3,r2
    48ac:	d0a6f944 	addi	r2,gp,-25627
    48b0:	2085883a 	add	r2,r4,r2
    48b4:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    48b8:	e0bff917 	ldw	r2,-28(fp)
    48bc:	10800517 	ldw	r2,20(r2)
    48c0:	e0bff915 	stw	r2,-28(fp)
    48c4:	e0bffb17 	ldw	r2,-20(fp)
    48c8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    48cc:	e0bfff17 	ldw	r2,-4(fp)
    48d0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    48d4:	e0bff917 	ldw	r2,-28(fp)
    48d8:	10800c83 	ldbu	r2,50(r2)
    48dc:	10803fcc 	andi	r2,r2,255
    48e0:	10800a18 	cmpnei	r2,r2,40
    48e4:	103fb21e 	bne	r2,zero,47b0 <OSTimeTick+0xcc>
    48e8:	00000106 	br	48f0 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    48ec:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    48f0:	e037883a 	mov	sp,fp
    48f4:	dfc00117 	ldw	ra,4(sp)
    48f8:	df000017 	ldw	fp,0(sp)
    48fc:	dec00204 	addi	sp,sp,8
    4900:	f800283a 	ret

00004904 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    4904:	deffff04 	addi	sp,sp,-4
    4908:	df000015 	stw	fp,0(sp)
    490c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    4910:	00804784 	movi	r2,286
}
    4914:	e037883a 	mov	sp,fp
    4918:	df000017 	ldw	fp,0(sp)
    491c:	dec00104 	addi	sp,sp,4
    4920:	f800283a 	ret

00004924 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    4924:	deffff04 	addi	sp,sp,-4
    4928:	df000015 	stw	fp,0(sp)
    492c:	d839883a 	mov	fp,sp
}
    4930:	e037883a 	mov	sp,fp
    4934:	df000017 	ldw	fp,0(sp)
    4938:	dec00104 	addi	sp,sp,4
    493c:	f800283a 	ret

00004940 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    4940:	defff804 	addi	sp,sp,-32
    4944:	dfc00715 	stw	ra,28(sp)
    4948:	df000615 	stw	fp,24(sp)
    494c:	df000604 	addi	fp,sp,24
    4950:	e13ffc15 	stw	r4,-16(fp)
    4954:	e17ffd15 	stw	r5,-12(fp)
    4958:	3007883a 	mov	r3,r6
    495c:	3805883a 	mov	r2,r7
    4960:	e0fffe05 	stb	r3,-8(fp)
    4964:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    4968:	e0bffc17 	ldw	r2,-16(fp)
    496c:	10800283 	ldbu	r2,10(r2)
    4970:	10803fcc 	andi	r2,r2,255
    4974:	00c00074 	movhi	r3,1
    4978:	18fbde04 	addi	r3,r3,-4232
    497c:	1885883a 	add	r2,r3,r2
    4980:	10800003 	ldbu	r2,0(r2)
    4984:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    4988:	e0bffa03 	ldbu	r2,-24(fp)
    498c:	e0fffc17 	ldw	r3,-16(fp)
    4990:	1885883a 	add	r2,r3,r2
    4994:	10800204 	addi	r2,r2,8
    4998:	108000c3 	ldbu	r2,3(r2)
    499c:	10803fcc 	andi	r2,r2,255
    49a0:	00c00074 	movhi	r3,1
    49a4:	18fbde04 	addi	r3,r3,-4232
    49a8:	1885883a 	add	r2,r3,r2
    49ac:	10800003 	ldbu	r2,0(r2)
    49b0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    49b4:	e0bffa03 	ldbu	r2,-24(fp)
    49b8:	100490fa 	slli	r2,r2,3
    49bc:	1007883a 	mov	r3,r2
    49c0:	e0bffa43 	ldbu	r2,-23(fp)
    49c4:	1885883a 	add	r2,r3,r2
    49c8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    49cc:	e0bffa83 	ldbu	r2,-22(fp)
    49d0:	00c000b4 	movhi	r3,2
    49d4:	18e8d404 	addi	r3,r3,-23728
    49d8:	1085883a 	add	r2,r2,r2
    49dc:	1085883a 	add	r2,r2,r2
    49e0:	1885883a 	add	r2,r3,r2
    49e4:	10800017 	ldw	r2,0(r2)
    49e8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    49ec:	e0bffb17 	ldw	r2,-20(fp)
    49f0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    49f4:	e0bffb17 	ldw	r2,-20(fp)
    49f8:	e0fffd17 	ldw	r3,-12(fp)
    49fc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    4a00:	e0bffb17 	ldw	r2,-20(fp)
    4a04:	10800c03 	ldbu	r2,48(r2)
    4a08:	1007883a 	mov	r3,r2
    4a0c:	e0bffe03 	ldbu	r2,-8(fp)
    4a10:	0084303a 	nor	r2,zero,r2
    4a14:	1884703a 	and	r2,r3,r2
    4a18:	1007883a 	mov	r3,r2
    4a1c:	e0bffb17 	ldw	r2,-20(fp)
    4a20:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    4a24:	e0bffb17 	ldw	r2,-20(fp)
    4a28:	e0ffff03 	ldbu	r3,-4(fp)
    4a2c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    4a30:	e0bffb17 	ldw	r2,-20(fp)
    4a34:	10800c03 	ldbu	r2,48(r2)
    4a38:	10803fcc 	andi	r2,r2,255
    4a3c:	1080020c 	andi	r2,r2,8
    4a40:	1000111e 	bne	r2,zero,4a88 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    4a44:	e0bffb17 	ldw	r2,-20(fp)
    4a48:	10c00d83 	ldbu	r3,54(r2)
    4a4c:	d0a6f903 	ldbu	r2,-25628(gp)
    4a50:	1884b03a 	or	r2,r3,r2
    4a54:	d0a6f905 	stb	r2,-25628(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    4a58:	e13ffa03 	ldbu	r4,-24(fp)
    4a5c:	e0fffa03 	ldbu	r3,-24(fp)
    4a60:	d0a6f944 	addi	r2,gp,-25627
    4a64:	1885883a 	add	r2,r3,r2
    4a68:	10c00003 	ldbu	r3,0(r2)
    4a6c:	e0bffb17 	ldw	r2,-20(fp)
    4a70:	10800d43 	ldbu	r2,53(r2)
    4a74:	1884b03a 	or	r2,r3,r2
    4a78:	1007883a 	mov	r3,r2
    4a7c:	d0a6f944 	addi	r2,gp,-25627
    4a80:	2085883a 	add	r2,r4,r2
    4a84:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    4a88:	e13ffb17 	ldw	r4,-20(fp)
    4a8c:	e17ffc17 	ldw	r5,-16(fp)
    4a90:	0004d280 	call	4d28 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    4a94:	e0bffb17 	ldw	r2,-20(fp)
    4a98:	10800817 	ldw	r2,32(r2)
    4a9c:	10000826 	beq	r2,zero,4ac0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    4aa0:	e0bffb17 	ldw	r2,-20(fp)
    4aa4:	10800817 	ldw	r2,32(r2)
    4aa8:	e13ffb17 	ldw	r4,-20(fp)
    4aac:	100b883a 	mov	r5,r2
    4ab0:	0004dd80 	call	4dd8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    4ab4:	e0bffb17 	ldw	r2,-20(fp)
    4ab8:	e0fffc17 	ldw	r3,-16(fp)
    4abc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    4ac0:	e0bffa83 	ldbu	r2,-22(fp)
}
    4ac4:	e037883a 	mov	sp,fp
    4ac8:	dfc00117 	ldw	ra,4(sp)
    4acc:	df000017 	ldw	fp,0(sp)
    4ad0:	dec00204 	addi	sp,sp,8
    4ad4:	f800283a 	ret

00004ad8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    4ad8:	defffd04 	addi	sp,sp,-12
    4adc:	df000215 	stw	fp,8(sp)
    4ae0:	df000204 	addi	fp,sp,8
    4ae4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    4ae8:	d0a6fd17 	ldw	r2,-25612(gp)
    4aec:	e0ffff17 	ldw	r3,-4(fp)
    4af0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    4af4:	d0a6fd17 	ldw	r2,-25612(gp)
    4af8:	10800d03 	ldbu	r2,52(r2)
    4afc:	10803fcc 	andi	r2,r2,255
    4b00:	d0e6fd17 	ldw	r3,-25612(gp)
    4b04:	18c00d03 	ldbu	r3,52(r3)
    4b08:	18c03fcc 	andi	r3,r3,255
    4b0c:	e13fff17 	ldw	r4,-4(fp)
    4b10:	20c7883a 	add	r3,r4,r3
    4b14:	18c00204 	addi	r3,r3,8
    4b18:	190000c3 	ldbu	r4,3(r3)
    4b1c:	d0e6fd17 	ldw	r3,-25612(gp)
    4b20:	18c00d43 	ldbu	r3,53(r3)
    4b24:	20c6b03a 	or	r3,r4,r3
    4b28:	e13fff17 	ldw	r4,-4(fp)
    4b2c:	2085883a 	add	r2,r4,r2
    4b30:	10800204 	addi	r2,r2,8
    4b34:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4b38:	e0bfff17 	ldw	r2,-4(fp)
    4b3c:	10c00283 	ldbu	r3,10(r2)
    4b40:	d0a6fd17 	ldw	r2,-25612(gp)
    4b44:	10800d83 	ldbu	r2,54(r2)
    4b48:	1884b03a 	or	r2,r3,r2
    4b4c:	1007883a 	mov	r3,r2
    4b50:	e0bfff17 	ldw	r2,-4(fp)
    4b54:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    4b58:	d0a6fd17 	ldw	r2,-25612(gp)
    4b5c:	10800d03 	ldbu	r2,52(r2)
    4b60:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4b64:	e13ffe03 	ldbu	r4,-8(fp)
    4b68:	e0fffe03 	ldbu	r3,-8(fp)
    4b6c:	d0a6f944 	addi	r2,gp,-25627
    4b70:	1885883a 	add	r2,r3,r2
    4b74:	10800003 	ldbu	r2,0(r2)
    4b78:	1007883a 	mov	r3,r2
    4b7c:	d0a6fd17 	ldw	r2,-25612(gp)
    4b80:	10800d43 	ldbu	r2,53(r2)
    4b84:	0084303a 	nor	r2,zero,r2
    4b88:	1884703a 	and	r2,r3,r2
    4b8c:	1007883a 	mov	r3,r2
    4b90:	d0a6f944 	addi	r2,gp,-25627
    4b94:	2085883a 	add	r2,r4,r2
    4b98:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    4b9c:	e0fffe03 	ldbu	r3,-8(fp)
    4ba0:	d0a6f944 	addi	r2,gp,-25627
    4ba4:	1885883a 	add	r2,r3,r2
    4ba8:	10800003 	ldbu	r2,0(r2)
    4bac:	10803fcc 	andi	r2,r2,255
    4bb0:	1000071e 	bne	r2,zero,4bd0 <OS_EventTaskWait+0xf8>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    4bb4:	d0a6fd17 	ldw	r2,-25612(gp)
    4bb8:	10800d83 	ldbu	r2,54(r2)
    4bbc:	0084303a 	nor	r2,zero,r2
    4bc0:	1007883a 	mov	r3,r2
    4bc4:	d0a6f903 	ldbu	r2,-25628(gp)
    4bc8:	1884703a 	and	r2,r3,r2
    4bcc:	d0a6f905 	stb	r2,-25628(gp)
    }
}
    4bd0:	e037883a 	mov	sp,fp
    4bd4:	df000017 	ldw	fp,0(sp)
    4bd8:	dec00104 	addi	sp,sp,4
    4bdc:	f800283a 	ret

00004be0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    4be0:	defffb04 	addi	sp,sp,-20
    4be4:	df000415 	stw	fp,16(sp)
    4be8:	df000404 	addi	fp,sp,16
    4bec:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    4bf0:	d0a6fd17 	ldw	r2,-25612(gp)
    4bf4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    4bf8:	d0a6fd17 	ldw	r2,-25612(gp)
    4bfc:	e0ffff17 	ldw	r3,-4(fp)
    4c00:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    4c04:	e0bfff17 	ldw	r2,-4(fp)
    4c08:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    4c0c:	e0bffc17 	ldw	r2,-16(fp)
    4c10:	10800017 	ldw	r2,0(r2)
    4c14:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    4c18:	00001f06 	br	4c98 <OS_EventTaskWaitMulti+0xb8>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    4c1c:	d0a6fd17 	ldw	r2,-25612(gp)
    4c20:	10800d03 	ldbu	r2,52(r2)
    4c24:	10803fcc 	andi	r2,r2,255
    4c28:	d0e6fd17 	ldw	r3,-25612(gp)
    4c2c:	18c00d03 	ldbu	r3,52(r3)
    4c30:	18c03fcc 	andi	r3,r3,255
    4c34:	e13ffd17 	ldw	r4,-12(fp)
    4c38:	20c7883a 	add	r3,r4,r3
    4c3c:	18c00204 	addi	r3,r3,8
    4c40:	190000c3 	ldbu	r4,3(r3)
    4c44:	d0e6fd17 	ldw	r3,-25612(gp)
    4c48:	18c00d43 	ldbu	r3,53(r3)
    4c4c:	20c6b03a 	or	r3,r4,r3
    4c50:	e13ffd17 	ldw	r4,-12(fp)
    4c54:	2085883a 	add	r2,r4,r2
    4c58:	10800204 	addi	r2,r2,8
    4c5c:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4c60:	e0bffd17 	ldw	r2,-12(fp)
    4c64:	10c00283 	ldbu	r3,10(r2)
    4c68:	d0a6fd17 	ldw	r2,-25612(gp)
    4c6c:	10800d83 	ldbu	r2,54(r2)
    4c70:	1884b03a 	or	r2,r3,r2
    4c74:	1007883a 	mov	r3,r2
    4c78:	e0bffd17 	ldw	r2,-12(fp)
    4c7c:	10c00285 	stb	r3,10(r2)
        pevents++;
    4c80:	e0bffc17 	ldw	r2,-16(fp)
    4c84:	10800104 	addi	r2,r2,4
    4c88:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    4c8c:	e0bffc17 	ldw	r2,-16(fp)
    4c90:	10800017 	ldw	r2,0(r2)
    4c94:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    4c98:	e0bffd17 	ldw	r2,-12(fp)
    4c9c:	103fdf1e 	bne	r2,zero,4c1c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    4ca0:	d0a6fd17 	ldw	r2,-25612(gp)
    4ca4:	10800d03 	ldbu	r2,52(r2)
    4ca8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4cac:	e13ffe03 	ldbu	r4,-8(fp)
    4cb0:	e0fffe03 	ldbu	r3,-8(fp)
    4cb4:	d0a6f944 	addi	r2,gp,-25627
    4cb8:	1885883a 	add	r2,r3,r2
    4cbc:	10800003 	ldbu	r2,0(r2)
    4cc0:	1007883a 	mov	r3,r2
    4cc4:	d0a6fd17 	ldw	r2,-25612(gp)
    4cc8:	10800d43 	ldbu	r2,53(r2)
    4ccc:	0084303a 	nor	r2,zero,r2
    4cd0:	1884703a 	and	r2,r3,r2
    4cd4:	1007883a 	mov	r3,r2
    4cd8:	d0a6f944 	addi	r2,gp,-25627
    4cdc:	2085883a 	add	r2,r4,r2
    4ce0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    4ce4:	e0fffe03 	ldbu	r3,-8(fp)
    4ce8:	d0a6f944 	addi	r2,gp,-25627
    4cec:	1885883a 	add	r2,r3,r2
    4cf0:	10800003 	ldbu	r2,0(r2)
    4cf4:	10803fcc 	andi	r2,r2,255
    4cf8:	1000071e 	bne	r2,zero,4d18 <OS_EventTaskWaitMulti+0x138>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    4cfc:	d0a6fd17 	ldw	r2,-25612(gp)
    4d00:	10800d83 	ldbu	r2,54(r2)
    4d04:	0084303a 	nor	r2,zero,r2
    4d08:	1007883a 	mov	r3,r2
    4d0c:	d0a6f903 	ldbu	r2,-25628(gp)
    4d10:	1884703a 	and	r2,r3,r2
    4d14:	d0a6f905 	stb	r2,-25628(gp)
    }
}
    4d18:	e037883a 	mov	sp,fp
    4d1c:	df000017 	ldw	fp,0(sp)
    4d20:	dec00104 	addi	sp,sp,4
    4d24:	f800283a 	ret

00004d28 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    4d28:	defffc04 	addi	sp,sp,-16
    4d2c:	df000315 	stw	fp,12(sp)
    4d30:	df000304 	addi	fp,sp,12
    4d34:	e13ffe15 	stw	r4,-8(fp)
    4d38:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    4d3c:	e0bffe17 	ldw	r2,-8(fp)
    4d40:	10800d03 	ldbu	r2,52(r2)
    4d44:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    4d48:	e0bffd03 	ldbu	r2,-12(fp)
    4d4c:	e0fffd03 	ldbu	r3,-12(fp)
    4d50:	e13fff17 	ldw	r4,-4(fp)
    4d54:	20c7883a 	add	r3,r4,r3
    4d58:	18c00204 	addi	r3,r3,8
    4d5c:	18c000c3 	ldbu	r3,3(r3)
    4d60:	1809883a 	mov	r4,r3
    4d64:	e0fffe17 	ldw	r3,-8(fp)
    4d68:	18c00d43 	ldbu	r3,53(r3)
    4d6c:	00c6303a 	nor	r3,zero,r3
    4d70:	20c6703a 	and	r3,r4,r3
    4d74:	e13fff17 	ldw	r4,-4(fp)
    4d78:	2085883a 	add	r2,r4,r2
    4d7c:	10800204 	addi	r2,r2,8
    4d80:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    4d84:	e0bffd03 	ldbu	r2,-12(fp)
    4d88:	e0ffff17 	ldw	r3,-4(fp)
    4d8c:	1885883a 	add	r2,r3,r2
    4d90:	10800204 	addi	r2,r2,8
    4d94:	108000c3 	ldbu	r2,3(r2)
    4d98:	10803fcc 	andi	r2,r2,255
    4d9c:	10000a1e 	bne	r2,zero,4dc8 <OS_EventTaskRemove+0xa0>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    4da0:	e0bfff17 	ldw	r2,-4(fp)
    4da4:	10800283 	ldbu	r2,10(r2)
    4da8:	1007883a 	mov	r3,r2
    4dac:	e0bffe17 	ldw	r2,-8(fp)
    4db0:	10800d83 	ldbu	r2,54(r2)
    4db4:	0084303a 	nor	r2,zero,r2
    4db8:	1884703a 	and	r2,r3,r2
    4dbc:	1007883a 	mov	r3,r2
    4dc0:	e0bfff17 	ldw	r2,-4(fp)
    4dc4:	10c00285 	stb	r3,10(r2)
    }
}
    4dc8:	e037883a 	mov	sp,fp
    4dcc:	df000017 	ldw	fp,0(sp)
    4dd0:	dec00104 	addi	sp,sp,4
    4dd4:	f800283a 	ret

00004dd8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    4dd8:	defffa04 	addi	sp,sp,-24
    4ddc:	df000515 	stw	fp,20(sp)
    4de0:	df000504 	addi	fp,sp,20
    4de4:	e13ffe15 	stw	r4,-8(fp)
    4de8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    4dec:	e0bffe17 	ldw	r2,-8(fp)
    4df0:	10800d03 	ldbu	r2,52(r2)
    4df4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    4df8:	e0bffe17 	ldw	r2,-8(fp)
    4dfc:	10800d83 	ldbu	r2,54(r2)
    4e00:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    4e04:	e0bffe17 	ldw	r2,-8(fp)
    4e08:	10800d43 	ldbu	r2,53(r2)
    4e0c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    4e10:	e0bfff17 	ldw	r2,-4(fp)
    4e14:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    4e18:	e0bffb17 	ldw	r2,-20(fp)
    4e1c:	10800017 	ldw	r2,0(r2)
    4e20:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    4e24:	00002406 	br	4eb8 <OS_EventTaskRemoveMulti+0xe0>
        pevent->OSEventTbl[y]  &= ~bitx;
    4e28:	e0bffd03 	ldbu	r2,-12(fp)
    4e2c:	e0fffd03 	ldbu	r3,-12(fp)
    4e30:	e13ffc17 	ldw	r4,-16(fp)
    4e34:	20c7883a 	add	r3,r4,r3
    4e38:	18c00204 	addi	r3,r3,8
    4e3c:	18c000c3 	ldbu	r3,3(r3)
    4e40:	1809883a 	mov	r4,r3
    4e44:	e0fffd83 	ldbu	r3,-10(fp)
    4e48:	00c6303a 	nor	r3,zero,r3
    4e4c:	20c6703a 	and	r3,r4,r3
    4e50:	e13ffc17 	ldw	r4,-16(fp)
    4e54:	2085883a 	add	r2,r4,r2
    4e58:	10800204 	addi	r2,r2,8
    4e5c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    4e60:	e0bffd03 	ldbu	r2,-12(fp)
    4e64:	e0fffc17 	ldw	r3,-16(fp)
    4e68:	1885883a 	add	r2,r3,r2
    4e6c:	10800204 	addi	r2,r2,8
    4e70:	108000c3 	ldbu	r2,3(r2)
    4e74:	10803fcc 	andi	r2,r2,255
    4e78:	1000091e 	bne	r2,zero,4ea0 <OS_EventTaskRemoveMulti+0xc8>
            pevent->OSEventGrp &= ~bity;
    4e7c:	e0bffc17 	ldw	r2,-16(fp)
    4e80:	10800283 	ldbu	r2,10(r2)
    4e84:	1007883a 	mov	r3,r2
    4e88:	e0bffd43 	ldbu	r2,-11(fp)
    4e8c:	0084303a 	nor	r2,zero,r2
    4e90:	1884703a 	and	r2,r3,r2
    4e94:	1007883a 	mov	r3,r2
    4e98:	e0bffc17 	ldw	r2,-16(fp)
    4e9c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    4ea0:	e0bffb17 	ldw	r2,-20(fp)
    4ea4:	10800104 	addi	r2,r2,4
    4ea8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    4eac:	e0bffb17 	ldw	r2,-20(fp)
    4eb0:	10800017 	ldw	r2,0(r2)
    4eb4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    4eb8:	e0bffc17 	ldw	r2,-16(fp)
    4ebc:	103fda1e 	bne	r2,zero,4e28 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    4ec0:	e037883a 	mov	sp,fp
    4ec4:	df000017 	ldw	fp,0(sp)
    4ec8:	dec00104 	addi	sp,sp,4
    4ecc:	f800283a 	ret

00004ed0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    4ed0:	defffc04 	addi	sp,sp,-16
    4ed4:	df000315 	stw	fp,12(sp)
    4ed8:	df000304 	addi	fp,sp,12
    4edc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    4ee0:	e0bfff17 	ldw	r2,-4(fp)
    4ee4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    4ee8:	e0bfff17 	ldw	r2,-4(fp)
    4eec:	108002c4 	addi	r2,r2,11
    4ef0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    4ef4:	e03ffe05 	stb	zero,-8(fp)
    4ef8:	00000806 	br	4f1c <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
    4efc:	e0bffd17 	ldw	r2,-12(fp)
    4f00:	10000005 	stb	zero,0(r2)
    4f04:	e0bffd17 	ldw	r2,-12(fp)
    4f08:	10800044 	addi	r2,r2,1
    4f0c:	e0bffd15 	stw	r2,-12(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    4f10:	e0bffe03 	ldbu	r2,-8(fp)
    4f14:	10800044 	addi	r2,r2,1
    4f18:	e0bffe05 	stb	r2,-8(fp)
    4f1c:	e0bffe03 	ldbu	r2,-8(fp)
    4f20:	108001b0 	cmpltui	r2,r2,6
    4f24:	103ff51e 	bne	r2,zero,4efc <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    4f28:	e037883a 	mov	sp,fp
    4f2c:	df000017 	ldw	fp,0(sp)
    4f30:	dec00104 	addi	sp,sp,4
    4f34:	f800283a 	ret

00004f38 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    4f38:	defffb04 	addi	sp,sp,-20
    4f3c:	dfc00415 	stw	ra,16(sp)
    4f40:	df000315 	stw	fp,12(sp)
    4f44:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    4f48:	010000b4 	movhi	r4,2
    4f4c:	21226804 	addi	r4,r4,-30304
    4f50:	01430c04 	movi	r5,3120
    4f54:	000529c0 	call	529c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    4f58:	008000b4 	movhi	r2,2
    4f5c:	10a26804 	addi	r2,r2,-30304
    4f60:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    4f64:	008000b4 	movhi	r2,2
    4f68:	10a27504 	addi	r2,r2,-30252
    4f6c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    4f70:	e03ffd0d 	sth	zero,-12(fp)
    4f74:	00001306 	br	4fc4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4f78:	e0bffe17 	ldw	r2,-8(fp)
    4f7c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    4f80:	e0bffe17 	ldw	r2,-8(fp)
    4f84:	e0ffff17 	ldw	r3,-4(fp)
    4f88:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    4f8c:	e0bffe17 	ldw	r2,-8(fp)
    4f90:	00c00fc4 	movi	r3,63
    4f94:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    4f98:	e0bffe17 	ldw	r2,-8(fp)
    4f9c:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
    4fa0:	e0bffe17 	ldw	r2,-8(fp)
    4fa4:	10800d04 	addi	r2,r2,52
    4fa8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    4fac:	e0bfff17 	ldw	r2,-4(fp)
    4fb0:	10800d04 	addi	r2,r2,52
    4fb4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    4fb8:	e0bffd0b 	ldhu	r2,-12(fp)
    4fbc:	10800044 	addi	r2,r2,1
    4fc0:	e0bffd0d 	sth	r2,-12(fp)
    4fc4:	e0bffd0b 	ldhu	r2,-12(fp)
    4fc8:	10800ef0 	cmpltui	r2,r2,59
    4fcc:	103fea1e 	bne	r2,zero,4f78 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    4fd0:	e0bffe17 	ldw	r2,-8(fp)
    4fd4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    4fd8:	e0bffe17 	ldw	r2,-8(fp)
    4fdc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    4fe0:	e0bffe17 	ldw	r2,-8(fp)
    4fe4:	00c00fc4 	movi	r3,63
    4fe8:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    4fec:	e0bffe17 	ldw	r2,-8(fp)
    4ff0:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    4ff4:	008000b4 	movhi	r2,2
    4ff8:	10a26804 	addi	r2,r2,-30304
    4ffc:	d0a6fb15 	stw	r2,-25620(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    5000:	e037883a 	mov	sp,fp
    5004:	dfc00117 	ldw	ra,4(sp)
    5008:	df000017 	ldw	fp,0(sp)
    500c:	dec00204 	addi	sp,sp,8
    5010:	f800283a 	ret

00005014 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    5014:	deffff04 	addi	sp,sp,-4
    5018:	df000015 	stw	fp,0(sp)
    501c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    5020:	d026fe15 	stw	zero,-25608(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    5024:	d026fc05 	stb	zero,-25616(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    5028:	d026ed05 	stb	zero,-25676(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    502c:	d026f545 	stb	zero,-25643(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    5030:	d026ed45 	stb	zero,-25675(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    5034:	d026f215 	stw	zero,-25656(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    5038:	d026ee15 	stw	zero,-25672(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    503c:	d0270115 	stw	zero,-25596(gp)
    OSIdleCtrMax  = 0L;
    5040:	d026f315 	stw	zero,-25652(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    5044:	d0270005 	stb	zero,-25600(gp)
#endif
}
    5048:	e037883a 	mov	sp,fp
    504c:	df000017 	ldw	fp,0(sp)
    5050:	dec00104 	addi	sp,sp,4
    5054:	f800283a 	ret

00005058 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    5058:	defffd04 	addi	sp,sp,-12
    505c:	df000215 	stw	fp,8(sp)
    5060:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    5064:	d026f905 	stb	zero,-25628(gp)
    prdytbl       = &OSRdyTbl[0];
    5068:	d0a6f944 	addi	r2,gp,-25627
    506c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    5070:	e03ffe05 	stb	zero,-8(fp)
    5074:	00000806 	br	5098 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
    5078:	e0bfff17 	ldw	r2,-4(fp)
    507c:	10000005 	stb	zero,0(r2)
    5080:	e0bfff17 	ldw	r2,-4(fp)
    5084:	10800044 	addi	r2,r2,1
    5088:	e0bfff15 	stw	r2,-4(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    508c:	e0bffe03 	ldbu	r2,-8(fp)
    5090:	10800044 	addi	r2,r2,1
    5094:	e0bffe05 	stb	r2,-8(fp)
    5098:	e0bffe03 	ldbu	r2,-8(fp)
    509c:	108001b0 	cmpltui	r2,r2,6
    50a0:	103ff51e 	bne	r2,zero,5078 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    50a4:	d026ef45 	stb	zero,-25667(gp)
    OSPrioHighRdy = 0;
    50a8:	d026ef05 	stb	zero,-25668(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    50ac:	d026f715 	stw	zero,-25636(gp)
    OSTCBCur      = (OS_TCB *)0;
    50b0:	d026fd15 	stw	zero,-25612(gp)
}
    50b4:	e037883a 	mov	sp,fp
    50b8:	df000017 	ldw	fp,0(sp)
    50bc:	dec00104 	addi	sp,sp,4
    50c0:	f800283a 	ret

000050c4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    50c4:	defff804 	addi	sp,sp,-32
    50c8:	dfc00715 	stw	ra,28(sp)
    50cc:	df000615 	stw	fp,24(sp)
    50d0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    50d4:	00bfffd4 	movui	r2,65535
    50d8:	d8800015 	stw	r2,0(sp)
    50dc:	008000b4 	movhi	r2,2
    50e0:	10a06804 	addi	r2,r2,-32352
    50e4:	d8800115 	stw	r2,4(sp)
    50e8:	00808004 	movi	r2,512
    50ec:	d8800215 	stw	r2,8(sp)
    50f0:	d8000315 	stw	zero,12(sp)
    50f4:	008000c4 	movi	r2,3
    50f8:	d8800415 	stw	r2,16(sp)
    50fc:	01000034 	movhi	r4,0
    5100:	21155a04 	addi	r4,r4,21864
    5104:	000b883a 	mov	r5,zero
    5108:	018000b4 	movhi	r6,2
    510c:	31a26704 	addi	r6,r6,-30308
    5110:	01c00a04 	movi	r7,40
    5114:	0009fa40 	call	9fa4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    5118:	01000a04 	movi	r4,40
    511c:	01400074 	movhi	r5,1
    5120:	297c1e04 	addi	r5,r5,-3976
    5124:	e1bfff04 	addi	r6,fp,-4
    5128:	000a8740 	call	a874 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    512c:	e037883a 	mov	sp,fp
    5130:	dfc00117 	ldw	ra,4(sp)
    5134:	df000017 	ldw	fp,0(sp)
    5138:	dec00204 	addi	sp,sp,8
    513c:	f800283a 	ret

00005140 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    5140:	defff804 	addi	sp,sp,-32
    5144:	dfc00715 	stw	ra,28(sp)
    5148:	df000615 	stw	fp,24(sp)
    514c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    5150:	00bfff94 	movui	r2,65534
    5154:	d8800015 	stw	r2,0(sp)
    5158:	00800074 	movhi	r2,1
    515c:	109df004 	addi	r2,r2,30656
    5160:	d8800115 	stw	r2,4(sp)
    5164:	00808004 	movi	r2,512
    5168:	d8800215 	stw	r2,8(sp)
    516c:	d8000315 	stw	zero,12(sp)
    5170:	008000c4 	movi	r2,3
    5174:	d8800415 	stw	r2,16(sp)
    5178:	01000034 	movhi	r4,0
    517c:	21157104 	addi	r4,r4,21956
    5180:	000b883a 	mov	r5,zero
    5184:	01800074 	movhi	r6,1
    5188:	319fef04 	addi	r6,r6,32700
    518c:	01c009c4 	movi	r7,39
    5190:	0009fa40 	call	9fa4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    5194:	010009c4 	movi	r4,39
    5198:	01400074 	movhi	r5,1
    519c:	297c2204 	addi	r5,r5,-3960
    51a0:	e1bfff04 	addi	r6,fp,-4
    51a4:	000a8740 	call	a874 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    51a8:	e037883a 	mov	sp,fp
    51ac:	dfc00117 	ldw	ra,4(sp)
    51b0:	df000017 	ldw	fp,0(sp)
    51b4:	dec00204 	addi	sp,sp,8
    51b8:	f800283a 	ret

000051bc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    51bc:	defffb04 	addi	sp,sp,-20
    51c0:	dfc00415 	stw	ra,16(sp)
    51c4:	df000315 	stw	fp,12(sp)
    51c8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    51cc:	010000b4 	movhi	r4,2
    51d0:	21257404 	addi	r4,r4,-27184
    51d4:	01436004 	movi	r5,3456
    51d8:	000529c0 	call	529c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    51dc:	010000b4 	movhi	r4,2
    51e0:	2128d404 	addi	r4,r4,-23728
    51e4:	01402904 	movi	r5,164
    51e8:	000529c0 	call	529c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    51ec:	008000b4 	movhi	r2,2
    51f0:	10a57404 	addi	r2,r2,-27184
    51f4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    51f8:	008000b4 	movhi	r2,2
    51fc:	10a58f04 	addi	r2,r2,-27076
    5200:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    5204:	e03ffd05 	stb	zero,-12(fp)
    5208:	00001106 	br	5250 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    520c:	e0bffe17 	ldw	r2,-8(fp)
    5210:	e0ffff17 	ldw	r3,-4(fp)
    5214:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    5218:	e0bffe17 	ldw	r2,-8(fp)
    521c:	00c00fc4 	movi	r3,63
    5220:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    5224:	e0bffe17 	ldw	r2,-8(fp)
    5228:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    522c:	e0bffe17 	ldw	r2,-8(fp)
    5230:	10801b04 	addi	r2,r2,108
    5234:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    5238:	e0bfff17 	ldw	r2,-4(fp)
    523c:	10801b04 	addi	r2,r2,108
    5240:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    5244:	e0bffd03 	ldbu	r2,-12(fp)
    5248:	10800044 	addi	r2,r2,1
    524c:	e0bffd05 	stb	r2,-12(fp)
    5250:	e0bffd03 	ldbu	r2,-12(fp)
    5254:	108007f0 	cmpltui	r2,r2,31
    5258:	103fec1e 	bne	r2,zero,520c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    525c:	e0bffe17 	ldw	r2,-8(fp)
    5260:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    5264:	e0bffe17 	ldw	r2,-8(fp)
    5268:	00c00fc4 	movi	r3,63
    526c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    5270:	e0bffe17 	ldw	r2,-8(fp)
    5274:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    5278:	d026f015 	stw	zero,-25664(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    527c:	008000b4 	movhi	r2,2
    5280:	10a57404 	addi	r2,r2,-27184
    5284:	d0a6f415 	stw	r2,-25648(gp)
}
    5288:	e037883a 	mov	sp,fp
    528c:	dfc00117 	ldw	ra,4(sp)
    5290:	df000017 	ldw	fp,0(sp)
    5294:	dec00204 	addi	sp,sp,8
    5298:	f800283a 	ret

0000529c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    529c:	defffd04 	addi	sp,sp,-12
    52a0:	df000215 	stw	fp,8(sp)
    52a4:	df000204 	addi	fp,sp,8
    52a8:	e13ffe15 	stw	r4,-8(fp)
    52ac:	2805883a 	mov	r2,r5
    52b0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    52b4:	00000806 	br	52d8 <OS_MemClr+0x3c>
        *pdest++ = (INT8U)0;
    52b8:	e0bffe17 	ldw	r2,-8(fp)
    52bc:	10000005 	stb	zero,0(r2)
    52c0:	e0bffe17 	ldw	r2,-8(fp)
    52c4:	10800044 	addi	r2,r2,1
    52c8:	e0bffe15 	stw	r2,-8(fp)
        size--;
    52cc:	e0bfff0b 	ldhu	r2,-4(fp)
    52d0:	10bfffc4 	addi	r2,r2,-1
    52d4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    52d8:	e0bfff0b 	ldhu	r2,-4(fp)
    52dc:	103ff61e 	bne	r2,zero,52b8 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    52e0:	e037883a 	mov	sp,fp
    52e4:	df000017 	ldw	fp,0(sp)
    52e8:	dec00104 	addi	sp,sp,4
    52ec:	f800283a 	ret

000052f0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    52f0:	defffc04 	addi	sp,sp,-16
    52f4:	df000315 	stw	fp,12(sp)
    52f8:	df000304 	addi	fp,sp,12
    52fc:	e13ffd15 	stw	r4,-12(fp)
    5300:	e17ffe15 	stw	r5,-8(fp)
    5304:	3005883a 	mov	r2,r6
    5308:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    530c:	00000d06 	br	5344 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
    5310:	e0bffe17 	ldw	r2,-8(fp)
    5314:	10c00003 	ldbu	r3,0(r2)
    5318:	e0bffd17 	ldw	r2,-12(fp)
    531c:	10c00005 	stb	r3,0(r2)
    5320:	e0bffd17 	ldw	r2,-12(fp)
    5324:	10800044 	addi	r2,r2,1
    5328:	e0bffd15 	stw	r2,-12(fp)
    532c:	e0bffe17 	ldw	r2,-8(fp)
    5330:	10800044 	addi	r2,r2,1
    5334:	e0bffe15 	stw	r2,-8(fp)
        size--;
    5338:	e0bfff0b 	ldhu	r2,-4(fp)
    533c:	10bfffc4 	addi	r2,r2,-1
    5340:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    5344:	e0bfff0b 	ldhu	r2,-4(fp)
    5348:	103ff11e 	bne	r2,zero,5310 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    534c:	e037883a 	mov	sp,fp
    5350:	df000017 	ldw	fp,0(sp)
    5354:	dec00104 	addi	sp,sp,4
    5358:	f800283a 	ret

0000535c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    535c:	defffb04 	addi	sp,sp,-20
    5360:	dfc00415 	stw	ra,16(sp)
    5364:	df000315 	stw	fp,12(sp)
    5368:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    536c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5370:	0005303a 	rdctl	r2,status
    5374:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5378:	e0fffe17 	ldw	r3,-8(fp)
    537c:	00bfff84 	movi	r2,-2
    5380:	1884703a 	and	r2,r3,r2
    5384:	1001703a 	wrctl	status,r2
  
  return context;
    5388:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    538c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    5390:	d0a6fc03 	ldbu	r2,-25616(gp)
    5394:	10803fcc 	andi	r2,r2,255
    5398:	10001a1e 	bne	r2,zero,5404 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    539c:	d0a6ed03 	ldbu	r2,-25676(gp)
    53a0:	10803fcc 	andi	r2,r2,255
    53a4:	1000171e 	bne	r2,zero,5404 <OS_Sched+0xa8>
            OS_SchedNew();
    53a8:	00054280 	call	5428 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    53ac:	d0e6ef03 	ldbu	r3,-25668(gp)
    53b0:	d0a6ef43 	ldbu	r2,-25667(gp)
    53b4:	18c03fcc 	andi	r3,r3,255
    53b8:	10803fcc 	andi	r2,r2,255
    53bc:	18801126 	beq	r3,r2,5404 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    53c0:	d0a6ef03 	ldbu	r2,-25668(gp)
    53c4:	10803fcc 	andi	r2,r2,255
    53c8:	00c000b4 	movhi	r3,2
    53cc:	18e8d404 	addi	r3,r3,-23728
    53d0:	1085883a 	add	r2,r2,r2
    53d4:	1085883a 	add	r2,r2,r2
    53d8:	1885883a 	add	r2,r3,r2
    53dc:	10800017 	ldw	r2,0(r2)
    53e0:	d0a6f715 	stw	r2,-25636(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    53e4:	d0a6f717 	ldw	r2,-25636(gp)
    53e8:	10c00e17 	ldw	r3,56(r2)
    53ec:	18c00044 	addi	r3,r3,1
    53f0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    53f4:	d0a6f217 	ldw	r2,-25656(gp)
    53f8:	10800044 	addi	r2,r2,1
    53fc:	d0a6f215 	stw	r2,-25656(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    5400:	000d11c0 	call	d11c <OSCtxSw>
    5404:	e0bffd17 	ldw	r2,-12(fp)
    5408:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    540c:	e0bfff17 	ldw	r2,-4(fp)
    5410:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    5414:	e037883a 	mov	sp,fp
    5418:	dfc00117 	ldw	ra,4(sp)
    541c:	df000017 	ldw	fp,0(sp)
    5420:	dec00204 	addi	sp,sp,8
    5424:	f800283a 	ret

00005428 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    5428:	defffe04 	addi	sp,sp,-8
    542c:	df000115 	stw	fp,4(sp)
    5430:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    5434:	d0a6f903 	ldbu	r2,-25628(gp)
    5438:	10803fcc 	andi	r2,r2,255
    543c:	00c00074 	movhi	r3,1
    5440:	18fbde04 	addi	r3,r3,-4232
    5444:	1885883a 	add	r2,r3,r2
    5448:	10800003 	ldbu	r2,0(r2)
    544c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    5450:	e0bfff03 	ldbu	r2,-4(fp)
    5454:	100490fa 	slli	r2,r2,3
    5458:	1007883a 	mov	r3,r2
    545c:	e13fff03 	ldbu	r4,-4(fp)
    5460:	d0a6f944 	addi	r2,gp,-25627
    5464:	2085883a 	add	r2,r4,r2
    5468:	10800003 	ldbu	r2,0(r2)
    546c:	10803fcc 	andi	r2,r2,255
    5470:	01000074 	movhi	r4,1
    5474:	213bde04 	addi	r4,r4,-4232
    5478:	2085883a 	add	r2,r4,r2
    547c:	10800003 	ldbu	r2,0(r2)
    5480:	1885883a 	add	r2,r3,r2
    5484:	d0a6ef05 	stb	r2,-25668(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    5488:	e037883a 	mov	sp,fp
    548c:	df000017 	ldw	fp,0(sp)
    5490:	dec00104 	addi	sp,sp,4
    5494:	f800283a 	ret

00005498 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    5498:	defffc04 	addi	sp,sp,-16
    549c:	df000315 	stw	fp,12(sp)
    54a0:	df000304 	addi	fp,sp,12
    54a4:	e13ffe15 	stw	r4,-8(fp)
    54a8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    54ac:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    54b0:	00000d06 	br	54e8 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
    54b4:	e0bfff17 	ldw	r2,-4(fp)
    54b8:	10c00003 	ldbu	r3,0(r2)
    54bc:	e0bffe17 	ldw	r2,-8(fp)
    54c0:	10c00005 	stb	r3,0(r2)
    54c4:	e0bffe17 	ldw	r2,-8(fp)
    54c8:	10800044 	addi	r2,r2,1
    54cc:	e0bffe15 	stw	r2,-8(fp)
    54d0:	e0bfff17 	ldw	r2,-4(fp)
    54d4:	10800044 	addi	r2,r2,1
    54d8:	e0bfff15 	stw	r2,-4(fp)
        len++;
    54dc:	e0bffd03 	ldbu	r2,-12(fp)
    54e0:	10800044 	addi	r2,r2,1
    54e4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    54e8:	e0bfff17 	ldw	r2,-4(fp)
    54ec:	10800003 	ldbu	r2,0(r2)
    54f0:	10803fcc 	andi	r2,r2,255
    54f4:	103fef1e 	bne	r2,zero,54b4 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    54f8:	e0bffe17 	ldw	r2,-8(fp)
    54fc:	10000005 	stb	zero,0(r2)
    return (len);
    5500:	e0bffd03 	ldbu	r2,-12(fp)
}
    5504:	e037883a 	mov	sp,fp
    5508:	df000017 	ldw	fp,0(sp)
    550c:	dec00104 	addi	sp,sp,4
    5510:	f800283a 	ret

00005514 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    5514:	defffd04 	addi	sp,sp,-12
    5518:	df000215 	stw	fp,8(sp)
    551c:	df000204 	addi	fp,sp,8
    5520:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    5524:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    5528:	00000606 	br	5544 <OS_StrLen+0x30>
        psrc++;
    552c:	e0bfff17 	ldw	r2,-4(fp)
    5530:	10800044 	addi	r2,r2,1
    5534:	e0bfff15 	stw	r2,-4(fp)
        len++;
    5538:	e0bffe03 	ldbu	r2,-8(fp)
    553c:	10800044 	addi	r2,r2,1
    5540:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    5544:	e0bfff17 	ldw	r2,-4(fp)
    5548:	10800003 	ldbu	r2,0(r2)
    554c:	10803fcc 	andi	r2,r2,255
    5550:	103ff61e 	bne	r2,zero,552c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    5554:	e0bffe03 	ldbu	r2,-8(fp)
}
    5558:	e037883a 	mov	sp,fp
    555c:	df000017 	ldw	fp,0(sp)
    5560:	dec00104 	addi	sp,sp,4
    5564:	f800283a 	ret

00005568 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    5568:	defffa04 	addi	sp,sp,-24
    556c:	dfc00515 	stw	ra,20(sp)
    5570:	df000415 	stw	fp,16(sp)
    5574:	df000404 	addi	fp,sp,16
    5578:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    557c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5580:	0005303a 	rdctl	r2,status
    5584:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5588:	e0fffd17 	ldw	r3,-12(fp)
    558c:	00bfff84 	movi	r2,-2
    5590:	1884703a 	and	r2,r3,r2
    5594:	1001703a 	wrctl	status,r2
  
  return context;
    5598:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    559c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    55a0:	d0a6ee17 	ldw	r2,-25672(gp)
    55a4:	10800044 	addi	r2,r2,1
    55a8:	d0a6ee15 	stw	r2,-25672(gp)
    55ac:	e0bffc17 	ldw	r2,-16(fp)
    55b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55b4:	e0bffe17 	ldw	r2,-8(fp)
    55b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    55bc:	000d5ac0 	call	d5ac <OSTaskIdleHook>
    }
    55c0:	003fef06 	br	5580 <OS_TaskIdle+0x18>

000055c4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    55c4:	defffa04 	addi	sp,sp,-24
    55c8:	dfc00515 	stw	ra,20(sp)
    55cc:	df000415 	stw	fp,16(sp)
    55d0:	df000404 	addi	fp,sp,16
    55d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    55d8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    55dc:	00000206 	br	55e8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    55e0:	01000504 	movi	r4,20
    55e4:	000b1ac0 	call	b1ac <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    55e8:	d0a70003 	ldbu	r2,-25600(gp)
    55ec:	10803fcc 	andi	r2,r2,255
    55f0:	103ffb26 	beq	r2,zero,55e0 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    55f4:	d0a6f317 	ldw	r2,-25652(gp)
    55f8:	1009883a 	mov	r4,r2
    55fc:	01401904 	movi	r5,100
    5600:	000e9440 	call	e944 <__udivsi3>
    5604:	d0a6f315 	stw	r2,-25652(gp)
    if (OSIdleCtrMax == 0L) {
    5608:	d0a6f317 	ldw	r2,-25652(gp)
    560c:	1000031e 	bne	r2,zero,561c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    5610:	d026f505 	stb	zero,-25644(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    5614:	01003fc4 	movi	r4,255
    5618:	000ae000 	call	ae00 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    561c:	0005303a 	rdctl	r2,status
    5620:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5624:	e0fffd17 	ldw	r3,-12(fp)
    5628:	00bfff84 	movi	r2,-2
    562c:	1884703a 	and	r2,r3,r2
    5630:	1001703a 	wrctl	status,r2
  
  return context;
    5634:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    5638:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    563c:	d0a6ee17 	ldw	r2,-25672(gp)
    5640:	d0a70115 	stw	r2,-25596(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    5644:	d026ee15 	stw	zero,-25672(gp)
    5648:	e0bffc17 	ldw	r2,-16(fp)
    564c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5650:	e0bffe17 	ldw	r2,-8(fp)
    5654:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    5658:	d0e70117 	ldw	r3,-25596(gp)
    565c:	d0a6f317 	ldw	r2,-25652(gp)
    5660:	1809883a 	mov	r4,r3
    5664:	100b883a 	mov	r5,r2
    5668:	000e9440 	call	e944 <__udivsi3>
    566c:	00c01904 	movi	r3,100
    5670:	1885c83a 	sub	r2,r3,r2
    5674:	d0a6f505 	stb	r2,-25644(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    5678:	000d53c0 	call	d53c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    567c:	000568c0 	call	568c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    5680:	01000284 	movi	r4,10
    5684:	000b1ac0 	call	b1ac <OSTimeDly>
    }
    5688:	003fe406 	br	561c <OS_TaskStat+0x58>

0000568c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    568c:	defffa04 	addi	sp,sp,-24
    5690:	dfc00515 	stw	ra,20(sp)
    5694:	df000415 	stw	fp,16(sp)
    5698:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    569c:	e03ffc05 	stb	zero,-16(fp)
    56a0:	00002406 	br	5734 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    56a4:	e0fffc03 	ldbu	r3,-16(fp)
    56a8:	e0bffe04 	addi	r2,fp,-8
    56ac:	1809883a 	mov	r4,r3
    56b0:	100b883a 	mov	r5,r2
    56b4:	000ac2c0 	call	ac2c <OSTaskStkChk>
    56b8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    56bc:	e0bffc43 	ldbu	r2,-15(fp)
    56c0:	1000191e 	bne	r2,zero,5728 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    56c4:	e0bffc03 	ldbu	r2,-16(fp)
    56c8:	00c000b4 	movhi	r3,2
    56cc:	18e8d404 	addi	r3,r3,-23728
    56d0:	1085883a 	add	r2,r2,r2
    56d4:	1085883a 	add	r2,r2,r2
    56d8:	1885883a 	add	r2,r3,r2
    56dc:	10800017 	ldw	r2,0(r2)
    56e0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    56e4:	e0bffd17 	ldw	r2,-12(fp)
    56e8:	10000f26 	beq	r2,zero,5728 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    56ec:	e0bffd17 	ldw	r2,-12(fp)
    56f0:	10800060 	cmpeqi	r2,r2,1
    56f4:	10000c1e 	bne	r2,zero,5728 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    56f8:	e0bffd17 	ldw	r2,-12(fp)
    56fc:	10c00217 	ldw	r3,8(r2)
    5700:	e0bffd17 	ldw	r2,-12(fp)
    5704:	10800317 	ldw	r2,12(r2)
    5708:	1085883a 	add	r2,r2,r2
    570c:	1085883a 	add	r2,r2,r2
    5710:	1887883a 	add	r3,r3,r2
    5714:	e0bffd17 	ldw	r2,-12(fp)
    5718:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    571c:	e0ffff17 	ldw	r3,-4(fp)
    5720:	e0bffd17 	ldw	r2,-12(fp)
    5724:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5728:	e0bffc03 	ldbu	r2,-16(fp)
    572c:	10800044 	addi	r2,r2,1
    5730:	e0bffc05 	stb	r2,-16(fp)
    5734:	e0bffc03 	ldbu	r2,-16(fp)
    5738:	10800a70 	cmpltui	r2,r2,41
    573c:	103fd91e 	bne	r2,zero,56a4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    5740:	e037883a 	mov	sp,fp
    5744:	dfc00117 	ldw	ra,4(sp)
    5748:	df000017 	ldw	fp,0(sp)
    574c:	dec00204 	addi	sp,sp,8
    5750:	f800283a 	ret

00005754 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    5754:	defff204 	addi	sp,sp,-56
    5758:	dfc00d15 	stw	ra,52(sp)
    575c:	df000c15 	stw	fp,48(sp)
    5760:	df000c04 	addi	fp,sp,48
    5764:	2007883a 	mov	r3,r4
    5768:	e17ffc15 	stw	r5,-16(fp)
    576c:	e1bffd15 	stw	r6,-12(fp)
    5770:	3805883a 	mov	r2,r7
    5774:	e1000417 	ldw	r4,16(fp)
    5778:	e0fffb05 	stb	r3,-20(fp)
    577c:	e0bffe0d 	sth	r2,-8(fp)
    5780:	e13fff0d 	sth	r4,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5784:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5788:	0005303a 	rdctl	r2,status
    578c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5790:	e0fff617 	ldw	r3,-40(fp)
    5794:	00bfff84 	movi	r2,-2
    5798:	1884703a 	and	r2,r3,r2
    579c:	1001703a 	wrctl	status,r2
  
  return context;
    57a0:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    57a4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    57a8:	d0a6f417 	ldw	r2,-25648(gp)
    57ac:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    57b0:	e0bff517 	ldw	r2,-44(fp)
    57b4:	10009326 	beq	r2,zero,5a04 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    57b8:	e0bff517 	ldw	r2,-44(fp)
    57bc:	10800517 	ldw	r2,20(r2)
    57c0:	d0a6f415 	stw	r2,-25648(gp)
    57c4:	e0bff417 	ldw	r2,-48(fp)
    57c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57cc:	e0bff717 	ldw	r2,-36(fp)
    57d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    57d4:	e0bff517 	ldw	r2,-44(fp)
    57d8:	e0fffc17 	ldw	r3,-16(fp)
    57dc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    57e0:	e0bff517 	ldw	r2,-44(fp)
    57e4:	e0fffb03 	ldbu	r3,-20(fp)
    57e8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    57ec:	e0bff517 	ldw	r2,-44(fp)
    57f0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    57f4:	e0bff517 	ldw	r2,-44(fp)
    57f8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    57fc:	e0bff517 	ldw	r2,-44(fp)
    5800:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    5804:	e0bff517 	ldw	r2,-44(fp)
    5808:	e0c00317 	ldw	r3,12(fp)
    580c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    5810:	e0bff517 	ldw	r2,-44(fp)
    5814:	e0c00217 	ldw	r3,8(fp)
    5818:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    581c:	e0bff517 	ldw	r2,-44(fp)
    5820:	e0fffd17 	ldw	r3,-12(fp)
    5824:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    5828:	e0bff517 	ldw	r2,-44(fp)
    582c:	e0ffff0b 	ldhu	r3,-4(fp)
    5830:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    5834:	e0bff517 	ldw	r2,-44(fp)
    5838:	e0fffe0b 	ldhu	r3,-8(fp)
    583c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    5840:	e0bff517 	ldw	r2,-44(fp)
    5844:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    5848:	e0bffb03 	ldbu	r2,-20(fp)
    584c:	1004d0fa 	srli	r2,r2,3
    5850:	1007883a 	mov	r3,r2
    5854:	e0bff517 	ldw	r2,-44(fp)
    5858:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    585c:	e0bffb03 	ldbu	r2,-20(fp)
    5860:	108001cc 	andi	r2,r2,7
    5864:	1007883a 	mov	r3,r2
    5868:	e0bff517 	ldw	r2,-44(fp)
    586c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    5870:	e0bff517 	ldw	r2,-44(fp)
    5874:	10800d03 	ldbu	r2,52(r2)
    5878:	10803fcc 	andi	r2,r2,255
    587c:	00c00044 	movi	r3,1
    5880:	1884983a 	sll	r2,r3,r2
    5884:	1007883a 	mov	r3,r2
    5888:	e0bff517 	ldw	r2,-44(fp)
    588c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    5890:	e0bff517 	ldw	r2,-44(fp)
    5894:	10800cc3 	ldbu	r2,51(r2)
    5898:	10803fcc 	andi	r2,r2,255
    589c:	00c00044 	movi	r3,1
    58a0:	1884983a 	sll	r2,r3,r2
    58a4:	1007883a 	mov	r3,r2
    58a8:	e0bff517 	ldw	r2,-44(fp)
    58ac:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    58b0:	e0bff517 	ldw	r2,-44(fp)
    58b4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    58b8:	e0bff517 	ldw	r2,-44(fp)
    58bc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    58c0:	e0bff517 	ldw	r2,-44(fp)
    58c4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    58c8:	e0bff517 	ldw	r2,-44(fp)
    58cc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    58d0:	e0bff517 	ldw	r2,-44(fp)
    58d4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    58d8:	e0bff517 	ldw	r2,-44(fp)
    58dc:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    58e0:	e0bff517 	ldw	r2,-44(fp)
    58e4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    58e8:	e0bff517 	ldw	r2,-44(fp)
    58ec:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    58f0:	e0bff517 	ldw	r2,-44(fp)
    58f4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    58f8:	e0bff517 	ldw	r2,-44(fp)
    58fc:	00c00fc4 	movi	r3,63
    5900:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    5904:	e0bff517 	ldw	r2,-44(fp)
    5908:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    590c:	e13ff517 	ldw	r4,-44(fp)
    5910:	000d5c80 	call	d5c8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    5914:	e13ff517 	ldw	r4,-44(fp)
    5918:	000d4e00 	call	d4e0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    591c:	0005303a 	rdctl	r2,status
    5920:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5924:	e0fff817 	ldw	r3,-32(fp)
    5928:	00bfff84 	movi	r2,-2
    592c:	1884703a 	and	r2,r3,r2
    5930:	1001703a 	wrctl	status,r2
  
  return context;
    5934:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    5938:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    593c:	e0bffb03 	ldbu	r2,-20(fp)
    5940:	00c000b4 	movhi	r3,2
    5944:	18e8d404 	addi	r3,r3,-23728
    5948:	1085883a 	add	r2,r2,r2
    594c:	1085883a 	add	r2,r2,r2
    5950:	1885883a 	add	r2,r3,r2
    5954:	e0fff517 	ldw	r3,-44(fp)
    5958:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    595c:	d0e6f017 	ldw	r3,-25664(gp)
    5960:	e0bff517 	ldw	r2,-44(fp)
    5964:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    5968:	e0bff517 	ldw	r2,-44(fp)
    596c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    5970:	d0a6f017 	ldw	r2,-25664(gp)
    5974:	10000326 	beq	r2,zero,5984 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
    5978:	d0a6f017 	ldw	r2,-25664(gp)
    597c:	e0fff517 	ldw	r3,-44(fp)
    5980:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    5984:	e0bff517 	ldw	r2,-44(fp)
    5988:	d0a6f015 	stw	r2,-25664(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    598c:	e0bff517 	ldw	r2,-44(fp)
    5990:	10c00d83 	ldbu	r3,54(r2)
    5994:	d0a6f903 	ldbu	r2,-25628(gp)
    5998:	1884b03a 	or	r2,r3,r2
    599c:	d0a6f905 	stb	r2,-25628(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    59a0:	e0bff517 	ldw	r2,-44(fp)
    59a4:	10800d03 	ldbu	r2,52(r2)
    59a8:	11003fcc 	andi	r4,r2,255
    59ac:	e0bff517 	ldw	r2,-44(fp)
    59b0:	10800d03 	ldbu	r2,52(r2)
    59b4:	10c03fcc 	andi	r3,r2,255
    59b8:	d0a6f944 	addi	r2,gp,-25627
    59bc:	1885883a 	add	r2,r3,r2
    59c0:	10c00003 	ldbu	r3,0(r2)
    59c4:	e0bff517 	ldw	r2,-44(fp)
    59c8:	10800d43 	ldbu	r2,53(r2)
    59cc:	1884b03a 	or	r2,r3,r2
    59d0:	1007883a 	mov	r3,r2
    59d4:	d0a6f944 	addi	r2,gp,-25627
    59d8:	2085883a 	add	r2,r4,r2
    59dc:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    59e0:	d0a6f543 	ldbu	r2,-25643(gp)
    59e4:	10800044 	addi	r2,r2,1
    59e8:	d0a6f545 	stb	r2,-25643(gp)
    59ec:	e0bff417 	ldw	r2,-48(fp)
    59f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    59f4:	e0bff917 	ldw	r2,-28(fp)
    59f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    59fc:	0005883a 	mov	r2,zero
    5a00:	00000506 	br	5a18 <OS_TCBInit+0x2c4>
    5a04:	e0bff417 	ldw	r2,-48(fp)
    5a08:	e0bffa15 	stw	r2,-24(fp)
    5a0c:	e0bffa17 	ldw	r2,-24(fp)
    5a10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    5a14:	00801084 	movi	r2,66
}
    5a18:	e037883a 	mov	sp,fp
    5a1c:	dfc00117 	ldw	ra,4(sp)
    5a20:	df000017 	ldw	fp,0(sp)
    5a24:	dec00204 	addi	sp,sp,8
    5a28:	f800283a 	ret

00005a2c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    5a2c:	defffe04 	addi	sp,sp,-8
    5a30:	df000115 	stw	fp,4(sp)
    5a34:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    5a38:	d0a00d04 	addi	r2,gp,-32716
    5a3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    5a40:	d0a00e04 	addi	r2,gp,-32712
    5a44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    5a48:	d0a00f84 	addi	r2,gp,-32706
    5a4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    5a50:	d0a01004 	addi	r2,gp,-32704
    5a54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    5a58:	d0a00f04 	addi	r2,gp,-32708
    5a5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    5a60:	d0a01084 	addi	r2,gp,-32702
    5a64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    5a68:	d0a01104 	addi	r2,gp,-32700
    5a6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    5a70:	d0a01184 	addi	r2,gp,-32698
    5a74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    5a78:	d0a01204 	addi	r2,gp,-32696
    5a7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    5a80:	d0a01284 	addi	r2,gp,-32694
    5a84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    5a88:	d0a01304 	addi	r2,gp,-32692
    5a8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    5a90:	d0a01384 	addi	r2,gp,-32690
    5a94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    5a98:	d0a01404 	addi	r2,gp,-32688
    5a9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    5aa0:	d0a01484 	addi	r2,gp,-32686
    5aa4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    5aa8:	d0a01504 	addi	r2,gp,-32684
    5aac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    5ab0:	d0a01584 	addi	r2,gp,-32682
    5ab4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    5ab8:	d0a01604 	addi	r2,gp,-32680
    5abc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    5ac0:	d0a01684 	addi	r2,gp,-32678
    5ac4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    5ac8:	d0a01704 	addi	r2,gp,-32676
    5acc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    5ad0:	d0a01784 	addi	r2,gp,-32674
    5ad4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    5ad8:	d0a01804 	addi	r2,gp,-32672
    5adc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    5ae0:	d0a01884 	addi	r2,gp,-32670
    5ae4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    5ae8:	d0a01904 	addi	r2,gp,-32668
    5aec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    5af0:	d0a01984 	addi	r2,gp,-32666
    5af4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    5af8:	d0a01a04 	addi	r2,gp,-32664
    5afc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    5b00:	d0a01a84 	addi	r2,gp,-32662
    5b04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    5b08:	d0a01b04 	addi	r2,gp,-32660
    5b0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    5b10:	d0a01b84 	addi	r2,gp,-32658
    5b14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    5b18:	d0a01c04 	addi	r2,gp,-32656
    5b1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    5b20:	d0a01c84 	addi	r2,gp,-32654
    5b24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    5b28:	d0a01d04 	addi	r2,gp,-32652
    5b2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    5b30:	d0a01d84 	addi	r2,gp,-32650
    5b34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    5b38:	d0a01e04 	addi	r2,gp,-32648
    5b3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    5b40:	d0a01e84 	addi	r2,gp,-32646
    5b44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    5b48:	d0a01f04 	addi	r2,gp,-32644
    5b4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    5b50:	d0a01f84 	addi	r2,gp,-32642
    5b54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    5b58:	d0a02004 	addi	r2,gp,-32640
    5b5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    5b60:	d0a02084 	addi	r2,gp,-32638
    5b64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    5b68:	d0a02104 	addi	r2,gp,-32636
    5b6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    5b70:	d0a02184 	addi	r2,gp,-32634
    5b74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    5b78:	d0a02204 	addi	r2,gp,-32632
    5b7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    5b80:	d0a02284 	addi	r2,gp,-32630
    5b84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    5b88:	d0a02304 	addi	r2,gp,-32628
    5b8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    5b90:	d0a02384 	addi	r2,gp,-32626
    5b94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    5b98:	d0a02404 	addi	r2,gp,-32624
    5b9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    5ba0:	d0a02904 	addi	r2,gp,-32604
    5ba4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    5ba8:	e037883a 	mov	sp,fp
    5bac:	df000017 	ldw	fp,0(sp)
    5bb0:	dec00104 	addi	sp,sp,4
    5bb4:	f800283a 	ret

00005bb8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    5bb8:	defff204 	addi	sp,sp,-56
    5bbc:	df000d15 	stw	fp,52(sp)
    5bc0:	df000d04 	addi	fp,sp,52
    5bc4:	e13ffc15 	stw	r4,-16(fp)
    5bc8:	2807883a 	mov	r3,r5
    5bcc:	3005883a 	mov	r2,r6
    5bd0:	e1ffff15 	stw	r7,-4(fp)
    5bd4:	e0fffd0d 	sth	r3,-12(fp)
    5bd8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    5bdc:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    5be0:	e0bfff17 	ldw	r2,-4(fp)
    5be4:	1000021e 	bne	r2,zero,5bf0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    5be8:	0005883a 	mov	r2,zero
    5bec:	0000b006 	br	5eb0 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    5bf0:	e0bffc17 	ldw	r2,-16(fp)
    5bf4:	1000051e 	bne	r2,zero,5c0c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5bf8:	e0bfff17 	ldw	r2,-4(fp)
    5bfc:	00c01b84 	movi	r3,110
    5c00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5c04:	0005883a 	mov	r2,zero
    5c08:	0000a906 	br	5eb0 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    5c0c:	e0bffc17 	ldw	r2,-16(fp)
    5c10:	10800003 	ldbu	r2,0(r2)
    5c14:	10803fcc 	andi	r2,r2,255
    5c18:	10800160 	cmpeqi	r2,r2,5
    5c1c:	1000051e 	bne	r2,zero,5c34 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    5c20:	e0bfff17 	ldw	r2,-4(fp)
    5c24:	00c00044 	movi	r3,1
    5c28:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5c2c:	0005883a 	mov	r2,zero
    5c30:	00009f06 	br	5eb0 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    5c34:	e0fffe03 	ldbu	r3,-8(fp)
    5c38:	00bfe004 	movi	r2,-128
    5c3c:	1884703a 	and	r2,r3,r2
    5c40:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    5c44:	e0bff503 	ldbu	r2,-44(fp)
    5c48:	10000626 	beq	r2,zero,5c64 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    5c4c:	e0bffe03 	ldbu	r2,-8(fp)
    5c50:	10801fcc 	andi	r2,r2,127
    5c54:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    5c58:	00800044 	movi	r2,1
    5c5c:	e0bff385 	stb	r2,-50(fp)
    5c60:	00000106 	br	5c68 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    5c64:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    5c68:	e0bfff17 	ldw	r2,-4(fp)
    5c6c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c70:	0005303a 	rdctl	r2,status
    5c74:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c78:	e0fff617 	ldw	r3,-40(fp)
    5c7c:	00bfff84 	movi	r2,-2
    5c80:	1884703a 	and	r2,r3,r2
    5c84:	1001703a 	wrctl	status,r2
  
  return context;
    5c88:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    5c8c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    5c90:	e0bffe03 	ldbu	r2,-8(fp)
    5c94:	10c00060 	cmpeqi	r3,r2,1
    5c98:	18005f1e 	bne	r3,zero,5e18 <OSFlagAccept+0x260>
    5c9c:	10c00088 	cmpgei	r3,r2,2
    5ca0:	1800021e 	bne	r3,zero,5cac <OSFlagAccept+0xf4>
    5ca4:	10003f26 	beq	r2,zero,5da4 <OSFlagAccept+0x1ec>
    5ca8:	00007706 	br	5e88 <OSFlagAccept+0x2d0>
    5cac:	10c000a0 	cmpeqi	r3,r2,2
    5cb0:	1800031e 	bne	r3,zero,5cc0 <OSFlagAccept+0x108>
    5cb4:	108000e0 	cmpeqi	r2,r2,3
    5cb8:	10001e1e 	bne	r2,zero,5d34 <OSFlagAccept+0x17c>
    5cbc:	00007206 	br	5e88 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    5cc0:	e0bffc17 	ldw	r2,-16(fp)
    5cc4:	10c0020b 	ldhu	r3,8(r2)
    5cc8:	e0bffd0b 	ldhu	r2,-12(fp)
    5ccc:	1884703a 	and	r2,r3,r2
    5cd0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    5cd4:	e0fff30b 	ldhu	r3,-52(fp)
    5cd8:	e0bffd0b 	ldhu	r2,-12(fp)
    5cdc:	18800d1e 	bne	r3,r2,5d14 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5ce0:	e0bff383 	ldbu	r2,-50(fp)
    5ce4:	10800058 	cmpnei	r2,r2,1
    5ce8:	10000d1e 	bne	r2,zero,5d20 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    5cec:	e0bffc17 	ldw	r2,-16(fp)
    5cf0:	1080020b 	ldhu	r2,8(r2)
    5cf4:	1007883a 	mov	r3,r2
    5cf8:	e0bff30b 	ldhu	r2,-52(fp)
    5cfc:	0084303a 	nor	r2,zero,r2
    5d00:	1884703a 	and	r2,r3,r2
    5d04:	1007883a 	mov	r3,r2
    5d08:	e0bffc17 	ldw	r2,-16(fp)
    5d0c:	10c0020d 	sth	r3,8(r2)
    5d10:	00000306 	br	5d20 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5d14:	e0bfff17 	ldw	r2,-4(fp)
    5d18:	00c01c04 	movi	r3,112
    5d1c:	10c00005 	stb	r3,0(r2)
    5d20:	e0bff417 	ldw	r2,-48(fp)
    5d24:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d28:	e0bff717 	ldw	r2,-36(fp)
    5d2c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5d30:	00005e06 	br	5eac <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    5d34:	e0bffc17 	ldw	r2,-16(fp)
    5d38:	10c0020b 	ldhu	r3,8(r2)
    5d3c:	e0bffd0b 	ldhu	r2,-12(fp)
    5d40:	1884703a 	and	r2,r3,r2
    5d44:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    5d48:	e0bff30b 	ldhu	r2,-52(fp)
    5d4c:	10000d26 	beq	r2,zero,5d84 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5d50:	e0bff383 	ldbu	r2,-50(fp)
    5d54:	10800058 	cmpnei	r2,r2,1
    5d58:	10000d1e 	bne	r2,zero,5d90 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    5d5c:	e0bffc17 	ldw	r2,-16(fp)
    5d60:	1080020b 	ldhu	r2,8(r2)
    5d64:	1007883a 	mov	r3,r2
    5d68:	e0bff30b 	ldhu	r2,-52(fp)
    5d6c:	0084303a 	nor	r2,zero,r2
    5d70:	1884703a 	and	r2,r3,r2
    5d74:	1007883a 	mov	r3,r2
    5d78:	e0bffc17 	ldw	r2,-16(fp)
    5d7c:	10c0020d 	sth	r3,8(r2)
    5d80:	00000306 	br	5d90 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5d84:	e0bfff17 	ldw	r2,-4(fp)
    5d88:	00c01c04 	movi	r3,112
    5d8c:	10c00005 	stb	r3,0(r2)
    5d90:	e0bff417 	ldw	r2,-48(fp)
    5d94:	e0bff815 	stw	r2,-32(fp)
    5d98:	e0bff817 	ldw	r2,-32(fp)
    5d9c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5da0:	00004206 	br	5eac <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    5da4:	e0bffc17 	ldw	r2,-16(fp)
    5da8:	1080020b 	ldhu	r2,8(r2)
    5dac:	0084303a 	nor	r2,zero,r2
    5db0:	1007883a 	mov	r3,r2
    5db4:	e0bffd0b 	ldhu	r2,-12(fp)
    5db8:	1884703a 	and	r2,r3,r2
    5dbc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    5dc0:	e0fff30b 	ldhu	r3,-52(fp)
    5dc4:	e0bffd0b 	ldhu	r2,-12(fp)
    5dc8:	18800b1e 	bne	r3,r2,5df8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5dcc:	e0bff383 	ldbu	r2,-50(fp)
    5dd0:	10800058 	cmpnei	r2,r2,1
    5dd4:	10000b1e 	bne	r2,zero,5e04 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    5dd8:	e0bffc17 	ldw	r2,-16(fp)
    5ddc:	10c0020b 	ldhu	r3,8(r2)
    5de0:	e0bff30b 	ldhu	r2,-52(fp)
    5de4:	1884b03a 	or	r2,r3,r2
    5de8:	1007883a 	mov	r3,r2
    5dec:	e0bffc17 	ldw	r2,-16(fp)
    5df0:	10c0020d 	sth	r3,8(r2)
    5df4:	00000306 	br	5e04 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5df8:	e0bfff17 	ldw	r2,-4(fp)
    5dfc:	00c01c04 	movi	r3,112
    5e00:	10c00005 	stb	r3,0(r2)
    5e04:	e0bff417 	ldw	r2,-48(fp)
    5e08:	e0bff915 	stw	r2,-28(fp)
    5e0c:	e0bff917 	ldw	r2,-28(fp)
    5e10:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5e14:	00002506 	br	5eac <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    5e18:	e0bffc17 	ldw	r2,-16(fp)
    5e1c:	1080020b 	ldhu	r2,8(r2)
    5e20:	0084303a 	nor	r2,zero,r2
    5e24:	1007883a 	mov	r3,r2
    5e28:	e0bffd0b 	ldhu	r2,-12(fp)
    5e2c:	1884703a 	and	r2,r3,r2
    5e30:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    5e34:	e0bff30b 	ldhu	r2,-52(fp)
    5e38:	10000b26 	beq	r2,zero,5e68 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5e3c:	e0bff383 	ldbu	r2,-50(fp)
    5e40:	10800058 	cmpnei	r2,r2,1
    5e44:	10000b1e 	bne	r2,zero,5e74 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    5e48:	e0bffc17 	ldw	r2,-16(fp)
    5e4c:	10c0020b 	ldhu	r3,8(r2)
    5e50:	e0bff30b 	ldhu	r2,-52(fp)
    5e54:	1884b03a 	or	r2,r3,r2
    5e58:	1007883a 	mov	r3,r2
    5e5c:	e0bffc17 	ldw	r2,-16(fp)
    5e60:	10c0020d 	sth	r3,8(r2)
    5e64:	00000306 	br	5e74 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5e68:	e0bfff17 	ldw	r2,-4(fp)
    5e6c:	00c01c04 	movi	r3,112
    5e70:	10c00005 	stb	r3,0(r2)
    5e74:	e0bff417 	ldw	r2,-48(fp)
    5e78:	e0bffa15 	stw	r2,-24(fp)
    5e7c:	e0bffa17 	ldw	r2,-24(fp)
    5e80:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5e84:	00000906 	br	5eac <OSFlagAccept+0x2f4>
    5e88:	e0bff417 	ldw	r2,-48(fp)
    5e8c:	e0bffb15 	stw	r2,-20(fp)
    5e90:	e0bffb17 	ldw	r2,-20(fp)
    5e94:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    5e98:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    5e9c:	e0bfff17 	ldw	r2,-4(fp)
    5ea0:	00c01bc4 	movi	r3,111
    5ea4:	10c00005 	stb	r3,0(r2)
             break;
    5ea8:	0001883a 	nop
    }
    return (flags_rdy);
    5eac:	e0bff30b 	ldhu	r2,-52(fp)
}
    5eb0:	e037883a 	mov	sp,fp
    5eb4:	df000017 	ldw	fp,0(sp)
    5eb8:	dec00104 	addi	sp,sp,4
    5ebc:	f800283a 	ret

00005ec0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    5ec0:	defff804 	addi	sp,sp,-32
    5ec4:	df000715 	stw	fp,28(sp)
    5ec8:	df000704 	addi	fp,sp,28
    5ecc:	2005883a 	mov	r2,r4
    5ed0:	e17fff15 	stw	r5,-4(fp)
    5ed4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    5ed8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    5edc:	e0bfff17 	ldw	r2,-4(fp)
    5ee0:	1000021e 	bne	r2,zero,5eec <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    5ee4:	0005883a 	mov	r2,zero
    5ee8:	00003b06 	br	5fd8 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    5eec:	00800074 	movhi	r2,1
    5ef0:	1089f504 	addi	r2,r2,10196
    5ef4:	10800003 	ldbu	r2,0(r2)
    5ef8:	10803fcc 	andi	r2,r2,255
    5efc:	10000526 	beq	r2,zero,5f14 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    5f00:	e0bfff17 	ldw	r2,-4(fp)
    5f04:	00c00404 	movi	r3,16
    5f08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    5f0c:	0005883a 	mov	r2,zero
    5f10:	00003106 	br	5fd8 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5f14:	0005303a 	rdctl	r2,status
    5f18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f1c:	e0fffb17 	ldw	r3,-20(fp)
    5f20:	00bfff84 	movi	r2,-2
    5f24:	1884703a 	and	r2,r3,r2
    5f28:	1001703a 	wrctl	status,r2
  
  return context;
    5f2c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    5f30:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    5f34:	00800074 	movhi	r2,1
    5f38:	1089f804 	addi	r2,r2,10208
    5f3c:	10800017 	ldw	r2,0(r2)
    5f40:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    5f44:	e0bffa17 	ldw	r2,-24(fp)
    5f48:	10001b26 	beq	r2,zero,5fb8 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    5f4c:	00800074 	movhi	r2,1
    5f50:	1089f804 	addi	r2,r2,10208
    5f54:	10800017 	ldw	r2,0(r2)
    5f58:	10c00117 	ldw	r3,4(r2)
    5f5c:	00800074 	movhi	r2,1
    5f60:	1089f804 	addi	r2,r2,10208
    5f64:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    5f68:	e0bffa17 	ldw	r2,-24(fp)
    5f6c:	00c00144 	movi	r3,5
    5f70:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    5f74:	e0bffa17 	ldw	r2,-24(fp)
    5f78:	e0fffe0b 	ldhu	r3,-8(fp)
    5f7c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    5f80:	e0bffa17 	ldw	r2,-24(fp)
    5f84:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    5f88:	e0bffa17 	ldw	r2,-24(fp)
    5f8c:	00c00fc4 	movi	r3,63
    5f90:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    5f94:	e0bffa17 	ldw	r2,-24(fp)
    5f98:	100002c5 	stb	zero,11(r2)
    5f9c:	e0bff917 	ldw	r2,-28(fp)
    5fa0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5fa4:	e0bffc17 	ldw	r2,-16(fp)
    5fa8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    5fac:	e0bfff17 	ldw	r2,-4(fp)
    5fb0:	10000005 	stb	zero,0(r2)
    5fb4:	00000706 	br	5fd4 <OSFlagCreate+0x114>
    5fb8:	e0bff917 	ldw	r2,-28(fp)
    5fbc:	e0bffd15 	stw	r2,-12(fp)
    5fc0:	e0bffd17 	ldw	r2,-12(fp)
    5fc4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    5fc8:	e0bfff17 	ldw	r2,-4(fp)
    5fcc:	00c01c84 	movi	r3,114
    5fd0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    5fd4:	e0bffa17 	ldw	r2,-24(fp)
}
    5fd8:	e037883a 	mov	sp,fp
    5fdc:	df000017 	ldw	fp,0(sp)
    5fe0:	dec00104 	addi	sp,sp,4
    5fe4:	f800283a 	ret

00005fe8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    5fe8:	defff204 	addi	sp,sp,-56
    5fec:	dfc00d15 	stw	ra,52(sp)
    5ff0:	df000c15 	stw	fp,48(sp)
    5ff4:	df000c04 	addi	fp,sp,48
    5ff8:	e13ffd15 	stw	r4,-12(fp)
    5ffc:	2805883a 	mov	r2,r5
    6000:	e1bfff15 	stw	r6,-4(fp)
    6004:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6008:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    600c:	e0bfff17 	ldw	r2,-4(fp)
    6010:	1000021e 	bne	r2,zero,601c <OSFlagDel+0x34>
        return (pgrp);
    6014:	e0bffd17 	ldw	r2,-12(fp)
    6018:	00008a06 	br	6244 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    601c:	e0bffd17 	ldw	r2,-12(fp)
    6020:	1000051e 	bne	r2,zero,6038 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6024:	e0bfff17 	ldw	r2,-4(fp)
    6028:	00c01b84 	movi	r3,110
    602c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6030:	e0bffd17 	ldw	r2,-12(fp)
    6034:	00008306 	br	6244 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6038:	00800074 	movhi	r2,1
    603c:	1089f504 	addi	r2,r2,10196
    6040:	10800003 	ldbu	r2,0(r2)
    6044:	10803fcc 	andi	r2,r2,255
    6048:	10000526 	beq	r2,zero,6060 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    604c:	e0bfff17 	ldw	r2,-4(fp)
    6050:	00c003c4 	movi	r3,15
    6054:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6058:	e0bffd17 	ldw	r2,-12(fp)
    605c:	00007906 	br	6244 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    6060:	e0bffd17 	ldw	r2,-12(fp)
    6064:	10800003 	ldbu	r2,0(r2)
    6068:	10803fcc 	andi	r2,r2,255
    606c:	10800160 	cmpeqi	r2,r2,5
    6070:	1000051e 	bne	r2,zero,6088 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    6074:	e0bfff17 	ldw	r2,-4(fp)
    6078:	00c00044 	movi	r3,1
    607c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6080:	e0bffd17 	ldw	r2,-12(fp)
    6084:	00006f06 	br	6244 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6088:	0005303a 	rdctl	r2,status
    608c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6090:	e0fff817 	ldw	r3,-32(fp)
    6094:	00bfff84 	movi	r2,-2
    6098:	1884703a 	and	r2,r3,r2
    609c:	1001703a 	wrctl	status,r2
  
  return context;
    60a0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    60a4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    60a8:	e0bffd17 	ldw	r2,-12(fp)
    60ac:	10800117 	ldw	r2,4(r2)
    60b0:	10000326 	beq	r2,zero,60c0 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    60b4:	00800044 	movi	r2,1
    60b8:	e0bff405 	stb	r2,-48(fp)
    60bc:	00000106 	br	60c4 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    60c0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    60c4:	e0bffe03 	ldbu	r2,-8(fp)
    60c8:	10000326 	beq	r2,zero,60d8 <OSFlagDel+0xf0>
    60cc:	10800060 	cmpeqi	r2,r2,1
    60d0:	1000271e 	bne	r2,zero,6170 <OSFlagDel+0x188>
    60d4:	00005006 	br	6218 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    60d8:	e0bff403 	ldbu	r2,-48(fp)
    60dc:	10001a1e 	bne	r2,zero,6148 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    60e0:	e0bffd17 	ldw	r2,-12(fp)
    60e4:	00c00fc4 	movi	r3,63
    60e8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    60ec:	e0bffd17 	ldw	r2,-12(fp)
    60f0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    60f4:	e0bffd17 	ldw	r2,-12(fp)
    60f8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    60fc:	00800074 	movhi	r2,1
    6100:	1089f804 	addi	r2,r2,10208
    6104:	10c00017 	ldw	r3,0(r2)
    6108:	e0bffd17 	ldw	r2,-12(fp)
    610c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6110:	e0bffd17 	ldw	r2,-12(fp)
    6114:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    6118:	00800074 	movhi	r2,1
    611c:	1089f804 	addi	r2,r2,10208
    6120:	e0fffd17 	ldw	r3,-12(fp)
    6124:	10c00015 	stw	r3,0(r2)
    6128:	e0bff717 	ldw	r2,-36(fp)
    612c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6130:	e0bff917 	ldw	r2,-28(fp)
    6134:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    6138:	e0bfff17 	ldw	r2,-4(fp)
    613c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    6140:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    6144:	00003e06 	br	6240 <OSFlagDel+0x258>
    6148:	e0bff717 	ldw	r2,-36(fp)
    614c:	e0bffa15 	stw	r2,-24(fp)
    6150:	e0bffa17 	ldw	r2,-24(fp)
    6154:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    6158:	e0bfff17 	ldw	r2,-4(fp)
    615c:	00c01244 	movi	r3,73
    6160:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    6164:	e0bffd17 	ldw	r2,-12(fp)
    6168:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    616c:	00003406 	br	6240 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    6170:	e0bffd17 	ldw	r2,-12(fp)
    6174:	10800117 	ldw	r2,4(r2)
    6178:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    617c:	00000606 	br	6198 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    6180:	e13ff517 	ldw	r4,-44(fp)
    6184:	000b883a 	mov	r5,zero
    6188:	00072400 	call	7240 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    618c:	e0bff517 	ldw	r2,-44(fp)
    6190:	10800017 	ldw	r2,0(r2)
    6194:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    6198:	e0bff517 	ldw	r2,-44(fp)
    619c:	103ff81e 	bne	r2,zero,6180 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    61a0:	e0bffd17 	ldw	r2,-12(fp)
    61a4:	00c00fc4 	movi	r3,63
    61a8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    61ac:	e0bffd17 	ldw	r2,-12(fp)
    61b0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    61b4:	e0bffd17 	ldw	r2,-12(fp)
    61b8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    61bc:	00800074 	movhi	r2,1
    61c0:	1089f804 	addi	r2,r2,10208
    61c4:	10c00017 	ldw	r3,0(r2)
    61c8:	e0bffd17 	ldw	r2,-12(fp)
    61cc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    61d0:	e0bffd17 	ldw	r2,-12(fp)
    61d4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    61d8:	00800074 	movhi	r2,1
    61dc:	1089f804 	addi	r2,r2,10208
    61e0:	e0fffd17 	ldw	r3,-12(fp)
    61e4:	10c00015 	stw	r3,0(r2)
    61e8:	e0bff717 	ldw	r2,-36(fp)
    61ec:	e0bffb15 	stw	r2,-20(fp)
    61f0:	e0bffb17 	ldw	r2,-20(fp)
    61f4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    61f8:	e0bff403 	ldbu	r2,-48(fp)
    61fc:	10800058 	cmpnei	r2,r2,1
    6200:	1000011e 	bne	r2,zero,6208 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    6204:	000535c0 	call	535c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    6208:	e0bfff17 	ldw	r2,-4(fp)
    620c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    6210:	e03ff615 	stw	zero,-40(fp)
             break;
    6214:	00000a06 	br	6240 <OSFlagDel+0x258>
    6218:	e0bff717 	ldw	r2,-36(fp)
    621c:	e0bffc15 	stw	r2,-16(fp)
    6220:	e0bffc17 	ldw	r2,-16(fp)
    6224:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    6228:	e0bfff17 	ldw	r2,-4(fp)
    622c:	00c001c4 	movi	r3,7
    6230:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    6234:	e0bffd17 	ldw	r2,-12(fp)
    6238:	e0bff615 	stw	r2,-40(fp)
             break;
    623c:	0001883a 	nop
    }
    return (pgrp_return);
    6240:	e0bff617 	ldw	r2,-40(fp)
}
    6244:	e037883a 	mov	sp,fp
    6248:	dfc00117 	ldw	ra,4(sp)
    624c:	df000017 	ldw	fp,0(sp)
    6250:	dec00204 	addi	sp,sp,8
    6254:	f800283a 	ret

00006258 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    6258:	defff604 	addi	sp,sp,-40
    625c:	dfc00915 	stw	ra,36(sp)
    6260:	df000815 	stw	fp,32(sp)
    6264:	df000804 	addi	fp,sp,32
    6268:	e13ffd15 	stw	r4,-12(fp)
    626c:	e17ffe15 	stw	r5,-8(fp)
    6270:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6274:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6278:	e0bfff17 	ldw	r2,-4(fp)
    627c:	1000021e 	bne	r2,zero,6288 <OSFlagNameGet+0x30>
        return (0);
    6280:	0005883a 	mov	r2,zero
    6284:	00003b06 	br	6374 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    6288:	e0bffd17 	ldw	r2,-12(fp)
    628c:	1000051e 	bne	r2,zero,62a4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6290:	e0bfff17 	ldw	r2,-4(fp)
    6294:	00c01b84 	movi	r3,110
    6298:	10c00005 	stb	r3,0(r2)
        return (0);
    629c:	0005883a 	mov	r2,zero
    62a0:	00003406 	br	6374 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    62a4:	e0bffe17 	ldw	r2,-8(fp)
    62a8:	1000051e 	bne	r2,zero,62c0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    62ac:	e0bfff17 	ldw	r2,-4(fp)
    62b0:	00c00304 	movi	r3,12
    62b4:	10c00005 	stb	r3,0(r2)
        return (0);
    62b8:	0005883a 	mov	r2,zero
    62bc:	00002d06 	br	6374 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    62c0:	00800074 	movhi	r2,1
    62c4:	1089f504 	addi	r2,r2,10196
    62c8:	10800003 	ldbu	r2,0(r2)
    62cc:	10803fcc 	andi	r2,r2,255
    62d0:	10000526 	beq	r2,zero,62e8 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    62d4:	e0bfff17 	ldw	r2,-4(fp)
    62d8:	00c00444 	movi	r3,17
    62dc:	10c00005 	stb	r3,0(r2)
        return (0);
    62e0:	0005883a 	mov	r2,zero
    62e4:	00002306 	br	6374 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    62e8:	0005303a 	rdctl	r2,status
    62ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    62f0:	e0fffa17 	ldw	r3,-24(fp)
    62f4:	00bfff84 	movi	r2,-2
    62f8:	1884703a 	and	r2,r3,r2
    62fc:	1001703a 	wrctl	status,r2
  
  return context;
    6300:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    6304:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    6308:	e0bffd17 	ldw	r2,-12(fp)
    630c:	10800003 	ldbu	r2,0(r2)
    6310:	10803fcc 	andi	r2,r2,255
    6314:	10800160 	cmpeqi	r2,r2,5
    6318:	1000091e 	bne	r2,zero,6340 <OSFlagNameGet+0xe8>
    631c:	e0bff817 	ldw	r2,-32(fp)
    6320:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6324:	e0bffb17 	ldw	r2,-20(fp)
    6328:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    632c:	e0bfff17 	ldw	r2,-4(fp)
    6330:	00c00044 	movi	r3,1
    6334:	10c00005 	stb	r3,0(r2)
        return (0);
    6338:	0005883a 	mov	r2,zero
    633c:	00000d06 	br	6374 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    6340:	e0bffd17 	ldw	r2,-12(fp)
    6344:	10800284 	addi	r2,r2,10
    6348:	e13ffe17 	ldw	r4,-8(fp)
    634c:	100b883a 	mov	r5,r2
    6350:	00054980 	call	5498 <OS_StrCopy>
    6354:	e0bff905 	stb	r2,-28(fp)
    6358:	e0bff817 	ldw	r2,-32(fp)
    635c:	e0bffc15 	stw	r2,-16(fp)
    6360:	e0bffc17 	ldw	r2,-16(fp)
    6364:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6368:	e0bfff17 	ldw	r2,-4(fp)
    636c:	10000005 	stb	zero,0(r2)
    return (len);
    6370:	e0bff903 	ldbu	r2,-28(fp)
}
    6374:	e037883a 	mov	sp,fp
    6378:	dfc00117 	ldw	ra,4(sp)
    637c:	df000017 	ldw	fp,0(sp)
    6380:	dec00204 	addi	sp,sp,8
    6384:	f800283a 	ret

00006388 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    6388:	defff504 	addi	sp,sp,-44
    638c:	dfc00a15 	stw	ra,40(sp)
    6390:	df000915 	stw	fp,36(sp)
    6394:	df000904 	addi	fp,sp,36
    6398:	e13ffd15 	stw	r4,-12(fp)
    639c:	e17ffe15 	stw	r5,-8(fp)
    63a0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    63a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    63a8:	e0bfff17 	ldw	r2,-4(fp)
    63ac:	10004526 	beq	r2,zero,64c4 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    63b0:	e0bffd17 	ldw	r2,-12(fp)
    63b4:	1000041e 	bne	r2,zero,63c8 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    63b8:	e0bfff17 	ldw	r2,-4(fp)
    63bc:	00c01b84 	movi	r3,110
    63c0:	10c00005 	stb	r3,0(r2)
        return;
    63c4:	00004006 	br	64c8 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    63c8:	e0bffe17 	ldw	r2,-8(fp)
    63cc:	1000041e 	bne	r2,zero,63e0 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    63d0:	e0bfff17 	ldw	r2,-4(fp)
    63d4:	00c00304 	movi	r3,12
    63d8:	10c00005 	stb	r3,0(r2)
        return;
    63dc:	00003a06 	br	64c8 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    63e0:	00800074 	movhi	r2,1
    63e4:	1089f504 	addi	r2,r2,10196
    63e8:	10800003 	ldbu	r2,0(r2)
    63ec:	10803fcc 	andi	r2,r2,255
    63f0:	10000426 	beq	r2,zero,6404 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
    63f4:	e0bfff17 	ldw	r2,-4(fp)
    63f8:	00c00484 	movi	r3,18
    63fc:	10c00005 	stb	r3,0(r2)
        return;
    6400:	00003106 	br	64c8 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6404:	0005303a 	rdctl	r2,status
    6408:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    640c:	e0fff917 	ldw	r3,-28(fp)
    6410:	00bfff84 	movi	r2,-2
    6414:	1884703a 	and	r2,r3,r2
    6418:	1001703a 	wrctl	status,r2
  
  return context;
    641c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    6420:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    6424:	e0bffd17 	ldw	r2,-12(fp)
    6428:	10800003 	ldbu	r2,0(r2)
    642c:	10803fcc 	andi	r2,r2,255
    6430:	10800160 	cmpeqi	r2,r2,5
    6434:	1000081e 	bne	r2,zero,6458 <OSFlagNameSet+0xd0>
    6438:	e0bff717 	ldw	r2,-36(fp)
    643c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6440:	e0bffa17 	ldw	r2,-24(fp)
    6444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    6448:	e0bfff17 	ldw	r2,-4(fp)
    644c:	00c00044 	movi	r3,1
    6450:	10c00005 	stb	r3,0(r2)
        return;
    6454:	00001c06 	br	64c8 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    6458:	e13ffe17 	ldw	r4,-8(fp)
    645c:	00055140 	call	5514 <OS_StrLen>
    6460:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    6464:	e0bff803 	ldbu	r2,-32(fp)
    6468:	10800830 	cmpltui	r2,r2,32
    646c:	1000081e 	bne	r2,zero,6490 <OSFlagNameSet+0x108>
    6470:	e0bff717 	ldw	r2,-36(fp)
    6474:	e0bffb15 	stw	r2,-20(fp)
    6478:	e0bffb17 	ldw	r2,-20(fp)
    647c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    6480:	e0bfff17 	ldw	r2,-4(fp)
    6484:	00c01cc4 	movi	r3,115
    6488:	10c00005 	stb	r3,0(r2)
        return;
    648c:	00000e06 	br	64c8 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    6490:	e0bffd17 	ldw	r2,-12(fp)
    6494:	10800284 	addi	r2,r2,10
    6498:	1009883a 	mov	r4,r2
    649c:	e17ffe17 	ldw	r5,-8(fp)
    64a0:	00054980 	call	5498 <OS_StrCopy>
    64a4:	e0bff717 	ldw	r2,-36(fp)
    64a8:	e0bffc15 	stw	r2,-16(fp)
    64ac:	e0bffc17 	ldw	r2,-16(fp)
    64b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    64b4:	e0bfff17 	ldw	r2,-4(fp)
    64b8:	10000005 	stb	zero,0(r2)
    return;
    64bc:	0001883a 	nop
    64c0:	00000106 	br	64c8 <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    64c4:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    64c8:	e037883a 	mov	sp,fp
    64cc:	dfc00117 	ldw	ra,4(sp)
    64d0:	df000017 	ldw	fp,0(sp)
    64d4:	dec00204 	addi	sp,sp,8
    64d8:	f800283a 	ret

000064dc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    64dc:	deffe204 	addi	sp,sp,-120
    64e0:	dfc01d15 	stw	ra,116(sp)
    64e4:	df001c15 	stw	fp,112(sp)
    64e8:	df001c04 	addi	fp,sp,112
    64ec:	e13ffc15 	stw	r4,-16(fp)
    64f0:	2809883a 	mov	r4,r5
    64f4:	3007883a 	mov	r3,r6
    64f8:	3805883a 	mov	r2,r7
    64fc:	e13ffd0d 	sth	r4,-12(fp)
    6500:	e0fffe05 	stb	r3,-8(fp)
    6504:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6508:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    650c:	e0800217 	ldw	r2,8(fp)
    6510:	1000021e 	bne	r2,zero,651c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    6514:	0005883a 	mov	r2,zero
    6518:	00016b06 	br	6ac8 <OSFlagPend+0x5ec>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    651c:	e0bffc17 	ldw	r2,-16(fp)
    6520:	1000051e 	bne	r2,zero,6538 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6524:	e0800217 	ldw	r2,8(fp)
    6528:	00c01b84 	movi	r3,110
    652c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6530:	0005883a 	mov	r2,zero
    6534:	00016406 	br	6ac8 <OSFlagPend+0x5ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6538:	00800074 	movhi	r2,1
    653c:	1089f504 	addi	r2,r2,10196
    6540:	10800003 	ldbu	r2,0(r2)
    6544:	10803fcc 	andi	r2,r2,255
    6548:	10000526 	beq	r2,zero,6560 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    654c:	e0800217 	ldw	r2,8(fp)
    6550:	00c00084 	movi	r3,2
    6554:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6558:	0005883a 	mov	r2,zero
    655c:	00015a06 	br	6ac8 <OSFlagPend+0x5ec>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    6560:	00800074 	movhi	r2,1
    6564:	1089e604 	addi	r2,r2,10136
    6568:	10800003 	ldbu	r2,0(r2)
    656c:	10803fcc 	andi	r2,r2,255
    6570:	10000526 	beq	r2,zero,6588 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    6574:	e0800217 	ldw	r2,8(fp)
    6578:	00c00344 	movi	r3,13
    657c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6580:	0005883a 	mov	r2,zero
    6584:	00015006 	br	6ac8 <OSFlagPend+0x5ec>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    6588:	e0bffc17 	ldw	r2,-16(fp)
    658c:	10800003 	ldbu	r2,0(r2)
    6590:	10803fcc 	andi	r2,r2,255
    6594:	10800160 	cmpeqi	r2,r2,5
    6598:	1000051e 	bne	r2,zero,65b0 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    659c:	e0800217 	ldw	r2,8(fp)
    65a0:	00c00044 	movi	r3,1
    65a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    65a8:	0005883a 	mov	r2,zero
    65ac:	00014606 	br	6ac8 <OSFlagPend+0x5ec>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    65b0:	e0fffe03 	ldbu	r3,-8(fp)
    65b4:	00bfe004 	movi	r2,-128
    65b8:	1884703a 	and	r2,r3,r2
    65bc:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    65c0:	e0bfe703 	ldbu	r2,-100(fp)
    65c4:	10000626 	beq	r2,zero,65e0 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    65c8:	e0bffe03 	ldbu	r2,-8(fp)
    65cc:	10801fcc 	andi	r2,r2,127
    65d0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    65d4:	00800044 	movi	r2,1
    65d8:	e0bfe505 	stb	r2,-108(fp)
    65dc:	00000106 	br	65e4 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    65e0:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    65e4:	0005303a 	rdctl	r2,status
    65e8:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    65ec:	e0ffe917 	ldw	r3,-92(fp)
    65f0:	00bfff84 	movi	r2,-2
    65f4:	1884703a 	and	r2,r3,r2
    65f8:	1001703a 	wrctl	status,r2
  
  return context;
    65fc:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6600:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    6604:	e0bffe03 	ldbu	r2,-8(fp)
    6608:	10c00060 	cmpeqi	r3,r2,1
    660c:	1800951e 	bne	r3,zero,6864 <OSFlagPend+0x388>
    6610:	10c00088 	cmpgei	r3,r2,2
    6614:	1800021e 	bne	r3,zero,6620 <OSFlagPend+0x144>
    6618:	10006326 	beq	r2,zero,67a8 <OSFlagPend+0x2cc>
    661c:	0000bf06 	br	691c <OSFlagPend+0x440>
    6620:	10c000a0 	cmpeqi	r3,r2,2
    6624:	1800031e 	bne	r3,zero,6634 <OSFlagPend+0x158>
    6628:	108000e0 	cmpeqi	r2,r2,3
    662c:	1000301e 	bne	r2,zero,66f0 <OSFlagPend+0x214>
    6630:	0000ba06 	br	691c <OSFlagPend+0x440>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    6634:	e0bffc17 	ldw	r2,-16(fp)
    6638:	10c0020b 	ldhu	r3,8(r2)
    663c:	e0bffd0b 	ldhu	r2,-12(fp)
    6640:	1884703a 	and	r2,r3,r2
    6644:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6648:	e0ffe78b 	ldhu	r3,-98(fp)
    664c:	e0bffd0b 	ldhu	r2,-12(fp)
    6650:	1880191e 	bne	r3,r2,66b8 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6654:	e0bfe503 	ldbu	r2,-108(fp)
    6658:	10800058 	cmpnei	r2,r2,1
    665c:	1000091e 	bne	r2,zero,6684 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6660:	e0bffc17 	ldw	r2,-16(fp)
    6664:	1080020b 	ldhu	r2,8(r2)
    6668:	1007883a 	mov	r3,r2
    666c:	e0bfe78b 	ldhu	r2,-98(fp)
    6670:	0084303a 	nor	r2,zero,r2
    6674:	1884703a 	and	r2,r3,r2
    6678:	1007883a 	mov	r3,r2
    667c:	e0bffc17 	ldw	r2,-16(fp)
    6680:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6684:	00800074 	movhi	r2,1
    6688:	1089f604 	addi	r2,r2,10200
    668c:	10800017 	ldw	r2,0(r2)
    6690:	e0ffe78b 	ldhu	r3,-98(fp)
    6694:	10c00b0d 	sth	r3,44(r2)
    6698:	e0bfe617 	ldw	r2,-104(fp)
    669c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    66a0:	e0bfea17 	ldw	r2,-88(fp)
    66a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    66a8:	e0800217 	ldw	r2,8(fp)
    66ac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    66b0:	e0bfe78b 	ldhu	r2,-98(fp)
    66b4:	00010406 	br	6ac8 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    66b8:	e0fffd0b 	ldhu	r3,-12(fp)
    66bc:	e0bffe03 	ldbu	r2,-8(fp)
    66c0:	e13fff0b 	ldhu	r4,-4(fp)
    66c4:	e17ff704 	addi	r5,fp,-36
    66c8:	d9000015 	stw	r4,0(sp)
    66cc:	e13ffc17 	ldw	r4,-16(fp)
    66d0:	180d883a 	mov	r6,r3
    66d4:	100f883a 	mov	r7,r2
    66d8:	0006f9c0 	call	6f9c <OS_FlagBlock>
    66dc:	e0bfe617 	ldw	r2,-104(fp)
    66e0:	e0bfeb15 	stw	r2,-84(fp)
    66e4:	e0bfeb17 	ldw	r2,-84(fp)
    66e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    66ec:	00009506 	br	6944 <OSFlagPend+0x468>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    66f0:	e0bffc17 	ldw	r2,-16(fp)
    66f4:	10c0020b 	ldhu	r3,8(r2)
    66f8:	e0bffd0b 	ldhu	r2,-12(fp)
    66fc:	1884703a 	and	r2,r3,r2
    6700:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6704:	e0bfe78b 	ldhu	r2,-98(fp)
    6708:	10001926 	beq	r2,zero,6770 <OSFlagPend+0x294>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    670c:	e0bfe503 	ldbu	r2,-108(fp)
    6710:	10800058 	cmpnei	r2,r2,1
    6714:	1000091e 	bne	r2,zero,673c <OSFlagPend+0x260>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6718:	e0bffc17 	ldw	r2,-16(fp)
    671c:	1080020b 	ldhu	r2,8(r2)
    6720:	1007883a 	mov	r3,r2
    6724:	e0bfe78b 	ldhu	r2,-98(fp)
    6728:	0084303a 	nor	r2,zero,r2
    672c:	1884703a 	and	r2,r3,r2
    6730:	1007883a 	mov	r3,r2
    6734:	e0bffc17 	ldw	r2,-16(fp)
    6738:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    673c:	00800074 	movhi	r2,1
    6740:	1089f604 	addi	r2,r2,10200
    6744:	10800017 	ldw	r2,0(r2)
    6748:	e0ffe78b 	ldhu	r3,-98(fp)
    674c:	10c00b0d 	sth	r3,44(r2)
    6750:	e0bfe617 	ldw	r2,-104(fp)
    6754:	e0bfec15 	stw	r2,-80(fp)
    6758:	e0bfec17 	ldw	r2,-80(fp)
    675c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6760:	e0800217 	ldw	r2,8(fp)
    6764:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6768:	e0bfe78b 	ldhu	r2,-98(fp)
    676c:	0000d606 	br	6ac8 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6770:	e0fffd0b 	ldhu	r3,-12(fp)
    6774:	e0bffe03 	ldbu	r2,-8(fp)
    6778:	e13fff0b 	ldhu	r4,-4(fp)
    677c:	e17ff704 	addi	r5,fp,-36
    6780:	d9000015 	stw	r4,0(sp)
    6784:	e13ffc17 	ldw	r4,-16(fp)
    6788:	180d883a 	mov	r6,r3
    678c:	100f883a 	mov	r7,r2
    6790:	0006f9c0 	call	6f9c <OS_FlagBlock>
    6794:	e0bfe617 	ldw	r2,-104(fp)
    6798:	e0bfed15 	stw	r2,-76(fp)
    679c:	e0bfed17 	ldw	r2,-76(fp)
    67a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    67a4:	00006706 	br	6944 <OSFlagPend+0x468>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    67a8:	e0bffc17 	ldw	r2,-16(fp)
    67ac:	1080020b 	ldhu	r2,8(r2)
    67b0:	0084303a 	nor	r2,zero,r2
    67b4:	1007883a 	mov	r3,r2
    67b8:	e0bffd0b 	ldhu	r2,-12(fp)
    67bc:	1884703a 	and	r2,r3,r2
    67c0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    67c4:	e0ffe78b 	ldhu	r3,-98(fp)
    67c8:	e0bffd0b 	ldhu	r2,-12(fp)
    67cc:	1880171e 	bne	r3,r2,682c <OSFlagPend+0x350>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    67d0:	e0bfe503 	ldbu	r2,-108(fp)
    67d4:	10800058 	cmpnei	r2,r2,1
    67d8:	1000071e 	bne	r2,zero,67f8 <OSFlagPend+0x31c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    67dc:	e0bffc17 	ldw	r2,-16(fp)
    67e0:	10c0020b 	ldhu	r3,8(r2)
    67e4:	e0bfe78b 	ldhu	r2,-98(fp)
    67e8:	1884b03a 	or	r2,r3,r2
    67ec:	1007883a 	mov	r3,r2
    67f0:	e0bffc17 	ldw	r2,-16(fp)
    67f4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    67f8:	00800074 	movhi	r2,1
    67fc:	1089f604 	addi	r2,r2,10200
    6800:	10800017 	ldw	r2,0(r2)
    6804:	e0ffe78b 	ldhu	r3,-98(fp)
    6808:	10c00b0d 	sth	r3,44(r2)
    680c:	e0bfe617 	ldw	r2,-104(fp)
    6810:	e0bfee15 	stw	r2,-72(fp)
    6814:	e0bfee17 	ldw	r2,-72(fp)
    6818:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    681c:	e0800217 	ldw	r2,8(fp)
    6820:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6824:	e0bfe78b 	ldhu	r2,-98(fp)
    6828:	0000a706 	br	6ac8 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    682c:	e0fffd0b 	ldhu	r3,-12(fp)
    6830:	e0bffe03 	ldbu	r2,-8(fp)
    6834:	e13fff0b 	ldhu	r4,-4(fp)
    6838:	e17ff704 	addi	r5,fp,-36
    683c:	d9000015 	stw	r4,0(sp)
    6840:	e13ffc17 	ldw	r4,-16(fp)
    6844:	180d883a 	mov	r6,r3
    6848:	100f883a 	mov	r7,r2
    684c:	0006f9c0 	call	6f9c <OS_FlagBlock>
    6850:	e0bfe617 	ldw	r2,-104(fp)
    6854:	e0bfef15 	stw	r2,-68(fp)
    6858:	e0bfef17 	ldw	r2,-68(fp)
    685c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6860:	00003806 	br	6944 <OSFlagPend+0x468>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    6864:	e0bffc17 	ldw	r2,-16(fp)
    6868:	1080020b 	ldhu	r2,8(r2)
    686c:	0084303a 	nor	r2,zero,r2
    6870:	1007883a 	mov	r3,r2
    6874:	e0bffd0b 	ldhu	r2,-12(fp)
    6878:	1884703a 	and	r2,r3,r2
    687c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    6880:	e0bfe78b 	ldhu	r2,-98(fp)
    6884:	10001726 	beq	r2,zero,68e4 <OSFlagPend+0x408>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6888:	e0bfe503 	ldbu	r2,-108(fp)
    688c:	10800058 	cmpnei	r2,r2,1
    6890:	1000071e 	bne	r2,zero,68b0 <OSFlagPend+0x3d4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    6894:	e0bffc17 	ldw	r2,-16(fp)
    6898:	10c0020b 	ldhu	r3,8(r2)
    689c:	e0bfe78b 	ldhu	r2,-98(fp)
    68a0:	1884b03a 	or	r2,r3,r2
    68a4:	1007883a 	mov	r3,r2
    68a8:	e0bffc17 	ldw	r2,-16(fp)
    68ac:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    68b0:	00800074 	movhi	r2,1
    68b4:	1089f604 	addi	r2,r2,10200
    68b8:	10800017 	ldw	r2,0(r2)
    68bc:	e0ffe78b 	ldhu	r3,-98(fp)
    68c0:	10c00b0d 	sth	r3,44(r2)
    68c4:	e0bfe617 	ldw	r2,-104(fp)
    68c8:	e0bff015 	stw	r2,-64(fp)
    68cc:	e0bff017 	ldw	r2,-64(fp)
    68d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    68d4:	e0800217 	ldw	r2,8(fp)
    68d8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    68dc:	e0bfe78b 	ldhu	r2,-98(fp)
    68e0:	00007906 	br	6ac8 <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    68e4:	e0fffd0b 	ldhu	r3,-12(fp)
    68e8:	e0bffe03 	ldbu	r2,-8(fp)
    68ec:	e13fff0b 	ldhu	r4,-4(fp)
    68f0:	e17ff704 	addi	r5,fp,-36
    68f4:	d9000015 	stw	r4,0(sp)
    68f8:	e13ffc17 	ldw	r4,-16(fp)
    68fc:	180d883a 	mov	r6,r3
    6900:	100f883a 	mov	r7,r2
    6904:	0006f9c0 	call	6f9c <OS_FlagBlock>
    6908:	e0bfe617 	ldw	r2,-104(fp)
    690c:	e0bff115 	stw	r2,-60(fp)
    6910:	e0bff117 	ldw	r2,-60(fp)
    6914:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6918:	00000a06 	br	6944 <OSFlagPend+0x468>
    691c:	e0bfe617 	ldw	r2,-104(fp)
    6920:	e0bff215 	stw	r2,-56(fp)
    6924:	e0bff217 	ldw	r2,-56(fp)
    6928:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    692c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    6930:	e0800217 	ldw	r2,8(fp)
    6934:	00c01bc4 	movi	r3,111
    6938:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    693c:	e0bfe78b 	ldhu	r2,-98(fp)
    6940:	00006106 	br	6ac8 <OSFlagPend+0x5ec>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    6944:	000535c0 	call	535c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6948:	0005303a 	rdctl	r2,status
    694c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6950:	e0fff317 	ldw	r3,-52(fp)
    6954:	00bfff84 	movi	r2,-2
    6958:	1884703a 	and	r2,r3,r2
    695c:	1001703a 	wrctl	status,r2
  
  return context;
    6960:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
    6964:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    6968:	00800074 	movhi	r2,1
    696c:	1089f604 	addi	r2,r2,10200
    6970:	10800017 	ldw	r2,0(r2)
    6974:	10800c43 	ldbu	r2,49(r2)
    6978:	10803fcc 	andi	r2,r2,255
    697c:	10002226 	beq	r2,zero,6a08 <OSFlagPend+0x52c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    6980:	00800074 	movhi	r2,1
    6984:	1089f604 	addi	r2,r2,10200
    6988:	10800017 	ldw	r2,0(r2)
    698c:	10800c43 	ldbu	r2,49(r2)
    6990:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6994:	00800074 	movhi	r2,1
    6998:	1089f604 	addi	r2,r2,10200
    699c:	10800017 	ldw	r2,0(r2)
    69a0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    69a4:	e0bff704 	addi	r2,fp,-36
    69a8:	1009883a 	mov	r4,r2
    69ac:	000734c0 	call	734c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    69b0:	00800074 	movhi	r2,1
    69b4:	1089f604 	addi	r2,r2,10200
    69b8:	10800017 	ldw	r2,0(r2)
    69bc:	10000c05 	stb	zero,48(r2)
    69c0:	e0bfe617 	ldw	r2,-104(fp)
    69c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    69c8:	e0bff417 	ldw	r2,-48(fp)
    69cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    69d0:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
    69d4:	e0bfe803 	ldbu	r2,-96(fp)
    69d8:	108000a0 	cmpeqi	r2,r2,2
    69dc:	10000426 	beq	r2,zero,69f0 <OSFlagPend+0x514>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    69e0:	e0800217 	ldw	r2,8(fp)
    69e4:	00c00384 	movi	r3,14
    69e8:	10c00005 	stb	r3,0(r2)
                 break;
    69ec:	00000406 	br	6a00 <OSFlagPend+0x524>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    69f0:	e0800217 	ldw	r2,8(fp)
    69f4:	00c00284 	movi	r3,10
    69f8:	10c00005 	stb	r3,0(r2)
                 break;
    69fc:	0001883a 	nop
        }
        return (flags_rdy);
    6a00:	e0bfe78b 	ldhu	r2,-98(fp)
    6a04:	00003006 	br	6ac8 <OSFlagPend+0x5ec>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    6a08:	00800074 	movhi	r2,1
    6a0c:	1089f604 	addi	r2,r2,10200
    6a10:	10800017 	ldw	r2,0(r2)
    6a14:	10800b0b 	ldhu	r2,44(r2)
    6a18:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    6a1c:	e0bfe503 	ldbu	r2,-108(fp)
    6a20:	10800058 	cmpnei	r2,r2,1
    6a24:	1000211e 	bne	r2,zero,6aac <OSFlagPend+0x5d0>
        switch (wait_type) {
    6a28:	e0bffe03 	ldbu	r2,-8(fp)
    6a2c:	10001616 	blt	r2,zero,6a88 <OSFlagPend+0x5ac>
    6a30:	10c00090 	cmplti	r3,r2,2
    6a34:	18000c1e 	bne	r3,zero,6a68 <OSFlagPend+0x58c>
    6a38:	10800108 	cmpgei	r2,r2,4
    6a3c:	1000121e 	bne	r2,zero,6a88 <OSFlagPend+0x5ac>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    6a40:	e0bffc17 	ldw	r2,-16(fp)
    6a44:	1080020b 	ldhu	r2,8(r2)
    6a48:	1007883a 	mov	r3,r2
    6a4c:	e0bfe78b 	ldhu	r2,-98(fp)
    6a50:	0084303a 	nor	r2,zero,r2
    6a54:	1884703a 	and	r2,r3,r2
    6a58:	1007883a 	mov	r3,r2
    6a5c:	e0bffc17 	ldw	r2,-16(fp)
    6a60:	10c0020d 	sth	r3,8(r2)
                 break;
    6a64:	00001106 	br	6aac <OSFlagPend+0x5d0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    6a68:	e0bffc17 	ldw	r2,-16(fp)
    6a6c:	10c0020b 	ldhu	r3,8(r2)
    6a70:	e0bfe78b 	ldhu	r2,-98(fp)
    6a74:	1884b03a 	or	r2,r3,r2
    6a78:	1007883a 	mov	r3,r2
    6a7c:	e0bffc17 	ldw	r2,-16(fp)
    6a80:	10c0020d 	sth	r3,8(r2)
                 break;
    6a84:	00000906 	br	6aac <OSFlagPend+0x5d0>
    6a88:	e0bfe617 	ldw	r2,-104(fp)
    6a8c:	e0bff515 	stw	r2,-44(fp)
    6a90:	e0bff517 	ldw	r2,-44(fp)
    6a94:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    6a98:	e0800217 	ldw	r2,8(fp)
    6a9c:	00c01bc4 	movi	r3,111
    6aa0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6aa4:	0005883a 	mov	r2,zero
    6aa8:	00000706 	br	6ac8 <OSFlagPend+0x5ec>
    6aac:	e0bfe617 	ldw	r2,-104(fp)
    6ab0:	e0bff615 	stw	r2,-40(fp)
    6ab4:	e0bff617 	ldw	r2,-40(fp)
    6ab8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    6abc:	e0800217 	ldw	r2,8(fp)
    6ac0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    6ac4:	e0bfe78b 	ldhu	r2,-98(fp)
}
    6ac8:	e037883a 	mov	sp,fp
    6acc:	dfc00117 	ldw	ra,4(sp)
    6ad0:	df000017 	ldw	fp,0(sp)
    6ad4:	dec00204 	addi	sp,sp,8
    6ad8:	f800283a 	ret

00006adc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    6adc:	defffb04 	addi	sp,sp,-20
    6ae0:	df000415 	stw	fp,16(sp)
    6ae4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6ae8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6aec:	0005303a 	rdctl	r2,status
    6af0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6af4:	e0fffe17 	ldw	r3,-8(fp)
    6af8:	00bfff84 	movi	r2,-2
    6afc:	1884703a 	and	r2,r3,r2
    6b00:	1001703a 	wrctl	status,r2
  
  return context;
    6b04:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    6b08:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    6b0c:	00800074 	movhi	r2,1
    6b10:	1089f604 	addi	r2,r2,10200
    6b14:	10800017 	ldw	r2,0(r2)
    6b18:	10800b0b 	ldhu	r2,44(r2)
    6b1c:	e0bffd0d 	sth	r2,-12(fp)
    6b20:	e0bffc17 	ldw	r2,-16(fp)
    6b24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6b28:	e0bfff17 	ldw	r2,-4(fp)
    6b2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    6b30:	e0bffd0b 	ldhu	r2,-12(fp)
}
    6b34:	e037883a 	mov	sp,fp
    6b38:	df000017 	ldw	fp,0(sp)
    6b3c:	dec00104 	addi	sp,sp,4
    6b40:	f800283a 	ret

00006b44 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    6b44:	deffef04 	addi	sp,sp,-68
    6b48:	dfc01015 	stw	ra,64(sp)
    6b4c:	df000f15 	stw	fp,60(sp)
    6b50:	df000f04 	addi	fp,sp,60
    6b54:	e13ffc15 	stw	r4,-16(fp)
    6b58:	2807883a 	mov	r3,r5
    6b5c:	3005883a 	mov	r2,r6
    6b60:	e1ffff15 	stw	r7,-4(fp)
    6b64:	e0fffd0d 	sth	r3,-12(fp)
    6b68:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    6b6c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    6b70:	e0bfff17 	ldw	r2,-4(fp)
    6b74:	1000021e 	bne	r2,zero,6b80 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    6b78:	0005883a 	mov	r2,zero
    6b7c:	0000d106 	br	6ec4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    6b80:	e0bffc17 	ldw	r2,-16(fp)
    6b84:	1000051e 	bne	r2,zero,6b9c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6b88:	e0bfff17 	ldw	r2,-4(fp)
    6b8c:	00c01b84 	movi	r3,110
    6b90:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6b94:	0005883a 	mov	r2,zero
    6b98:	0000ca06 	br	6ec4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    6b9c:	e0bffc17 	ldw	r2,-16(fp)
    6ba0:	10800003 	ldbu	r2,0(r2)
    6ba4:	10803fcc 	andi	r2,r2,255
    6ba8:	10800160 	cmpeqi	r2,r2,5
    6bac:	1000051e 	bne	r2,zero,6bc4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    6bb0:	e0bfff17 	ldw	r2,-4(fp)
    6bb4:	00c00044 	movi	r3,1
    6bb8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6bbc:	0005883a 	mov	r2,zero
    6bc0:	0000c006 	br	6ec4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6bc4:	0005303a 	rdctl	r2,status
    6bc8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6bcc:	e0fff617 	ldw	r3,-40(fp)
    6bd0:	00bfff84 	movi	r2,-2
    6bd4:	1884703a 	and	r2,r3,r2
    6bd8:	1001703a 	wrctl	status,r2
  
  return context;
    6bdc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6be0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    6be4:	e0bffe03 	ldbu	r2,-8(fp)
    6be8:	10000326 	beq	r2,zero,6bf8 <OSFlagPost+0xb4>
    6bec:	10800060 	cmpeqi	r2,r2,1
    6bf0:	10000b1e 	bne	r2,zero,6c20 <OSFlagPost+0xdc>
    6bf4:	00001206 	br	6c40 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    6bf8:	e0bffc17 	ldw	r2,-16(fp)
    6bfc:	1080020b 	ldhu	r2,8(r2)
    6c00:	1007883a 	mov	r3,r2
    6c04:	e0bffd0b 	ldhu	r2,-12(fp)
    6c08:	0084303a 	nor	r2,zero,r2
    6c0c:	1884703a 	and	r2,r3,r2
    6c10:	1007883a 	mov	r3,r2
    6c14:	e0bffc17 	ldw	r2,-16(fp)
    6c18:	10c0020d 	sth	r3,8(r2)
             break;
    6c1c:	00001106 	br	6c64 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    6c20:	e0bffc17 	ldw	r2,-16(fp)
    6c24:	10c0020b 	ldhu	r3,8(r2)
    6c28:	e0bffd0b 	ldhu	r2,-12(fp)
    6c2c:	1884b03a 	or	r2,r3,r2
    6c30:	1007883a 	mov	r3,r2
    6c34:	e0bffc17 	ldw	r2,-16(fp)
    6c38:	10c0020d 	sth	r3,8(r2)
             break;
    6c3c:	00000906 	br	6c64 <OSFlagPost+0x120>
    6c40:	e0bff317 	ldw	r2,-52(fp)
    6c44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6c48:	e0bff717 	ldw	r2,-36(fp)
    6c4c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    6c50:	e0bfff17 	ldw	r2,-4(fp)
    6c54:	00c01c44 	movi	r3,113
    6c58:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    6c5c:	0005883a 	mov	r2,zero
    6c60:	00009806 	br	6ec4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    6c64:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    6c68:	e0bffc17 	ldw	r2,-16(fp)
    6c6c:	10800117 	ldw	r2,4(r2)
    6c70:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    6c74:	00007706 	br	6e54 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
    6c78:	e0bff117 	ldw	r2,-60(fp)
    6c7c:	10800483 	ldbu	r2,18(r2)
    6c80:	10803fcc 	andi	r2,r2,255
    6c84:	10c00060 	cmpeqi	r3,r2,1
    6c88:	18004a1e 	bne	r3,zero,6db4 <OSFlagPost+0x270>
    6c8c:	10c00088 	cmpgei	r3,r2,2
    6c90:	1800021e 	bne	r3,zero,6c9c <OSFlagPost+0x158>
    6c94:	10002f26 	beq	r2,zero,6d54 <OSFlagPost+0x210>
    6c98:	00005b06 	br	6e08 <OSFlagPost+0x2c4>
    6c9c:	10c000a0 	cmpeqi	r3,r2,2
    6ca0:	1800031e 	bne	r3,zero,6cb0 <OSFlagPost+0x16c>
    6ca4:	108000e0 	cmpeqi	r2,r2,3
    6ca8:	1000171e 	bne	r2,zero,6d08 <OSFlagPost+0x1c4>
    6cac:	00005606 	br	6e08 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6cb0:	e0bffc17 	ldw	r2,-16(fp)
    6cb4:	10c0020b 	ldhu	r3,8(r2)
    6cb8:	e0bff117 	ldw	r2,-60(fp)
    6cbc:	1080040b 	ldhu	r2,16(r2)
    6cc0:	1884703a 	and	r2,r3,r2
    6cc4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    6cc8:	e0bff117 	ldw	r2,-60(fp)
    6ccc:	1080040b 	ldhu	r2,16(r2)
    6cd0:	10ffffcc 	andi	r3,r2,65535
    6cd4:	e0bff40b 	ldhu	r2,-48(fp)
    6cd8:	1880541e 	bne	r3,r2,6e2c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6cdc:	e0bff40b 	ldhu	r2,-48(fp)
    6ce0:	e13ff117 	ldw	r4,-60(fp)
    6ce4:	100b883a 	mov	r5,r2
    6ce8:	00072400 	call	7240 <OS_FlagTaskRdy>
    6cec:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    6cf0:	e0bff483 	ldbu	r2,-46(fp)
    6cf4:	10800058 	cmpnei	r2,r2,1
    6cf8:	10004c1e 	bne	r2,zero,6e2c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6cfc:	00800044 	movi	r2,1
    6d00:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6d04:	00004906 	br	6e2c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6d08:	e0bffc17 	ldw	r2,-16(fp)
    6d0c:	10c0020b 	ldhu	r3,8(r2)
    6d10:	e0bff117 	ldw	r2,-60(fp)
    6d14:	1080040b 	ldhu	r2,16(r2)
    6d18:	1884703a 	and	r2,r3,r2
    6d1c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    6d20:	e0bff40b 	ldhu	r2,-48(fp)
    6d24:	10004326 	beq	r2,zero,6e34 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6d28:	e0bff40b 	ldhu	r2,-48(fp)
    6d2c:	e13ff117 	ldw	r4,-60(fp)
    6d30:	100b883a 	mov	r5,r2
    6d34:	00072400 	call	7240 <OS_FlagTaskRdy>
    6d38:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    6d3c:	e0bff483 	ldbu	r2,-46(fp)
    6d40:	10800058 	cmpnei	r2,r2,1
    6d44:	10003b1e 	bne	r2,zero,6e34 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6d48:	00800044 	movi	r2,1
    6d4c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6d50:	00003806 	br	6e34 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6d54:	e0bffc17 	ldw	r2,-16(fp)
    6d58:	1080020b 	ldhu	r2,8(r2)
    6d5c:	0084303a 	nor	r2,zero,r2
    6d60:	1007883a 	mov	r3,r2
    6d64:	e0bff117 	ldw	r2,-60(fp)
    6d68:	1080040b 	ldhu	r2,16(r2)
    6d6c:	1884703a 	and	r2,r3,r2
    6d70:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    6d74:	e0bff117 	ldw	r2,-60(fp)
    6d78:	1080040b 	ldhu	r2,16(r2)
    6d7c:	10ffffcc 	andi	r3,r2,65535
    6d80:	e0bff40b 	ldhu	r2,-48(fp)
    6d84:	18802d1e 	bne	r3,r2,6e3c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6d88:	e0bff40b 	ldhu	r2,-48(fp)
    6d8c:	e13ff117 	ldw	r4,-60(fp)
    6d90:	100b883a 	mov	r5,r2
    6d94:	00072400 	call	7240 <OS_FlagTaskRdy>
    6d98:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    6d9c:	e0bff483 	ldbu	r2,-46(fp)
    6da0:	10800058 	cmpnei	r2,r2,1
    6da4:	1000251e 	bne	r2,zero,6e3c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6da8:	00800044 	movi	r2,1
    6dac:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6db0:	00002206 	br	6e3c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6db4:	e0bffc17 	ldw	r2,-16(fp)
    6db8:	1080020b 	ldhu	r2,8(r2)
    6dbc:	0084303a 	nor	r2,zero,r2
    6dc0:	1007883a 	mov	r3,r2
    6dc4:	e0bff117 	ldw	r2,-60(fp)
    6dc8:	1080040b 	ldhu	r2,16(r2)
    6dcc:	1884703a 	and	r2,r3,r2
    6dd0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    6dd4:	e0bff40b 	ldhu	r2,-48(fp)
    6dd8:	10001a26 	beq	r2,zero,6e44 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6ddc:	e0bff40b 	ldhu	r2,-48(fp)
    6de0:	e13ff117 	ldw	r4,-60(fp)
    6de4:	100b883a 	mov	r5,r2
    6de8:	00072400 	call	7240 <OS_FlagTaskRdy>
    6dec:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    6df0:	e0bff483 	ldbu	r2,-46(fp)
    6df4:	10800058 	cmpnei	r2,r2,1
    6df8:	1000121e 	bne	r2,zero,6e44 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6dfc:	00800044 	movi	r2,1
    6e00:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6e04:	00000f06 	br	6e44 <OSFlagPost+0x300>
    6e08:	e0bff317 	ldw	r2,-52(fp)
    6e0c:	e0bff815 	stw	r2,-32(fp)
    6e10:	e0bff817 	ldw	r2,-32(fp)
    6e14:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    6e18:	e0bfff17 	ldw	r2,-4(fp)
    6e1c:	00c01bc4 	movi	r3,111
    6e20:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6e24:	0005883a 	mov	r2,zero
    6e28:	00002606 	br	6ec4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6e2c:	0001883a 	nop
    6e30:	00000506 	br	6e48 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6e34:	0001883a 	nop
    6e38:	00000306 	br	6e48 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6e3c:	0001883a 	nop
    6e40:	00000106 	br	6e48 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6e44:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    6e48:	e0bff117 	ldw	r2,-60(fp)
    6e4c:	10800017 	ldw	r2,0(r2)
    6e50:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    6e54:	e0bff117 	ldw	r2,-60(fp)
    6e58:	103f871e 	bne	r2,zero,6c78 <OSFlagPost+0x134>
    6e5c:	e0bff317 	ldw	r2,-52(fp)
    6e60:	e0bff915 	stw	r2,-28(fp)
    6e64:	e0bff917 	ldw	r2,-28(fp)
    6e68:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    6e6c:	e0bff203 	ldbu	r2,-56(fp)
    6e70:	10800058 	cmpnei	r2,r2,1
    6e74:	1000011e 	bne	r2,zero,6e7c <OSFlagPost+0x338>
        OS_Sched();
    6e78:	000535c0 	call	535c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6e7c:	0005303a 	rdctl	r2,status
    6e80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6e84:	e0fffa17 	ldw	r3,-24(fp)
    6e88:	00bfff84 	movi	r2,-2
    6e8c:	1884703a 	and	r2,r3,r2
    6e90:	1001703a 	wrctl	status,r2
  
  return context;
    6e94:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    6e98:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    6e9c:	e0bffc17 	ldw	r2,-16(fp)
    6ea0:	1080020b 	ldhu	r2,8(r2)
    6ea4:	e0bff50d 	sth	r2,-44(fp)
    6ea8:	e0bff317 	ldw	r2,-52(fp)
    6eac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6eb0:	e0bffb17 	ldw	r2,-20(fp)
    6eb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    6eb8:	e0bfff17 	ldw	r2,-4(fp)
    6ebc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    6ec0:	e0bff50b 	ldhu	r2,-44(fp)
}
    6ec4:	e037883a 	mov	sp,fp
    6ec8:	dfc00117 	ldw	ra,4(sp)
    6ecc:	df000017 	ldw	fp,0(sp)
    6ed0:	dec00204 	addi	sp,sp,8
    6ed4:	f800283a 	ret

00006ed8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    6ed8:	defff904 	addi	sp,sp,-28
    6edc:	df000615 	stw	fp,24(sp)
    6ee0:	df000604 	addi	fp,sp,24
    6ee4:	e13ffe15 	stw	r4,-8(fp)
    6ee8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    6eec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    6ef0:	e0bfff17 	ldw	r2,-4(fp)
    6ef4:	1000021e 	bne	r2,zero,6f00 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    6ef8:	0005883a 	mov	r2,zero
    6efc:	00002306 	br	6f8c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    6f00:	e0bffe17 	ldw	r2,-8(fp)
    6f04:	1000051e 	bne	r2,zero,6f1c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6f08:	e0bfff17 	ldw	r2,-4(fp)
    6f0c:	00c01b84 	movi	r3,110
    6f10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6f14:	0005883a 	mov	r2,zero
    6f18:	00001c06 	br	6f8c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    6f1c:	e0bffe17 	ldw	r2,-8(fp)
    6f20:	10800003 	ldbu	r2,0(r2)
    6f24:	10803fcc 	andi	r2,r2,255
    6f28:	10800160 	cmpeqi	r2,r2,5
    6f2c:	1000051e 	bne	r2,zero,6f44 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    6f30:	e0bfff17 	ldw	r2,-4(fp)
    6f34:	00c00044 	movi	r3,1
    6f38:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6f3c:	0005883a 	mov	r2,zero
    6f40:	00001206 	br	6f8c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6f44:	0005303a 	rdctl	r2,status
    6f48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6f4c:	e0fffc17 	ldw	r3,-16(fp)
    6f50:	00bfff84 	movi	r2,-2
    6f54:	1884703a 	and	r2,r3,r2
    6f58:	1001703a 	wrctl	status,r2
  
  return context;
    6f5c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6f60:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    6f64:	e0bffe17 	ldw	r2,-8(fp)
    6f68:	1080020b 	ldhu	r2,8(r2)
    6f6c:	e0bffb0d 	sth	r2,-20(fp)
    6f70:	e0bffa17 	ldw	r2,-24(fp)
    6f74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f78:	e0bffd17 	ldw	r2,-12(fp)
    6f7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6f80:	e0bfff17 	ldw	r2,-4(fp)
    6f84:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    6f88:	e0bffb0b 	ldhu	r2,-20(fp)
}
    6f8c:	e037883a 	mov	sp,fp
    6f90:	df000017 	ldw	fp,0(sp)
    6f94:	dec00104 	addi	sp,sp,4
    6f98:	f800283a 	ret

00006f9c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    6f9c:	defff804 	addi	sp,sp,-32
    6fa0:	df000715 	stw	fp,28(sp)
    6fa4:	df000704 	addi	fp,sp,28
    6fa8:	e13ffb15 	stw	r4,-20(fp)
    6fac:	e17ffc15 	stw	r5,-16(fp)
    6fb0:	3007883a 	mov	r3,r6
    6fb4:	3805883a 	mov	r2,r7
    6fb8:	e1000117 	ldw	r4,4(fp)
    6fbc:	e0fffd0d 	sth	r3,-12(fp)
    6fc0:	e0bffe05 	stb	r2,-8(fp)
    6fc4:	e13fff0d 	sth	r4,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    6fc8:	00800074 	movhi	r2,1
    6fcc:	1089f604 	addi	r2,r2,10200
    6fd0:	10800017 	ldw	r2,0(r2)
    6fd4:	00c00074 	movhi	r3,1
    6fd8:	18c9f604 	addi	r3,r3,10200
    6fdc:	18c00017 	ldw	r3,0(r3)
    6fe0:	18c00c03 	ldbu	r3,48(r3)
    6fe4:	18c00814 	ori	r3,r3,32
    6fe8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    6fec:	00800074 	movhi	r2,1
    6ff0:	1089f604 	addi	r2,r2,10200
    6ff4:	10800017 	ldw	r2,0(r2)
    6ff8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    6ffc:	00800074 	movhi	r2,1
    7000:	1089f604 	addi	r2,r2,10200
    7004:	10800017 	ldw	r2,0(r2)
    7008:	e0ffff0b 	ldhu	r3,-4(fp)
    700c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    7010:	00800074 	movhi	r2,1
    7014:	1089f604 	addi	r2,r2,10200
    7018:	10800017 	ldw	r2,0(r2)
    701c:	e0fffc17 	ldw	r3,-16(fp)
    7020:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    7024:	e0bffc17 	ldw	r2,-16(fp)
    7028:	e0fffd0b 	ldhu	r3,-12(fp)
    702c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    7030:	e0bffc17 	ldw	r2,-16(fp)
    7034:	e0fffe03 	ldbu	r3,-8(fp)
    7038:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    703c:	00800074 	movhi	r2,1
    7040:	1089f604 	addi	r2,r2,10200
    7044:	10c00017 	ldw	r3,0(r2)
    7048:	e0bffc17 	ldw	r2,-16(fp)
    704c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    7050:	e0bffb17 	ldw	r2,-20(fp)
    7054:	10c00117 	ldw	r3,4(r2)
    7058:	e0bffc17 	ldw	r2,-16(fp)
    705c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    7060:	e0bffc17 	ldw	r2,-16(fp)
    7064:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    7068:	e0bffc17 	ldw	r2,-16(fp)
    706c:	e0fffb17 	ldw	r3,-20(fp)
    7070:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7074:	e0bffb17 	ldw	r2,-20(fp)
    7078:	10800117 	ldw	r2,4(r2)
    707c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    7080:	e0bff917 	ldw	r2,-28(fp)
    7084:	10000326 	beq	r2,zero,7094 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    7088:	e0bff917 	ldw	r2,-28(fp)
    708c:	e0fffc17 	ldw	r3,-16(fp)
    7090:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    7094:	e0bffb17 	ldw	r2,-20(fp)
    7098:	e0fffc17 	ldw	r3,-16(fp)
    709c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    70a0:	00800074 	movhi	r2,1
    70a4:	1089f604 	addi	r2,r2,10200
    70a8:	10800017 	ldw	r2,0(r2)
    70ac:	10800d03 	ldbu	r2,52(r2)
    70b0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    70b4:	e0bffa03 	ldbu	r2,-24(fp)
    70b8:	e0fffa03 	ldbu	r3,-24(fp)
    70bc:	01000074 	movhi	r4,1
    70c0:	2109f244 	addi	r4,r4,10185
    70c4:	20c7883a 	add	r3,r4,r3
    70c8:	18c00003 	ldbu	r3,0(r3)
    70cc:	1809883a 	mov	r4,r3
    70d0:	00c00074 	movhi	r3,1
    70d4:	18c9f604 	addi	r3,r3,10200
    70d8:	18c00017 	ldw	r3,0(r3)
    70dc:	18c00d43 	ldbu	r3,53(r3)
    70e0:	00c6303a 	nor	r3,zero,r3
    70e4:	20c6703a 	and	r3,r4,r3
    70e8:	01000074 	movhi	r4,1
    70ec:	2109f244 	addi	r4,r4,10185
    70f0:	2085883a 	add	r2,r4,r2
    70f4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    70f8:	e0bffa03 	ldbu	r2,-24(fp)
    70fc:	00c00074 	movhi	r3,1
    7100:	18c9f244 	addi	r3,r3,10185
    7104:	1885883a 	add	r2,r3,r2
    7108:	10800003 	ldbu	r2,0(r2)
    710c:	10803fcc 	andi	r2,r2,255
    7110:	10000e1e 	bne	r2,zero,714c <OS_FlagBlock+0x1b0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    7114:	00800074 	movhi	r2,1
    7118:	1089f604 	addi	r2,r2,10200
    711c:	10800017 	ldw	r2,0(r2)
    7120:	10800d83 	ldbu	r2,54(r2)
    7124:	0084303a 	nor	r2,zero,r2
    7128:	1007883a 	mov	r3,r2
    712c:	00800074 	movhi	r2,1
    7130:	1089f204 	addi	r2,r2,10184
    7134:	10800003 	ldbu	r2,0(r2)
    7138:	1884703a 	and	r2,r3,r2
    713c:	1007883a 	mov	r3,r2
    7140:	00800074 	movhi	r2,1
    7144:	1089f204 	addi	r2,r2,10184
    7148:	10c00005 	stb	r3,0(r2)
    }
}
    714c:	e037883a 	mov	sp,fp
    7150:	df000017 	ldw	fp,0(sp)
    7154:	dec00104 	addi	sp,sp,4
    7158:	f800283a 	ret

0000715c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    715c:	defffb04 	addi	sp,sp,-20
    7160:	dfc00415 	stw	ra,16(sp)
    7164:	df000315 	stw	fp,12(sp)
    7168:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    716c:	01000074 	movhi	r4,1
    7170:	211a0804 	addi	r4,r4,26656
    7174:	0140dc04 	movi	r5,880
    7178:	000529c0 	call	529c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    717c:	00800074 	movhi	r2,1
    7180:	109a0804 	addi	r2,r2,26656
    7184:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    7188:	00800074 	movhi	r2,1
    718c:	109a1304 	addi	r2,r2,26700
    7190:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    7194:	e03ffd0d 	sth	zero,-12(fp)
    7198:	00001306 	br	71e8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    719c:	e0bffe17 	ldw	r2,-8(fp)
    71a0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    71a4:	e0bffe17 	ldw	r2,-8(fp)
    71a8:	e0ffff17 	ldw	r3,-4(fp)
    71ac:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    71b0:	e0bffe17 	ldw	r2,-8(fp)
    71b4:	00c00fc4 	movi	r3,63
    71b8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    71bc:	e0bffe17 	ldw	r2,-8(fp)
    71c0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    71c4:	e0bffe17 	ldw	r2,-8(fp)
    71c8:	10800b04 	addi	r2,r2,44
    71cc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    71d0:	e0bfff17 	ldw	r2,-4(fp)
    71d4:	10800b04 	addi	r2,r2,44
    71d8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    71dc:	e0bffd0b 	ldhu	r2,-12(fp)
    71e0:	10800044 	addi	r2,r2,1
    71e4:	e0bffd0d 	sth	r2,-12(fp)
    71e8:	e0bffd0b 	ldhu	r2,-12(fp)
    71ec:	108004f0 	cmpltui	r2,r2,19
    71f0:	103fea1e 	bne	r2,zero,719c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    71f4:	e0bffe17 	ldw	r2,-8(fp)
    71f8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    71fc:	e0bffe17 	ldw	r2,-8(fp)
    7200:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    7204:	e0bffe17 	ldw	r2,-8(fp)
    7208:	00c00fc4 	movi	r3,63
    720c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    7210:	e0bffe17 	ldw	r2,-8(fp)
    7214:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    7218:	00800074 	movhi	r2,1
    721c:	1089f804 	addi	r2,r2,10208
    7220:	00c00074 	movhi	r3,1
    7224:	18da0804 	addi	r3,r3,26656
    7228:	10c00015 	stw	r3,0(r2)
#endif
}
    722c:	e037883a 	mov	sp,fp
    7230:	dfc00117 	ldw	ra,4(sp)
    7234:	df000017 	ldw	fp,0(sp)
    7238:	dec00204 	addi	sp,sp,8
    723c:	f800283a 	ret

00007240 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    7240:	defffa04 	addi	sp,sp,-24
    7244:	dfc00515 	stw	ra,20(sp)
    7248:	df000415 	stw	fp,16(sp)
    724c:	df000404 	addi	fp,sp,16
    7250:	e13ffe15 	stw	r4,-8(fp)
    7254:	2805883a 	mov	r2,r5
    7258:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    725c:	e0bffe17 	ldw	r2,-8(fp)
    7260:	10800217 	ldw	r2,8(r2)
    7264:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    7268:	e0bffd17 	ldw	r2,-12(fp)
    726c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    7270:	e0bffd17 	ldw	r2,-12(fp)
    7274:	e0ffff0b 	ldhu	r3,-4(fp)
    7278:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    727c:	e0bffd17 	ldw	r2,-12(fp)
    7280:	10c00c03 	ldbu	r3,48(r2)
    7284:	00bff7c4 	movi	r2,-33
    7288:	1884703a 	and	r2,r3,r2
    728c:	1007883a 	mov	r3,r2
    7290:	e0bffd17 	ldw	r2,-12(fp)
    7294:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    7298:	e0bffd17 	ldw	r2,-12(fp)
    729c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    72a0:	e0bffd17 	ldw	r2,-12(fp)
    72a4:	10800c03 	ldbu	r2,48(r2)
    72a8:	10803fcc 	andi	r2,r2,255
    72ac:	10001e1e 	bne	r2,zero,7328 <OS_FlagTaskRdy+0xe8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    72b0:	e0bffd17 	ldw	r2,-12(fp)
    72b4:	10c00d83 	ldbu	r3,54(r2)
    72b8:	00800074 	movhi	r2,1
    72bc:	1089f204 	addi	r2,r2,10184
    72c0:	10800003 	ldbu	r2,0(r2)
    72c4:	1884b03a 	or	r2,r3,r2
    72c8:	1007883a 	mov	r3,r2
    72cc:	00800074 	movhi	r2,1
    72d0:	1089f204 	addi	r2,r2,10184
    72d4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    72d8:	e0bffd17 	ldw	r2,-12(fp)
    72dc:	10800d03 	ldbu	r2,52(r2)
    72e0:	10803fcc 	andi	r2,r2,255
    72e4:	e0fffd17 	ldw	r3,-12(fp)
    72e8:	18c00d03 	ldbu	r3,52(r3)
    72ec:	18c03fcc 	andi	r3,r3,255
    72f0:	01000074 	movhi	r4,1
    72f4:	2109f244 	addi	r4,r4,10185
    72f8:	20c7883a 	add	r3,r4,r3
    72fc:	19000003 	ldbu	r4,0(r3)
    7300:	e0fffd17 	ldw	r3,-12(fp)
    7304:	18c00d43 	ldbu	r3,53(r3)
    7308:	20c6b03a 	or	r3,r4,r3
    730c:	01000074 	movhi	r4,1
    7310:	2109f244 	addi	r4,r4,10185
    7314:	2085883a 	add	r2,r4,r2
    7318:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
    731c:	00800044 	movi	r2,1
    7320:	e0bffc05 	stb	r2,-16(fp)
    7324:	00000106 	br	732c <OS_FlagTaskRdy+0xec>
    } else {
        sched                   = OS_FALSE;
    7328:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    732c:	e13ffe17 	ldw	r4,-8(fp)
    7330:	000734c0 	call	734c <OS_FlagUnlink>
    return (sched);
    7334:	e0bffc03 	ldbu	r2,-16(fp)
}
    7338:	e037883a 	mov	sp,fp
    733c:	dfc00117 	ldw	ra,4(sp)
    7340:	df000017 	ldw	fp,0(sp)
    7344:	dec00204 	addi	sp,sp,8
    7348:	f800283a 	ret

0000734c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    734c:	defffa04 	addi	sp,sp,-24
    7350:	df000515 	stw	fp,20(sp)
    7354:	df000504 	addi	fp,sp,20
    7358:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    735c:	e0bfff17 	ldw	r2,-4(fp)
    7360:	10800117 	ldw	r2,4(r2)
    7364:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    7368:	e0bfff17 	ldw	r2,-4(fp)
    736c:	10800017 	ldw	r2,0(r2)
    7370:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    7374:	e0bffb17 	ldw	r2,-20(fp)
    7378:	10000b1e 	bne	r2,zero,73a8 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    737c:	e0bfff17 	ldw	r2,-4(fp)
    7380:	10800317 	ldw	r2,12(r2)
    7384:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    7388:	e0bffd17 	ldw	r2,-12(fp)
    738c:	e0fffc17 	ldw	r3,-16(fp)
    7390:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    7394:	e0bffc17 	ldw	r2,-16(fp)
    7398:	10000b26 	beq	r2,zero,73c8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    739c:	e0bffc17 	ldw	r2,-16(fp)
    73a0:	10000115 	stw	zero,4(r2)
    73a4:	00000806 	br	73c8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    73a8:	e0bffb17 	ldw	r2,-20(fp)
    73ac:	e0fffc17 	ldw	r3,-16(fp)
    73b0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    73b4:	e0bffc17 	ldw	r2,-16(fp)
    73b8:	10000326 	beq	r2,zero,73c8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    73bc:	e0bffc17 	ldw	r2,-16(fp)
    73c0:	e0fffb17 	ldw	r3,-20(fp)
    73c4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    73c8:	e0bfff17 	ldw	r2,-4(fp)
    73cc:	10800217 	ldw	r2,8(r2)
    73d0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    73d4:	e0bffe17 	ldw	r2,-8(fp)
    73d8:	10000a15 	stw	zero,40(r2)
#endif
}
    73dc:	e037883a 	mov	sp,fp
    73e0:	df000017 	ldw	fp,0(sp)
    73e4:	dec00104 	addi	sp,sp,4
    73e8:	f800283a 	ret

000073ec <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    73ec:	defff404 	addi	sp,sp,-48
    73f0:	df000b15 	stw	fp,44(sp)
    73f4:	df000b04 	addi	fp,sp,44
    73f8:	e13ffc15 	stw	r4,-16(fp)
    73fc:	e17ffd15 	stw	r5,-12(fp)
    7400:	e1bffe15 	stw	r6,-8(fp)
    7404:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7408:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    740c:	e0bfff17 	ldw	r2,-4(fp)
    7410:	1000021e 	bne	r2,zero,741c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    7414:	0005883a 	mov	r2,zero
    7418:	00006d06 	br	75d0 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    741c:	e0bffc17 	ldw	r2,-16(fp)
    7420:	1000051e 	bne	r2,zero,7438 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7424:	e0bfff17 	ldw	r2,-4(fp)
    7428:	00c01884 	movi	r3,98
    742c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7430:	0005883a 	mov	r2,zero
    7434:	00006606 	br	75d0 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    7438:	e0bffc17 	ldw	r2,-16(fp)
    743c:	108000cc 	andi	r2,r2,3
    7440:	10000526 	beq	r2,zero,7458 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7444:	e0bfff17 	ldw	r2,-4(fp)
    7448:	00c01884 	movi	r3,98
    744c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7450:	0005883a 	mov	r2,zero
    7454:	00005e06 	br	75d0 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    7458:	e0bffd17 	ldw	r2,-12(fp)
    745c:	108000a8 	cmpgeui	r2,r2,2
    7460:	1000051e 	bne	r2,zero,7478 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    7464:	e0bfff17 	ldw	r2,-4(fp)
    7468:	00c016c4 	movi	r3,91
    746c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7470:	0005883a 	mov	r2,zero
    7474:	00005606 	br	75d0 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    7478:	e0bffe17 	ldw	r2,-8(fp)
    747c:	10800128 	cmpgeui	r2,r2,4
    7480:	1000051e 	bne	r2,zero,7498 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    7484:	e0bfff17 	ldw	r2,-4(fp)
    7488:	00c01704 	movi	r3,92
    748c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7490:	0005883a 	mov	r2,zero
    7494:	00004e06 	br	75d0 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7498:	0005303a 	rdctl	r2,status
    749c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    74a0:	e0fffa17 	ldw	r3,-24(fp)
    74a4:	00bfff84 	movi	r2,-2
    74a8:	1884703a 	and	r2,r3,r2
    74ac:	1001703a 	wrctl	status,r2
  
  return context;
    74b0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    74b4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    74b8:	00800074 	movhi	r2,1
    74bc:	1089ef04 	addi	r2,r2,10172
    74c0:	10800017 	ldw	r2,0(r2)
    74c4:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    74c8:	00800074 	movhi	r2,1
    74cc:	1089ef04 	addi	r2,r2,10172
    74d0:	10800017 	ldw	r2,0(r2)
    74d4:	10000726 	beq	r2,zero,74f4 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    74d8:	00800074 	movhi	r2,1
    74dc:	1089ef04 	addi	r2,r2,10172
    74e0:	10800017 	ldw	r2,0(r2)
    74e4:	10c00117 	ldw	r3,4(r2)
    74e8:	00800074 	movhi	r2,1
    74ec:	1089ef04 	addi	r2,r2,10172
    74f0:	10c00015 	stw	r3,0(r2)
    74f4:	e0bff817 	ldw	r2,-32(fp)
    74f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    74fc:	e0bffb17 	ldw	r2,-20(fp)
    7500:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    7504:	e0bff917 	ldw	r2,-28(fp)
    7508:	1000051e 	bne	r2,zero,7520 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    750c:	e0bfff17 	ldw	r2,-4(fp)
    7510:	00c01684 	movi	r3,90
    7514:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7518:	0005883a 	mov	r2,zero
    751c:	00002c06 	br	75d0 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    7520:	e0bffc17 	ldw	r2,-16(fp)
    7524:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    7528:	e0fffc17 	ldw	r3,-16(fp)
    752c:	e0bffe17 	ldw	r2,-8(fp)
    7530:	1885883a 	add	r2,r3,r2
    7534:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    7538:	e03ff715 	stw	zero,-36(fp)
    753c:	00000c06 	br	7570 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    7540:	e0bff617 	ldw	r2,-40(fp)
    7544:	e0fff517 	ldw	r3,-44(fp)
    7548:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    754c:	e0bff517 	ldw	r2,-44(fp)
    7550:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    7554:	e0fff517 	ldw	r3,-44(fp)
    7558:	e0bffe17 	ldw	r2,-8(fp)
    755c:	1885883a 	add	r2,r3,r2
    7560:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    7564:	e0bff717 	ldw	r2,-36(fp)
    7568:	10800044 	addi	r2,r2,1
    756c:	e0bff715 	stw	r2,-36(fp)
    7570:	e0bffd17 	ldw	r2,-12(fp)
    7574:	10bfffc4 	addi	r2,r2,-1
    7578:	e0fff717 	ldw	r3,-36(fp)
    757c:	18bff036 	bltu	r3,r2,7540 <OSMemCreate+0x154>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    7580:	e0bff617 	ldw	r2,-40(fp)
    7584:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    7588:	e0bff917 	ldw	r2,-28(fp)
    758c:	e0fffc17 	ldw	r3,-16(fp)
    7590:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    7594:	e0bff917 	ldw	r2,-28(fp)
    7598:	e0fffc17 	ldw	r3,-16(fp)
    759c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    75a0:	e0bff917 	ldw	r2,-28(fp)
    75a4:	e0fffd17 	ldw	r3,-12(fp)
    75a8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    75ac:	e0bff917 	ldw	r2,-28(fp)
    75b0:	e0fffd17 	ldw	r3,-12(fp)
    75b4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    75b8:	e0bff917 	ldw	r2,-28(fp)
    75bc:	e0fffe17 	ldw	r3,-8(fp)
    75c0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    75c4:	e0bfff17 	ldw	r2,-4(fp)
    75c8:	10000005 	stb	zero,0(r2)
    return (pmem);
    75cc:	e0bff917 	ldw	r2,-28(fp)
}
    75d0:	e037883a 	mov	sp,fp
    75d4:	df000017 	ldw	fp,0(sp)
    75d8:	dec00104 	addi	sp,sp,4
    75dc:	f800283a 	ret

000075e0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    75e0:	defff804 	addi	sp,sp,-32
    75e4:	df000715 	stw	fp,28(sp)
    75e8:	df000704 	addi	fp,sp,28
    75ec:	e13ffe15 	stw	r4,-8(fp)
    75f0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    75f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    75f8:	e0bfff17 	ldw	r2,-4(fp)
    75fc:	1000021e 	bne	r2,zero,7608 <OSMemGet+0x28>
        return ((void *)0);
    7600:	0005883a 	mov	r2,zero
    7604:	00002e06 	br	76c0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    7608:	e0bffe17 	ldw	r2,-8(fp)
    760c:	1000051e 	bne	r2,zero,7624 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7610:	e0bfff17 	ldw	r2,-4(fp)
    7614:	00c01804 	movi	r3,96
    7618:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    761c:	0005883a 	mov	r2,zero
    7620:	00002706 	br	76c0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7624:	0005303a 	rdctl	r2,status
    7628:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    762c:	e0fffb17 	ldw	r3,-20(fp)
    7630:	00bfff84 	movi	r2,-2
    7634:	1884703a 	and	r2,r3,r2
    7638:	1001703a 	wrctl	status,r2
  
  return context;
    763c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7640:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    7644:	e0bffe17 	ldw	r2,-8(fp)
    7648:	10800417 	ldw	r2,16(r2)
    764c:	10001426 	beq	r2,zero,76a0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    7650:	e0bffe17 	ldw	r2,-8(fp)
    7654:	10800117 	ldw	r2,4(r2)
    7658:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    765c:	e0bffa17 	ldw	r2,-24(fp)
    7660:	10c00017 	ldw	r3,0(r2)
    7664:	e0bffe17 	ldw	r2,-8(fp)
    7668:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    766c:	e0bffe17 	ldw	r2,-8(fp)
    7670:	10800417 	ldw	r2,16(r2)
    7674:	10ffffc4 	addi	r3,r2,-1
    7678:	e0bffe17 	ldw	r2,-8(fp)
    767c:	10c00415 	stw	r3,16(r2)
    7680:	e0bff917 	ldw	r2,-28(fp)
    7684:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7688:	e0bffc17 	ldw	r2,-16(fp)
    768c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    7690:	e0bfff17 	ldw	r2,-4(fp)
    7694:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    7698:	e0bffa17 	ldw	r2,-24(fp)
    769c:	00000806 	br	76c0 <OSMemGet+0xe0>
    76a0:	e0bff917 	ldw	r2,-28(fp)
    76a4:	e0bffd15 	stw	r2,-12(fp)
    76a8:	e0bffd17 	ldw	r2,-12(fp)
    76ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    76b0:	e0bfff17 	ldw	r2,-4(fp)
    76b4:	00c01744 	movi	r3,93
    76b8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    76bc:	0005883a 	mov	r2,zero
}
    76c0:	e037883a 	mov	sp,fp
    76c4:	df000017 	ldw	fp,0(sp)
    76c8:	dec00104 	addi	sp,sp,4
    76cc:	f800283a 	ret

000076d0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    76d0:	defff704 	addi	sp,sp,-36
    76d4:	dfc00815 	stw	ra,32(sp)
    76d8:	df000715 	stw	fp,28(sp)
    76dc:	df000704 	addi	fp,sp,28
    76e0:	e13ffd15 	stw	r4,-12(fp)
    76e4:	e17ffe15 	stw	r5,-8(fp)
    76e8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    76ec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    76f0:	e0bfff17 	ldw	r2,-4(fp)
    76f4:	1000021e 	bne	r2,zero,7700 <OSMemNameGet+0x30>
        return (0);
    76f8:	0005883a 	mov	r2,zero
    76fc:	00002d06 	br	77b4 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7700:	e0bffd17 	ldw	r2,-12(fp)
    7704:	1000051e 	bne	r2,zero,771c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7708:	e0bfff17 	ldw	r2,-4(fp)
    770c:	00c01804 	movi	r3,96
    7710:	10c00005 	stb	r3,0(r2)
        return (0);
    7714:	0005883a 	mov	r2,zero
    7718:	00002606 	br	77b4 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    771c:	e0bffe17 	ldw	r2,-8(fp)
    7720:	1000051e 	bne	r2,zero,7738 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    7724:	e0bfff17 	ldw	r2,-4(fp)
    7728:	00c00304 	movi	r3,12
    772c:	10c00005 	stb	r3,0(r2)
        return (0);
    7730:	0005883a 	mov	r2,zero
    7734:	00001f06 	br	77b4 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7738:	00800074 	movhi	r2,1
    773c:	1089f504 	addi	r2,r2,10196
    7740:	10800003 	ldbu	r2,0(r2)
    7744:	10803fcc 	andi	r2,r2,255
    7748:	10000526 	beq	r2,zero,7760 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    774c:	e0bfff17 	ldw	r2,-4(fp)
    7750:	00c00444 	movi	r3,17
    7754:	10c00005 	stb	r3,0(r2)
        return (0);
    7758:	0005883a 	mov	r2,zero
    775c:	00001506 	br	77b4 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7760:	0005303a 	rdctl	r2,status
    7764:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7768:	e0fffb17 	ldw	r3,-20(fp)
    776c:	00bfff84 	movi	r2,-2
    7770:	1884703a 	and	r2,r3,r2
    7774:	1001703a 	wrctl	status,r2
  
  return context;
    7778:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    777c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    7780:	e0bffd17 	ldw	r2,-12(fp)
    7784:	10800504 	addi	r2,r2,20
    7788:	e13ffe17 	ldw	r4,-8(fp)
    778c:	100b883a 	mov	r5,r2
    7790:	00054980 	call	5498 <OS_StrCopy>
    7794:	e0bffa05 	stb	r2,-24(fp)
    7798:	e0bff917 	ldw	r2,-28(fp)
    779c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    77a0:	e0bffc17 	ldw	r2,-16(fp)
    77a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    77a8:	e0bfff17 	ldw	r2,-4(fp)
    77ac:	10000005 	stb	zero,0(r2)
    return (len);
    77b0:	e0bffa03 	ldbu	r2,-24(fp)
}
    77b4:	e037883a 	mov	sp,fp
    77b8:	dfc00117 	ldw	ra,4(sp)
    77bc:	df000017 	ldw	fp,0(sp)
    77c0:	dec00204 	addi	sp,sp,8
    77c4:	f800283a 	ret

000077c8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    77c8:	defff604 	addi	sp,sp,-40
    77cc:	dfc00915 	stw	ra,36(sp)
    77d0:	df000815 	stw	fp,32(sp)
    77d4:	df000804 	addi	fp,sp,32
    77d8:	e13ffd15 	stw	r4,-12(fp)
    77dc:	e17ffe15 	stw	r5,-8(fp)
    77e0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    77e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    77e8:	e0bfff17 	ldw	r2,-4(fp)
    77ec:	10003726 	beq	r2,zero,78cc <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    77f0:	e0bffd17 	ldw	r2,-12(fp)
    77f4:	1000041e 	bne	r2,zero,7808 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    77f8:	e0bfff17 	ldw	r2,-4(fp)
    77fc:	00c01804 	movi	r3,96
    7800:	10c00005 	stb	r3,0(r2)
        return;
    7804:	00003206 	br	78d0 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7808:	e0bffe17 	ldw	r2,-8(fp)
    780c:	1000041e 	bne	r2,zero,7820 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    7810:	e0bfff17 	ldw	r2,-4(fp)
    7814:	00c00304 	movi	r3,12
    7818:	10c00005 	stb	r3,0(r2)
        return;
    781c:	00002c06 	br	78d0 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7820:	00800074 	movhi	r2,1
    7824:	1089f504 	addi	r2,r2,10196
    7828:	10800003 	ldbu	r2,0(r2)
    782c:	10803fcc 	andi	r2,r2,255
    7830:	10000426 	beq	r2,zero,7844 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
    7834:	e0bfff17 	ldw	r2,-4(fp)
    7838:	00c00484 	movi	r3,18
    783c:	10c00005 	stb	r3,0(r2)
        return;
    7840:	00002306 	br	78d0 <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7844:	0005303a 	rdctl	r2,status
    7848:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    784c:	e0fffa17 	ldw	r3,-24(fp)
    7850:	00bfff84 	movi	r2,-2
    7854:	1884703a 	and	r2,r3,r2
    7858:	1001703a 	wrctl	status,r2
  
  return context;
    785c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    7860:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    7864:	e13ffe17 	ldw	r4,-8(fp)
    7868:	00055140 	call	5514 <OS_StrLen>
    786c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    7870:	e0bff903 	ldbu	r2,-28(fp)
    7874:	10800830 	cmpltui	r2,r2,32
    7878:	1000081e 	bne	r2,zero,789c <OSMemNameSet+0xd4>
    787c:	e0bff817 	ldw	r2,-32(fp)
    7880:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7884:	e0bffb17 	ldw	r2,-20(fp)
    7888:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    788c:	e0bfff17 	ldw	r2,-4(fp)
    7890:	00c018c4 	movi	r3,99
    7894:	10c00005 	stb	r3,0(r2)
        return;
    7898:	00000d06 	br	78d0 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    789c:	e0bffd17 	ldw	r2,-12(fp)
    78a0:	10800504 	addi	r2,r2,20
    78a4:	1009883a 	mov	r4,r2
    78a8:	e17ffe17 	ldw	r5,-8(fp)
    78ac:	00054980 	call	5498 <OS_StrCopy>
    78b0:	e0bff817 	ldw	r2,-32(fp)
    78b4:	e0bffc15 	stw	r2,-16(fp)
    78b8:	e0bffc17 	ldw	r2,-16(fp)
    78bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    78c0:	e0bfff17 	ldw	r2,-4(fp)
    78c4:	10000005 	stb	zero,0(r2)
    78c8:	00000106 	br	78d0 <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    78cc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    78d0:	e037883a 	mov	sp,fp
    78d4:	dfc00117 	ldw	ra,4(sp)
    78d8:	df000017 	ldw	fp,0(sp)
    78dc:	dec00204 	addi	sp,sp,8
    78e0:	f800283a 	ret

000078e4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    78e4:	defff904 	addi	sp,sp,-28
    78e8:	df000615 	stw	fp,24(sp)
    78ec:	df000604 	addi	fp,sp,24
    78f0:	e13ffe15 	stw	r4,-8(fp)
    78f4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    78f8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    78fc:	e0bffe17 	ldw	r2,-8(fp)
    7900:	1000021e 	bne	r2,zero,790c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7904:	00801804 	movi	r2,96
    7908:	00002806 	br	79ac <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    790c:	e0bfff17 	ldw	r2,-4(fp)
    7910:	1000021e 	bne	r2,zero,791c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    7914:	008017c4 	movi	r2,95
    7918:	00002406 	br	79ac <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    791c:	0005303a 	rdctl	r2,status
    7920:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7924:	e0fffb17 	ldw	r3,-20(fp)
    7928:	00bfff84 	movi	r2,-2
    792c:	1884703a 	and	r2,r3,r2
    7930:	1001703a 	wrctl	status,r2
  
  return context;
    7934:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7938:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    793c:	e0bffe17 	ldw	r2,-8(fp)
    7940:	10c00417 	ldw	r3,16(r2)
    7944:	e0bffe17 	ldw	r2,-8(fp)
    7948:	10800317 	ldw	r2,12(r2)
    794c:	18800636 	bltu	r3,r2,7968 <OSMemPut+0x84>
    7950:	e0bffa17 	ldw	r2,-24(fp)
    7954:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7958:	e0bffc17 	ldw	r2,-16(fp)
    795c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    7960:	00801784 	movi	r2,94
    7964:	00001106 	br	79ac <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    7968:	e0bffe17 	ldw	r2,-8(fp)
    796c:	10c00117 	ldw	r3,4(r2)
    7970:	e0bfff17 	ldw	r2,-4(fp)
    7974:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    7978:	e0bffe17 	ldw	r2,-8(fp)
    797c:	e0ffff17 	ldw	r3,-4(fp)
    7980:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    7984:	e0bffe17 	ldw	r2,-8(fp)
    7988:	10800417 	ldw	r2,16(r2)
    798c:	10c00044 	addi	r3,r2,1
    7990:	e0bffe17 	ldw	r2,-8(fp)
    7994:	10c00415 	stw	r3,16(r2)
    7998:	e0bffa17 	ldw	r2,-24(fp)
    799c:	e0bffd15 	stw	r2,-12(fp)
    79a0:	e0bffd17 	ldw	r2,-12(fp)
    79a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    79a8:	0005883a 	mov	r2,zero
}
    79ac:	e037883a 	mov	sp,fp
    79b0:	df000017 	ldw	fp,0(sp)
    79b4:	dec00104 	addi	sp,sp,4
    79b8:	f800283a 	ret

000079bc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    79bc:	defffa04 	addi	sp,sp,-24
    79c0:	df000515 	stw	fp,20(sp)
    79c4:	df000504 	addi	fp,sp,20
    79c8:	e13ffe15 	stw	r4,-8(fp)
    79cc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    79d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    79d4:	e0bffe17 	ldw	r2,-8(fp)
    79d8:	1000021e 	bne	r2,zero,79e4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    79dc:	00801804 	movi	r2,96
    79e0:	00002c06 	br	7a94 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    79e4:	e0bfff17 	ldw	r2,-4(fp)
    79e8:	1000021e 	bne	r2,zero,79f4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    79ec:	00801844 	movi	r2,97
    79f0:	00002806 	br	7a94 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    79f4:	0005303a 	rdctl	r2,status
    79f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    79fc:	e0fffc17 	ldw	r3,-16(fp)
    7a00:	00bfff84 	movi	r2,-2
    7a04:	1884703a 	and	r2,r3,r2
    7a08:	1001703a 	wrctl	status,r2
  
  return context;
    7a0c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7a10:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    7a14:	e0bffe17 	ldw	r2,-8(fp)
    7a18:	10c00017 	ldw	r3,0(r2)
    7a1c:	e0bfff17 	ldw	r2,-4(fp)
    7a20:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    7a24:	e0bffe17 	ldw	r2,-8(fp)
    7a28:	10c00117 	ldw	r3,4(r2)
    7a2c:	e0bfff17 	ldw	r2,-4(fp)
    7a30:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    7a34:	e0bffe17 	ldw	r2,-8(fp)
    7a38:	10c00217 	ldw	r3,8(r2)
    7a3c:	e0bfff17 	ldw	r2,-4(fp)
    7a40:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    7a44:	e0bffe17 	ldw	r2,-8(fp)
    7a48:	10c00317 	ldw	r3,12(r2)
    7a4c:	e0bfff17 	ldw	r2,-4(fp)
    7a50:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    7a54:	e0bffe17 	ldw	r2,-8(fp)
    7a58:	10c00417 	ldw	r3,16(r2)
    7a5c:	e0bfff17 	ldw	r2,-4(fp)
    7a60:	10c00415 	stw	r3,16(r2)
    7a64:	e0bffb17 	ldw	r2,-20(fp)
    7a68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7a6c:	e0bffd17 	ldw	r2,-12(fp)
    7a70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    7a74:	e0bfff17 	ldw	r2,-4(fp)
    7a78:	10c00317 	ldw	r3,12(r2)
    7a7c:	e0bfff17 	ldw	r2,-4(fp)
    7a80:	10800417 	ldw	r2,16(r2)
    7a84:	1887c83a 	sub	r3,r3,r2
    7a88:	e0bfff17 	ldw	r2,-4(fp)
    7a8c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    7a90:	0005883a 	mov	r2,zero
}
    7a94:	e037883a 	mov	sp,fp
    7a98:	df000017 	ldw	fp,0(sp)
    7a9c:	dec00104 	addi	sp,sp,4
    7aa0:	f800283a 	ret

00007aa4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    7aa4:	defffc04 	addi	sp,sp,-16
    7aa8:	dfc00315 	stw	ra,12(sp)
    7aac:	df000215 	stw	fp,8(sp)
    7ab0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    7ab4:	01000074 	movhi	r4,1
    7ab8:	211ae404 	addi	r4,r4,27536
    7abc:	01430c04 	movi	r5,3120
    7ac0:	000529c0 	call	529c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    7ac4:	00800074 	movhi	r2,1
    7ac8:	109ae404 	addi	r2,r2,27536
    7acc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7ad0:	e03fff0d 	sth	zero,-4(fp)
    7ad4:	00001306 	br	7b24 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    7ad8:	e0bfff0b 	ldhu	r2,-4(fp)
    7adc:	10800044 	addi	r2,r2,1
    7ae0:	10c00d24 	muli	r3,r2,52
    7ae4:	00800074 	movhi	r2,1
    7ae8:	109ae404 	addi	r2,r2,27536
    7aec:	1887883a 	add	r3,r3,r2
    7af0:	e0bffe17 	ldw	r2,-8(fp)
    7af4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    7af8:	e0bffe17 	ldw	r2,-8(fp)
    7afc:	00c00fc4 	movi	r3,63
    7b00:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    7b04:	e0bffe17 	ldw	r2,-8(fp)
    7b08:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    7b0c:	e0bffe17 	ldw	r2,-8(fp)
    7b10:	10800d04 	addi	r2,r2,52
    7b14:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7b18:	e0bfff0b 	ldhu	r2,-4(fp)
    7b1c:	10800044 	addi	r2,r2,1
    7b20:	e0bfff0d 	sth	r2,-4(fp)
    7b24:	e0bfff0b 	ldhu	r2,-4(fp)
    7b28:	10800ef0 	cmpltui	r2,r2,59
    7b2c:	103fea1e 	bne	r2,zero,7ad8 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    7b30:	e0bffe17 	ldw	r2,-8(fp)
    7b34:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    7b38:	e0bffe17 	ldw	r2,-8(fp)
    7b3c:	00c00fc4 	movi	r3,63
    7b40:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    7b44:	e0bffe17 	ldw	r2,-8(fp)
    7b48:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    7b4c:	00800074 	movhi	r2,1
    7b50:	1089ef04 	addi	r2,r2,10172
    7b54:	00c00074 	movhi	r3,1
    7b58:	18dae404 	addi	r3,r3,27536
    7b5c:	10c00015 	stw	r3,0(r2)
#endif
}
    7b60:	e037883a 	mov	sp,fp
    7b64:	dfc00117 	ldw	ra,4(sp)
    7b68:	df000017 	ldw	fp,0(sp)
    7b6c:	dec00204 	addi	sp,sp,8
    7b70:	f800283a 	ret

00007b74 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    7b74:	defff804 	addi	sp,sp,-32
    7b78:	df000715 	stw	fp,28(sp)
    7b7c:	df000704 	addi	fp,sp,28
    7b80:	e13ffe15 	stw	r4,-8(fp)
    7b84:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7b88:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7b8c:	e0bfff17 	ldw	r2,-4(fp)
    7b90:	1000021e 	bne	r2,zero,7b9c <OSQAccept+0x28>
        return ((void *)0);
    7b94:	0005883a 	mov	r2,zero
    7b98:	00004206 	br	7ca4 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    7b9c:	e0bffe17 	ldw	r2,-8(fp)
    7ba0:	1000051e 	bne	r2,zero,7bb8 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    7ba4:	e0bfff17 	ldw	r2,-4(fp)
    7ba8:	00c00104 	movi	r3,4
    7bac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7bb0:	0005883a 	mov	r2,zero
    7bb4:	00003b06 	br	7ca4 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    7bb8:	e0bffe17 	ldw	r2,-8(fp)
    7bbc:	10800003 	ldbu	r2,0(r2)
    7bc0:	10803fcc 	andi	r2,r2,255
    7bc4:	108000a0 	cmpeqi	r2,r2,2
    7bc8:	1000051e 	bne	r2,zero,7be0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    7bcc:	e0bfff17 	ldw	r2,-4(fp)
    7bd0:	00c00044 	movi	r3,1
    7bd4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7bd8:	0005883a 	mov	r2,zero
    7bdc:	00003106 	br	7ca4 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7be0:	0005303a 	rdctl	r2,status
    7be4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7be8:	e0fffc17 	ldw	r3,-16(fp)
    7bec:	00bfff84 	movi	r2,-2
    7bf0:	1884703a 	and	r2,r3,r2
    7bf4:	1001703a 	wrctl	status,r2
  
  return context;
    7bf8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7bfc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    7c00:	e0bffe17 	ldw	r2,-8(fp)
    7c04:	10800117 	ldw	r2,4(r2)
    7c08:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    7c0c:	e0bffb17 	ldw	r2,-20(fp)
    7c10:	1080058b 	ldhu	r2,22(r2)
    7c14:	10bfffcc 	andi	r2,r2,65535
    7c18:	10001926 	beq	r2,zero,7c80 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    7c1c:	e0bffb17 	ldw	r2,-20(fp)
    7c20:	10800417 	ldw	r2,16(r2)
    7c24:	10c00017 	ldw	r3,0(r2)
    7c28:	e0fff915 	stw	r3,-28(fp)
    7c2c:	10c00104 	addi	r3,r2,4
    7c30:	e0bffb17 	ldw	r2,-20(fp)
    7c34:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    7c38:	e0bffb17 	ldw	r2,-20(fp)
    7c3c:	1080058b 	ldhu	r2,22(r2)
    7c40:	10bfffc4 	addi	r2,r2,-1
    7c44:	1007883a 	mov	r3,r2
    7c48:	e0bffb17 	ldw	r2,-20(fp)
    7c4c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    7c50:	e0bffb17 	ldw	r2,-20(fp)
    7c54:	10c00417 	ldw	r3,16(r2)
    7c58:	e0bffb17 	ldw	r2,-20(fp)
    7c5c:	10800217 	ldw	r2,8(r2)
    7c60:	1880041e 	bne	r3,r2,7c74 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    7c64:	e0bffb17 	ldw	r2,-20(fp)
    7c68:	10c00117 	ldw	r3,4(r2)
    7c6c:	e0bffb17 	ldw	r2,-20(fp)
    7c70:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    7c74:	e0bfff17 	ldw	r2,-4(fp)
    7c78:	10000005 	stb	zero,0(r2)
    7c7c:	00000406 	br	7c90 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    7c80:	e0bfff17 	ldw	r2,-4(fp)
    7c84:	00c007c4 	movi	r3,31
    7c88:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    7c8c:	e03ff915 	stw	zero,-28(fp)
    7c90:	e0bffa17 	ldw	r2,-24(fp)
    7c94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7c98:	e0bffd17 	ldw	r2,-12(fp)
    7c9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    7ca0:	e0bff917 	ldw	r2,-28(fp)
}
    7ca4:	e037883a 	mov	sp,fp
    7ca8:	df000017 	ldw	fp,0(sp)
    7cac:	dec00104 	addi	sp,sp,4
    7cb0:	f800283a 	ret

00007cb4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    7cb4:	defff404 	addi	sp,sp,-48
    7cb8:	dfc00b15 	stw	ra,44(sp)
    7cbc:	df000a15 	stw	fp,40(sp)
    7cc0:	df000a04 	addi	fp,sp,40
    7cc4:	e13ffe15 	stw	r4,-8(fp)
    7cc8:	2805883a 	mov	r2,r5
    7ccc:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7cd0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    7cd4:	00800074 	movhi	r2,1
    7cd8:	1089f504 	addi	r2,r2,10196
    7cdc:	10800003 	ldbu	r2,0(r2)
    7ce0:	10803fcc 	andi	r2,r2,255
    7ce4:	10000226 	beq	r2,zero,7cf0 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    7ce8:	0005883a 	mov	r2,zero
    7cec:	00006a06 	br	7e98 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7cf0:	0005303a 	rdctl	r2,status
    7cf4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7cf8:	e0fff917 	ldw	r3,-28(fp)
    7cfc:	00bfff84 	movi	r2,-2
    7d00:	1884703a 	and	r2,r3,r2
    7d04:	1001703a 	wrctl	status,r2
  
  return context;
    7d08:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    7d0c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    7d10:	00800074 	movhi	r2,1
    7d14:	1089f404 	addi	r2,r2,10192
    7d18:	10800017 	ldw	r2,0(r2)
    7d1c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    7d20:	00800074 	movhi	r2,1
    7d24:	1089f404 	addi	r2,r2,10192
    7d28:	10800017 	ldw	r2,0(r2)
    7d2c:	10000726 	beq	r2,zero,7d4c <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    7d30:	00800074 	movhi	r2,1
    7d34:	1089f404 	addi	r2,r2,10192
    7d38:	10800017 	ldw	r2,0(r2)
    7d3c:	10c00117 	ldw	r3,4(r2)
    7d40:	00800074 	movhi	r2,1
    7d44:	1089f404 	addi	r2,r2,10192
    7d48:	10c00015 	stw	r3,0(r2)
    7d4c:	e0bff717 	ldw	r2,-36(fp)
    7d50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7d54:	e0bffa17 	ldw	r2,-24(fp)
    7d58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    7d5c:	e0bff617 	ldw	r2,-40(fp)
    7d60:	10004c26 	beq	r2,zero,7e94 <OSQCreate+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7d64:	0005303a 	rdctl	r2,status
    7d68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d6c:	e0fffb17 	ldw	r3,-20(fp)
    7d70:	00bfff84 	movi	r2,-2
    7d74:	1884703a 	and	r2,r3,r2
    7d78:	1001703a 	wrctl	status,r2
  
  return context;
    7d7c:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    7d80:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    7d84:	00800074 	movhi	r2,1
    7d88:	1089f104 	addi	r2,r2,10180
    7d8c:	10800017 	ldw	r2,0(r2)
    7d90:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    7d94:	e0bff817 	ldw	r2,-32(fp)
    7d98:	10003026 	beq	r2,zero,7e5c <OSQCreate+0x1a8>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    7d9c:	00800074 	movhi	r2,1
    7da0:	1089f104 	addi	r2,r2,10180
    7da4:	10800017 	ldw	r2,0(r2)
    7da8:	10c00017 	ldw	r3,0(r2)
    7dac:	00800074 	movhi	r2,1
    7db0:	1089f104 	addi	r2,r2,10180
    7db4:	10c00015 	stw	r3,0(r2)
    7db8:	e0bff717 	ldw	r2,-36(fp)
    7dbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7dc0:	e0bffc17 	ldw	r2,-16(fp)
    7dc4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    7dc8:	e0bff817 	ldw	r2,-32(fp)
    7dcc:	e0fffe17 	ldw	r3,-8(fp)
    7dd0:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    7dd4:	e0bfff0b 	ldhu	r2,-4(fp)
    7dd8:	1085883a 	add	r2,r2,r2
    7ddc:	1085883a 	add	r2,r2,r2
    7de0:	e0fffe17 	ldw	r3,-8(fp)
    7de4:	1887883a 	add	r3,r3,r2
    7de8:	e0bff817 	ldw	r2,-32(fp)
    7dec:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    7df0:	e0bff817 	ldw	r2,-32(fp)
    7df4:	e0fffe17 	ldw	r3,-8(fp)
    7df8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    7dfc:	e0bff817 	ldw	r2,-32(fp)
    7e00:	e0fffe17 	ldw	r3,-8(fp)
    7e04:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    7e08:	e0bff817 	ldw	r2,-32(fp)
    7e0c:	e0ffff0b 	ldhu	r3,-4(fp)
    7e10:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    7e14:	e0bff817 	ldw	r2,-32(fp)
    7e18:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    7e1c:	e0bff617 	ldw	r2,-40(fp)
    7e20:	00c00084 	movi	r3,2
    7e24:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    7e28:	e0bff617 	ldw	r2,-40(fp)
    7e2c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    7e30:	e0bff617 	ldw	r2,-40(fp)
    7e34:	e0fff817 	ldw	r3,-32(fp)
    7e38:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    7e3c:	e0bff617 	ldw	r2,-40(fp)
    7e40:	00c00fc4 	movi	r3,63
    7e44:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    7e48:	e0bff617 	ldw	r2,-40(fp)
    7e4c:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    7e50:	e13ff617 	ldw	r4,-40(fp)
    7e54:	0004ed00 	call	4ed0 <OS_EventWaitListInit>
    7e58:	00000e06 	br	7e94 <OSQCreate+0x1e0>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    7e5c:	00800074 	movhi	r2,1
    7e60:	1089f404 	addi	r2,r2,10192
    7e64:	10c00017 	ldw	r3,0(r2)
    7e68:	e0bff617 	ldw	r2,-40(fp)
    7e6c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    7e70:	00800074 	movhi	r2,1
    7e74:	1089f404 	addi	r2,r2,10192
    7e78:	e0fff617 	ldw	r3,-40(fp)
    7e7c:	10c00015 	stw	r3,0(r2)
    7e80:	e0bff717 	ldw	r2,-36(fp)
    7e84:	e0bffd15 	stw	r2,-12(fp)
    7e88:	e0bffd17 	ldw	r2,-12(fp)
    7e8c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    7e90:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    7e94:	e0bff617 	ldw	r2,-40(fp)
}
    7e98:	e037883a 	mov	sp,fp
    7e9c:	dfc00117 	ldw	ra,4(sp)
    7ea0:	df000017 	ldw	fp,0(sp)
    7ea4:	dec00204 	addi	sp,sp,8
    7ea8:	f800283a 	ret

00007eac <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    7eac:	defff204 	addi	sp,sp,-56
    7eb0:	dfc00d15 	stw	ra,52(sp)
    7eb4:	df000c15 	stw	fp,48(sp)
    7eb8:	df000c04 	addi	fp,sp,48
    7ebc:	e13ffd15 	stw	r4,-12(fp)
    7ec0:	2805883a 	mov	r2,r5
    7ec4:	e1bfff15 	stw	r6,-4(fp)
    7ec8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    7ecc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7ed0:	e0bfff17 	ldw	r2,-4(fp)
    7ed4:	1000021e 	bne	r2,zero,7ee0 <OSQDel+0x34>
        return (pevent);
    7ed8:	e0bffd17 	ldw	r2,-12(fp)
    7edc:	0000a206 	br	8168 <OSQDel+0x2bc>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    7ee0:	e0bffd17 	ldw	r2,-12(fp)
    7ee4:	1000051e 	bne	r2,zero,7efc <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    7ee8:	e0bfff17 	ldw	r2,-4(fp)
    7eec:	00c00104 	movi	r3,4
    7ef0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7ef4:	e0bffd17 	ldw	r2,-12(fp)
    7ef8:	00009b06 	br	8168 <OSQDel+0x2bc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    7efc:	e0bffd17 	ldw	r2,-12(fp)
    7f00:	10800003 	ldbu	r2,0(r2)
    7f04:	10803fcc 	andi	r2,r2,255
    7f08:	108000a0 	cmpeqi	r2,r2,2
    7f0c:	1000051e 	bne	r2,zero,7f24 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    7f10:	e0bfff17 	ldw	r2,-4(fp)
    7f14:	00c00044 	movi	r3,1
    7f18:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7f1c:	e0bffd17 	ldw	r2,-12(fp)
    7f20:	00009106 	br	8168 <OSQDel+0x2bc>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7f24:	00800074 	movhi	r2,1
    7f28:	1089f504 	addi	r2,r2,10196
    7f2c:	10800003 	ldbu	r2,0(r2)
    7f30:	10803fcc 	andi	r2,r2,255
    7f34:	10000526 	beq	r2,zero,7f4c <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    7f38:	e0bfff17 	ldw	r2,-4(fp)
    7f3c:	00c003c4 	movi	r3,15
    7f40:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7f44:	e0bffd17 	ldw	r2,-12(fp)
    7f48:	00008706 	br	8168 <OSQDel+0x2bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7f4c:	0005303a 	rdctl	r2,status
    7f50:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f54:	e0fff817 	ldw	r3,-32(fp)
    7f58:	00bfff84 	movi	r2,-2
    7f5c:	1884703a 	and	r2,r3,r2
    7f60:	1001703a 	wrctl	status,r2
  
  return context;
    7f64:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    7f68:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    7f6c:	e0bffd17 	ldw	r2,-12(fp)
    7f70:	10800283 	ldbu	r2,10(r2)
    7f74:	10803fcc 	andi	r2,r2,255
    7f78:	10000326 	beq	r2,zero,7f88 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    7f7c:	00800044 	movi	r2,1
    7f80:	e0bff405 	stb	r2,-48(fp)
    7f84:	00000106 	br	7f8c <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    7f88:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    7f8c:	e0bffe03 	ldbu	r2,-8(fp)
    7f90:	10000326 	beq	r2,zero,7fa0 <OSQDel+0xf4>
    7f94:	10800060 	cmpeqi	r2,r2,1
    7f98:	1000391e 	bne	r2,zero,8080 <OSQDel+0x1d4>
    7f9c:	00006706 	br	813c <OSQDel+0x290>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    7fa0:	e0bff403 	ldbu	r2,-48(fp)
    7fa4:	1000261e 	bne	r2,zero,8040 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    7fa8:	e0bffd17 	ldw	r2,-12(fp)
    7fac:	00c00fc4 	movi	r3,63
    7fb0:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    7fb4:	e0bffd17 	ldw	r2,-12(fp)
    7fb8:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    7fbc:	e0bffd17 	ldw	r2,-12(fp)
    7fc0:	10800117 	ldw	r2,4(r2)
    7fc4:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
    7fc8:	00800074 	movhi	r2,1
    7fcc:	1089f104 	addi	r2,r2,10180
    7fd0:	10c00017 	ldw	r3,0(r2)
    7fd4:	e0bff717 	ldw	r2,-36(fp)
    7fd8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    7fdc:	00800074 	movhi	r2,1
    7fe0:	1089f104 	addi	r2,r2,10180
    7fe4:	e0fff717 	ldw	r3,-36(fp)
    7fe8:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7fec:	e0bffd17 	ldw	r2,-12(fp)
    7ff0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    7ff4:	00800074 	movhi	r2,1
    7ff8:	1089f404 	addi	r2,r2,10192
    7ffc:	10c00017 	ldw	r3,0(r2)
    8000:	e0bffd17 	ldw	r2,-12(fp)
    8004:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    8008:	e0bffd17 	ldw	r2,-12(fp)
    800c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    8010:	00800074 	movhi	r2,1
    8014:	1089f404 	addi	r2,r2,10192
    8018:	e0fffd17 	ldw	r3,-12(fp)
    801c:	10c00015 	stw	r3,0(r2)
    8020:	e0bff617 	ldw	r2,-40(fp)
    8024:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8028:	e0bff917 	ldw	r2,-28(fp)
    802c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    8030:	e0bfff17 	ldw	r2,-4(fp)
    8034:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    8038:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    803c:	00004906 	br	8164 <OSQDel+0x2b8>
    8040:	e0bff617 	ldw	r2,-40(fp)
    8044:	e0bffa15 	stw	r2,-24(fp)
    8048:	e0bffa17 	ldw	r2,-24(fp)
    804c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    8050:	e0bfff17 	ldw	r2,-4(fp)
    8054:	00c01244 	movi	r3,73
    8058:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    805c:	e0bffd17 	ldw	r2,-12(fp)
    8060:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    8064:	00003f06 	br	8164 <OSQDel+0x2b8>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    8068:	e13ffd17 	ldw	r4,-12(fp)
    806c:	000b883a 	mov	r5,zero
    8070:	01800104 	movi	r6,4
    8074:	000f883a 	mov	r7,zero
    8078:	00049400 	call	4940 <OS_EventTaskRdy>
    807c:	00000106 	br	8084 <OSQDel+0x1d8>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    8080:	0001883a 	nop
    8084:	e0bffd17 	ldw	r2,-12(fp)
    8088:	10800283 	ldbu	r2,10(r2)
    808c:	10803fcc 	andi	r2,r2,255
    8090:	103ff51e 	bne	r2,zero,8068 <OSQDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    8094:	e0bffd17 	ldw	r2,-12(fp)
    8098:	00c00fc4 	movi	r3,63
    809c:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    80a0:	e0bffd17 	ldw	r2,-12(fp)
    80a4:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    80a8:	e0bffd17 	ldw	r2,-12(fp)
    80ac:	10800117 	ldw	r2,4(r2)
    80b0:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
    80b4:	00800074 	movhi	r2,1
    80b8:	1089f104 	addi	r2,r2,10180
    80bc:	10c00017 	ldw	r3,0(r2)
    80c0:	e0bff717 	ldw	r2,-36(fp)
    80c4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    80c8:	00800074 	movhi	r2,1
    80cc:	1089f104 	addi	r2,r2,10180
    80d0:	e0fff717 	ldw	r3,-36(fp)
    80d4:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    80d8:	e0bffd17 	ldw	r2,-12(fp)
    80dc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    80e0:	00800074 	movhi	r2,1
    80e4:	1089f404 	addi	r2,r2,10192
    80e8:	10c00017 	ldw	r3,0(r2)
    80ec:	e0bffd17 	ldw	r2,-12(fp)
    80f0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    80f4:	e0bffd17 	ldw	r2,-12(fp)
    80f8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    80fc:	00800074 	movhi	r2,1
    8100:	1089f404 	addi	r2,r2,10192
    8104:	e0fffd17 	ldw	r3,-12(fp)
    8108:	10c00015 	stw	r3,0(r2)
    810c:	e0bff617 	ldw	r2,-40(fp)
    8110:	e0bffb15 	stw	r2,-20(fp)
    8114:	e0bffb17 	ldw	r2,-20(fp)
    8118:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    811c:	e0bff403 	ldbu	r2,-48(fp)
    8120:	10800058 	cmpnei	r2,r2,1
    8124:	1000011e 	bne	r2,zero,812c <OSQDel+0x280>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    8128:	000535c0 	call	535c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    812c:	e0bfff17 	ldw	r2,-4(fp)
    8130:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    8134:	e03ff515 	stw	zero,-44(fp)
             break;
    8138:	00000a06 	br	8164 <OSQDel+0x2b8>
    813c:	e0bff617 	ldw	r2,-40(fp)
    8140:	e0bffc15 	stw	r2,-16(fp)
    8144:	e0bffc17 	ldw	r2,-16(fp)
    8148:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    814c:	e0bfff17 	ldw	r2,-4(fp)
    8150:	00c001c4 	movi	r3,7
    8154:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    8158:	e0bffd17 	ldw	r2,-12(fp)
    815c:	e0bff515 	stw	r2,-44(fp)
             break;
    8160:	0001883a 	nop
    }
    return (pevent_return);
    8164:	e0bff517 	ldw	r2,-44(fp)
}
    8168:	e037883a 	mov	sp,fp
    816c:	dfc00117 	ldw	ra,4(sp)
    8170:	df000017 	ldw	fp,0(sp)
    8174:	dec00204 	addi	sp,sp,8
    8178:	f800283a 	ret

0000817c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    817c:	defffa04 	addi	sp,sp,-24
    8180:	df000515 	stw	fp,20(sp)
    8184:	df000504 	addi	fp,sp,20
    8188:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    818c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8190:	e0bfff17 	ldw	r2,-4(fp)
    8194:	1000021e 	bne	r2,zero,81a0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    8198:	00800104 	movi	r2,4
    819c:	00002106 	br	8224 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	10800003 	ldbu	r2,0(r2)
    81a8:	10803fcc 	andi	r2,r2,255
    81ac:	108000a0 	cmpeqi	r2,r2,2
    81b0:	1000021e 	bne	r2,zero,81bc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    81b4:	00800044 	movi	r2,1
    81b8:	00001a06 	br	8224 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    81bc:	0005303a 	rdctl	r2,status
    81c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    81c4:	e0fffd17 	ldw	r3,-12(fp)
    81c8:	00bfff84 	movi	r2,-2
    81cc:	1884703a 	and	r2,r3,r2
    81d0:	1001703a 	wrctl	status,r2
  
  return context;
    81d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    81d8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    81dc:	e0bfff17 	ldw	r2,-4(fp)
    81e0:	10800117 	ldw	r2,4(r2)
    81e4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    81e8:	e0bffc17 	ldw	r2,-16(fp)
    81ec:	10c00117 	ldw	r3,4(r2)
    81f0:	e0bffc17 	ldw	r2,-16(fp)
    81f4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    81f8:	e0bffc17 	ldw	r2,-16(fp)
    81fc:	10c00117 	ldw	r3,4(r2)
    8200:	e0bffc17 	ldw	r2,-16(fp)
    8204:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    8208:	e0bffc17 	ldw	r2,-16(fp)
    820c:	1000058d 	sth	zero,22(r2)
    8210:	e0bffb17 	ldw	r2,-20(fp)
    8214:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8218:	e0bffe17 	ldw	r2,-8(fp)
    821c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8220:	0005883a 	mov	r2,zero
}
    8224:	e037883a 	mov	sp,fp
    8228:	df000017 	ldw	fp,0(sp)
    822c:	dec00104 	addi	sp,sp,4
    8230:	f800283a 	ret

00008234 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    8234:	defff304 	addi	sp,sp,-52
    8238:	dfc00c15 	stw	ra,48(sp)
    823c:	df000b15 	stw	fp,44(sp)
    8240:	df000b04 	addi	fp,sp,44
    8244:	e13ffd15 	stw	r4,-12(fp)
    8248:	2805883a 	mov	r2,r5
    824c:	e1bfff15 	stw	r6,-4(fp)
    8250:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8254:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8258:	e0bfff17 	ldw	r2,-4(fp)
    825c:	1000021e 	bne	r2,zero,8268 <OSQPend+0x34>
        return ((void *)0);
    8260:	0005883a 	mov	r2,zero
    8264:	0000ad06 	br	851c <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    8268:	e0bffd17 	ldw	r2,-12(fp)
    826c:	1000051e 	bne	r2,zero,8284 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8270:	e0bfff17 	ldw	r2,-4(fp)
    8274:	00c00104 	movi	r3,4
    8278:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    827c:	0005883a 	mov	r2,zero
    8280:	0000a606 	br	851c <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    8284:	e0bffd17 	ldw	r2,-12(fp)
    8288:	10800003 	ldbu	r2,0(r2)
    828c:	10803fcc 	andi	r2,r2,255
    8290:	108000a0 	cmpeqi	r2,r2,2
    8294:	1000051e 	bne	r2,zero,82ac <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	00c00044 	movi	r3,1
    82a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    82a4:	0005883a 	mov	r2,zero
    82a8:	00009c06 	br	851c <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    82ac:	00800074 	movhi	r2,1
    82b0:	1089f504 	addi	r2,r2,10196
    82b4:	10800003 	ldbu	r2,0(r2)
    82b8:	10803fcc 	andi	r2,r2,255
    82bc:	10000526 	beq	r2,zero,82d4 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    82c0:	e0bfff17 	ldw	r2,-4(fp)
    82c4:	00c00084 	movi	r3,2
    82c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    82cc:	0005883a 	mov	r2,zero
    82d0:	00009206 	br	851c <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    82d4:	00800074 	movhi	r2,1
    82d8:	1089e604 	addi	r2,r2,10136
    82dc:	10800003 	ldbu	r2,0(r2)
    82e0:	10803fcc 	andi	r2,r2,255
    82e4:	10000526 	beq	r2,zero,82fc <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    82e8:	e0bfff17 	ldw	r2,-4(fp)
    82ec:	00c00344 	movi	r3,13
    82f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    82f4:	0005883a 	mov	r2,zero
    82f8:	00008806 	br	851c <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    82fc:	0005303a 	rdctl	r2,status
    8300:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8304:	e0fff817 	ldw	r3,-32(fp)
    8308:	00bfff84 	movi	r2,-2
    830c:	1884703a 	and	r2,r3,r2
    8310:	1001703a 	wrctl	status,r2
  
  return context;
    8314:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    8318:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    831c:	e0bffd17 	ldw	r2,-12(fp)
    8320:	10800117 	ldw	r2,4(r2)
    8324:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    8328:	e0bff717 	ldw	r2,-36(fp)
    832c:	1080058b 	ldhu	r2,22(r2)
    8330:	10bfffcc 	andi	r2,r2,65535
    8334:	10001e26 	beq	r2,zero,83b0 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    8338:	e0bff717 	ldw	r2,-36(fp)
    833c:	10800417 	ldw	r2,16(r2)
    8340:	10c00017 	ldw	r3,0(r2)
    8344:	e0fff515 	stw	r3,-44(fp)
    8348:	10c00104 	addi	r3,r2,4
    834c:	e0bff717 	ldw	r2,-36(fp)
    8350:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    8354:	e0bff717 	ldw	r2,-36(fp)
    8358:	1080058b 	ldhu	r2,22(r2)
    835c:	10bfffc4 	addi	r2,r2,-1
    8360:	1007883a 	mov	r3,r2
    8364:	e0bff717 	ldw	r2,-36(fp)
    8368:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    836c:	e0bff717 	ldw	r2,-36(fp)
    8370:	10c00417 	ldw	r3,16(r2)
    8374:	e0bff717 	ldw	r2,-36(fp)
    8378:	10800217 	ldw	r2,8(r2)
    837c:	1880041e 	bne	r3,r2,8390 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    8380:	e0bff717 	ldw	r2,-36(fp)
    8384:	10c00117 	ldw	r3,4(r2)
    8388:	e0bff717 	ldw	r2,-36(fp)
    838c:	10c00415 	stw	r3,16(r2)
    8390:	e0bff617 	ldw	r2,-40(fp)
    8394:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8398:	e0bff917 	ldw	r2,-28(fp)
    839c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    83a0:	e0bfff17 	ldw	r2,-4(fp)
    83a4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    83a8:	e0bff517 	ldw	r2,-44(fp)
    83ac:	00005b06 	br	851c <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    83b0:	00800074 	movhi	r2,1
    83b4:	1089f604 	addi	r2,r2,10200
    83b8:	10800017 	ldw	r2,0(r2)
    83bc:	00c00074 	movhi	r3,1
    83c0:	18c9f604 	addi	r3,r3,10200
    83c4:	18c00017 	ldw	r3,0(r3)
    83c8:	18c00c03 	ldbu	r3,48(r3)
    83cc:	18c00114 	ori	r3,r3,4
    83d0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    83d4:	00800074 	movhi	r2,1
    83d8:	1089f604 	addi	r2,r2,10200
    83dc:	10800017 	ldw	r2,0(r2)
    83e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    83e4:	00800074 	movhi	r2,1
    83e8:	1089f604 	addi	r2,r2,10200
    83ec:	10800017 	ldw	r2,0(r2)
    83f0:	e0fffe0b 	ldhu	r3,-8(fp)
    83f4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    83f8:	e13ffd17 	ldw	r4,-12(fp)
    83fc:	0004ad80 	call	4ad8 <OS_EventTaskWait>
    8400:	e0bff617 	ldw	r2,-40(fp)
    8404:	e0bffa15 	stw	r2,-24(fp)
    8408:	e0bffa17 	ldw	r2,-24(fp)
    840c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    8410:	000535c0 	call	535c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8414:	0005303a 	rdctl	r2,status
    8418:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    841c:	e0fffb17 	ldw	r3,-20(fp)
    8420:	00bfff84 	movi	r2,-2
    8424:	1884703a 	and	r2,r3,r2
    8428:	1001703a 	wrctl	status,r2
  
  return context;
    842c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    8430:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    8434:	00800074 	movhi	r2,1
    8438:	1089f604 	addi	r2,r2,10200
    843c:	10800017 	ldw	r2,0(r2)
    8440:	10800c43 	ldbu	r2,49(r2)
    8444:	10803fcc 	andi	r2,r2,255
    8448:	10000326 	beq	r2,zero,8458 <OSQPend+0x224>
    844c:	108000a0 	cmpeqi	r2,r2,2
    8450:	1000091e 	bne	r2,zero,8478 <OSQPend+0x244>
    8454:	00000d06 	br	848c <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    8458:	00800074 	movhi	r2,1
    845c:	1089f604 	addi	r2,r2,10200
    8460:	10800017 	ldw	r2,0(r2)
    8464:	10800917 	ldw	r2,36(r2)
    8468:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    846c:	e0bfff17 	ldw	r2,-4(fp)
    8470:	10000005 	stb	zero,0(r2)
             break;
    8474:	00001006 	br	84b8 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    8478:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    847c:	e0bfff17 	ldw	r2,-4(fp)
    8480:	00c00384 	movi	r3,14
    8484:	10c00005 	stb	r3,0(r2)
             break;
    8488:	00000b06 	br	84b8 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    848c:	00800074 	movhi	r2,1
    8490:	1089f604 	addi	r2,r2,10200
    8494:	10800017 	ldw	r2,0(r2)
    8498:	1009883a 	mov	r4,r2
    849c:	e17ffd17 	ldw	r5,-12(fp)
    84a0:	0004d280 	call	4d28 <OS_EventTaskRemove>
             pmsg = (void *)0;
    84a4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    84a8:	e0bfff17 	ldw	r2,-4(fp)
    84ac:	00c00284 	movi	r3,10
    84b0:	10c00005 	stb	r3,0(r2)
             break;
    84b4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    84b8:	00800074 	movhi	r2,1
    84bc:	1089f604 	addi	r2,r2,10200
    84c0:	10800017 	ldw	r2,0(r2)
    84c4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    84c8:	00800074 	movhi	r2,1
    84cc:	1089f604 	addi	r2,r2,10200
    84d0:	10800017 	ldw	r2,0(r2)
    84d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    84d8:	00800074 	movhi	r2,1
    84dc:	1089f604 	addi	r2,r2,10200
    84e0:	10800017 	ldw	r2,0(r2)
    84e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    84e8:	00800074 	movhi	r2,1
    84ec:	1089f604 	addi	r2,r2,10200
    84f0:	10800017 	ldw	r2,0(r2)
    84f4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    84f8:	00800074 	movhi	r2,1
    84fc:	1089f604 	addi	r2,r2,10200
    8500:	10800017 	ldw	r2,0(r2)
    8504:	10000915 	stw	zero,36(r2)
    8508:	e0bff617 	ldw	r2,-40(fp)
    850c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8510:	e0bffc17 	ldw	r2,-16(fp)
    8514:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    8518:	e0bff517 	ldw	r2,-44(fp)
}
    851c:	e037883a 	mov	sp,fp
    8520:	dfc00117 	ldw	ra,4(sp)
    8524:	df000017 	ldw	fp,0(sp)
    8528:	dec00204 	addi	sp,sp,8
    852c:	f800283a 	ret

00008530 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8530:	defff604 	addi	sp,sp,-40
    8534:	dfc00915 	stw	ra,36(sp)
    8538:	df000815 	stw	fp,32(sp)
    853c:	df000804 	addi	fp,sp,32
    8540:	e13ffd15 	stw	r4,-12(fp)
    8544:	2805883a 	mov	r2,r5
    8548:	e1bfff15 	stw	r6,-4(fp)
    854c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8550:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8554:	e0bfff17 	ldw	r2,-4(fp)
    8558:	1000021e 	bne	r2,zero,8564 <OSQPendAbort+0x34>
        return (0);
    855c:	0005883a 	mov	r2,zero
    8560:	00004b06 	br	8690 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8564:	e0bffd17 	ldw	r2,-12(fp)
    8568:	1000051e 	bne	r2,zero,8580 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    856c:	e0bfff17 	ldw	r2,-4(fp)
    8570:	00c00104 	movi	r3,4
    8574:	10c00005 	stb	r3,0(r2)
        return (0);
    8578:	0005883a 	mov	r2,zero
    857c:	00004406 	br	8690 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    8580:	e0bffd17 	ldw	r2,-12(fp)
    8584:	10800003 	ldbu	r2,0(r2)
    8588:	10803fcc 	andi	r2,r2,255
    858c:	108000a0 	cmpeqi	r2,r2,2
    8590:	1000051e 	bne	r2,zero,85a8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8594:	e0bfff17 	ldw	r2,-4(fp)
    8598:	00c00044 	movi	r3,1
    859c:	10c00005 	stb	r3,0(r2)
        return (0);
    85a0:	0005883a 	mov	r2,zero
    85a4:	00003a06 	br	8690 <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    85a8:	0005303a 	rdctl	r2,status
    85ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    85b0:	e0fffa17 	ldw	r3,-24(fp)
    85b4:	00bfff84 	movi	r2,-2
    85b8:	1884703a 	and	r2,r3,r2
    85bc:	1001703a 	wrctl	status,r2
  
  return context;
    85c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    85c4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    85c8:	e0bffd17 	ldw	r2,-12(fp)
    85cc:	10800283 	ldbu	r2,10(r2)
    85d0:	10803fcc 	andi	r2,r2,255
    85d4:	10002726 	beq	r2,zero,8674 <OSQPendAbort+0x144>
        nbr_tasks = 0;
    85d8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    85dc:	e0bffe03 	ldbu	r2,-8(fp)
    85e0:	10800060 	cmpeqi	r2,r2,1
    85e4:	10000a1e 	bne	r2,zero,8610 <OSQPendAbort+0xe0>
    85e8:	00000f06 	br	8628 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    85ec:	e13ffd17 	ldw	r4,-12(fp)
    85f0:	000b883a 	mov	r5,zero
    85f4:	01800104 	movi	r6,4
    85f8:	01c00084 	movi	r7,2
    85fc:	00049400 	call	4940 <OS_EventTaskRdy>
                     nbr_tasks++;
    8600:	e0bff803 	ldbu	r2,-32(fp)
    8604:	10800044 	addi	r2,r2,1
    8608:	e0bff805 	stb	r2,-32(fp)
    860c:	00000106 	br	8614 <OSQPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    8610:	0001883a 	nop
    8614:	e0bffd17 	ldw	r2,-12(fp)
    8618:	10800283 	ldbu	r2,10(r2)
    861c:	10803fcc 	andi	r2,r2,255
    8620:	103ff21e 	bne	r2,zero,85ec <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    8624:	00000906 	br	864c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    8628:	e13ffd17 	ldw	r4,-12(fp)
    862c:	000b883a 	mov	r5,zero
    8630:	01800104 	movi	r6,4
    8634:	01c00084 	movi	r7,2
    8638:	00049400 	call	4940 <OS_EventTaskRdy>
                 nbr_tasks++;
    863c:	e0bff803 	ldbu	r2,-32(fp)
    8640:	10800044 	addi	r2,r2,1
    8644:	e0bff805 	stb	r2,-32(fp)
                 break;
    8648:	0001883a 	nop
    864c:	e0bff917 	ldw	r2,-28(fp)
    8650:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8654:	e0bffb17 	ldw	r2,-20(fp)
    8658:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    865c:	000535c0 	call	535c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    8660:	e0bfff17 	ldw	r2,-4(fp)
    8664:	00c00384 	movi	r3,14
    8668:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    866c:	e0bff803 	ldbu	r2,-32(fp)
    8670:	00000706 	br	8690 <OSQPendAbort+0x160>
    8674:	e0bff917 	ldw	r2,-28(fp)
    8678:	e0bffc15 	stw	r2,-16(fp)
    867c:	e0bffc17 	ldw	r2,-16(fp)
    8680:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8684:	e0bfff17 	ldw	r2,-4(fp)
    8688:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    868c:	0005883a 	mov	r2,zero
}
    8690:	e037883a 	mov	sp,fp
    8694:	dfc00117 	ldw	ra,4(sp)
    8698:	df000017 	ldw	fp,0(sp)
    869c:	dec00204 	addi	sp,sp,8
    86a0:	f800283a 	ret

000086a4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    86a4:	defff604 	addi	sp,sp,-40
    86a8:	dfc00915 	stw	ra,36(sp)
    86ac:	df000815 	stw	fp,32(sp)
    86b0:	df000804 	addi	fp,sp,32
    86b4:	e13ffe15 	stw	r4,-8(fp)
    86b8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    86bc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    86c0:	e0bffe17 	ldw	r2,-8(fp)
    86c4:	1000021e 	bne	r2,zero,86d0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    86c8:	00800104 	movi	r2,4
    86cc:	00004a06 	br	87f8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    86d0:	e0bffe17 	ldw	r2,-8(fp)
    86d4:	10800003 	ldbu	r2,0(r2)
    86d8:	10803fcc 	andi	r2,r2,255
    86dc:	108000a0 	cmpeqi	r2,r2,2
    86e0:	1000021e 	bne	r2,zero,86ec <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    86e4:	00800044 	movi	r2,1
    86e8:	00004306 	br	87f8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    86ec:	0005303a 	rdctl	r2,status
    86f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    86f4:	e0fffa17 	ldw	r3,-24(fp)
    86f8:	00bfff84 	movi	r2,-2
    86fc:	1884703a 	and	r2,r3,r2
    8700:	1001703a 	wrctl	status,r2
  
  return context;
    8704:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8708:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    870c:	e0bffe17 	ldw	r2,-8(fp)
    8710:	10800283 	ldbu	r2,10(r2)
    8714:	10803fcc 	andi	r2,r2,255
    8718:	10000c26 	beq	r2,zero,874c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    871c:	e13ffe17 	ldw	r4,-8(fp)
    8720:	e17fff17 	ldw	r5,-4(fp)
    8724:	01800104 	movi	r6,4
    8728:	000f883a 	mov	r7,zero
    872c:	00049400 	call	4940 <OS_EventTaskRdy>
    8730:	e0bff817 	ldw	r2,-32(fp)
    8734:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8738:	e0bffb17 	ldw	r2,-20(fp)
    873c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    8740:	000535c0 	call	535c <OS_Sched>
        return (OS_ERR_NONE);
    8744:	0005883a 	mov	r2,zero
    8748:	00002b06 	br	87f8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    874c:	e0bffe17 	ldw	r2,-8(fp)
    8750:	10800117 	ldw	r2,4(r2)
    8754:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    8758:	e0bff917 	ldw	r2,-28(fp)
    875c:	10c0058b 	ldhu	r3,22(r2)
    8760:	e0bff917 	ldw	r2,-28(fp)
    8764:	1080050b 	ldhu	r2,20(r2)
    8768:	18ffffcc 	andi	r3,r3,65535
    876c:	10bfffcc 	andi	r2,r2,65535
    8770:	18800636 	bltu	r3,r2,878c <OSQPost+0xe8>
    8774:	e0bff817 	ldw	r2,-32(fp)
    8778:	e0bffc15 	stw	r2,-16(fp)
    877c:	e0bffc17 	ldw	r2,-16(fp)
    8780:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8784:	00800784 	movi	r2,30
    8788:	00001b06 	br	87f8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    878c:	e0bff917 	ldw	r2,-28(fp)
    8790:	10800317 	ldw	r2,12(r2)
    8794:	e0ffff17 	ldw	r3,-4(fp)
    8798:	10c00015 	stw	r3,0(r2)
    879c:	10c00104 	addi	r3,r2,4
    87a0:	e0bff917 	ldw	r2,-28(fp)
    87a4:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    87a8:	e0bff917 	ldw	r2,-28(fp)
    87ac:	1080058b 	ldhu	r2,22(r2)
    87b0:	10800044 	addi	r2,r2,1
    87b4:	1007883a 	mov	r3,r2
    87b8:	e0bff917 	ldw	r2,-28(fp)
    87bc:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    87c0:	e0bff917 	ldw	r2,-28(fp)
    87c4:	10c00317 	ldw	r3,12(r2)
    87c8:	e0bff917 	ldw	r2,-28(fp)
    87cc:	10800217 	ldw	r2,8(r2)
    87d0:	1880041e 	bne	r3,r2,87e4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    87d4:	e0bff917 	ldw	r2,-28(fp)
    87d8:	10c00117 	ldw	r3,4(r2)
    87dc:	e0bff917 	ldw	r2,-28(fp)
    87e0:	10c00315 	stw	r3,12(r2)
    87e4:	e0bff817 	ldw	r2,-32(fp)
    87e8:	e0bffd15 	stw	r2,-12(fp)
    87ec:	e0bffd17 	ldw	r2,-12(fp)
    87f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    87f4:	0005883a 	mov	r2,zero
}
    87f8:	e037883a 	mov	sp,fp
    87fc:	dfc00117 	ldw	ra,4(sp)
    8800:	df000017 	ldw	fp,0(sp)
    8804:	dec00204 	addi	sp,sp,8
    8808:	f800283a 	ret

0000880c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    880c:	defff604 	addi	sp,sp,-40
    8810:	dfc00915 	stw	ra,36(sp)
    8814:	df000815 	stw	fp,32(sp)
    8818:	df000804 	addi	fp,sp,32
    881c:	e13ffe15 	stw	r4,-8(fp)
    8820:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8824:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8828:	e0bffe17 	ldw	r2,-8(fp)
    882c:	1000021e 	bne	r2,zero,8838 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8830:	00800104 	movi	r2,4
    8834:	00004c06 	br	8968 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8838:	e0bffe17 	ldw	r2,-8(fp)
    883c:	10800003 	ldbu	r2,0(r2)
    8840:	10803fcc 	andi	r2,r2,255
    8844:	108000a0 	cmpeqi	r2,r2,2
    8848:	1000021e 	bne	r2,zero,8854 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    884c:	00800044 	movi	r2,1
    8850:	00004506 	br	8968 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8854:	0005303a 	rdctl	r2,status
    8858:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    885c:	e0fffa17 	ldw	r3,-24(fp)
    8860:	00bfff84 	movi	r2,-2
    8864:	1884703a 	and	r2,r3,r2
    8868:	1001703a 	wrctl	status,r2
  
  return context;
    886c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8870:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    8874:	e0bffe17 	ldw	r2,-8(fp)
    8878:	10800283 	ldbu	r2,10(r2)
    887c:	10803fcc 	andi	r2,r2,255
    8880:	10000c26 	beq	r2,zero,88b4 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8884:	e13ffe17 	ldw	r4,-8(fp)
    8888:	e17fff17 	ldw	r5,-4(fp)
    888c:	01800104 	movi	r6,4
    8890:	000f883a 	mov	r7,zero
    8894:	00049400 	call	4940 <OS_EventTaskRdy>
    8898:	e0bff817 	ldw	r2,-32(fp)
    889c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88a0:	e0bffb17 	ldw	r2,-20(fp)
    88a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    88a8:	000535c0 	call	535c <OS_Sched>
        return (OS_ERR_NONE);
    88ac:	0005883a 	mov	r2,zero
    88b0:	00002d06 	br	8968 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    88b4:	e0bffe17 	ldw	r2,-8(fp)
    88b8:	10800117 	ldw	r2,4(r2)
    88bc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    88c0:	e0bff917 	ldw	r2,-28(fp)
    88c4:	10c0058b 	ldhu	r3,22(r2)
    88c8:	e0bff917 	ldw	r2,-28(fp)
    88cc:	1080050b 	ldhu	r2,20(r2)
    88d0:	18ffffcc 	andi	r3,r3,65535
    88d4:	10bfffcc 	andi	r2,r2,65535
    88d8:	18800636 	bltu	r3,r2,88f4 <OSQPostFront+0xe8>
    88dc:	e0bff817 	ldw	r2,-32(fp)
    88e0:	e0bffc15 	stw	r2,-16(fp)
    88e4:	e0bffc17 	ldw	r2,-16(fp)
    88e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    88ec:	00800784 	movi	r2,30
    88f0:	00001d06 	br	8968 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    88f4:	e0bff917 	ldw	r2,-28(fp)
    88f8:	10c00417 	ldw	r3,16(r2)
    88fc:	e0bff917 	ldw	r2,-28(fp)
    8900:	10800117 	ldw	r2,4(r2)
    8904:	1880041e 	bne	r3,r2,8918 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    8908:	e0bff917 	ldw	r2,-28(fp)
    890c:	10c00217 	ldw	r3,8(r2)
    8910:	e0bff917 	ldw	r2,-28(fp)
    8914:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    8918:	e0bff917 	ldw	r2,-28(fp)
    891c:	10800417 	ldw	r2,16(r2)
    8920:	10ffff04 	addi	r3,r2,-4
    8924:	e0bff917 	ldw	r2,-28(fp)
    8928:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    892c:	e0bff917 	ldw	r2,-28(fp)
    8930:	10800417 	ldw	r2,16(r2)
    8934:	e0ffff17 	ldw	r3,-4(fp)
    8938:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    893c:	e0bff917 	ldw	r2,-28(fp)
    8940:	1080058b 	ldhu	r2,22(r2)
    8944:	10800044 	addi	r2,r2,1
    8948:	1007883a 	mov	r3,r2
    894c:	e0bff917 	ldw	r2,-28(fp)
    8950:	10c0058d 	sth	r3,22(r2)
    8954:	e0bff817 	ldw	r2,-32(fp)
    8958:	e0bffd15 	stw	r2,-12(fp)
    895c:	e0bffd17 	ldw	r2,-12(fp)
    8960:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8964:	0005883a 	mov	r2,zero
}
    8968:	e037883a 	mov	sp,fp
    896c:	dfc00117 	ldw	ra,4(sp)
    8970:	df000017 	ldw	fp,0(sp)
    8974:	dec00204 	addi	sp,sp,8
    8978:	f800283a 	ret

0000897c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    897c:	defff504 	addi	sp,sp,-44
    8980:	dfc00a15 	stw	ra,40(sp)
    8984:	df000915 	stw	fp,36(sp)
    8988:	df000904 	addi	fp,sp,36
    898c:	e13ffd15 	stw	r4,-12(fp)
    8990:	e17ffe15 	stw	r5,-8(fp)
    8994:	3005883a 	mov	r2,r6
    8998:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    899c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    89a0:	e0bffd17 	ldw	r2,-12(fp)
    89a4:	1000021e 	bne	r2,zero,89b0 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    89a8:	00800104 	movi	r2,4
    89ac:	00007106 	br	8b74 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    89b0:	e0bffd17 	ldw	r2,-12(fp)
    89b4:	10800003 	ldbu	r2,0(r2)
    89b8:	10803fcc 	andi	r2,r2,255
    89bc:	108000a0 	cmpeqi	r2,r2,2
    89c0:	1000021e 	bne	r2,zero,89cc <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    89c4:	00800044 	movi	r2,1
    89c8:	00006a06 	br	8b74 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    89cc:	0005303a 	rdctl	r2,status
    89d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    89d4:	e0fff917 	ldw	r3,-28(fp)
    89d8:	00bfff84 	movi	r2,-2
    89dc:	1884703a 	and	r2,r3,r2
    89e0:	1001703a 	wrctl	status,r2
  
  return context;
    89e4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    89e8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    89ec:	e0bffd17 	ldw	r2,-12(fp)
    89f0:	10800283 	ldbu	r2,10(r2)
    89f4:	10803fcc 	andi	r2,r2,255
    89f8:	10001d26 	beq	r2,zero,8a70 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    89fc:	e0bfff03 	ldbu	r2,-4(fp)
    8a00:	1080004c 	andi	r2,r2,1
    8a04:	10000b26 	beq	r2,zero,8a34 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8a08:	00000506 	br	8a20 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8a0c:	e13ffd17 	ldw	r4,-12(fp)
    8a10:	e17ffe17 	ldw	r5,-8(fp)
    8a14:	01800104 	movi	r6,4
    8a18:	000f883a 	mov	r7,zero
    8a1c:	00049400 	call	4940 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8a20:	e0bffd17 	ldw	r2,-12(fp)
    8a24:	10800283 	ldbu	r2,10(r2)
    8a28:	10803fcc 	andi	r2,r2,255
    8a2c:	103ff71e 	bne	r2,zero,8a0c <OSQPostOpt+0x90>
    8a30:	00000506 	br	8a48 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8a34:	e13ffd17 	ldw	r4,-12(fp)
    8a38:	e17ffe17 	ldw	r5,-8(fp)
    8a3c:	01800104 	movi	r6,4
    8a40:	000f883a 	mov	r7,zero
    8a44:	00049400 	call	4940 <OS_EventTaskRdy>
    8a48:	e0bff717 	ldw	r2,-36(fp)
    8a4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8a50:	e0bffa17 	ldw	r2,-24(fp)
    8a54:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    8a58:	e0bfff03 	ldbu	r2,-4(fp)
    8a5c:	1080010c 	andi	r2,r2,4
    8a60:	1000011e 	bne	r2,zero,8a68 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    8a64:	000535c0 	call	535c <OS_Sched>
        }
        return (OS_ERR_NONE);
    8a68:	0005883a 	mov	r2,zero
    8a6c:	00004106 	br	8b74 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8a70:	e0bffd17 	ldw	r2,-12(fp)
    8a74:	10800117 	ldw	r2,4(r2)
    8a78:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8a7c:	e0bff817 	ldw	r2,-32(fp)
    8a80:	10c0058b 	ldhu	r3,22(r2)
    8a84:	e0bff817 	ldw	r2,-32(fp)
    8a88:	1080050b 	ldhu	r2,20(r2)
    8a8c:	18ffffcc 	andi	r3,r3,65535
    8a90:	10bfffcc 	andi	r2,r2,65535
    8a94:	18800636 	bltu	r3,r2,8ab0 <OSQPostOpt+0x134>
    8a98:	e0bff717 	ldw	r2,-36(fp)
    8a9c:	e0bffb15 	stw	r2,-20(fp)
    8aa0:	e0bffb17 	ldw	r2,-20(fp)
    8aa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8aa8:	00800784 	movi	r2,30
    8aac:	00003106 	br	8b74 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    8ab0:	e0bfff03 	ldbu	r2,-4(fp)
    8ab4:	1080008c 	andi	r2,r2,2
    8ab8:	10001326 	beq	r2,zero,8b08 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    8abc:	e0bff817 	ldw	r2,-32(fp)
    8ac0:	10c00417 	ldw	r3,16(r2)
    8ac4:	e0bff817 	ldw	r2,-32(fp)
    8ac8:	10800117 	ldw	r2,4(r2)
    8acc:	1880041e 	bne	r3,r2,8ae0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    8ad0:	e0bff817 	ldw	r2,-32(fp)
    8ad4:	10c00217 	ldw	r3,8(r2)
    8ad8:	e0bff817 	ldw	r2,-32(fp)
    8adc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    8ae0:	e0bff817 	ldw	r2,-32(fp)
    8ae4:	10800417 	ldw	r2,16(r2)
    8ae8:	10ffff04 	addi	r3,r2,-4
    8aec:	e0bff817 	ldw	r2,-32(fp)
    8af0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    8af4:	e0bff817 	ldw	r2,-32(fp)
    8af8:	10800417 	ldw	r2,16(r2)
    8afc:	e0fffe17 	ldw	r3,-8(fp)
    8b00:	10c00015 	stw	r3,0(r2)
    8b04:	00001006 	br	8b48 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    8b08:	e0bff817 	ldw	r2,-32(fp)
    8b0c:	10800317 	ldw	r2,12(r2)
    8b10:	e0fffe17 	ldw	r3,-8(fp)
    8b14:	10c00015 	stw	r3,0(r2)
    8b18:	10c00104 	addi	r3,r2,4
    8b1c:	e0bff817 	ldw	r2,-32(fp)
    8b20:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    8b24:	e0bff817 	ldw	r2,-32(fp)
    8b28:	10c00317 	ldw	r3,12(r2)
    8b2c:	e0bff817 	ldw	r2,-32(fp)
    8b30:	10800217 	ldw	r2,8(r2)
    8b34:	1880041e 	bne	r3,r2,8b48 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    8b38:	e0bff817 	ldw	r2,-32(fp)
    8b3c:	10c00117 	ldw	r3,4(r2)
    8b40:	e0bff817 	ldw	r2,-32(fp)
    8b44:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8b48:	e0bff817 	ldw	r2,-32(fp)
    8b4c:	1080058b 	ldhu	r2,22(r2)
    8b50:	10800044 	addi	r2,r2,1
    8b54:	1007883a 	mov	r3,r2
    8b58:	e0bff817 	ldw	r2,-32(fp)
    8b5c:	10c0058d 	sth	r3,22(r2)
    8b60:	e0bff717 	ldw	r2,-36(fp)
    8b64:	e0bffc15 	stw	r2,-16(fp)
    8b68:	e0bffc17 	ldw	r2,-16(fp)
    8b6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8b70:	0005883a 	mov	r2,zero
}
    8b74:	e037883a 	mov	sp,fp
    8b78:	dfc00117 	ldw	ra,4(sp)
    8b7c:	df000017 	ldw	fp,0(sp)
    8b80:	dec00204 	addi	sp,sp,8
    8b84:	f800283a 	ret

00008b88 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    8b88:	defff604 	addi	sp,sp,-40
    8b8c:	df000915 	stw	fp,36(sp)
    8b90:	df000904 	addi	fp,sp,36
    8b94:	e13ffe15 	stw	r4,-8(fp)
    8b98:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8b9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8ba0:	e0bffe17 	ldw	r2,-8(fp)
    8ba4:	1000021e 	bne	r2,zero,8bb0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8ba8:	00800104 	movi	r2,4
    8bac:	00004b06 	br	8cdc <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    8bb0:	e0bfff17 	ldw	r2,-4(fp)
    8bb4:	1000021e 	bne	r2,zero,8bc0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8bb8:	00800244 	movi	r2,9
    8bbc:	00004706 	br	8cdc <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8bc0:	e0bffe17 	ldw	r2,-8(fp)
    8bc4:	10800003 	ldbu	r2,0(r2)
    8bc8:	10803fcc 	andi	r2,r2,255
    8bcc:	108000a0 	cmpeqi	r2,r2,2
    8bd0:	1000021e 	bne	r2,zero,8bdc <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8bd4:	00800044 	movi	r2,1
    8bd8:	00004006 	br	8cdc <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8bdc:	0005303a 	rdctl	r2,status
    8be0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8be4:	e0fffc17 	ldw	r3,-16(fp)
    8be8:	00bfff84 	movi	r2,-2
    8bec:	1884703a 	and	r2,r3,r2
    8bf0:	1001703a 	wrctl	status,r2
  
  return context;
    8bf4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8bf8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    8bfc:	e0bffe17 	ldw	r2,-8(fp)
    8c00:	10c00283 	ldbu	r3,10(r2)
    8c04:	e0bfff17 	ldw	r2,-4(fp)
    8c08:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
    8c0c:	e0bffe17 	ldw	r2,-8(fp)
    8c10:	108002c4 	addi	r2,r2,11
    8c14:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    8c18:	e0bfff17 	ldw	r2,-4(fp)
    8c1c:	10800204 	addi	r2,r2,8
    8c20:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8c24:	e03ff705 	stb	zero,-36(fp)
    8c28:	00000d06 	br	8c60 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
    8c2c:	e0bff817 	ldw	r2,-32(fp)
    8c30:	10c00003 	ldbu	r3,0(r2)
    8c34:	e0bff917 	ldw	r2,-28(fp)
    8c38:	10c00005 	stb	r3,0(r2)
    8c3c:	e0bff917 	ldw	r2,-28(fp)
    8c40:	10800044 	addi	r2,r2,1
    8c44:	e0bff915 	stw	r2,-28(fp)
    8c48:	e0bff817 	ldw	r2,-32(fp)
    8c4c:	10800044 	addi	r2,r2,1
    8c50:	e0bff815 	stw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8c54:	e0bff703 	ldbu	r2,-36(fp)
    8c58:	10800044 	addi	r2,r2,1
    8c5c:	e0bff705 	stb	r2,-36(fp)
    8c60:	e0bff703 	ldbu	r2,-36(fp)
    8c64:	108001b0 	cmpltui	r2,r2,6
    8c68:	103ff01e 	bne	r2,zero,8c2c <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    8c6c:	e0bffe17 	ldw	r2,-8(fp)
    8c70:	10800117 	ldw	r2,4(r2)
    8c74:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    8c78:	e0bffb17 	ldw	r2,-20(fp)
    8c7c:	1080058b 	ldhu	r2,22(r2)
    8c80:	10bfffcc 	andi	r2,r2,65535
    8c84:	10000626 	beq	r2,zero,8ca0 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    8c88:	e0bffb17 	ldw	r2,-20(fp)
    8c8c:	10800417 	ldw	r2,16(r2)
    8c90:	10c00017 	ldw	r3,0(r2)
    8c94:	e0bfff17 	ldw	r2,-4(fp)
    8c98:	10c00015 	stw	r3,0(r2)
    8c9c:	00000206 	br	8ca8 <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
    8ca0:	e0bfff17 	ldw	r2,-4(fp)
    8ca4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    8ca8:	e0bffb17 	ldw	r2,-20(fp)
    8cac:	10c0058b 	ldhu	r3,22(r2)
    8cb0:	e0bfff17 	ldw	r2,-4(fp)
    8cb4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    8cb8:	e0bffb17 	ldw	r2,-20(fp)
    8cbc:	10c0050b 	ldhu	r3,20(r2)
    8cc0:	e0bfff17 	ldw	r2,-4(fp)
    8cc4:	10c0018d 	sth	r3,6(r2)
    8cc8:	e0bffa17 	ldw	r2,-24(fp)
    8ccc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8cd0:	e0bffd17 	ldw	r2,-12(fp)
    8cd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8cd8:	0005883a 	mov	r2,zero
}
    8cdc:	e037883a 	mov	sp,fp
    8ce0:	df000017 	ldw	fp,0(sp)
    8ce4:	dec00104 	addi	sp,sp,4
    8ce8:	f800283a 	ret

00008cec <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    8cec:	defffb04 	addi	sp,sp,-20
    8cf0:	dfc00415 	stw	ra,16(sp)
    8cf4:	df000315 	stw	fp,12(sp)
    8cf8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    8cfc:	01000074 	movhi	r4,1
    8d00:	211ff004 	addi	r4,r4,32704
    8d04:	01407804 	movi	r5,480
    8d08:	000529c0 	call	529c <OS_MemClr>
    pq1 = &OSQTbl[0];
    8d0c:	00800074 	movhi	r2,1
    8d10:	109ff004 	addi	r2,r2,32704
    8d14:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    8d18:	00800074 	movhi	r2,1
    8d1c:	109ff604 	addi	r2,r2,32728
    8d20:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    8d24:	e03ffd0d 	sth	zero,-12(fp)
    8d28:	00000c06 	br	8d5c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    8d2c:	e0bffe17 	ldw	r2,-8(fp)
    8d30:	e0ffff17 	ldw	r3,-4(fp)
    8d34:	10c00015 	stw	r3,0(r2)
        pq1++;
    8d38:	e0bffe17 	ldw	r2,-8(fp)
    8d3c:	10800604 	addi	r2,r2,24
    8d40:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    8d44:	e0bfff17 	ldw	r2,-4(fp)
    8d48:	10800604 	addi	r2,r2,24
    8d4c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    8d50:	e0bffd0b 	ldhu	r2,-12(fp)
    8d54:	10800044 	addi	r2,r2,1
    8d58:	e0bffd0d 	sth	r2,-12(fp)
    8d5c:	e0bffd0b 	ldhu	r2,-12(fp)
    8d60:	108004f0 	cmpltui	r2,r2,19
    8d64:	103ff11e 	bne	r2,zero,8d2c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    8d68:	e0bffe17 	ldw	r2,-8(fp)
    8d6c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    8d70:	00800074 	movhi	r2,1
    8d74:	1089f104 	addi	r2,r2,10180
    8d78:	00c00074 	movhi	r3,1
    8d7c:	18dff004 	addi	r3,r3,32704
    8d80:	10c00015 	stw	r3,0(r2)
#endif
}
    8d84:	e037883a 	mov	sp,fp
    8d88:	dfc00117 	ldw	ra,4(sp)
    8d8c:	df000017 	ldw	fp,0(sp)
    8d90:	dec00204 	addi	sp,sp,8
    8d94:	f800283a 	ret

00008d98 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    8d98:	defffa04 	addi	sp,sp,-24
    8d9c:	df000515 	stw	fp,20(sp)
    8da0:	df000504 	addi	fp,sp,20
    8da4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8da8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8dac:	e0bfff17 	ldw	r2,-4(fp)
    8db0:	1000021e 	bne	r2,zero,8dbc <OSSemAccept+0x24>
        return (0);
    8db4:	0005883a 	mov	r2,zero
    8db8:	00001f06 	br	8e38 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8dbc:	e0bfff17 	ldw	r2,-4(fp)
    8dc0:	10800003 	ldbu	r2,0(r2)
    8dc4:	10803fcc 	andi	r2,r2,255
    8dc8:	108000e0 	cmpeqi	r2,r2,3
    8dcc:	1000021e 	bne	r2,zero,8dd8 <OSSemAccept+0x40>
        return (0);
    8dd0:	0005883a 	mov	r2,zero
    8dd4:	00001806 	br	8e38 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8dd8:	0005303a 	rdctl	r2,status
    8ddc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8de0:	e0fffd17 	ldw	r3,-12(fp)
    8de4:	00bfff84 	movi	r2,-2
    8de8:	1884703a 	and	r2,r3,r2
    8dec:	1001703a 	wrctl	status,r2
  
  return context;
    8df0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8df4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    8df8:	e0bfff17 	ldw	r2,-4(fp)
    8dfc:	1080020b 	ldhu	r2,8(r2)
    8e00:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    8e04:	e0bffc0b 	ldhu	r2,-16(fp)
    8e08:	10000626 	beq	r2,zero,8e24 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    8e0c:	e0bfff17 	ldw	r2,-4(fp)
    8e10:	1080020b 	ldhu	r2,8(r2)
    8e14:	10bfffc4 	addi	r2,r2,-1
    8e18:	1007883a 	mov	r3,r2
    8e1c:	e0bfff17 	ldw	r2,-4(fp)
    8e20:	10c0020d 	sth	r3,8(r2)
    8e24:	e0bffb17 	ldw	r2,-20(fp)
    8e28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e2c:	e0bffe17 	ldw	r2,-8(fp)
    8e30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    8e34:	e0bffc0b 	ldhu	r2,-16(fp)
}
    8e38:	e037883a 	mov	sp,fp
    8e3c:	df000017 	ldw	fp,0(sp)
    8e40:	dec00104 	addi	sp,sp,4
    8e44:	f800283a 	ret

00008e48 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    8e48:	defff904 	addi	sp,sp,-28
    8e4c:	dfc00615 	stw	ra,24(sp)
    8e50:	df000515 	stw	fp,20(sp)
    8e54:	df000504 	addi	fp,sp,20
    8e58:	2005883a 	mov	r2,r4
    8e5c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8e60:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8e64:	00800074 	movhi	r2,1
    8e68:	1089f504 	addi	r2,r2,10196
    8e6c:	10800003 	ldbu	r2,0(r2)
    8e70:	10803fcc 	andi	r2,r2,255
    8e74:	10000226 	beq	r2,zero,8e80 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    8e78:	0005883a 	mov	r2,zero
    8e7c:	00002d06 	br	8f34 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e80:	0005303a 	rdctl	r2,status
    8e84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e88:	e0fffd17 	ldw	r3,-12(fp)
    8e8c:	00bfff84 	movi	r2,-2
    8e90:	1884703a 	and	r2,r3,r2
    8e94:	1001703a 	wrctl	status,r2
  
  return context;
    8e98:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8e9c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    8ea0:	00800074 	movhi	r2,1
    8ea4:	1089f404 	addi	r2,r2,10192
    8ea8:	10800017 	ldw	r2,0(r2)
    8eac:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    8eb0:	00800074 	movhi	r2,1
    8eb4:	1089f404 	addi	r2,r2,10192
    8eb8:	10800017 	ldw	r2,0(r2)
    8ebc:	10000726 	beq	r2,zero,8edc <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    8ec0:	00800074 	movhi	r2,1
    8ec4:	1089f404 	addi	r2,r2,10192
    8ec8:	10800017 	ldw	r2,0(r2)
    8ecc:	10c00117 	ldw	r3,4(r2)
    8ed0:	00800074 	movhi	r2,1
    8ed4:	1089f404 	addi	r2,r2,10192
    8ed8:	10c00015 	stw	r3,0(r2)
    8edc:	e0bffb17 	ldw	r2,-20(fp)
    8ee0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ee4:	e0bffe17 	ldw	r2,-8(fp)
    8ee8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    8eec:	e0bffc17 	ldw	r2,-16(fp)
    8ef0:	10000f26 	beq	r2,zero,8f30 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    8ef4:	e0bffc17 	ldw	r2,-16(fp)
    8ef8:	00c000c4 	movi	r3,3
    8efc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    8f00:	e0bffc17 	ldw	r2,-16(fp)
    8f04:	e0ffff0b 	ldhu	r3,-4(fp)
    8f08:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    8f0c:	e0bffc17 	ldw	r2,-16(fp)
    8f10:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    8f14:	e0bffc17 	ldw	r2,-16(fp)
    8f18:	00c00fc4 	movi	r3,63
    8f1c:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    8f20:	e0bffc17 	ldw	r2,-16(fp)
    8f24:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    8f28:	e13ffc17 	ldw	r4,-16(fp)
    8f2c:	0004ed00 	call	4ed0 <OS_EventWaitListInit>
    }
    return (pevent);
    8f30:	e0bffc17 	ldw	r2,-16(fp)
}
    8f34:	e037883a 	mov	sp,fp
    8f38:	dfc00117 	ldw	ra,4(sp)
    8f3c:	df000017 	ldw	fp,0(sp)
    8f40:	dec00204 	addi	sp,sp,8
    8f44:	f800283a 	ret

00008f48 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8f48:	defff304 	addi	sp,sp,-52
    8f4c:	dfc00c15 	stw	ra,48(sp)
    8f50:	df000b15 	stw	fp,44(sp)
    8f54:	df000b04 	addi	fp,sp,44
    8f58:	e13ffd15 	stw	r4,-12(fp)
    8f5c:	2805883a 	mov	r2,r5
    8f60:	e1bfff15 	stw	r6,-4(fp)
    8f64:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8f68:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8f6c:	e0bfff17 	ldw	r2,-4(fp)
    8f70:	1000021e 	bne	r2,zero,8f7c <OSSemDel+0x34>
        return (pevent);
    8f74:	e0bffd17 	ldw	r2,-12(fp)
    8f78:	00008a06 	br	91a4 <OSSemDel+0x25c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8f7c:	e0bffd17 	ldw	r2,-12(fp)
    8f80:	1000051e 	bne	r2,zero,8f98 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8f84:	e0bfff17 	ldw	r2,-4(fp)
    8f88:	00c00104 	movi	r3,4
    8f8c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8f90:	e0bffd17 	ldw	r2,-12(fp)
    8f94:	00008306 	br	91a4 <OSSemDel+0x25c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    8f98:	e0bffd17 	ldw	r2,-12(fp)
    8f9c:	10800003 	ldbu	r2,0(r2)
    8fa0:	10803fcc 	andi	r2,r2,255
    8fa4:	108000e0 	cmpeqi	r2,r2,3
    8fa8:	1000051e 	bne	r2,zero,8fc0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8fac:	e0bfff17 	ldw	r2,-4(fp)
    8fb0:	00c00044 	movi	r3,1
    8fb4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8fb8:	e0bffd17 	ldw	r2,-12(fp)
    8fbc:	00007906 	br	91a4 <OSSemDel+0x25c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8fc0:	00800074 	movhi	r2,1
    8fc4:	1089f504 	addi	r2,r2,10196
    8fc8:	10800003 	ldbu	r2,0(r2)
    8fcc:	10803fcc 	andi	r2,r2,255
    8fd0:	10000526 	beq	r2,zero,8fe8 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    8fd4:	e0bfff17 	ldw	r2,-4(fp)
    8fd8:	00c003c4 	movi	r3,15
    8fdc:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8fe0:	e0bffd17 	ldw	r2,-12(fp)
    8fe4:	00006f06 	br	91a4 <OSSemDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fe8:	0005303a 	rdctl	r2,status
    8fec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ff0:	e0fff817 	ldw	r3,-32(fp)
    8ff4:	00bfff84 	movi	r2,-2
    8ff8:	1884703a 	and	r2,r3,r2
    8ffc:	1001703a 	wrctl	status,r2
  
  return context;
    9000:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    9004:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    9008:	e0bffd17 	ldw	r2,-12(fp)
    900c:	10800283 	ldbu	r2,10(r2)
    9010:	10803fcc 	andi	r2,r2,255
    9014:	10000326 	beq	r2,zero,9024 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    9018:	00800044 	movi	r2,1
    901c:	e0bff505 	stb	r2,-44(fp)
    9020:	00000106 	br	9028 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    9024:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    9028:	e0bffe03 	ldbu	r2,-8(fp)
    902c:	10000326 	beq	r2,zero,903c <OSSemDel+0xf4>
    9030:	10800060 	cmpeqi	r2,r2,1
    9034:	10002d1e 	bne	r2,zero,90ec <OSSemDel+0x1a4>
    9038:	00004f06 	br	9178 <OSSemDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    903c:	e0bff503 	ldbu	r2,-44(fp)
    9040:	10001a1e 	bne	r2,zero,90ac <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    9044:	e0bffd17 	ldw	r2,-12(fp)
    9048:	00c00fc4 	movi	r3,63
    904c:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    9050:	e0bffd17 	ldw	r2,-12(fp)
    9054:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9058:	e0bffd17 	ldw	r2,-12(fp)
    905c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    9060:	00800074 	movhi	r2,1
    9064:	1089f404 	addi	r2,r2,10192
    9068:	10c00017 	ldw	r3,0(r2)
    906c:	e0bffd17 	ldw	r2,-12(fp)
    9070:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    9074:	e0bffd17 	ldw	r2,-12(fp)
    9078:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    907c:	00800074 	movhi	r2,1
    9080:	1089f404 	addi	r2,r2,10192
    9084:	e0fffd17 	ldw	r3,-12(fp)
    9088:	10c00015 	stw	r3,0(r2)
    908c:	e0bff717 	ldw	r2,-36(fp)
    9090:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9094:	e0bff917 	ldw	r2,-28(fp)
    9098:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    909c:	e0bfff17 	ldw	r2,-4(fp)
    90a0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    90a4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    90a8:	00003d06 	br	91a0 <OSSemDel+0x258>
    90ac:	e0bff717 	ldw	r2,-36(fp)
    90b0:	e0bffa15 	stw	r2,-24(fp)
    90b4:	e0bffa17 	ldw	r2,-24(fp)
    90b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    90bc:	e0bfff17 	ldw	r2,-4(fp)
    90c0:	00c01244 	movi	r3,73
    90c4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    90c8:	e0bffd17 	ldw	r2,-12(fp)
    90cc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    90d0:	00003306 	br	91a0 <OSSemDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    90d4:	e13ffd17 	ldw	r4,-12(fp)
    90d8:	000b883a 	mov	r5,zero
    90dc:	01800044 	movi	r6,1
    90e0:	000f883a 	mov	r7,zero
    90e4:	00049400 	call	4940 <OS_EventTaskRdy>
    90e8:	00000106 	br	90f0 <OSSemDel+0x1a8>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    90ec:	0001883a 	nop
    90f0:	e0bffd17 	ldw	r2,-12(fp)
    90f4:	10800283 	ldbu	r2,10(r2)
    90f8:	10803fcc 	andi	r2,r2,255
    90fc:	103ff51e 	bne	r2,zero,90d4 <OSSemDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    9100:	e0bffd17 	ldw	r2,-12(fp)
    9104:	00c00fc4 	movi	r3,63
    9108:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    910c:	e0bffd17 	ldw	r2,-12(fp)
    9110:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9114:	e0bffd17 	ldw	r2,-12(fp)
    9118:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    911c:	00800074 	movhi	r2,1
    9120:	1089f404 	addi	r2,r2,10192
    9124:	10c00017 	ldw	r3,0(r2)
    9128:	e0bffd17 	ldw	r2,-12(fp)
    912c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9130:	e0bffd17 	ldw	r2,-12(fp)
    9134:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9138:	00800074 	movhi	r2,1
    913c:	1089f404 	addi	r2,r2,10192
    9140:	e0fffd17 	ldw	r3,-12(fp)
    9144:	10c00015 	stw	r3,0(r2)
    9148:	e0bff717 	ldw	r2,-36(fp)
    914c:	e0bffb15 	stw	r2,-20(fp)
    9150:	e0bffb17 	ldw	r2,-20(fp)
    9154:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    9158:	e0bff503 	ldbu	r2,-44(fp)
    915c:	10800058 	cmpnei	r2,r2,1
    9160:	1000011e 	bne	r2,zero,9168 <OSSemDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    9164:	000535c0 	call	535c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    9168:	e0bfff17 	ldw	r2,-4(fp)
    916c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    9170:	e03ff615 	stw	zero,-40(fp)
             break;
    9174:	00000a06 	br	91a0 <OSSemDel+0x258>
    9178:	e0bff717 	ldw	r2,-36(fp)
    917c:	e0bffc15 	stw	r2,-16(fp)
    9180:	e0bffc17 	ldw	r2,-16(fp)
    9184:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    9188:	e0bfff17 	ldw	r2,-4(fp)
    918c:	00c001c4 	movi	r3,7
    9190:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    9194:	e0bffd17 	ldw	r2,-12(fp)
    9198:	e0bff615 	stw	r2,-40(fp)
             break;
    919c:	0001883a 	nop
    }
    return (pevent_return);
    91a0:	e0bff617 	ldw	r2,-40(fp)
}
    91a4:	e037883a 	mov	sp,fp
    91a8:	dfc00117 	ldw	ra,4(sp)
    91ac:	df000017 	ldw	fp,0(sp)
    91b0:	dec00204 	addi	sp,sp,8
    91b4:	f800283a 	ret

000091b8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    91b8:	defff504 	addi	sp,sp,-44
    91bc:	dfc00a15 	stw	ra,40(sp)
    91c0:	df000915 	stw	fp,36(sp)
    91c4:	df000904 	addi	fp,sp,36
    91c8:	e13ffd15 	stw	r4,-12(fp)
    91cc:	2805883a 	mov	r2,r5
    91d0:	e1bfff15 	stw	r6,-4(fp)
    91d4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    91d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    91dc:	e0bfff17 	ldw	r2,-4(fp)
    91e0:	10008a26 	beq	r2,zero,940c <OSSemPend+0x254>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    91e4:	e0bffd17 	ldw	r2,-12(fp)
    91e8:	1000041e 	bne	r2,zero,91fc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    91ec:	e0bfff17 	ldw	r2,-4(fp)
    91f0:	00c00104 	movi	r3,4
    91f4:	10c00005 	stb	r3,0(r2)
        return;
    91f8:	00008506 	br	9410 <OSSemPend+0x258>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    91fc:	e0bffd17 	ldw	r2,-12(fp)
    9200:	10800003 	ldbu	r2,0(r2)
    9204:	10803fcc 	andi	r2,r2,255
    9208:	108000e0 	cmpeqi	r2,r2,3
    920c:	1000041e 	bne	r2,zero,9220 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    9210:	e0bfff17 	ldw	r2,-4(fp)
    9214:	00c00044 	movi	r3,1
    9218:	10c00005 	stb	r3,0(r2)
        return;
    921c:	00007c06 	br	9410 <OSSemPend+0x258>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    9220:	00800074 	movhi	r2,1
    9224:	1089f504 	addi	r2,r2,10196
    9228:	10800003 	ldbu	r2,0(r2)
    922c:	10803fcc 	andi	r2,r2,255
    9230:	10000426 	beq	r2,zero,9244 <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    9234:	e0bfff17 	ldw	r2,-4(fp)
    9238:	00c00084 	movi	r3,2
    923c:	10c00005 	stb	r3,0(r2)
        return;
    9240:	00007306 	br	9410 <OSSemPend+0x258>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    9244:	00800074 	movhi	r2,1
    9248:	1089e604 	addi	r2,r2,10136
    924c:	10800003 	ldbu	r2,0(r2)
    9250:	10803fcc 	andi	r2,r2,255
    9254:	10000426 	beq	r2,zero,9268 <OSSemPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    9258:	e0bfff17 	ldw	r2,-4(fp)
    925c:	00c00344 	movi	r3,13
    9260:	10c00005 	stb	r3,0(r2)
        return;
    9264:	00006a06 	br	9410 <OSSemPend+0x258>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9268:	0005303a 	rdctl	r2,status
    926c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9270:	e0fff817 	ldw	r3,-32(fp)
    9274:	00bfff84 	movi	r2,-2
    9278:	1884703a 	and	r2,r3,r2
    927c:	1001703a 	wrctl	status,r2
  
  return context;
    9280:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    9284:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    9288:	e0bffd17 	ldw	r2,-12(fp)
    928c:	1080020b 	ldhu	r2,8(r2)
    9290:	10bfffcc 	andi	r2,r2,65535
    9294:	10000d26 	beq	r2,zero,92cc <OSSemPend+0x114>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    9298:	e0bffd17 	ldw	r2,-12(fp)
    929c:	1080020b 	ldhu	r2,8(r2)
    92a0:	10bfffc4 	addi	r2,r2,-1
    92a4:	1007883a 	mov	r3,r2
    92a8:	e0bffd17 	ldw	r2,-12(fp)
    92ac:	10c0020d 	sth	r3,8(r2)
    92b0:	e0bff717 	ldw	r2,-36(fp)
    92b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    92b8:	e0bff917 	ldw	r2,-28(fp)
    92bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    92c0:	e0bfff17 	ldw	r2,-4(fp)
    92c4:	10000005 	stb	zero,0(r2)
        return;
    92c8:	00005106 	br	9410 <OSSemPend+0x258>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    92cc:	00800074 	movhi	r2,1
    92d0:	1089f604 	addi	r2,r2,10200
    92d4:	10800017 	ldw	r2,0(r2)
    92d8:	00c00074 	movhi	r3,1
    92dc:	18c9f604 	addi	r3,r3,10200
    92e0:	18c00017 	ldw	r3,0(r3)
    92e4:	18c00c03 	ldbu	r3,48(r3)
    92e8:	18c00054 	ori	r3,r3,1
    92ec:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    92f0:	00800074 	movhi	r2,1
    92f4:	1089f604 	addi	r2,r2,10200
    92f8:	10800017 	ldw	r2,0(r2)
    92fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    9300:	00800074 	movhi	r2,1
    9304:	1089f604 	addi	r2,r2,10200
    9308:	10800017 	ldw	r2,0(r2)
    930c:	e0fffe0b 	ldhu	r3,-8(fp)
    9310:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    9314:	e13ffd17 	ldw	r4,-12(fp)
    9318:	0004ad80 	call	4ad8 <OS_EventTaskWait>
    931c:	e0bff717 	ldw	r2,-36(fp)
    9320:	e0bffa15 	stw	r2,-24(fp)
    9324:	e0bffa17 	ldw	r2,-24(fp)
    9328:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    932c:	000535c0 	call	535c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9330:	0005303a 	rdctl	r2,status
    9334:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9338:	e0fffb17 	ldw	r3,-20(fp)
    933c:	00bfff84 	movi	r2,-2
    9340:	1884703a 	and	r2,r3,r2
    9344:	1001703a 	wrctl	status,r2
  
  return context;
    9348:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    934c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    9350:	00800074 	movhi	r2,1
    9354:	1089f604 	addi	r2,r2,10200
    9358:	10800017 	ldw	r2,0(r2)
    935c:	10800c43 	ldbu	r2,49(r2)
    9360:	10803fcc 	andi	r2,r2,255
    9364:	10000326 	beq	r2,zero,9374 <OSSemPend+0x1bc>
    9368:	108000a0 	cmpeqi	r2,r2,2
    936c:	1000041e 	bne	r2,zero,9380 <OSSemPend+0x1c8>
    9370:	00000706 	br	9390 <OSSemPend+0x1d8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    9374:	e0bfff17 	ldw	r2,-4(fp)
    9378:	10000005 	stb	zero,0(r2)
             break;
    937c:	00000e06 	br	93b8 <OSSemPend+0x200>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    9380:	e0bfff17 	ldw	r2,-4(fp)
    9384:	00c00384 	movi	r3,14
    9388:	10c00005 	stb	r3,0(r2)
             break;
    938c:	00000a06 	br	93b8 <OSSemPend+0x200>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    9390:	00800074 	movhi	r2,1
    9394:	1089f604 	addi	r2,r2,10200
    9398:	10800017 	ldw	r2,0(r2)
    939c:	1009883a 	mov	r4,r2
    93a0:	e17ffd17 	ldw	r5,-12(fp)
    93a4:	0004d280 	call	4d28 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    93a8:	e0bfff17 	ldw	r2,-4(fp)
    93ac:	00c00284 	movi	r3,10
    93b0:	10c00005 	stb	r3,0(r2)
             break;
    93b4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    93b8:	00800074 	movhi	r2,1
    93bc:	1089f604 	addi	r2,r2,10200
    93c0:	10800017 	ldw	r2,0(r2)
    93c4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    93c8:	00800074 	movhi	r2,1
    93cc:	1089f604 	addi	r2,r2,10200
    93d0:	10800017 	ldw	r2,0(r2)
    93d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    93d8:	00800074 	movhi	r2,1
    93dc:	1089f604 	addi	r2,r2,10200
    93e0:	10800017 	ldw	r2,0(r2)
    93e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    93e8:	00800074 	movhi	r2,1
    93ec:	1089f604 	addi	r2,r2,10200
    93f0:	10800017 	ldw	r2,0(r2)
    93f4:	10000815 	stw	zero,32(r2)
    93f8:	e0bff717 	ldw	r2,-36(fp)
    93fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9400:	e0bffc17 	ldw	r2,-16(fp)
    9404:	1001703a 	wrctl	status,r2
    9408:	00000106 	br	9410 <OSSemPend+0x258>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    940c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
    9410:	e037883a 	mov	sp,fp
    9414:	dfc00117 	ldw	ra,4(sp)
    9418:	df000017 	ldw	fp,0(sp)
    941c:	dec00204 	addi	sp,sp,8
    9420:	f800283a 	ret

00009424 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9424:	defff604 	addi	sp,sp,-40
    9428:	dfc00915 	stw	ra,36(sp)
    942c:	df000815 	stw	fp,32(sp)
    9430:	df000804 	addi	fp,sp,32
    9434:	e13ffd15 	stw	r4,-12(fp)
    9438:	2805883a 	mov	r2,r5
    943c:	e1bfff15 	stw	r6,-4(fp)
    9440:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9444:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9448:	e0bfff17 	ldw	r2,-4(fp)
    944c:	1000021e 	bne	r2,zero,9458 <OSSemPendAbort+0x34>
        return (0);
    9450:	0005883a 	mov	r2,zero
    9454:	00004b06 	br	9584 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9458:	e0bffd17 	ldw	r2,-12(fp)
    945c:	1000051e 	bne	r2,zero,9474 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9460:	e0bfff17 	ldw	r2,-4(fp)
    9464:	00c00104 	movi	r3,4
    9468:	10c00005 	stb	r3,0(r2)
        return (0);
    946c:	0005883a 	mov	r2,zero
    9470:	00004406 	br	9584 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9474:	e0bffd17 	ldw	r2,-12(fp)
    9478:	10800003 	ldbu	r2,0(r2)
    947c:	10803fcc 	andi	r2,r2,255
    9480:	108000e0 	cmpeqi	r2,r2,3
    9484:	1000051e 	bne	r2,zero,949c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9488:	e0bfff17 	ldw	r2,-4(fp)
    948c:	00c00044 	movi	r3,1
    9490:	10c00005 	stb	r3,0(r2)
        return (0);
    9494:	0005883a 	mov	r2,zero
    9498:	00003a06 	br	9584 <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    949c:	0005303a 	rdctl	r2,status
    94a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    94a4:	e0fffa17 	ldw	r3,-24(fp)
    94a8:	00bfff84 	movi	r2,-2
    94ac:	1884703a 	and	r2,r3,r2
    94b0:	1001703a 	wrctl	status,r2
  
  return context;
    94b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    94b8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    94bc:	e0bffd17 	ldw	r2,-12(fp)
    94c0:	10800283 	ldbu	r2,10(r2)
    94c4:	10803fcc 	andi	r2,r2,255
    94c8:	10002726 	beq	r2,zero,9568 <OSSemPendAbort+0x144>
        nbr_tasks = 0;
    94cc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    94d0:	e0bffe03 	ldbu	r2,-8(fp)
    94d4:	10800060 	cmpeqi	r2,r2,1
    94d8:	10000a1e 	bne	r2,zero,9504 <OSSemPendAbort+0xe0>
    94dc:	00000f06 	br	951c <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    94e0:	e13ffd17 	ldw	r4,-12(fp)
    94e4:	000b883a 	mov	r5,zero
    94e8:	01800044 	movi	r6,1
    94ec:	01c00084 	movi	r7,2
    94f0:	00049400 	call	4940 <OS_EventTaskRdy>
                     nbr_tasks++;
    94f4:	e0bff803 	ldbu	r2,-32(fp)
    94f8:	10800044 	addi	r2,r2,1
    94fc:	e0bff805 	stb	r2,-32(fp)
    9500:	00000106 	br	9508 <OSSemPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    9504:	0001883a 	nop
    9508:	e0bffd17 	ldw	r2,-12(fp)
    950c:	10800283 	ldbu	r2,10(r2)
    9510:	10803fcc 	andi	r2,r2,255
    9514:	103ff21e 	bne	r2,zero,94e0 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    9518:	00000906 	br	9540 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    951c:	e13ffd17 	ldw	r4,-12(fp)
    9520:	000b883a 	mov	r5,zero
    9524:	01800044 	movi	r6,1
    9528:	01c00084 	movi	r7,2
    952c:	00049400 	call	4940 <OS_EventTaskRdy>
                 nbr_tasks++;
    9530:	e0bff803 	ldbu	r2,-32(fp)
    9534:	10800044 	addi	r2,r2,1
    9538:	e0bff805 	stb	r2,-32(fp)
                 break;
    953c:	0001883a 	nop
    9540:	e0bff917 	ldw	r2,-28(fp)
    9544:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9548:	e0bffb17 	ldw	r2,-20(fp)
    954c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    9550:	000535c0 	call	535c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    9554:	e0bfff17 	ldw	r2,-4(fp)
    9558:	00c00384 	movi	r3,14
    955c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    9560:	e0bff803 	ldbu	r2,-32(fp)
    9564:	00000706 	br	9584 <OSSemPendAbort+0x160>
    9568:	e0bff917 	ldw	r2,-28(fp)
    956c:	e0bffc15 	stw	r2,-16(fp)
    9570:	e0bffc17 	ldw	r2,-16(fp)
    9574:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9578:	e0bfff17 	ldw	r2,-4(fp)
    957c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    9580:	0005883a 	mov	r2,zero
}
    9584:	e037883a 	mov	sp,fp
    9588:	dfc00117 	ldw	ra,4(sp)
    958c:	df000017 	ldw	fp,0(sp)
    9590:	dec00204 	addi	sp,sp,8
    9594:	f800283a 	ret

00009598 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    9598:	defff804 	addi	sp,sp,-32
    959c:	dfc00715 	stw	ra,28(sp)
    95a0:	df000615 	stw	fp,24(sp)
    95a4:	df000604 	addi	fp,sp,24
    95a8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    95ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    95b0:	e0bfff17 	ldw	r2,-4(fp)
    95b4:	1000021e 	bne	r2,zero,95c0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    95b8:	00800104 	movi	r2,4
    95bc:	00003506 	br	9694 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    95c0:	e0bfff17 	ldw	r2,-4(fp)
    95c4:	10800003 	ldbu	r2,0(r2)
    95c8:	10803fcc 	andi	r2,r2,255
    95cc:	108000e0 	cmpeqi	r2,r2,3
    95d0:	1000021e 	bne	r2,zero,95dc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    95d4:	00800044 	movi	r2,1
    95d8:	00002e06 	br	9694 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    95dc:	0005303a 	rdctl	r2,status
    95e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95e4:	e0fffb17 	ldw	r3,-20(fp)
    95e8:	00bfff84 	movi	r2,-2
    95ec:	1884703a 	and	r2,r3,r2
    95f0:	1001703a 	wrctl	status,r2
  
  return context;
    95f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    95f8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    95fc:	e0bfff17 	ldw	r2,-4(fp)
    9600:	10800283 	ldbu	r2,10(r2)
    9604:	10803fcc 	andi	r2,r2,255
    9608:	10000c26 	beq	r2,zero,963c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    960c:	e13fff17 	ldw	r4,-4(fp)
    9610:	000b883a 	mov	r5,zero
    9614:	01800044 	movi	r6,1
    9618:	000f883a 	mov	r7,zero
    961c:	00049400 	call	4940 <OS_EventTaskRdy>
    9620:	e0bffa17 	ldw	r2,-24(fp)
    9624:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9628:	e0bffc17 	ldw	r2,-16(fp)
    962c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    9630:	000535c0 	call	535c <OS_Sched>
        return (OS_ERR_NONE);
    9634:	0005883a 	mov	r2,zero
    9638:	00001606 	br	9694 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    963c:	e0bfff17 	ldw	r2,-4(fp)
    9640:	1080020b 	ldhu	r2,8(r2)
    9644:	10ffffcc 	andi	r3,r2,65535
    9648:	00bfffd4 	movui	r2,65535
    964c:	18800c26 	beq	r3,r2,9680 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    9650:	e0bfff17 	ldw	r2,-4(fp)
    9654:	1080020b 	ldhu	r2,8(r2)
    9658:	10800044 	addi	r2,r2,1
    965c:	1007883a 	mov	r3,r2
    9660:	e0bfff17 	ldw	r2,-4(fp)
    9664:	10c0020d 	sth	r3,8(r2)
    9668:	e0bffa17 	ldw	r2,-24(fp)
    966c:	e0bffd15 	stw	r2,-12(fp)
    9670:	e0bffd17 	ldw	r2,-12(fp)
    9674:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    9678:	0005883a 	mov	r2,zero
    967c:	00000506 	br	9694 <OSSemPost+0xfc>
    9680:	e0bffa17 	ldw	r2,-24(fp)
    9684:	e0bffe15 	stw	r2,-8(fp)
    9688:	e0bffe17 	ldw	r2,-8(fp)
    968c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    9690:	00800c84 	movi	r2,50
}
    9694:	e037883a 	mov	sp,fp
    9698:	dfc00117 	ldw	ra,4(sp)
    969c:	df000017 	ldw	fp,0(sp)
    96a0:	dec00204 	addi	sp,sp,8
    96a4:	f800283a 	ret

000096a8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    96a8:	defff704 	addi	sp,sp,-36
    96ac:	df000815 	stw	fp,32(sp)
    96b0:	df000804 	addi	fp,sp,32
    96b4:	e13ffe15 	stw	r4,-8(fp)
    96b8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    96bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    96c0:	e0bffe17 	ldw	r2,-8(fp)
    96c4:	1000021e 	bne	r2,zero,96d0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    96c8:	00800104 	movi	r2,4
    96cc:	00003806 	br	97b0 <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    96d0:	e0bfff17 	ldw	r2,-4(fp)
    96d4:	1000021e 	bne	r2,zero,96e0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    96d8:	00800244 	movi	r2,9
    96dc:	00003406 	br	97b0 <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    96e0:	e0bffe17 	ldw	r2,-8(fp)
    96e4:	10800003 	ldbu	r2,0(r2)
    96e8:	10803fcc 	andi	r2,r2,255
    96ec:	108000e0 	cmpeqi	r2,r2,3
    96f0:	1000021e 	bne	r2,zero,96fc <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    96f4:	00800044 	movi	r2,1
    96f8:	00002d06 	br	97b0 <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    96fc:	0005303a 	rdctl	r2,status
    9700:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9704:	e0fffc17 	ldw	r3,-16(fp)
    9708:	00bfff84 	movi	r2,-2
    970c:	1884703a 	and	r2,r3,r2
    9710:	1001703a 	wrctl	status,r2
  
  return context;
    9714:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9718:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    971c:	e0bffe17 	ldw	r2,-8(fp)
    9720:	10c00283 	ldbu	r3,10(r2)
    9724:	e0bfff17 	ldw	r2,-4(fp)
    9728:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
    972c:	e0bffe17 	ldw	r2,-8(fp)
    9730:	108002c4 	addi	r2,r2,11
    9734:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    9738:	e0bfff17 	ldw	r2,-4(fp)
    973c:	10800084 	addi	r2,r2,2
    9740:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9744:	e03ffa05 	stb	zero,-24(fp)
    9748:	00000d06 	br	9780 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
    974c:	e0bff817 	ldw	r2,-32(fp)
    9750:	10c00003 	ldbu	r3,0(r2)
    9754:	e0bff917 	ldw	r2,-28(fp)
    9758:	10c00005 	stb	r3,0(r2)
    975c:	e0bff917 	ldw	r2,-28(fp)
    9760:	10800044 	addi	r2,r2,1
    9764:	e0bff915 	stw	r2,-28(fp)
    9768:	e0bff817 	ldw	r2,-32(fp)
    976c:	10800044 	addi	r2,r2,1
    9770:	e0bff815 	stw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9774:	e0bffa03 	ldbu	r2,-24(fp)
    9778:	10800044 	addi	r2,r2,1
    977c:	e0bffa05 	stb	r2,-24(fp)
    9780:	e0bffa03 	ldbu	r2,-24(fp)
    9784:	108001b0 	cmpltui	r2,r2,6
    9788:	103ff01e 	bne	r2,zero,974c <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    978c:	e0bffe17 	ldw	r2,-8(fp)
    9790:	10c0020b 	ldhu	r3,8(r2)
    9794:	e0bfff17 	ldw	r2,-4(fp)
    9798:	10c0000d 	sth	r3,0(r2)
    979c:	e0bffb17 	ldw	r2,-20(fp)
    97a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    97a4:	e0bffd17 	ldw	r2,-12(fp)
    97a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    97ac:	0005883a 	mov	r2,zero
}
    97b0:	e037883a 	mov	sp,fp
    97b4:	df000017 	ldw	fp,0(sp)
    97b8:	dec00104 	addi	sp,sp,4
    97bc:	f800283a 	ret

000097c0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    97c0:	defff904 	addi	sp,sp,-28
    97c4:	df000615 	stw	fp,24(sp)
    97c8:	df000604 	addi	fp,sp,24
    97cc:	e13ffd15 	stw	r4,-12(fp)
    97d0:	2805883a 	mov	r2,r5
    97d4:	e1bfff15 	stw	r6,-4(fp)
    97d8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    97dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    97e0:	e0bfff17 	ldw	r2,-4(fp)
    97e4:	10003126 	beq	r2,zero,98ac <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    97e8:	e0bffd17 	ldw	r2,-12(fp)
    97ec:	1000041e 	bne	r2,zero,9800 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    97f0:	e0bfff17 	ldw	r2,-4(fp)
    97f4:	00c00104 	movi	r3,4
    97f8:	10c00005 	stb	r3,0(r2)
        return;
    97fc:	00002c06 	br	98b0 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9800:	e0bffd17 	ldw	r2,-12(fp)
    9804:	10800003 	ldbu	r2,0(r2)
    9808:	10803fcc 	andi	r2,r2,255
    980c:	108000e0 	cmpeqi	r2,r2,3
    9810:	1000041e 	bne	r2,zero,9824 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    9814:	e0bfff17 	ldw	r2,-4(fp)
    9818:	00c00044 	movi	r3,1
    981c:	10c00005 	stb	r3,0(r2)
        return;
    9820:	00002306 	br	98b0 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9824:	0005303a 	rdctl	r2,status
    9828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    982c:	e0fffb17 	ldw	r3,-20(fp)
    9830:	00bfff84 	movi	r2,-2
    9834:	1884703a 	and	r2,r3,r2
    9838:	1001703a 	wrctl	status,r2
  
  return context;
    983c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    9840:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    9844:	e0bfff17 	ldw	r2,-4(fp)
    9848:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    984c:	e0bffd17 	ldw	r2,-12(fp)
    9850:	1080020b 	ldhu	r2,8(r2)
    9854:	10bfffcc 	andi	r2,r2,65535
    9858:	10000426 	beq	r2,zero,986c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    985c:	e0bffd17 	ldw	r2,-12(fp)
    9860:	e0fffe0b 	ldhu	r3,-8(fp)
    9864:	10c0020d 	sth	r3,8(r2)
    9868:	00000b06 	br	9898 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    986c:	e0bffd17 	ldw	r2,-12(fp)
    9870:	10800283 	ldbu	r2,10(r2)
    9874:	10803fcc 	andi	r2,r2,255
    9878:	1000041e 	bne	r2,zero,988c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    987c:	e0bffd17 	ldw	r2,-12(fp)
    9880:	e0fffe0b 	ldhu	r3,-8(fp)
    9884:	10c0020d 	sth	r3,8(r2)
    9888:	00000306 	br	9898 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    988c:	e0bfff17 	ldw	r2,-4(fp)
    9890:	00c01244 	movi	r3,73
    9894:	10c00005 	stb	r3,0(r2)
    9898:	e0bffa17 	ldw	r2,-24(fp)
    989c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    98a0:	e0bffc17 	ldw	r2,-16(fp)
    98a4:	1001703a 	wrctl	status,r2
    98a8:	00000106 	br	98b0 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    98ac:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
    98b0:	e037883a 	mov	sp,fp
    98b4:	df000017 	ldw	fp,0(sp)
    98b8:	dec00104 	addi	sp,sp,4
    98bc:	f800283a 	ret

000098c0 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    98c0:	defff104 	addi	sp,sp,-60
    98c4:	dfc00e15 	stw	ra,56(sp)
    98c8:	df000d15 	stw	fp,52(sp)
    98cc:	df000d04 	addi	fp,sp,52
    98d0:	2007883a 	mov	r3,r4
    98d4:	2805883a 	mov	r2,r5
    98d8:	e0fffe05 	stb	r3,-8(fp)
    98dc:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    98e0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    98e4:	e0bffe03 	ldbu	r2,-8(fp)
    98e8:	10800a30 	cmpltui	r2,r2,40
    98ec:	1000051e 	bne	r2,zero,9904 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    98f0:	e0bffe03 	ldbu	r2,-8(fp)
    98f4:	10803fe0 	cmpeqi	r2,r2,255
    98f8:	1000021e 	bne	r2,zero,9904 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    98fc:	00800a84 	movi	r2,42
    9900:	00013406 	br	9dd4 <OSTaskChangePrio+0x514>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    9904:	e0bfff03 	ldbu	r2,-4(fp)
    9908:	10800a30 	cmpltui	r2,r2,40
    990c:	1000021e 	bne	r2,zero,9918 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    9910:	00800a84 	movi	r2,42
    9914:	00012f06 	br	9dd4 <OSTaskChangePrio+0x514>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9918:	0005303a 	rdctl	r2,status
    991c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9920:	e0fff917 	ldw	r3,-28(fp)
    9924:	00bfff84 	movi	r2,-2
    9928:	1884703a 	and	r2,r3,r2
    992c:	1001703a 	wrctl	status,r2
  
  return context;
    9930:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9934:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    9938:	e0bfff03 	ldbu	r2,-4(fp)
    993c:	00c000b4 	movhi	r3,2
    9940:	18e8d404 	addi	r3,r3,-23728
    9944:	1085883a 	add	r2,r2,r2
    9948:	1085883a 	add	r2,r2,r2
    994c:	1885883a 	add	r2,r3,r2
    9950:	10800017 	ldw	r2,0(r2)
    9954:	10000626 	beq	r2,zero,9970 <OSTaskChangePrio+0xb0>
    9958:	e0bff517 	ldw	r2,-44(fp)
    995c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9960:	e0bffa17 	ldw	r2,-24(fp)
    9964:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    9968:	00800a04 	movi	r2,40
    996c:	00011906 	br	9dd4 <OSTaskChangePrio+0x514>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    9970:	e0bffe03 	ldbu	r2,-8(fp)
    9974:	10803fd8 	cmpnei	r2,r2,255
    9978:	1000051e 	bne	r2,zero,9990 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    997c:	00800074 	movhi	r2,1
    9980:	1089f604 	addi	r2,r2,10200
    9984:	10800017 	ldw	r2,0(r2)
    9988:	10800c83 	ldbu	r2,50(r2)
    998c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    9990:	e0bffe03 	ldbu	r2,-8(fp)
    9994:	00c000b4 	movhi	r3,2
    9998:	18e8d404 	addi	r3,r3,-23728
    999c:	1085883a 	add	r2,r2,r2
    99a0:	1085883a 	add	r2,r2,r2
    99a4:	1885883a 	add	r2,r3,r2
    99a8:	10800017 	ldw	r2,0(r2)
    99ac:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    99b0:	e0bff617 	ldw	r2,-40(fp)
    99b4:	1000061e 	bne	r2,zero,99d0 <OSTaskChangePrio+0x110>
    99b8:	e0bff517 	ldw	r2,-44(fp)
    99bc:	e0bffb15 	stw	r2,-20(fp)
    99c0:	e0bffb17 	ldw	r2,-20(fp)
    99c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    99c8:	00800a44 	movi	r2,41
    99cc:	00010106 	br	9dd4 <OSTaskChangePrio+0x514>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    99d0:	e0bff617 	ldw	r2,-40(fp)
    99d4:	10800058 	cmpnei	r2,r2,1
    99d8:	1000061e 	bne	r2,zero,99f4 <OSTaskChangePrio+0x134>
    99dc:	e0bff517 	ldw	r2,-44(fp)
    99e0:	e0bffc15 	stw	r2,-16(fp)
    99e4:	e0bffc17 	ldw	r2,-16(fp)
    99e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    99ec:	008010c4 	movi	r2,67
    99f0:	0000f806 	br	9dd4 <OSTaskChangePrio+0x514>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    99f4:	e0bfff03 	ldbu	r2,-4(fp)
    99f8:	1004d0fa 	srli	r2,r2,3
    99fc:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    9a00:	e0bfff03 	ldbu	r2,-4(fp)
    9a04:	108001cc 	andi	r2,r2,7
    9a08:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
    9a0c:	e0bff703 	ldbu	r2,-36(fp)
    9a10:	00c00044 	movi	r3,1
    9a14:	1884983a 	sll	r2,r3,r2
    9a18:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
    9a1c:	e0bff743 	ldbu	r2,-35(fp)
    9a20:	00c00044 	movi	r3,1
    9a24:	1884983a 	sll	r2,r3,r2
    9a28:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    9a2c:	e0bffe03 	ldbu	r2,-8(fp)
    9a30:	00c000b4 	movhi	r3,2
    9a34:	18e8d404 	addi	r3,r3,-23728
    9a38:	1085883a 	add	r2,r2,r2
    9a3c:	1085883a 	add	r2,r2,r2
    9a40:	1885883a 	add	r2,r3,r2
    9a44:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    9a48:	e0bfff03 	ldbu	r2,-4(fp)
    9a4c:	00c000b4 	movhi	r3,2
    9a50:	18e8d404 	addi	r3,r3,-23728
    9a54:	1085883a 	add	r2,r2,r2
    9a58:	1085883a 	add	r2,r2,r2
    9a5c:	1885883a 	add	r2,r3,r2
    9a60:	e0fff617 	ldw	r3,-40(fp)
    9a64:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    9a68:	e0bff617 	ldw	r2,-40(fp)
    9a6c:	10800d03 	ldbu	r2,52(r2)
    9a70:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
    9a74:	e0bff617 	ldw	r2,-40(fp)
    9a78:	10800d83 	ldbu	r2,54(r2)
    9a7c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    9a80:	e0bff617 	ldw	r2,-40(fp)
    9a84:	10800d43 	ldbu	r2,53(r2)
    9a88:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    9a8c:	e0bff803 	ldbu	r2,-32(fp)
    9a90:	00c00074 	movhi	r3,1
    9a94:	18c9f244 	addi	r3,r3,10185
    9a98:	1885883a 	add	r2,r3,r2
    9a9c:	10c00003 	ldbu	r3,0(r2)
    9aa0:	e0bff883 	ldbu	r2,-30(fp)
    9aa4:	1884703a 	and	r2,r3,r2
    9aa8:	10803fcc 	andi	r2,r2,255
    9aac:	10003526 	beq	r2,zero,9b84 <OSTaskChangePrio+0x2c4>
         OSRdyTbl[y_old] &= ~bitx_old;
    9ab0:	e0bff803 	ldbu	r2,-32(fp)
    9ab4:	e0fff803 	ldbu	r3,-32(fp)
    9ab8:	01000074 	movhi	r4,1
    9abc:	2109f244 	addi	r4,r4,10185
    9ac0:	20c7883a 	add	r3,r4,r3
    9ac4:	18c00003 	ldbu	r3,0(r3)
    9ac8:	1809883a 	mov	r4,r3
    9acc:	e0fff883 	ldbu	r3,-30(fp)
    9ad0:	00c6303a 	nor	r3,zero,r3
    9ad4:	20c6703a 	and	r3,r4,r3
    9ad8:	01000074 	movhi	r4,1
    9adc:	2109f244 	addi	r4,r4,10185
    9ae0:	2085883a 	add	r2,r4,r2
    9ae4:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    9ae8:	e0bff803 	ldbu	r2,-32(fp)
    9aec:	00c00074 	movhi	r3,1
    9af0:	18c9f244 	addi	r3,r3,10185
    9af4:	1885883a 	add	r2,r3,r2
    9af8:	10800003 	ldbu	r2,0(r2)
    9afc:	10803fcc 	andi	r2,r2,255
    9b00:	10000b1e 	bne	r2,zero,9b30 <OSTaskChangePrio+0x270>
             OSRdyGrp &= ~bity_old;
    9b04:	e0bff843 	ldbu	r2,-31(fp)
    9b08:	0084303a 	nor	r2,zero,r2
    9b0c:	1007883a 	mov	r3,r2
    9b10:	00800074 	movhi	r2,1
    9b14:	1089f204 	addi	r2,r2,10184
    9b18:	10800003 	ldbu	r2,0(r2)
    9b1c:	1884703a 	and	r2,r3,r2
    9b20:	1007883a 	mov	r3,r2
    9b24:	00800074 	movhi	r2,1
    9b28:	1089f204 	addi	r2,r2,10184
    9b2c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    9b30:	00800074 	movhi	r2,1
    9b34:	1089f204 	addi	r2,r2,10184
    9b38:	10c00003 	ldbu	r3,0(r2)
    9b3c:	e0bff783 	ldbu	r2,-34(fp)
    9b40:	1884b03a 	or	r2,r3,r2
    9b44:	1007883a 	mov	r3,r2
    9b48:	00800074 	movhi	r2,1
    9b4c:	1089f204 	addi	r2,r2,10184
    9b50:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    9b54:	e0bff703 	ldbu	r2,-36(fp)
    9b58:	e0fff703 	ldbu	r3,-36(fp)
    9b5c:	01000074 	movhi	r4,1
    9b60:	2109f244 	addi	r4,r4,10185
    9b64:	20c7883a 	add	r3,r4,r3
    9b68:	19000003 	ldbu	r4,0(r3)
    9b6c:	e0fff7c3 	ldbu	r3,-33(fp)
    9b70:	20c6b03a 	or	r3,r4,r3
    9b74:	01000074 	movhi	r4,1
    9b78:	2109f244 	addi	r4,r4,10185
    9b7c:	2085883a 	add	r2,r4,r2
    9b80:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    9b84:	e0bff617 	ldw	r2,-40(fp)
    9b88:	10800717 	ldw	r2,28(r2)
    9b8c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    9b90:	e0bff317 	ldw	r2,-52(fp)
    9b94:	10003126 	beq	r2,zero,9c5c <OSTaskChangePrio+0x39c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    9b98:	e0bff803 	ldbu	r2,-32(fp)
    9b9c:	e0fff803 	ldbu	r3,-32(fp)
    9ba0:	e13ff317 	ldw	r4,-52(fp)
    9ba4:	20c7883a 	add	r3,r4,r3
    9ba8:	18c00204 	addi	r3,r3,8
    9bac:	18c000c3 	ldbu	r3,3(r3)
    9bb0:	1809883a 	mov	r4,r3
    9bb4:	e0fff883 	ldbu	r3,-30(fp)
    9bb8:	00c6303a 	nor	r3,zero,r3
    9bbc:	20c6703a 	and	r3,r4,r3
    9bc0:	e13ff317 	ldw	r4,-52(fp)
    9bc4:	2085883a 	add	r2,r4,r2
    9bc8:	10800204 	addi	r2,r2,8
    9bcc:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    9bd0:	e0bff803 	ldbu	r2,-32(fp)
    9bd4:	e0fff317 	ldw	r3,-52(fp)
    9bd8:	1885883a 	add	r2,r3,r2
    9bdc:	10800204 	addi	r2,r2,8
    9be0:	108000c3 	ldbu	r2,3(r2)
    9be4:	10803fcc 	andi	r2,r2,255
    9be8:	1000091e 	bne	r2,zero,9c10 <OSTaskChangePrio+0x350>
            pevent->OSEventGrp    &= ~bity_old;
    9bec:	e0bff317 	ldw	r2,-52(fp)
    9bf0:	10800283 	ldbu	r2,10(r2)
    9bf4:	1007883a 	mov	r3,r2
    9bf8:	e0bff843 	ldbu	r2,-31(fp)
    9bfc:	0084303a 	nor	r2,zero,r2
    9c00:	1884703a 	and	r2,r3,r2
    9c04:	1007883a 	mov	r3,r2
    9c08:	e0bff317 	ldw	r2,-52(fp)
    9c0c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    9c10:	e0bff317 	ldw	r2,-52(fp)
    9c14:	10c00283 	ldbu	r3,10(r2)
    9c18:	e0bff783 	ldbu	r2,-34(fp)
    9c1c:	1884b03a 	or	r2,r3,r2
    9c20:	1007883a 	mov	r3,r2
    9c24:	e0bff317 	ldw	r2,-52(fp)
    9c28:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    9c2c:	e0bff703 	ldbu	r2,-36(fp)
    9c30:	e0fff703 	ldbu	r3,-36(fp)
    9c34:	e13ff317 	ldw	r4,-52(fp)
    9c38:	20c7883a 	add	r3,r4,r3
    9c3c:	18c00204 	addi	r3,r3,8
    9c40:	190000c3 	ldbu	r4,3(r3)
    9c44:	e0fff7c3 	ldbu	r3,-33(fp)
    9c48:	20c6b03a 	or	r3,r4,r3
    9c4c:	e13ff317 	ldw	r4,-52(fp)
    9c50:	2085883a 	add	r2,r4,r2
    9c54:	10800204 	addi	r2,r2,8
    9c58:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    9c5c:	e0bff617 	ldw	r2,-40(fp)
    9c60:	10800817 	ldw	r2,32(r2)
    9c64:	10004026 	beq	r2,zero,9d68 <OSTaskChangePrio+0x4a8>
        pevents =  ptcb->OSTCBEventMultiPtr;
    9c68:	e0bff617 	ldw	r2,-40(fp)
    9c6c:	10800817 	ldw	r2,32(r2)
    9c70:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    9c74:	e0bff417 	ldw	r2,-48(fp)
    9c78:	10800017 	ldw	r2,0(r2)
    9c7c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    9c80:	00003706 	br	9d60 <OSTaskChangePrio+0x4a0>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    9c84:	e0bff803 	ldbu	r2,-32(fp)
    9c88:	e0fff803 	ldbu	r3,-32(fp)
    9c8c:	e13ff317 	ldw	r4,-52(fp)
    9c90:	20c7883a 	add	r3,r4,r3
    9c94:	18c00204 	addi	r3,r3,8
    9c98:	18c000c3 	ldbu	r3,3(r3)
    9c9c:	1809883a 	mov	r4,r3
    9ca0:	e0fff883 	ldbu	r3,-30(fp)
    9ca4:	00c6303a 	nor	r3,zero,r3
    9ca8:	20c6703a 	and	r3,r4,r3
    9cac:	e13ff317 	ldw	r4,-52(fp)
    9cb0:	2085883a 	add	r2,r4,r2
    9cb4:	10800204 	addi	r2,r2,8
    9cb8:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    9cbc:	e0bff803 	ldbu	r2,-32(fp)
    9cc0:	e0fff317 	ldw	r3,-52(fp)
    9cc4:	1885883a 	add	r2,r3,r2
    9cc8:	10800204 	addi	r2,r2,8
    9ccc:	108000c3 	ldbu	r2,3(r2)
    9cd0:	10803fcc 	andi	r2,r2,255
    9cd4:	1000091e 	bne	r2,zero,9cfc <OSTaskChangePrio+0x43c>
                pevent->OSEventGrp    &= ~bity_old;
    9cd8:	e0bff317 	ldw	r2,-52(fp)
    9cdc:	10800283 	ldbu	r2,10(r2)
    9ce0:	1007883a 	mov	r3,r2
    9ce4:	e0bff843 	ldbu	r2,-31(fp)
    9ce8:	0084303a 	nor	r2,zero,r2
    9cec:	1884703a 	and	r2,r3,r2
    9cf0:	1007883a 	mov	r3,r2
    9cf4:	e0bff317 	ldw	r2,-52(fp)
    9cf8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    9cfc:	e0bff317 	ldw	r2,-52(fp)
    9d00:	10c00283 	ldbu	r3,10(r2)
    9d04:	e0bff783 	ldbu	r2,-34(fp)
    9d08:	1884b03a 	or	r2,r3,r2
    9d0c:	1007883a 	mov	r3,r2
    9d10:	e0bff317 	ldw	r2,-52(fp)
    9d14:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    9d18:	e0bff703 	ldbu	r2,-36(fp)
    9d1c:	e0fff703 	ldbu	r3,-36(fp)
    9d20:	e13ff317 	ldw	r4,-52(fp)
    9d24:	20c7883a 	add	r3,r4,r3
    9d28:	18c00204 	addi	r3,r3,8
    9d2c:	190000c3 	ldbu	r4,3(r3)
    9d30:	e0fff7c3 	ldbu	r3,-33(fp)
    9d34:	20c6b03a 	or	r3,r4,r3
    9d38:	e13ff317 	ldw	r4,-52(fp)
    9d3c:	2085883a 	add	r2,r4,r2
    9d40:	10800204 	addi	r2,r2,8
    9d44:	10c000c5 	stb	r3,3(r2)
            pevents++;
    9d48:	e0bff417 	ldw	r2,-48(fp)
    9d4c:	10800104 	addi	r2,r2,4
    9d50:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    9d54:	e0bff417 	ldw	r2,-48(fp)
    9d58:	10800017 	ldw	r2,0(r2)
    9d5c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    9d60:	e0bff317 	ldw	r2,-52(fp)
    9d64:	103fc71e 	bne	r2,zero,9c84 <OSTaskChangePrio+0x3c4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    9d68:	e0bff617 	ldw	r2,-40(fp)
    9d6c:	e0ffff03 	ldbu	r3,-4(fp)
    9d70:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    9d74:	e0bff617 	ldw	r2,-40(fp)
    9d78:	e0fff703 	ldbu	r3,-36(fp)
    9d7c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    9d80:	e0bff617 	ldw	r2,-40(fp)
    9d84:	e0fff743 	ldbu	r3,-35(fp)
    9d88:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    9d8c:	e0bff617 	ldw	r2,-40(fp)
    9d90:	e0fff783 	ldbu	r3,-34(fp)
    9d94:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    9d98:	e0bff617 	ldw	r2,-40(fp)
    9d9c:	e0fff7c3 	ldbu	r3,-33(fp)
    9da0:	10c00d45 	stb	r3,53(r2)
    9da4:	e0bff517 	ldw	r2,-44(fp)
    9da8:	e0bffd15 	stw	r2,-12(fp)
    9dac:	e0bffd17 	ldw	r2,-12(fp)
    9db0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    9db4:	00800074 	movhi	r2,1
    9db8:	1089e644 	addi	r2,r2,10137
    9dbc:	10800003 	ldbu	r2,0(r2)
    9dc0:	10803fcc 	andi	r2,r2,255
    9dc4:	10800058 	cmpnei	r2,r2,1
    9dc8:	1000011e 	bne	r2,zero,9dd0 <OSTaskChangePrio+0x510>
        OS_Sched();                                         /* Find new highest priority task          */
    9dcc:	000535c0 	call	535c <OS_Sched>
    }
    return (OS_ERR_NONE);
    9dd0:	0005883a 	mov	r2,zero
}
    9dd4:	e037883a 	mov	sp,fp
    9dd8:	dfc00117 	ldw	ra,4(sp)
    9ddc:	df000017 	ldw	fp,0(sp)
    9de0:	dec00204 	addi	sp,sp,8
    9de4:	f800283a 	ret

00009de8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    9de8:	deffee04 	addi	sp,sp,-72
    9dec:	dfc01115 	stw	ra,68(sp)
    9df0:	df001015 	stw	fp,64(sp)
    9df4:	df001004 	addi	fp,sp,64
    9df8:	e13ffc15 	stw	r4,-16(fp)
    9dfc:	e17ffd15 	stw	r5,-12(fp)
    9e00:	e1bffe15 	stw	r6,-8(fp)
    9e04:	3805883a 	mov	r2,r7
    9e08:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    9e0c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    9e10:	e0bfff03 	ldbu	r2,-4(fp)
    9e14:	10800a70 	cmpltui	r2,r2,41
    9e18:	1000021e 	bne	r2,zero,9e24 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    9e1c:	00800a84 	movi	r2,42
    9e20:	00005b06 	br	9f90 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9e24:	0005303a 	rdctl	r2,status
    9e28:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e2c:	e0fff617 	ldw	r3,-40(fp)
    9e30:	00bfff84 	movi	r2,-2
    9e34:	1884703a 	and	r2,r3,r2
    9e38:	1001703a 	wrctl	status,r2
  
  return context;
    9e3c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9e40:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    9e44:	00800074 	movhi	r2,1
    9e48:	1089f504 	addi	r2,r2,10196
    9e4c:	10800003 	ldbu	r2,0(r2)
    9e50:	10803fcc 	andi	r2,r2,255
    9e54:	10000626 	beq	r2,zero,9e70 <OSTaskCreate+0x88>
    9e58:	e0bff317 	ldw	r2,-52(fp)
    9e5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9e60:	e0bff717 	ldw	r2,-36(fp)
    9e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    9e68:	00800f04 	movi	r2,60
    9e6c:	00004806 	br	9f90 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    9e70:	e0bfff03 	ldbu	r2,-4(fp)
    9e74:	00c000b4 	movhi	r3,2
    9e78:	18e8d404 	addi	r3,r3,-23728
    9e7c:	1085883a 	add	r2,r2,r2
    9e80:	1085883a 	add	r2,r2,r2
    9e84:	1885883a 	add	r2,r3,r2
    9e88:	10800017 	ldw	r2,0(r2)
    9e8c:	10003b1e 	bne	r2,zero,9f7c <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    9e90:	e0bfff03 	ldbu	r2,-4(fp)
    9e94:	00c000b4 	movhi	r3,2
    9e98:	18e8d404 	addi	r3,r3,-23728
    9e9c:	1085883a 	add	r2,r2,r2
    9ea0:	1085883a 	add	r2,r2,r2
    9ea4:	1885883a 	add	r2,r3,r2
    9ea8:	00c00044 	movi	r3,1
    9eac:	10c00015 	stw	r3,0(r2)
    9eb0:	e0bff317 	ldw	r2,-52(fp)
    9eb4:	e0bff815 	stw	r2,-32(fp)
    9eb8:	e0bff817 	ldw	r2,-32(fp)
    9ebc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    9ec0:	e13ffc17 	ldw	r4,-16(fp)
    9ec4:	e17ffd17 	ldw	r5,-12(fp)
    9ec8:	e1bffe17 	ldw	r6,-8(fp)
    9ecc:	000f883a 	mov	r7,zero
    9ed0:	000d1ec0 	call	d1ec <OSTaskStkInit>
    9ed4:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    9ed8:	e0bfff03 	ldbu	r2,-4(fp)
    9edc:	d8000015 	stw	zero,0(sp)
    9ee0:	d8000115 	stw	zero,4(sp)
    9ee4:	d8000215 	stw	zero,8(sp)
    9ee8:	1009883a 	mov	r4,r2
    9eec:	e17ff417 	ldw	r5,-48(fp)
    9ef0:	000d883a 	mov	r6,zero
    9ef4:	000f883a 	mov	r7,zero
    9ef8:	00057540 	call	5754 <OS_TCBInit>
    9efc:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
    9f00:	e0bff503 	ldbu	r2,-44(fp)
    9f04:	1000081e 	bne	r2,zero,9f28 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    9f08:	00800074 	movhi	r2,1
    9f0c:	1089e644 	addi	r2,r2,10137
    9f10:	10800003 	ldbu	r2,0(r2)
    9f14:	10803fcc 	andi	r2,r2,255
    9f18:	10800058 	cmpnei	r2,r2,1
    9f1c:	1000151e 	bne	r2,zero,9f74 <OSTaskCreate+0x18c>
                OS_Sched();
    9f20:	000535c0 	call	535c <OS_Sched>
    9f24:	00001306 	br	9f74 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f28:	0005303a 	rdctl	r2,status
    9f2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f30:	e0fff917 	ldw	r3,-28(fp)
    9f34:	00bfff84 	movi	r2,-2
    9f38:	1884703a 	and	r2,r3,r2
    9f3c:	1001703a 	wrctl	status,r2
  
  return context;
    9f40:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    9f44:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    9f48:	e0bfff03 	ldbu	r2,-4(fp)
    9f4c:	00c000b4 	movhi	r3,2
    9f50:	18e8d404 	addi	r3,r3,-23728
    9f54:	1085883a 	add	r2,r2,r2
    9f58:	1085883a 	add	r2,r2,r2
    9f5c:	1885883a 	add	r2,r3,r2
    9f60:	10000015 	stw	zero,0(r2)
    9f64:	e0bff317 	ldw	r2,-52(fp)
    9f68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f6c:	e0bffa17 	ldw	r2,-24(fp)
    9f70:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    9f74:	e0bff503 	ldbu	r2,-44(fp)
    9f78:	00000506 	br	9f90 <OSTaskCreate+0x1a8>
    9f7c:	e0bff317 	ldw	r2,-52(fp)
    9f80:	e0bffb15 	stw	r2,-20(fp)
    9f84:	e0bffb17 	ldw	r2,-20(fp)
    9f88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    9f8c:	00800a04 	movi	r2,40
}
    9f90:	e037883a 	mov	sp,fp
    9f94:	dfc00117 	ldw	ra,4(sp)
    9f98:	df000017 	ldw	fp,0(sp)
    9f9c:	dec00204 	addi	sp,sp,8
    9fa0:	f800283a 	ret

00009fa4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    9fa4:	deffec04 	addi	sp,sp,-80
    9fa8:	dfc01315 	stw	ra,76(sp)
    9fac:	df001215 	stw	fp,72(sp)
    9fb0:	df001204 	addi	fp,sp,72
    9fb4:	e13ffa15 	stw	r4,-24(fp)
    9fb8:	e17ffb15 	stw	r5,-20(fp)
    9fbc:	e1bffc15 	stw	r6,-16(fp)
    9fc0:	3805883a 	mov	r2,r7
    9fc4:	e1000217 	ldw	r4,8(fp)
    9fc8:	e0c00617 	ldw	r3,24(fp)
    9fcc:	e0bffd05 	stb	r2,-12(fp)
    9fd0:	e13ffe0d 	sth	r4,-8(fp)
    9fd4:	e0ffff0d 	sth	r3,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    9fd8:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    9fdc:	e0bffd03 	ldbu	r2,-12(fp)
    9fe0:	10800a70 	cmpltui	r2,r2,41
    9fe4:	1000021e 	bne	r2,zero,9ff0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    9fe8:	00800a84 	movi	r2,42
    9fec:	00006506 	br	a184 <OSTaskCreateExt+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ff0:	0005303a 	rdctl	r2,status
    9ff4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ff8:	e0fff417 	ldw	r3,-48(fp)
    9ffc:	00bfff84 	movi	r2,-2
    a000:	1884703a 	and	r2,r3,r2
    a004:	1001703a 	wrctl	status,r2
  
  return context;
    a008:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a00c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a010:	00800074 	movhi	r2,1
    a014:	1089f504 	addi	r2,r2,10196
    a018:	10800003 	ldbu	r2,0(r2)
    a01c:	10803fcc 	andi	r2,r2,255
    a020:	10000626 	beq	r2,zero,a03c <OSTaskCreateExt+0x98>
    a024:	e0bff117 	ldw	r2,-60(fp)
    a028:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a02c:	e0bff517 	ldw	r2,-44(fp)
    a030:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a034:	00800f04 	movi	r2,60
    a038:	00005206 	br	a184 <OSTaskCreateExt+0x1e0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a03c:	e0bffd03 	ldbu	r2,-12(fp)
    a040:	00c000b4 	movhi	r3,2
    a044:	18e8d404 	addi	r3,r3,-23728
    a048:	1085883a 	add	r2,r2,r2
    a04c:	1085883a 	add	r2,r2,r2
    a050:	1885883a 	add	r2,r3,r2
    a054:	10800017 	ldw	r2,0(r2)
    a058:	1000451e 	bne	r2,zero,a170 <OSTaskCreateExt+0x1cc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a05c:	e0bffd03 	ldbu	r2,-12(fp)
    a060:	00c000b4 	movhi	r3,2
    a064:	18e8d404 	addi	r3,r3,-23728
    a068:	1085883a 	add	r2,r2,r2
    a06c:	1085883a 	add	r2,r2,r2
    a070:	1885883a 	add	r2,r3,r2
    a074:	00c00044 	movi	r3,1
    a078:	10c00015 	stw	r3,0(r2)
    a07c:	e0bff117 	ldw	r2,-60(fp)
    a080:	e0bff615 	stw	r2,-40(fp)
    a084:	e0bff617 	ldw	r2,-40(fp)
    a088:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    a08c:	e0bfff0b 	ldhu	r2,-4(fp)
    a090:	e1000317 	ldw	r4,12(fp)
    a094:	e1400417 	ldw	r5,16(fp)
    a098:	100d883a 	mov	r6,r2
    a09c:	000b13c0 	call	b13c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    a0a0:	e0bfff0b 	ldhu	r2,-4(fp)
    a0a4:	e13ffa17 	ldw	r4,-24(fp)
    a0a8:	e17ffb17 	ldw	r5,-20(fp)
    a0ac:	e1bffc17 	ldw	r6,-16(fp)
    a0b0:	100f883a 	mov	r7,r2
    a0b4:	000d1ec0 	call	d1ec <OSTaskStkInit>
    a0b8:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    a0bc:	e0fffd03 	ldbu	r3,-12(fp)
    a0c0:	e0bffe0b 	ldhu	r2,-8(fp)
    a0c4:	e13fff0b 	ldhu	r4,-4(fp)
    a0c8:	e1400417 	ldw	r5,16(fp)
    a0cc:	d9400015 	stw	r5,0(sp)
    a0d0:	e1400517 	ldw	r5,20(fp)
    a0d4:	d9400115 	stw	r5,4(sp)
    a0d8:	d9000215 	stw	r4,8(sp)
    a0dc:	1809883a 	mov	r4,r3
    a0e0:	e17ff217 	ldw	r5,-56(fp)
    a0e4:	e1800317 	ldw	r6,12(fp)
    a0e8:	100f883a 	mov	r7,r2
    a0ec:	00057540 	call	5754 <OS_TCBInit>
    a0f0:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
    a0f4:	e0bff303 	ldbu	r2,-52(fp)
    a0f8:	1000081e 	bne	r2,zero,a11c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    a0fc:	00800074 	movhi	r2,1
    a100:	1089e644 	addi	r2,r2,10137
    a104:	10800003 	ldbu	r2,0(r2)
    a108:	10803fcc 	andi	r2,r2,255
    a10c:	10800058 	cmpnei	r2,r2,1
    a110:	1000151e 	bne	r2,zero,a168 <OSTaskCreateExt+0x1c4>
                OS_Sched();
    a114:	000535c0 	call	535c <OS_Sched>
    a118:	00001306 	br	a168 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a11c:	0005303a 	rdctl	r2,status
    a120:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a124:	e0fff717 	ldw	r3,-36(fp)
    a128:	00bfff84 	movi	r2,-2
    a12c:	1884703a 	and	r2,r3,r2
    a130:	1001703a 	wrctl	status,r2
  
  return context;
    a134:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a138:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    a13c:	e0bffd03 	ldbu	r2,-12(fp)
    a140:	00c000b4 	movhi	r3,2
    a144:	18e8d404 	addi	r3,r3,-23728
    a148:	1085883a 	add	r2,r2,r2
    a14c:	1085883a 	add	r2,r2,r2
    a150:	1885883a 	add	r2,r3,r2
    a154:	10000015 	stw	zero,0(r2)
    a158:	e0bff117 	ldw	r2,-60(fp)
    a15c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a160:	e0bff817 	ldw	r2,-32(fp)
    a164:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    a168:	e0bff303 	ldbu	r2,-52(fp)
    a16c:	00000506 	br	a184 <OSTaskCreateExt+0x1e0>
    a170:	e0bff117 	ldw	r2,-60(fp)
    a174:	e0bff915 	stw	r2,-28(fp)
    a178:	e0bff917 	ldw	r2,-28(fp)
    a17c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a180:	00800a04 	movi	r2,40
}
    a184:	e037883a 	mov	sp,fp
    a188:	dfc00117 	ldw	ra,4(sp)
    a18c:	df000017 	ldw	fp,0(sp)
    a190:	dec00204 	addi	sp,sp,8
    a194:	f800283a 	ret

0000a198 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    a198:	defff404 	addi	sp,sp,-48
    a19c:	dfc00b15 	stw	ra,44(sp)
    a1a0:	df000a15 	stw	fp,40(sp)
    a1a4:	df000a04 	addi	fp,sp,40
    a1a8:	2005883a 	mov	r2,r4
    a1ac:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    a1b0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    a1b4:	00800074 	movhi	r2,1
    a1b8:	1089f504 	addi	r2,r2,10196
    a1bc:	10800003 	ldbu	r2,0(r2)
    a1c0:	10803fcc 	andi	r2,r2,255
    a1c4:	10000226 	beq	r2,zero,a1d0 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    a1c8:	00801004 	movi	r2,64
    a1cc:	0000e406 	br	a560 <OSTaskDel+0x3c8>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    a1d0:	e0bfff03 	ldbu	r2,-4(fp)
    a1d4:	10800a18 	cmpnei	r2,r2,40
    a1d8:	1000021e 	bne	r2,zero,a1e4 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    a1dc:	00800f84 	movi	r2,62
    a1e0:	0000df06 	br	a560 <OSTaskDel+0x3c8>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    a1e4:	e0bfff03 	ldbu	r2,-4(fp)
    a1e8:	10800a30 	cmpltui	r2,r2,40
    a1ec:	1000051e 	bne	r2,zero,a204 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    a1f0:	e0bfff03 	ldbu	r2,-4(fp)
    a1f4:	10803fe0 	cmpeqi	r2,r2,255
    a1f8:	1000021e 	bne	r2,zero,a204 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    a1fc:	00800a84 	movi	r2,42
    a200:	0000d706 	br	a560 <OSTaskDel+0x3c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a204:	0005303a 	rdctl	r2,status
    a208:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a20c:	e0fff917 	ldw	r3,-28(fp)
    a210:	00bfff84 	movi	r2,-2
    a214:	1884703a 	and	r2,r3,r2
    a218:	1001703a 	wrctl	status,r2
  
  return context;
    a21c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    a220:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    a224:	e0bfff03 	ldbu	r2,-4(fp)
    a228:	10803fd8 	cmpnei	r2,r2,255
    a22c:	1000051e 	bne	r2,zero,a244 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    a230:	00800074 	movhi	r2,1
    a234:	1089f604 	addi	r2,r2,10200
    a238:	10800017 	ldw	r2,0(r2)
    a23c:	10800c83 	ldbu	r2,50(r2)
    a240:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a244:	e0bfff03 	ldbu	r2,-4(fp)
    a248:	00c000b4 	movhi	r3,2
    a24c:	18e8d404 	addi	r3,r3,-23728
    a250:	1085883a 	add	r2,r2,r2
    a254:	1085883a 	add	r2,r2,r2
    a258:	1885883a 	add	r2,r3,r2
    a25c:	10800017 	ldw	r2,0(r2)
    a260:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    a264:	e0bff717 	ldw	r2,-36(fp)
    a268:	1000061e 	bne	r2,zero,a284 <OSTaskDel+0xec>
    a26c:	e0bff617 	ldw	r2,-40(fp)
    a270:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a274:	e0bffa17 	ldw	r2,-24(fp)
    a278:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a27c:	008010c4 	movi	r2,67
    a280:	0000b706 	br	a560 <OSTaskDel+0x3c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    a284:	e0bff717 	ldw	r2,-36(fp)
    a288:	10800058 	cmpnei	r2,r2,1
    a28c:	1000061e 	bne	r2,zero,a2a8 <OSTaskDel+0x110>
    a290:	e0bff617 	ldw	r2,-40(fp)
    a294:	e0bffb15 	stw	r2,-20(fp)
    a298:	e0bffb17 	ldw	r2,-20(fp)
    a29c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a2a0:	00800f44 	movi	r2,61
    a2a4:	0000ae06 	br	a560 <OSTaskDel+0x3c8>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    a2a8:	e0bff717 	ldw	r2,-36(fp)
    a2ac:	10800d03 	ldbu	r2,52(r2)
    a2b0:	10803fcc 	andi	r2,r2,255
    a2b4:	e0fff717 	ldw	r3,-36(fp)
    a2b8:	18c00d03 	ldbu	r3,52(r3)
    a2bc:	18c03fcc 	andi	r3,r3,255
    a2c0:	01000074 	movhi	r4,1
    a2c4:	2109f244 	addi	r4,r4,10185
    a2c8:	20c7883a 	add	r3,r4,r3
    a2cc:	18c00003 	ldbu	r3,0(r3)
    a2d0:	1809883a 	mov	r4,r3
    a2d4:	e0fff717 	ldw	r3,-36(fp)
    a2d8:	18c00d43 	ldbu	r3,53(r3)
    a2dc:	00c6303a 	nor	r3,zero,r3
    a2e0:	20c6703a 	and	r3,r4,r3
    a2e4:	01000074 	movhi	r4,1
    a2e8:	2109f244 	addi	r4,r4,10185
    a2ec:	2085883a 	add	r2,r4,r2
    a2f0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    a2f4:	e0bff717 	ldw	r2,-36(fp)
    a2f8:	10800d03 	ldbu	r2,52(r2)
    a2fc:	10803fcc 	andi	r2,r2,255
    a300:	00c00074 	movhi	r3,1
    a304:	18c9f244 	addi	r3,r3,10185
    a308:	1885883a 	add	r2,r3,r2
    a30c:	10800003 	ldbu	r2,0(r2)
    a310:	10803fcc 	andi	r2,r2,255
    a314:	10000c1e 	bne	r2,zero,a348 <OSTaskDel+0x1b0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    a318:	e0bff717 	ldw	r2,-36(fp)
    a31c:	10800d83 	ldbu	r2,54(r2)
    a320:	0084303a 	nor	r2,zero,r2
    a324:	1007883a 	mov	r3,r2
    a328:	00800074 	movhi	r2,1
    a32c:	1089f204 	addi	r2,r2,10184
    a330:	10800003 	ldbu	r2,0(r2)
    a334:	1884703a 	and	r2,r3,r2
    a338:	1007883a 	mov	r3,r2
    a33c:	00800074 	movhi	r2,1
    a340:	1089f204 	addi	r2,r2,10184
    a344:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    a348:	e0bff717 	ldw	r2,-36(fp)
    a34c:	10800717 	ldw	r2,28(r2)
    a350:	10000526 	beq	r2,zero,a368 <OSTaskDel+0x1d0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    a354:	e0bff717 	ldw	r2,-36(fp)
    a358:	10800717 	ldw	r2,28(r2)
    a35c:	e13ff717 	ldw	r4,-36(fp)
    a360:	100b883a 	mov	r5,r2
    a364:	0004d280 	call	4d28 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    a368:	e0bff717 	ldw	r2,-36(fp)
    a36c:	10800817 	ldw	r2,32(r2)
    a370:	10000526 	beq	r2,zero,a388 <OSTaskDel+0x1f0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    a374:	e0bff717 	ldw	r2,-36(fp)
    a378:	10800817 	ldw	r2,32(r2)
    a37c:	e13ff717 	ldw	r4,-36(fp)
    a380:	100b883a 	mov	r5,r2
    a384:	0004dd80 	call	4dd8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    a388:	e0bff717 	ldw	r2,-36(fp)
    a38c:	10800a17 	ldw	r2,40(r2)
    a390:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    a394:	e0bff817 	ldw	r2,-32(fp)
    a398:	10000226 	beq	r2,zero,a3a4 <OSTaskDel+0x20c>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    a39c:	e13ff817 	ldw	r4,-32(fp)
    a3a0:	000734c0 	call	734c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    a3a4:	e0bff717 	ldw	r2,-36(fp)
    a3a8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    a3ac:	e0bff717 	ldw	r2,-36(fp)
    a3b0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    a3b4:	e0bff717 	ldw	r2,-36(fp)
    a3b8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    a3bc:	00800074 	movhi	r2,1
    a3c0:	1089e604 	addi	r2,r2,10136
    a3c4:	10800003 	ldbu	r2,0(r2)
    a3c8:	10803fcc 	andi	r2,r2,255
    a3cc:	10803fe0 	cmpeqi	r2,r2,255
    a3d0:	1000081e 	bne	r2,zero,a3f4 <OSTaskDel+0x25c>
        OSLockNesting++;
    a3d4:	00800074 	movhi	r2,1
    a3d8:	1089e604 	addi	r2,r2,10136
    a3dc:	10800003 	ldbu	r2,0(r2)
    a3e0:	10800044 	addi	r2,r2,1
    a3e4:	1007883a 	mov	r3,r2
    a3e8:	00800074 	movhi	r2,1
    a3ec:	1089e604 	addi	r2,r2,10136
    a3f0:	10c00005 	stb	r3,0(r2)
    a3f4:	e0bff617 	ldw	r2,-40(fp)
    a3f8:	e0bffc15 	stw	r2,-16(fp)
    a3fc:	e0bffc17 	ldw	r2,-16(fp)
    a400:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    a404:	00049240 	call	4924 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a408:	0005303a 	rdctl	r2,status
    a40c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a410:	e0fffd17 	ldw	r3,-12(fp)
    a414:	00bfff84 	movi	r2,-2
    a418:	1884703a 	and	r2,r3,r2
    a41c:	1001703a 	wrctl	status,r2
  
  return context;
    a420:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    a424:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    a428:	00800074 	movhi	r2,1
    a42c:	1089e604 	addi	r2,r2,10136
    a430:	10800003 	ldbu	r2,0(r2)
    a434:	10803fcc 	andi	r2,r2,255
    a438:	10000826 	beq	r2,zero,a45c <OSTaskDel+0x2c4>
        OSLockNesting--;
    a43c:	00800074 	movhi	r2,1
    a440:	1089e604 	addi	r2,r2,10136
    a444:	10800003 	ldbu	r2,0(r2)
    a448:	10bfffc4 	addi	r2,r2,-1
    a44c:	1007883a 	mov	r3,r2
    a450:	00800074 	movhi	r2,1
    a454:	1089e604 	addi	r2,r2,10136
    a458:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    a45c:	e13ff717 	ldw	r4,-36(fp)
    a460:	000d5000 	call	d500 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    a464:	00800074 	movhi	r2,1
    a468:	1089ee44 	addi	r2,r2,10169
    a46c:	10800003 	ldbu	r2,0(r2)
    a470:	10bfffc4 	addi	r2,r2,-1
    a474:	1007883a 	mov	r3,r2
    a478:	00800074 	movhi	r2,1
    a47c:	1089ee44 	addi	r2,r2,10169
    a480:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    a484:	e0bfff03 	ldbu	r2,-4(fp)
    a488:	00c000b4 	movhi	r3,2
    a48c:	18e8d404 	addi	r3,r3,-23728
    a490:	1085883a 	add	r2,r2,r2
    a494:	1085883a 	add	r2,r2,r2
    a498:	1885883a 	add	r2,r3,r2
    a49c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    a4a0:	e0bff717 	ldw	r2,-36(fp)
    a4a4:	10800617 	ldw	r2,24(r2)
    a4a8:	1000091e 	bne	r2,zero,a4d0 <OSTaskDel+0x338>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    a4ac:	e0bff717 	ldw	r2,-36(fp)
    a4b0:	10800517 	ldw	r2,20(r2)
    a4b4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    a4b8:	e0bff717 	ldw	r2,-36(fp)
    a4bc:	10c00517 	ldw	r3,20(r2)
    a4c0:	00800074 	movhi	r2,1
    a4c4:	1089e904 	addi	r2,r2,10148
    a4c8:	10c00015 	stw	r3,0(r2)
    a4cc:	00000a06 	br	a4f8 <OSTaskDel+0x360>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    a4d0:	e0bff717 	ldw	r2,-36(fp)
    a4d4:	10800617 	ldw	r2,24(r2)
    a4d8:	e0fff717 	ldw	r3,-36(fp)
    a4dc:	18c00517 	ldw	r3,20(r3)
    a4e0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    a4e4:	e0bff717 	ldw	r2,-36(fp)
    a4e8:	10800517 	ldw	r2,20(r2)
    a4ec:	e0fff717 	ldw	r3,-36(fp)
    a4f0:	18c00617 	ldw	r3,24(r3)
    a4f4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    a4f8:	00800074 	movhi	r2,1
    a4fc:	1089ed04 	addi	r2,r2,10164
    a500:	10c00017 	ldw	r3,0(r2)
    a504:	e0bff717 	ldw	r2,-36(fp)
    a508:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    a50c:	00800074 	movhi	r2,1
    a510:	1089ed04 	addi	r2,r2,10164
    a514:	e0fff717 	ldw	r3,-36(fp)
    a518:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    a51c:	e0bff717 	ldw	r2,-36(fp)
    a520:	00c00fc4 	movi	r3,63
    a524:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    a528:	e0bff717 	ldw	r2,-36(fp)
    a52c:	10001345 	stb	zero,77(r2)
    a530:	e0bff617 	ldw	r2,-40(fp)
    a534:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a538:	e0bffe17 	ldw	r2,-8(fp)
    a53c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a540:	00800074 	movhi	r2,1
    a544:	1089e644 	addi	r2,r2,10137
    a548:	10800003 	ldbu	r2,0(r2)
    a54c:	10803fcc 	andi	r2,r2,255
    a550:	10800058 	cmpnei	r2,r2,1
    a554:	1000011e 	bne	r2,zero,a55c <OSTaskDel+0x3c4>
        OS_Sched();                                     /* Find new highest priority task              */
    a558:	000535c0 	call	535c <OS_Sched>
    }
    return (OS_ERR_NONE);
    a55c:	0005883a 	mov	r2,zero
}
    a560:	e037883a 	mov	sp,fp
    a564:	dfc00117 	ldw	ra,4(sp)
    a568:	df000017 	ldw	fp,0(sp)
    a56c:	dec00204 	addi	sp,sp,8
    a570:	f800283a 	ret

0000a574 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    a574:	defff504 	addi	sp,sp,-44
    a578:	df000a15 	stw	fp,40(sp)
    a57c:	df000a04 	addi	fp,sp,40
    a580:	2005883a 	mov	r2,r4
    a584:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a588:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    a58c:	e0bfff03 	ldbu	r2,-4(fp)
    a590:	10800a18 	cmpnei	r2,r2,40
    a594:	1000021e 	bne	r2,zero,a5a0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    a598:	00800f84 	movi	r2,62
    a59c:	00004706 	br	a6bc <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    a5a0:	e0bfff03 	ldbu	r2,-4(fp)
    a5a4:	10800a30 	cmpltui	r2,r2,40
    a5a8:	1000051e 	bne	r2,zero,a5c0 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    a5ac:	e0bfff03 	ldbu	r2,-4(fp)
    a5b0:	10803fe0 	cmpeqi	r2,r2,255
    a5b4:	1000021e 	bne	r2,zero,a5c0 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    a5b8:	00800a84 	movi	r2,42
    a5bc:	00003f06 	br	a6bc <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    a5c0:	e0bfff03 	ldbu	r2,-4(fp)
    a5c4:	10803fd8 	cmpnei	r2,r2,255
    a5c8:	1000131e 	bne	r2,zero,a618 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a5cc:	0005303a 	rdctl	r2,status
    a5d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a5d4:	e0fff917 	ldw	r3,-28(fp)
    a5d8:	00bfff84 	movi	r2,-2
    a5dc:	1884703a 	and	r2,r3,r2
    a5e0:	1001703a 	wrctl	status,r2
  
  return context;
    a5e4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    a5e8:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    a5ec:	00800074 	movhi	r2,1
    a5f0:	1089f604 	addi	r2,r2,10200
    a5f4:	10800017 	ldw	r2,0(r2)
    a5f8:	10800dc3 	ldbu	r2,55(r2)
    a5fc:	e0bff705 	stb	r2,-36(fp)
    a600:	e0bff617 	ldw	r2,-40(fp)
    a604:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a608:	e0bffa17 	ldw	r2,-24(fp)
    a60c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    a610:	e0bff703 	ldbu	r2,-36(fp)
    a614:	00002906 	br	a6bc <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a618:	0005303a 	rdctl	r2,status
    a61c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a620:	e0fffb17 	ldw	r3,-20(fp)
    a624:	00bfff84 	movi	r2,-2
    a628:	1884703a 	and	r2,r3,r2
    a62c:	1001703a 	wrctl	status,r2
  
  return context;
    a630:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    a634:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    a638:	e0bfff03 	ldbu	r2,-4(fp)
    a63c:	00c000b4 	movhi	r3,2
    a640:	18e8d404 	addi	r3,r3,-23728
    a644:	1085883a 	add	r2,r2,r2
    a648:	1085883a 	add	r2,r2,r2
    a64c:	1885883a 	add	r2,r3,r2
    a650:	10800017 	ldw	r2,0(r2)
    a654:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    a658:	e0bff817 	ldw	r2,-32(fp)
    a65c:	1000061e 	bne	r2,zero,a678 <OSTaskDelReq+0x104>
    a660:	e0bff617 	ldw	r2,-40(fp)
    a664:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a668:	e0bffc17 	ldw	r2,-16(fp)
    a66c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    a670:	008010c4 	movi	r2,67
    a674:	00001106 	br	a6bc <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    a678:	e0bff817 	ldw	r2,-32(fp)
    a67c:	10800058 	cmpnei	r2,r2,1
    a680:	1000061e 	bne	r2,zero,a69c <OSTaskDelReq+0x128>
    a684:	e0bff617 	ldw	r2,-40(fp)
    a688:	e0bffd15 	stw	r2,-12(fp)
    a68c:	e0bffd17 	ldw	r2,-12(fp)
    a690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a694:	00800f44 	movi	r2,61
    a698:	00000806 	br	a6bc <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    a69c:	e0bff817 	ldw	r2,-32(fp)
    a6a0:	00c00fc4 	movi	r3,63
    a6a4:	10c00dc5 	stb	r3,55(r2)
    a6a8:	e0bff617 	ldw	r2,-40(fp)
    a6ac:	e0bffe15 	stw	r2,-8(fp)
    a6b0:	e0bffe17 	ldw	r2,-8(fp)
    a6b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a6b8:	0005883a 	mov	r2,zero
}
    a6bc:	e037883a 	mov	sp,fp
    a6c0:	df000017 	ldw	fp,0(sp)
    a6c4:	dec00104 	addi	sp,sp,4
    a6c8:	f800283a 	ret

0000a6cc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a6cc:	defff404 	addi	sp,sp,-48
    a6d0:	dfc00b15 	stw	ra,44(sp)
    a6d4:	df000a15 	stw	fp,40(sp)
    a6d8:	df000a04 	addi	fp,sp,40
    a6dc:	2005883a 	mov	r2,r4
    a6e0:	e17ffe15 	stw	r5,-8(fp)
    a6e4:	e1bfff15 	stw	r6,-4(fp)
    a6e8:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    a6ec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    a6f0:	e0bfff17 	ldw	r2,-4(fp)
    a6f4:	1000021e 	bne	r2,zero,a700 <OSTaskNameGet+0x34>
        return (0);
    a6f8:	0005883a 	mov	r2,zero
    a6fc:	00005806 	br	a860 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    a700:	e0bffd03 	ldbu	r2,-12(fp)
    a704:	10800a70 	cmpltui	r2,r2,41
    a708:	1000081e 	bne	r2,zero,a72c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    a70c:	e0bffd03 	ldbu	r2,-12(fp)
    a710:	10803fe0 	cmpeqi	r2,r2,255
    a714:	1000051e 	bne	r2,zero,a72c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    a718:	e0bfff17 	ldw	r2,-4(fp)
    a71c:	00c00a84 	movi	r3,42
    a720:	10c00005 	stb	r3,0(r2)
            return (0);
    a724:	0005883a 	mov	r2,zero
    a728:	00004d06 	br	a860 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    a72c:	e0bffe17 	ldw	r2,-8(fp)
    a730:	1000051e 	bne	r2,zero,a748 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    a734:	e0bfff17 	ldw	r2,-4(fp)
    a738:	00c00304 	movi	r3,12
    a73c:	10c00005 	stb	r3,0(r2)
        return (0);
    a740:	0005883a 	mov	r2,zero
    a744:	00004606 	br	a860 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    a748:	00800074 	movhi	r2,1
    a74c:	1089f504 	addi	r2,r2,10196
    a750:	10800003 	ldbu	r2,0(r2)
    a754:	10803fcc 	andi	r2,r2,255
    a758:	10000526 	beq	r2,zero,a770 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    a75c:	e0bfff17 	ldw	r2,-4(fp)
    a760:	00c00444 	movi	r3,17
    a764:	10c00005 	stb	r3,0(r2)
        return (0);
    a768:	0005883a 	mov	r2,zero
    a76c:	00003c06 	br	a860 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a770:	0005303a 	rdctl	r2,status
    a774:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a778:	e0fff917 	ldw	r3,-28(fp)
    a77c:	00bfff84 	movi	r2,-2
    a780:	1884703a 	and	r2,r3,r2
    a784:	1001703a 	wrctl	status,r2
  
  return context;
    a788:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    a78c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    a790:	e0bffd03 	ldbu	r2,-12(fp)
    a794:	10803fd8 	cmpnei	r2,r2,255
    a798:	1000051e 	bne	r2,zero,a7b0 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    a79c:	00800074 	movhi	r2,1
    a7a0:	1089f604 	addi	r2,r2,10200
    a7a4:	10800017 	ldw	r2,0(r2)
    a7a8:	10800c83 	ldbu	r2,50(r2)
    a7ac:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a7b0:	e0bffd03 	ldbu	r2,-12(fp)
    a7b4:	00c000b4 	movhi	r3,2
    a7b8:	18e8d404 	addi	r3,r3,-23728
    a7bc:	1085883a 	add	r2,r2,r2
    a7c0:	1085883a 	add	r2,r2,r2
    a7c4:	1885883a 	add	r2,r3,r2
    a7c8:	10800017 	ldw	r2,0(r2)
    a7cc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    a7d0:	e0bff717 	ldw	r2,-36(fp)
    a7d4:	1000091e 	bne	r2,zero,a7fc <OSTaskNameGet+0x130>
    a7d8:	e0bff617 	ldw	r2,-40(fp)
    a7dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a7e0:	e0bffa17 	ldw	r2,-24(fp)
    a7e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a7e8:	e0bfff17 	ldw	r2,-4(fp)
    a7ec:	00c010c4 	movi	r3,67
    a7f0:	10c00005 	stb	r3,0(r2)
        return (0);
    a7f4:	0005883a 	mov	r2,zero
    a7f8:	00001906 	br	a860 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    a7fc:	e0bff717 	ldw	r2,-36(fp)
    a800:	10800058 	cmpnei	r2,r2,1
    a804:	1000091e 	bne	r2,zero,a82c <OSTaskNameGet+0x160>
    a808:	e0bff617 	ldw	r2,-40(fp)
    a80c:	e0bffb15 	stw	r2,-20(fp)
    a810:	e0bffb17 	ldw	r2,-20(fp)
    a814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a818:	e0bfff17 	ldw	r2,-4(fp)
    a81c:	00c010c4 	movi	r3,67
    a820:	10c00005 	stb	r3,0(r2)
        return (0);
    a824:	0005883a 	mov	r2,zero
    a828:	00000d06 	br	a860 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    a82c:	e0bff717 	ldw	r2,-36(fp)
    a830:	10801304 	addi	r2,r2,76
    a834:	e13ffe17 	ldw	r4,-8(fp)
    a838:	100b883a 	mov	r5,r2
    a83c:	00054980 	call	5498 <OS_StrCopy>
    a840:	e0bff805 	stb	r2,-32(fp)
    a844:	e0bff617 	ldw	r2,-40(fp)
    a848:	e0bffc15 	stw	r2,-16(fp)
    a84c:	e0bffc17 	ldw	r2,-16(fp)
    a850:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a854:	e0bfff17 	ldw	r2,-4(fp)
    a858:	10000005 	stb	zero,0(r2)
    return (len);
    a85c:	e0bff803 	ldbu	r2,-32(fp)
}
    a860:	e037883a 	mov	sp,fp
    a864:	dfc00117 	ldw	ra,4(sp)
    a868:	df000017 	ldw	fp,0(sp)
    a86c:	dec00204 	addi	sp,sp,8
    a870:	f800283a 	ret

0000a874 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a874:	defff304 	addi	sp,sp,-52
    a878:	dfc00c15 	stw	ra,48(sp)
    a87c:	df000b15 	stw	fp,44(sp)
    a880:	df000b04 	addi	fp,sp,44
    a884:	2005883a 	mov	r2,r4
    a888:	e17ffe15 	stw	r5,-8(fp)
    a88c:	e1bfff15 	stw	r6,-4(fp)
    a890:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    a894:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    a898:	e0bfff17 	ldw	r2,-4(fp)
    a89c:	10006026 	beq	r2,zero,aa20 <OSTaskNameSet+0x1ac>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    a8a0:	e0bffd03 	ldbu	r2,-12(fp)
    a8a4:	10800a70 	cmpltui	r2,r2,41
    a8a8:	1000071e 	bne	r2,zero,a8c8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    a8ac:	e0bffd03 	ldbu	r2,-12(fp)
    a8b0:	10803fe0 	cmpeqi	r2,r2,255
    a8b4:	1000041e 	bne	r2,zero,a8c8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    a8b8:	e0bfff17 	ldw	r2,-4(fp)
    a8bc:	00c00a84 	movi	r3,42
    a8c0:	10c00005 	stb	r3,0(r2)
            return;
    a8c4:	00005706 	br	aa24 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    a8c8:	e0bffe17 	ldw	r2,-8(fp)
    a8cc:	1000041e 	bne	r2,zero,a8e0 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    a8d0:	e0bfff17 	ldw	r2,-4(fp)
    a8d4:	00c00304 	movi	r3,12
    a8d8:	10c00005 	stb	r3,0(r2)
        return;
    a8dc:	00005106 	br	aa24 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    a8e0:	00800074 	movhi	r2,1
    a8e4:	1089f504 	addi	r2,r2,10196
    a8e8:	10800003 	ldbu	r2,0(r2)
    a8ec:	10803fcc 	andi	r2,r2,255
    a8f0:	10000426 	beq	r2,zero,a904 <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
    a8f4:	e0bfff17 	ldw	r2,-4(fp)
    a8f8:	00c00484 	movi	r3,18
    a8fc:	10c00005 	stb	r3,0(r2)
        return;
    a900:	00004806 	br	aa24 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a904:	0005303a 	rdctl	r2,status
    a908:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a90c:	e0fff817 	ldw	r3,-32(fp)
    a910:	00bfff84 	movi	r2,-2
    a914:	1884703a 	and	r2,r3,r2
    a918:	1001703a 	wrctl	status,r2
  
  return context;
    a91c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    a920:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    a924:	e0bffd03 	ldbu	r2,-12(fp)
    a928:	10803fd8 	cmpnei	r2,r2,255
    a92c:	1000051e 	bne	r2,zero,a944 <OSTaskNameSet+0xd0>
        prio = OSTCBCur->OSTCBPrio;
    a930:	00800074 	movhi	r2,1
    a934:	1089f604 	addi	r2,r2,10200
    a938:	10800017 	ldw	r2,0(r2)
    a93c:	10800c83 	ldbu	r2,50(r2)
    a940:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a944:	e0bffd03 	ldbu	r2,-12(fp)
    a948:	00c000b4 	movhi	r3,2
    a94c:	18e8d404 	addi	r3,r3,-23728
    a950:	1085883a 	add	r2,r2,r2
    a954:	1085883a 	add	r2,r2,r2
    a958:	1885883a 	add	r2,r3,r2
    a95c:	10800017 	ldw	r2,0(r2)
    a960:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    a964:	e0bff617 	ldw	r2,-40(fp)
    a968:	1000081e 	bne	r2,zero,a98c <OSTaskNameSet+0x118>
    a96c:	e0bff517 	ldw	r2,-44(fp)
    a970:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a974:	e0bff917 	ldw	r2,-28(fp)
    a978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a97c:	e0bfff17 	ldw	r2,-4(fp)
    a980:	00c010c4 	movi	r3,67
    a984:	10c00005 	stb	r3,0(r2)
        return;
    a988:	00002606 	br	aa24 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    a98c:	e0bff617 	ldw	r2,-40(fp)
    a990:	10800058 	cmpnei	r2,r2,1
    a994:	1000081e 	bne	r2,zero,a9b8 <OSTaskNameSet+0x144>
    a998:	e0bff517 	ldw	r2,-44(fp)
    a99c:	e0bffa15 	stw	r2,-24(fp)
    a9a0:	e0bffa17 	ldw	r2,-24(fp)
    a9a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a9a8:	e0bfff17 	ldw	r2,-4(fp)
    a9ac:	00c010c4 	movi	r3,67
    a9b0:	10c00005 	stb	r3,0(r2)
        return;
    a9b4:	00001b06 	br	aa24 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    a9b8:	e13ffe17 	ldw	r4,-8(fp)
    a9bc:	00055140 	call	5514 <OS_StrLen>
    a9c0:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    a9c4:	e0bff703 	ldbu	r2,-36(fp)
    a9c8:	10800830 	cmpltui	r2,r2,32
    a9cc:	1000081e 	bne	r2,zero,a9f0 <OSTaskNameSet+0x17c>
    a9d0:	e0bff517 	ldw	r2,-44(fp)
    a9d4:	e0bffb15 	stw	r2,-20(fp)
    a9d8:	e0bffb17 	ldw	r2,-20(fp)
    a9dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    a9e0:	e0bfff17 	ldw	r2,-4(fp)
    a9e4:	00c01044 	movi	r3,65
    a9e8:	10c00005 	stb	r3,0(r2)
        return;
    a9ec:	00000d06 	br	aa24 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    a9f0:	e0bff617 	ldw	r2,-40(fp)
    a9f4:	10801304 	addi	r2,r2,76
    a9f8:	1009883a 	mov	r4,r2
    a9fc:	e17ffe17 	ldw	r5,-8(fp)
    aa00:	00054980 	call	5498 <OS_StrCopy>
    aa04:	e0bff517 	ldw	r2,-44(fp)
    aa08:	e0bffc15 	stw	r2,-16(fp)
    aa0c:	e0bffc17 	ldw	r2,-16(fp)
    aa10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    aa14:	e0bfff17 	ldw	r2,-4(fp)
    aa18:	10000005 	stb	zero,0(r2)
    aa1c:	00000106 	br	aa24 <OSTaskNameSet+0x1b0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
    aa20:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    aa24:	e037883a 	mov	sp,fp
    aa28:	dfc00117 	ldw	ra,4(sp)
    aa2c:	df000017 	ldw	fp,0(sp)
    aa30:	dec00204 	addi	sp,sp,8
    aa34:	f800283a 	ret

0000aa38 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    aa38:	defff404 	addi	sp,sp,-48
    aa3c:	dfc00b15 	stw	ra,44(sp)
    aa40:	df000a15 	stw	fp,40(sp)
    aa44:	df000a04 	addi	fp,sp,40
    aa48:	2005883a 	mov	r2,r4
    aa4c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    aa50:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    aa54:	e0bfff03 	ldbu	r2,-4(fp)
    aa58:	10800a30 	cmpltui	r2,r2,40
    aa5c:	1000021e 	bne	r2,zero,aa68 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    aa60:	00800a84 	movi	r2,42
    aa64:	00006c06 	br	ac18 <OSTaskResume+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aa68:	0005303a 	rdctl	r2,status
    aa6c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aa70:	e0fff817 	ldw	r3,-32(fp)
    aa74:	00bfff84 	movi	r2,-2
    aa78:	1884703a 	and	r2,r3,r2
    aa7c:	1001703a 	wrctl	status,r2
  
  return context;
    aa80:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    aa84:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    aa88:	e0bfff03 	ldbu	r2,-4(fp)
    aa8c:	00c000b4 	movhi	r3,2
    aa90:	18e8d404 	addi	r3,r3,-23728
    aa94:	1085883a 	add	r2,r2,r2
    aa98:	1085883a 	add	r2,r2,r2
    aa9c:	1885883a 	add	r2,r3,r2
    aaa0:	10800017 	ldw	r2,0(r2)
    aaa4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    aaa8:	e0bff717 	ldw	r2,-36(fp)
    aaac:	1000061e 	bne	r2,zero,aac8 <OSTaskResume+0x90>
    aab0:	e0bff617 	ldw	r2,-40(fp)
    aab4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aab8:	e0bff917 	ldw	r2,-28(fp)
    aabc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    aac0:	00801184 	movi	r2,70
    aac4:	00005406 	br	ac18 <OSTaskResume+0x1e0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    aac8:	e0bff717 	ldw	r2,-36(fp)
    aacc:	10800058 	cmpnei	r2,r2,1
    aad0:	1000061e 	bne	r2,zero,aaec <OSTaskResume+0xb4>
    aad4:	e0bff617 	ldw	r2,-40(fp)
    aad8:	e0bffa15 	stw	r2,-24(fp)
    aadc:	e0bffa17 	ldw	r2,-24(fp)
    aae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    aae4:	008010c4 	movi	r2,67
    aae8:	00004b06 	br	ac18 <OSTaskResume+0x1e0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    aaec:	e0bff717 	ldw	r2,-36(fp)
    aaf0:	10800c03 	ldbu	r2,48(r2)
    aaf4:	10803fcc 	andi	r2,r2,255
    aaf8:	1080020c 	andi	r2,r2,8
    aafc:	10004126 	beq	r2,zero,ac04 <OSTaskResume+0x1cc>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    ab00:	e0bff717 	ldw	r2,-36(fp)
    ab04:	10c00c03 	ldbu	r3,48(r2)
    ab08:	00bffdc4 	movi	r2,-9
    ab0c:	1884703a 	and	r2,r3,r2
    ab10:	1007883a 	mov	r3,r2
    ab14:	e0bff717 	ldw	r2,-36(fp)
    ab18:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    ab1c:	e0bff717 	ldw	r2,-36(fp)
    ab20:	10800c03 	ldbu	r2,48(r2)
    ab24:	10803fcc 	andi	r2,r2,255
    ab28:	1000301e 	bne	r2,zero,abec <OSTaskResume+0x1b4>
            if (ptcb->OSTCBDly == 0) {
    ab2c:	e0bff717 	ldw	r2,-36(fp)
    ab30:	10800b8b 	ldhu	r2,46(r2)
    ab34:	10bfffcc 	andi	r2,r2,65535
    ab38:	1000271e 	bne	r2,zero,abd8 <OSTaskResume+0x1a0>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    ab3c:	e0bff717 	ldw	r2,-36(fp)
    ab40:	10c00d83 	ldbu	r3,54(r2)
    ab44:	00800074 	movhi	r2,1
    ab48:	1089f204 	addi	r2,r2,10184
    ab4c:	10800003 	ldbu	r2,0(r2)
    ab50:	1884b03a 	or	r2,r3,r2
    ab54:	1007883a 	mov	r3,r2
    ab58:	00800074 	movhi	r2,1
    ab5c:	1089f204 	addi	r2,r2,10184
    ab60:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ab64:	e0bff717 	ldw	r2,-36(fp)
    ab68:	10800d03 	ldbu	r2,52(r2)
    ab6c:	10803fcc 	andi	r2,r2,255
    ab70:	e0fff717 	ldw	r3,-36(fp)
    ab74:	18c00d03 	ldbu	r3,52(r3)
    ab78:	18c03fcc 	andi	r3,r3,255
    ab7c:	01000074 	movhi	r4,1
    ab80:	2109f244 	addi	r4,r4,10185
    ab84:	20c7883a 	add	r3,r4,r3
    ab88:	19000003 	ldbu	r4,0(r3)
    ab8c:	e0fff717 	ldw	r3,-36(fp)
    ab90:	18c00d43 	ldbu	r3,53(r3)
    ab94:	20c6b03a 	or	r3,r4,r3
    ab98:	01000074 	movhi	r4,1
    ab9c:	2109f244 	addi	r4,r4,10185
    aba0:	2085883a 	add	r2,r4,r2
    aba4:	10c00005 	stb	r3,0(r2)
    aba8:	e0bff617 	ldw	r2,-40(fp)
    abac:	e0bffb15 	stw	r2,-20(fp)
    abb0:	e0bffb17 	ldw	r2,-20(fp)
    abb4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    abb8:	00800074 	movhi	r2,1
    abbc:	1089e644 	addi	r2,r2,10137
    abc0:	10800003 	ldbu	r2,0(r2)
    abc4:	10803fcc 	andi	r2,r2,255
    abc8:	10800058 	cmpnei	r2,r2,1
    abcc:	10000b1e 	bne	r2,zero,abfc <OSTaskResume+0x1c4>
                    OS_Sched();                               /* Find new highest priority task        */
    abd0:	000535c0 	call	535c <OS_Sched>
    abd4:	00000906 	br	abfc <OSTaskResume+0x1c4>
    abd8:	e0bff617 	ldw	r2,-40(fp)
    abdc:	e0bffc15 	stw	r2,-16(fp)
    abe0:	e0bffc17 	ldw	r2,-16(fp)
    abe4:	1001703a 	wrctl	status,r2
    abe8:	00000406 	br	abfc <OSTaskResume+0x1c4>
    abec:	e0bff617 	ldw	r2,-40(fp)
    abf0:	e0bffd15 	stw	r2,-12(fp)
    abf4:	e0bffd17 	ldw	r2,-12(fp)
    abf8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    abfc:	0005883a 	mov	r2,zero
    ac00:	00000506 	br	ac18 <OSTaskResume+0x1e0>
    ac04:	e0bff617 	ldw	r2,-40(fp)
    ac08:	e0bffe15 	stw	r2,-8(fp)
    ac0c:	e0bffe17 	ldw	r2,-8(fp)
    ac10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    ac14:	00801104 	movi	r2,68
}
    ac18:	e037883a 	mov	sp,fp
    ac1c:	dfc00117 	ldw	ra,4(sp)
    ac20:	df000017 	ldw	fp,0(sp)
    ac24:	dec00204 	addi	sp,sp,8
    ac28:	f800283a 	ret

0000ac2c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    ac2c:	defff304 	addi	sp,sp,-52
    ac30:	df000c15 	stw	fp,48(sp)
    ac34:	df000c04 	addi	fp,sp,48
    ac38:	2005883a 	mov	r2,r4
    ac3c:	e17fff15 	stw	r5,-4(fp)
    ac40:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ac44:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    ac48:	e0bffe03 	ldbu	r2,-8(fp)
    ac4c:	10800a70 	cmpltui	r2,r2,41
    ac50:	1000051e 	bne	r2,zero,ac68 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    ac54:	e0bffe03 	ldbu	r2,-8(fp)
    ac58:	10803fe0 	cmpeqi	r2,r2,255
    ac5c:	1000021e 	bne	r2,zero,ac68 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    ac60:	00800a84 	movi	r2,42
    ac64:	00006206 	br	adf0 <OSTaskStkChk+0x1c4>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    ac68:	e0bfff17 	ldw	r2,-4(fp)
    ac6c:	1000021e 	bne	r2,zero,ac78 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    ac70:	00800244 	movi	r2,9
    ac74:	00005e06 	br	adf0 <OSTaskStkChk+0x1c4>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    ac78:	e0bfff17 	ldw	r2,-4(fp)
    ac7c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    ac80:	e0bfff17 	ldw	r2,-4(fp)
    ac84:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ac88:	0005303a 	rdctl	r2,status
    ac8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ac90:	e0fff917 	ldw	r3,-28(fp)
    ac94:	00bfff84 	movi	r2,-2
    ac98:	1884703a 	and	r2,r3,r2
    ac9c:	1001703a 	wrctl	status,r2
  
  return context;
    aca0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    aca4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    aca8:	e0bffe03 	ldbu	r2,-8(fp)
    acac:	10803fd8 	cmpnei	r2,r2,255
    acb0:	1000051e 	bne	r2,zero,acc8 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    acb4:	00800074 	movhi	r2,1
    acb8:	1089f604 	addi	r2,r2,10200
    acbc:	10800017 	ldw	r2,0(r2)
    acc0:	10800c83 	ldbu	r2,50(r2)
    acc4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    acc8:	e0bffe03 	ldbu	r2,-8(fp)
    accc:	00c000b4 	movhi	r3,2
    acd0:	18e8d404 	addi	r3,r3,-23728
    acd4:	1085883a 	add	r2,r2,r2
    acd8:	1085883a 	add	r2,r2,r2
    acdc:	1885883a 	add	r2,r3,r2
    ace0:	10800017 	ldw	r2,0(r2)
    ace4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    ace8:	e0bff717 	ldw	r2,-36(fp)
    acec:	1000061e 	bne	r2,zero,ad08 <OSTaskStkChk+0xdc>
    acf0:	e0bff617 	ldw	r2,-40(fp)
    acf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    acf8:	e0bffa17 	ldw	r2,-24(fp)
    acfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ad00:	008010c4 	movi	r2,67
    ad04:	00003a06 	br	adf0 <OSTaskStkChk+0x1c4>
    }
    if (ptcb == OS_TCB_RESERVED) {
    ad08:	e0bff717 	ldw	r2,-36(fp)
    ad0c:	10800058 	cmpnei	r2,r2,1
    ad10:	1000061e 	bne	r2,zero,ad2c <OSTaskStkChk+0x100>
    ad14:	e0bff617 	ldw	r2,-40(fp)
    ad18:	e0bffb15 	stw	r2,-20(fp)
    ad1c:	e0bffb17 	ldw	r2,-20(fp)
    ad20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ad24:	008010c4 	movi	r2,67
    ad28:	00003106 	br	adf0 <OSTaskStkChk+0x1c4>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    ad2c:	e0bff717 	ldw	r2,-36(fp)
    ad30:	1080040b 	ldhu	r2,16(r2)
    ad34:	10bfffcc 	andi	r2,r2,65535
    ad38:	1080004c 	andi	r2,r2,1
    ad3c:	1000061e 	bne	r2,zero,ad58 <OSTaskStkChk+0x12c>
    ad40:	e0bff617 	ldw	r2,-40(fp)
    ad44:	e0bffc15 	stw	r2,-16(fp)
    ad48:	e0bffc17 	ldw	r2,-16(fp)
    ad4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    ad50:	00801144 	movi	r2,69
    ad54:	00002606 	br	adf0 <OSTaskStkChk+0x1c4>
    }
    nfree = 0;
    ad58:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    ad5c:	e0bff717 	ldw	r2,-36(fp)
    ad60:	10800317 	ldw	r2,12(r2)
    ad64:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
    ad68:	e0bff717 	ldw	r2,-36(fp)
    ad6c:	10800217 	ldw	r2,8(r2)
    ad70:	e0bff415 	stw	r2,-48(fp)
    ad74:	e0bff617 	ldw	r2,-40(fp)
    ad78:	e0bffd15 	stw	r2,-12(fp)
    ad7c:	e0bffd17 	ldw	r2,-12(fp)
    ad80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    ad84:	00000306 	br	ad94 <OSTaskStkChk+0x168>
        nfree++;
    ad88:	e0bff517 	ldw	r2,-44(fp)
    ad8c:	10800044 	addi	r2,r2,1
    ad90:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    ad94:	e0bff417 	ldw	r2,-48(fp)
    ad98:	10800017 	ldw	r2,0(r2)
    ad9c:	1005003a 	cmpeq	r2,r2,zero
    ada0:	e0fff417 	ldw	r3,-48(fp)
    ada4:	18c00104 	addi	r3,r3,4
    ada8:	e0fff415 	stw	r3,-48(fp)
    adac:	10803fcc 	andi	r2,r2,255
    adb0:	103ff51e 	bne	r2,zero,ad88 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    adb4:	e0bff517 	ldw	r2,-44(fp)
    adb8:	1085883a 	add	r2,r2,r2
    adbc:	1085883a 	add	r2,r2,r2
    adc0:	1007883a 	mov	r3,r2
    adc4:	e0bfff17 	ldw	r2,-4(fp)
    adc8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    adcc:	e0fff817 	ldw	r3,-32(fp)
    add0:	e0bff517 	ldw	r2,-44(fp)
    add4:	1885c83a 	sub	r2,r3,r2
    add8:	1085883a 	add	r2,r2,r2
    addc:	1085883a 	add	r2,r2,r2
    ade0:	1007883a 	mov	r3,r2
    ade4:	e0bfff17 	ldw	r2,-4(fp)
    ade8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    adec:	0005883a 	mov	r2,zero
}
    adf0:	e037883a 	mov	sp,fp
    adf4:	df000017 	ldw	fp,0(sp)
    adf8:	dec00104 	addi	sp,sp,4
    adfc:	f800283a 	ret

0000ae00 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    ae00:	defff504 	addi	sp,sp,-44
    ae04:	dfc00a15 	stw	ra,40(sp)
    ae08:	df000915 	stw	fp,36(sp)
    ae0c:	df000904 	addi	fp,sp,36
    ae10:	2005883a 	mov	r2,r4
    ae14:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ae18:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    ae1c:	e0bfff03 	ldbu	r2,-4(fp)
    ae20:	10800a18 	cmpnei	r2,r2,40
    ae24:	1000021e 	bne	r2,zero,ae30 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    ae28:	008011c4 	movi	r2,71
    ae2c:	00007306 	br	affc <OSTaskSuspend+0x1fc>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    ae30:	e0bfff03 	ldbu	r2,-4(fp)
    ae34:	10800a30 	cmpltui	r2,r2,40
    ae38:	1000051e 	bne	r2,zero,ae50 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    ae3c:	e0bfff03 	ldbu	r2,-4(fp)
    ae40:	10803fe0 	cmpeqi	r2,r2,255
    ae44:	1000021e 	bne	r2,zero,ae50 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    ae48:	00800a84 	movi	r2,42
    ae4c:	00006b06 	br	affc <OSTaskSuspend+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ae50:	0005303a 	rdctl	r2,status
    ae54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ae58:	e0fffb17 	ldw	r3,-20(fp)
    ae5c:	00bfff84 	movi	r2,-2
    ae60:	1884703a 	and	r2,r3,r2
    ae64:	1001703a 	wrctl	status,r2
  
  return context;
    ae68:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    ae6c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    ae70:	e0bfff03 	ldbu	r2,-4(fp)
    ae74:	10803fd8 	cmpnei	r2,r2,255
    ae78:	1000081e 	bne	r2,zero,ae9c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    ae7c:	00800074 	movhi	r2,1
    ae80:	1089f604 	addi	r2,r2,10200
    ae84:	10800017 	ldw	r2,0(r2)
    ae88:	10800c83 	ldbu	r2,50(r2)
    ae8c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    ae90:	00800044 	movi	r2,1
    ae94:	e0bff705 	stb	r2,-36(fp)
    ae98:	00000b06 	br	aec8 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    ae9c:	00800074 	movhi	r2,1
    aea0:	1089f604 	addi	r2,r2,10200
    aea4:	10800017 	ldw	r2,0(r2)
    aea8:	10800c83 	ldbu	r2,50(r2)
    aeac:	10c03fcc 	andi	r3,r2,255
    aeb0:	e0bfff03 	ldbu	r2,-4(fp)
    aeb4:	1880031e 	bne	r3,r2,aec4 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    aeb8:	00800044 	movi	r2,1
    aebc:	e0bff705 	stb	r2,-36(fp)
    aec0:	00000106 	br	aec8 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    aec4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    aec8:	e0bfff03 	ldbu	r2,-4(fp)
    aecc:	00c000b4 	movhi	r3,2
    aed0:	18e8d404 	addi	r3,r3,-23728
    aed4:	1085883a 	add	r2,r2,r2
    aed8:	1085883a 	add	r2,r2,r2
    aedc:	1885883a 	add	r2,r3,r2
    aee0:	10800017 	ldw	r2,0(r2)
    aee4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    aee8:	e0bff917 	ldw	r2,-28(fp)
    aeec:	1000061e 	bne	r2,zero,af08 <OSTaskSuspend+0x108>
    aef0:	e0bff817 	ldw	r2,-32(fp)
    aef4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aef8:	e0bffc17 	ldw	r2,-16(fp)
    aefc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    af00:	00801204 	movi	r2,72
    af04:	00003d06 	br	affc <OSTaskSuspend+0x1fc>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    af08:	e0bff917 	ldw	r2,-28(fp)
    af0c:	10800058 	cmpnei	r2,r2,1
    af10:	1000061e 	bne	r2,zero,af2c <OSTaskSuspend+0x12c>
    af14:	e0bff817 	ldw	r2,-32(fp)
    af18:	e0bffd15 	stw	r2,-12(fp)
    af1c:	e0bffd17 	ldw	r2,-12(fp)
    af20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    af24:	008010c4 	movi	r2,67
    af28:	00003406 	br	affc <OSTaskSuspend+0x1fc>
    }
    y            = ptcb->OSTCBY;
    af2c:	e0bff917 	ldw	r2,-28(fp)
    af30:	10800d03 	ldbu	r2,52(r2)
    af34:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    af38:	e0bffa03 	ldbu	r2,-24(fp)
    af3c:	e0fffa03 	ldbu	r3,-24(fp)
    af40:	01000074 	movhi	r4,1
    af44:	2109f244 	addi	r4,r4,10185
    af48:	20c7883a 	add	r3,r4,r3
    af4c:	18c00003 	ldbu	r3,0(r3)
    af50:	1809883a 	mov	r4,r3
    af54:	e0fff917 	ldw	r3,-28(fp)
    af58:	18c00d43 	ldbu	r3,53(r3)
    af5c:	00c6303a 	nor	r3,zero,r3
    af60:	20c6703a 	and	r3,r4,r3
    af64:	01000074 	movhi	r4,1
    af68:	2109f244 	addi	r4,r4,10185
    af6c:	2085883a 	add	r2,r4,r2
    af70:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    af74:	e0bffa03 	ldbu	r2,-24(fp)
    af78:	00c00074 	movhi	r3,1
    af7c:	18c9f244 	addi	r3,r3,10185
    af80:	1885883a 	add	r2,r3,r2
    af84:	10800003 	ldbu	r2,0(r2)
    af88:	10803fcc 	andi	r2,r2,255
    af8c:	10000c1e 	bne	r2,zero,afc0 <OSTaskSuspend+0x1c0>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    af90:	e0bff917 	ldw	r2,-28(fp)
    af94:	10800d83 	ldbu	r2,54(r2)
    af98:	0084303a 	nor	r2,zero,r2
    af9c:	1007883a 	mov	r3,r2
    afa0:	00800074 	movhi	r2,1
    afa4:	1089f204 	addi	r2,r2,10184
    afa8:	10800003 	ldbu	r2,0(r2)
    afac:	1884703a 	and	r2,r3,r2
    afb0:	1007883a 	mov	r3,r2
    afb4:	00800074 	movhi	r2,1
    afb8:	1089f204 	addi	r2,r2,10184
    afbc:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    afc0:	e0bff917 	ldw	r2,-28(fp)
    afc4:	10800c03 	ldbu	r2,48(r2)
    afc8:	10800214 	ori	r2,r2,8
    afcc:	1007883a 	mov	r3,r2
    afd0:	e0bff917 	ldw	r2,-28(fp)
    afd4:	10c00c05 	stb	r3,48(r2)
    afd8:	e0bff817 	ldw	r2,-32(fp)
    afdc:	e0bffe15 	stw	r2,-8(fp)
    afe0:	e0bffe17 	ldw	r2,-8(fp)
    afe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    afe8:	e0bff703 	ldbu	r2,-36(fp)
    afec:	10800058 	cmpnei	r2,r2,1
    aff0:	1000011e 	bne	r2,zero,aff8 <OSTaskSuspend+0x1f8>
        OS_Sched();                                             /* Find new highest priority task      */
    aff4:	000535c0 	call	535c <OS_Sched>
    }
    return (OS_ERR_NONE);
    aff8:	0005883a 	mov	r2,zero
}
    affc:	e037883a 	mov	sp,fp
    b000:	dfc00117 	ldw	ra,4(sp)
    b004:	df000017 	ldw	fp,0(sp)
    b008:	dec00204 	addi	sp,sp,8
    b00c:	f800283a 	ret

0000b010 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    b010:	defff604 	addi	sp,sp,-40
    b014:	dfc00915 	stw	ra,36(sp)
    b018:	df000815 	stw	fp,32(sp)
    b01c:	df000804 	addi	fp,sp,32
    b020:	2005883a 	mov	r2,r4
    b024:	e17fff15 	stw	r5,-4(fp)
    b028:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b02c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    b030:	e0bffe03 	ldbu	r2,-8(fp)
    b034:	10800a70 	cmpltui	r2,r2,41
    b038:	1000051e 	bne	r2,zero,b050 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    b03c:	e0bffe03 	ldbu	r2,-8(fp)
    b040:	10803fe0 	cmpeqi	r2,r2,255
    b044:	1000021e 	bne	r2,zero,b050 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    b048:	00800a84 	movi	r2,42
    b04c:	00003606 	br	b128 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    b050:	e0bfff17 	ldw	r2,-4(fp)
    b054:	1000021e 	bne	r2,zero,b060 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    b058:	00800244 	movi	r2,9
    b05c:	00003206 	br	b128 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b060:	0005303a 	rdctl	r2,status
    b064:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b068:	e0fffa17 	ldw	r3,-24(fp)
    b06c:	00bfff84 	movi	r2,-2
    b070:	1884703a 	and	r2,r3,r2
    b074:	1001703a 	wrctl	status,r2
  
  return context;
    b078:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b07c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    b080:	e0bffe03 	ldbu	r2,-8(fp)
    b084:	10803fd8 	cmpnei	r2,r2,255
    b088:	1000051e 	bne	r2,zero,b0a0 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    b08c:	00800074 	movhi	r2,1
    b090:	1089f604 	addi	r2,r2,10200
    b094:	10800017 	ldw	r2,0(r2)
    b098:	10800c83 	ldbu	r2,50(r2)
    b09c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b0a0:	e0bffe03 	ldbu	r2,-8(fp)
    b0a4:	00c000b4 	movhi	r3,2
    b0a8:	18e8d404 	addi	r3,r3,-23728
    b0ac:	1085883a 	add	r2,r2,r2
    b0b0:	1085883a 	add	r2,r2,r2
    b0b4:	1885883a 	add	r2,r3,r2
    b0b8:	10800017 	ldw	r2,0(r2)
    b0bc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    b0c0:	e0bff917 	ldw	r2,-28(fp)
    b0c4:	1000061e 	bne	r2,zero,b0e0 <OSTaskQuery+0xd0>
    b0c8:	e0bff817 	ldw	r2,-32(fp)
    b0cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b0d0:	e0bffb17 	ldw	r2,-20(fp)
    b0d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    b0d8:	00800a44 	movi	r2,41
    b0dc:	00001206 	br	b128 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    b0e0:	e0bff917 	ldw	r2,-28(fp)
    b0e4:	10800058 	cmpnei	r2,r2,1
    b0e8:	1000061e 	bne	r2,zero,b104 <OSTaskQuery+0xf4>
    b0ec:	e0bff817 	ldw	r2,-32(fp)
    b0f0:	e0bffc15 	stw	r2,-16(fp)
    b0f4:	e0bffc17 	ldw	r2,-16(fp)
    b0f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b0fc:	008010c4 	movi	r2,67
    b100:	00000906 	br	b128 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    b104:	e13fff17 	ldw	r4,-4(fp)
    b108:	e17ff917 	ldw	r5,-28(fp)
    b10c:	01801b04 	movi	r6,108
    b110:	00052f00 	call	52f0 <OS_MemCopy>
    b114:	e0bff817 	ldw	r2,-32(fp)
    b118:	e0bffd15 	stw	r2,-12(fp)
    b11c:	e0bffd17 	ldw	r2,-12(fp)
    b120:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b124:	0005883a 	mov	r2,zero
}
    b128:	e037883a 	mov	sp,fp
    b12c:	dfc00117 	ldw	ra,4(sp)
    b130:	df000017 	ldw	fp,0(sp)
    b134:	dec00204 	addi	sp,sp,8
    b138:	f800283a 	ret

0000b13c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    b13c:	defffc04 	addi	sp,sp,-16
    b140:	df000315 	stw	fp,12(sp)
    b144:	df000304 	addi	fp,sp,12
    b148:	e13ffd15 	stw	r4,-12(fp)
    b14c:	e17ffe15 	stw	r5,-8(fp)
    b150:	3005883a 	mov	r2,r6
    b154:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    b158:	e0bfff0b 	ldhu	r2,-4(fp)
    b15c:	1080004c 	andi	r2,r2,1
    b160:	10000e26 	beq	r2,zero,b19c <OS_TaskStkClr+0x60>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    b164:	e0bfff0b 	ldhu	r2,-4(fp)
    b168:	1080008c 	andi	r2,r2,2
    b16c:	10000b26 	beq	r2,zero,b19c <OS_TaskStkClr+0x60>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b170:	00000806 	br	b194 <OS_TaskStkClr+0x58>
                size--;
    b174:	e0bffe17 	ldw	r2,-8(fp)
    b178:	10bfffc4 	addi	r2,r2,-1
    b17c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    b180:	e0bffd17 	ldw	r2,-12(fp)
    b184:	10000015 	stw	zero,0(r2)
    b188:	e0bffd17 	ldw	r2,-12(fp)
    b18c:	10800104 	addi	r2,r2,4
    b190:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b194:	e0bffe17 	ldw	r2,-8(fp)
    b198:	103ff61e 	bne	r2,zero,b174 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    b19c:	e037883a 	mov	sp,fp
    b1a0:	df000017 	ldw	fp,0(sp)
    b1a4:	dec00104 	addi	sp,sp,4
    b1a8:	f800283a 	ret

0000b1ac <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    b1ac:	defff904 	addi	sp,sp,-28
    b1b0:	dfc00615 	stw	ra,24(sp)
    b1b4:	df000515 	stw	fp,20(sp)
    b1b8:	df000504 	addi	fp,sp,20
    b1bc:	2005883a 	mov	r2,r4
    b1c0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b1c4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b1c8:	00800074 	movhi	r2,1
    b1cc:	1089f504 	addi	r2,r2,10196
    b1d0:	10800003 	ldbu	r2,0(r2)
    b1d4:	10803fcc 	andi	r2,r2,255
    b1d8:	1000401e 	bne	r2,zero,b2dc <OSTimeDly+0x130>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    b1dc:	e0bfff0b 	ldhu	r2,-4(fp)
    b1e0:	10003f26 	beq	r2,zero,b2e0 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b1e4:	0005303a 	rdctl	r2,status
    b1e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b1ec:	e0fffd17 	ldw	r3,-12(fp)
    b1f0:	00bfff84 	movi	r2,-2
    b1f4:	1884703a 	and	r2,r3,r2
    b1f8:	1001703a 	wrctl	status,r2
  
  return context;
    b1fc:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    b200:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    b204:	00800074 	movhi	r2,1
    b208:	1089f604 	addi	r2,r2,10200
    b20c:	10800017 	ldw	r2,0(r2)
    b210:	10800d03 	ldbu	r2,52(r2)
    b214:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    b218:	e0bffc03 	ldbu	r2,-16(fp)
    b21c:	e0fffc03 	ldbu	r3,-16(fp)
    b220:	01000074 	movhi	r4,1
    b224:	2109f244 	addi	r4,r4,10185
    b228:	20c7883a 	add	r3,r4,r3
    b22c:	18c00003 	ldbu	r3,0(r3)
    b230:	1809883a 	mov	r4,r3
    b234:	00c00074 	movhi	r3,1
    b238:	18c9f604 	addi	r3,r3,10200
    b23c:	18c00017 	ldw	r3,0(r3)
    b240:	18c00d43 	ldbu	r3,53(r3)
    b244:	00c6303a 	nor	r3,zero,r3
    b248:	20c6703a 	and	r3,r4,r3
    b24c:	01000074 	movhi	r4,1
    b250:	2109f244 	addi	r4,r4,10185
    b254:	2085883a 	add	r2,r4,r2
    b258:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
    b25c:	e0bffc03 	ldbu	r2,-16(fp)
    b260:	00c00074 	movhi	r3,1
    b264:	18c9f244 	addi	r3,r3,10185
    b268:	1885883a 	add	r2,r3,r2
    b26c:	10800003 	ldbu	r2,0(r2)
    b270:	10803fcc 	andi	r2,r2,255
    b274:	10000e1e 	bne	r2,zero,b2b0 <OSTimeDly+0x104>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    b278:	00800074 	movhi	r2,1
    b27c:	1089f604 	addi	r2,r2,10200
    b280:	10800017 	ldw	r2,0(r2)
    b284:	10800d83 	ldbu	r2,54(r2)
    b288:	0084303a 	nor	r2,zero,r2
    b28c:	1007883a 	mov	r3,r2
    b290:	00800074 	movhi	r2,1
    b294:	1089f204 	addi	r2,r2,10184
    b298:	10800003 	ldbu	r2,0(r2)
    b29c:	1884703a 	and	r2,r3,r2
    b2a0:	1007883a 	mov	r3,r2
    b2a4:	00800074 	movhi	r2,1
    b2a8:	1089f204 	addi	r2,r2,10184
    b2ac:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    b2b0:	00800074 	movhi	r2,1
    b2b4:	1089f604 	addi	r2,r2,10200
    b2b8:	10800017 	ldw	r2,0(r2)
    b2bc:	e0ffff0b 	ldhu	r3,-4(fp)
    b2c0:	10c00b8d 	sth	r3,46(r2)
    b2c4:	e0bffb17 	ldw	r2,-20(fp)
    b2c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b2cc:	e0bffe17 	ldw	r2,-8(fp)
    b2d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    b2d4:	000535c0 	call	535c <OS_Sched>
    b2d8:	00000106 	br	b2e0 <OSTimeDly+0x134>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    b2dc:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    b2e0:	e037883a 	mov	sp,fp
    b2e4:	dfc00117 	ldw	ra,4(sp)
    b2e8:	df000017 	ldw	fp,0(sp)
    b2ec:	dec00204 	addi	sp,sp,8
    b2f0:	f800283a 	ret

0000b2f4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    b2f4:	defff604 	addi	sp,sp,-40
    b2f8:	dfc00915 	stw	ra,36(sp)
    b2fc:	df000815 	stw	fp,32(sp)
    b300:	dc400715 	stw	r17,28(sp)
    b304:	dc000615 	stw	r16,24(sp)
    b308:	df000604 	addi	fp,sp,24
    b30c:	2011883a 	mov	r8,r4
    b310:	2809883a 	mov	r4,r5
    b314:	3007883a 	mov	r3,r6
    b318:	3805883a 	mov	r2,r7
    b31c:	e23ffc05 	stb	r8,-16(fp)
    b320:	e13ffd05 	stb	r4,-12(fp)
    b324:	e0fffe05 	stb	r3,-8(fp)
    b328:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b32c:	00800074 	movhi	r2,1
    b330:	1089f504 	addi	r2,r2,10196
    b334:	10800003 	ldbu	r2,0(r2)
    b338:	10803fcc 	andi	r2,r2,255
    b33c:	10000226 	beq	r2,zero,b348 <OSTimeDlyHMSM+0x54>
        return (OS_ERR_TIME_DLY_ISR);
    b340:	00801544 	movi	r2,85
    b344:	00007006 	br	b508 <OSTimeDlyHMSM+0x214>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    b348:	e0bffc03 	ldbu	r2,-16(fp)
    b34c:	1000081e 	bne	r2,zero,b370 <OSTimeDlyHMSM+0x7c>
        if (minutes == 0) {
    b350:	e0bffd03 	ldbu	r2,-12(fp)
    b354:	1000061e 	bne	r2,zero,b370 <OSTimeDlyHMSM+0x7c>
            if (seconds == 0) {
    b358:	e0bffe03 	ldbu	r2,-8(fp)
    b35c:	1000041e 	bne	r2,zero,b370 <OSTimeDlyHMSM+0x7c>
                if (ms == 0) {
    b360:	e0bfff0b 	ldhu	r2,-4(fp)
    b364:	1000021e 	bne	r2,zero,b370 <OSTimeDlyHMSM+0x7c>
                    return (OS_ERR_TIME_ZERO_DLY);
    b368:	00801504 	movi	r2,84
    b36c:	00006606 	br	b508 <OSTimeDlyHMSM+0x214>
                }
            }
        }
    }
    if (minutes > 59) {
    b370:	e0bffd03 	ldbu	r2,-12(fp)
    b374:	10800f30 	cmpltui	r2,r2,60
    b378:	1000021e 	bne	r2,zero,b384 <OSTimeDlyHMSM+0x90>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    b37c:	00801444 	movi	r2,81
    b380:	00006106 	br	b508 <OSTimeDlyHMSM+0x214>
    }
    if (seconds > 59) {
    b384:	e0bffe03 	ldbu	r2,-8(fp)
    b388:	10800f30 	cmpltui	r2,r2,60
    b38c:	1000021e 	bne	r2,zero,b398 <OSTimeDlyHMSM+0xa4>
        return (OS_ERR_TIME_INVALID_SECONDS);
    b390:	00801484 	movi	r2,82
    b394:	00005c06 	br	b508 <OSTimeDlyHMSM+0x214>
    }
    if (ms > 999) {
    b398:	e0bfff0b 	ldhu	r2,-4(fp)
    b39c:	1080fa30 	cmpltui	r2,r2,1000
    b3a0:	1000021e 	bne	r2,zero,b3ac <OSTimeDlyHMSM+0xb8>
        return (OS_ERR_TIME_INVALID_MS);
    b3a4:	008014c4 	movi	r2,83
    b3a8:	00005706 	br	b508 <OSTimeDlyHMSM+0x214>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b3ac:	e0bffc03 	ldbu	r2,-16(fp)
    b3b0:	10c38424 	muli	r3,r2,3600
    b3b4:	e0bffd03 	ldbu	r2,-12(fp)
    b3b8:	10800f24 	muli	r2,r2,60
    b3bc:	1887883a 	add	r3,r3,r2
    b3c0:	e0bffe03 	ldbu	r2,-8(fp)
    b3c4:	1885883a 	add	r2,r3,r2
    b3c8:	1009883a 	mov	r4,r2
    b3cc:	000e7080 	call	e708 <__floatunsidf>
    b3d0:	100b883a 	mov	r5,r2
    b3d4:	180d883a 	mov	r6,r3
    b3d8:	2809883a 	mov	r4,r5
    b3dc:	300b883a 	mov	r5,r6
    b3e0:	000d883a 	mov	r6,zero
    b3e4:	01d01674 	movhi	r7,16473
    b3e8:	000e1380 	call	e138 <__muldf3>
    b3ec:	1009883a 	mov	r4,r2
    b3f0:	180b883a 	mov	r5,r3
    b3f4:	2021883a 	mov	r16,r4
    b3f8:	2823883a 	mov	r17,r5
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    b3fc:	e0bfff0b 	ldhu	r2,-4(fp)
    b400:	1009883a 	mov	r4,r2
    b404:	000e7080 	call	e708 <__floatunsidf>
    b408:	100b883a 	mov	r5,r2
    b40c:	180d883a 	mov	r6,r3
    b410:	2809883a 	mov	r4,r5
    b414:	300b883a 	mov	r5,r6
    b418:	000d883a 	mov	r6,zero
    b41c:	01d00534 	movhi	r7,16404
    b420:	000e0840 	call	e084 <__adddf3>
    b424:	1009883a 	mov	r4,r2
    b428:	180b883a 	mov	r5,r3
    b42c:	2005883a 	mov	r2,r4
    b430:	2807883a 	mov	r3,r5
    b434:	1009883a 	mov	r4,r2
    b438:	180b883a 	mov	r5,r3
    b43c:	000d883a 	mov	r6,zero
    b440:	01d01674 	movhi	r7,16473
    b444:	000e1380 	call	e138 <__muldf3>
    b448:	1009883a 	mov	r4,r2
    b44c:	180b883a 	mov	r5,r3
    b450:	2005883a 	mov	r2,r4
    b454:	2807883a 	mov	r3,r5
    b458:	1009883a 	mov	r4,r2
    b45c:	180b883a 	mov	r5,r3
    b460:	000d883a 	mov	r6,zero
    b464:	01d023f4 	movhi	r7,16527
    b468:	39d00004 	addi	r7,r7,16384
    b46c:	000e41c0 	call	e41c <__divdf3>
    b470:	1009883a 	mov	r4,r2
    b474:	180b883a 	mov	r5,r3
    b478:	2005883a 	mov	r2,r4
    b47c:	2807883a 	mov	r3,r5
    b480:	8009883a 	mov	r4,r16
    b484:	880b883a 	mov	r5,r17
    b488:	100d883a 	mov	r6,r2
    b48c:	180f883a 	mov	r7,r3
    b490:	000e0840 	call	e084 <__adddf3>
    b494:	1009883a 	mov	r4,r2
    b498:	180b883a 	mov	r5,r3
    b49c:	2005883a 	mov	r2,r4
    b4a0:	2807883a 	mov	r3,r5
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b4a4:	1009883a 	mov	r4,r2
    b4a8:	180b883a 	mov	r5,r3
    b4ac:	000dcac0 	call	dcac <__fixunsdfsi>
    b4b0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    b4b4:	e0bffb17 	ldw	r2,-20(fp)
    b4b8:	1004d43a 	srli	r2,r2,16
    b4bc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    b4c0:	e0bffb17 	ldw	r2,-20(fp)
    b4c4:	10bfffcc 	andi	r2,r2,65535
    b4c8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    b4cc:	e0bffb17 	ldw	r2,-20(fp)
    b4d0:	10bfffcc 	andi	r2,r2,65535
    b4d4:	1009883a 	mov	r4,r2
    b4d8:	000b1ac0 	call	b1ac <OSTimeDly>
    while (loops > 0) {
    b4dc:	00000706 	br	b4fc <OSTimeDlyHMSM+0x208>
        OSTimeDly((INT16U)32768u);
    b4e0:	01200014 	movui	r4,32768
    b4e4:	000b1ac0 	call	b1ac <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    b4e8:	01200014 	movui	r4,32768
    b4ec:	000b1ac0 	call	b1ac <OSTimeDly>
        loops--;
    b4f0:	e0bffa0b 	ldhu	r2,-24(fp)
    b4f4:	10bfffc4 	addi	r2,r2,-1
    b4f8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    b4fc:	e0bffa0b 	ldhu	r2,-24(fp)
    b500:	103ff71e 	bne	r2,zero,b4e0 <OSTimeDlyHMSM+0x1ec>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    b504:	0005883a 	mov	r2,zero
}
    b508:	e037883a 	mov	sp,fp
    b50c:	dfc00317 	ldw	ra,12(sp)
    b510:	df000217 	ldw	fp,8(sp)
    b514:	dc400117 	ldw	r17,4(sp)
    b518:	dc000017 	ldw	r16,0(sp)
    b51c:	dec00404 	addi	sp,sp,16
    b520:	f800283a 	ret

0000b524 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    b524:	defff504 	addi	sp,sp,-44
    b528:	dfc00a15 	stw	ra,40(sp)
    b52c:	df000915 	stw	fp,36(sp)
    b530:	df000904 	addi	fp,sp,36
    b534:	2005883a 	mov	r2,r4
    b538:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b53c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    b540:	e0bfff03 	ldbu	r2,-4(fp)
    b544:	10800a30 	cmpltui	r2,r2,40
    b548:	1000021e 	bne	r2,zero,b554 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    b54c:	00800a84 	movi	r2,42
    b550:	00006a06 	br	b6fc <OSTimeDlyResume+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b554:	0005303a 	rdctl	r2,status
    b558:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b55c:	e0fff917 	ldw	r3,-28(fp)
    b560:	00bfff84 	movi	r2,-2
    b564:	1884703a 	and	r2,r3,r2
    b568:	1001703a 	wrctl	status,r2
  
  return context;
    b56c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    b570:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    b574:	e0bfff03 	ldbu	r2,-4(fp)
    b578:	00c000b4 	movhi	r3,2
    b57c:	18e8d404 	addi	r3,r3,-23728
    b580:	1085883a 	add	r2,r2,r2
    b584:	1085883a 	add	r2,r2,r2
    b588:	1885883a 	add	r2,r3,r2
    b58c:	10800017 	ldw	r2,0(r2)
    b590:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
    b594:	e0bff817 	ldw	r2,-32(fp)
    b598:	1000061e 	bne	r2,zero,b5b4 <OSTimeDlyResume+0x90>
    b59c:	e0bff717 	ldw	r2,-36(fp)
    b5a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b5a4:	e0bffa17 	ldw	r2,-24(fp)
    b5a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b5ac:	008010c4 	movi	r2,67
    b5b0:	00005206 	br	b6fc <OSTimeDlyResume+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    b5b4:	e0bff817 	ldw	r2,-32(fp)
    b5b8:	10800058 	cmpnei	r2,r2,1
    b5bc:	1000061e 	bne	r2,zero,b5d8 <OSTimeDlyResume+0xb4>
    b5c0:	e0bff717 	ldw	r2,-36(fp)
    b5c4:	e0bffb15 	stw	r2,-20(fp)
    b5c8:	e0bffb17 	ldw	r2,-20(fp)
    b5cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b5d0:	008010c4 	movi	r2,67
    b5d4:	00004906 	br	b6fc <OSTimeDlyResume+0x1d8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    b5d8:	e0bff817 	ldw	r2,-32(fp)
    b5dc:	10800b8b 	ldhu	r2,46(r2)
    b5e0:	10bfffcc 	andi	r2,r2,65535
    b5e4:	1000061e 	bne	r2,zero,b600 <OSTimeDlyResume+0xdc>
    b5e8:	e0bff717 	ldw	r2,-36(fp)
    b5ec:	e0bffc15 	stw	r2,-16(fp)
    b5f0:	e0bffc17 	ldw	r2,-16(fp)
    b5f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    b5f8:	00801404 	movi	r2,80
    b5fc:	00003f06 	br	b6fc <OSTimeDlyResume+0x1d8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    b600:	e0bff817 	ldw	r2,-32(fp)
    b604:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    b608:	e0bff817 	ldw	r2,-32(fp)
    b60c:	10800c03 	ldbu	r2,48(r2)
    b610:	10803fcc 	andi	r2,r2,255
    b614:	10800dcc 	andi	r2,r2,55
    b618:	10000b26 	beq	r2,zero,b648 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    b61c:	e0bff817 	ldw	r2,-32(fp)
    b620:	10c00c03 	ldbu	r3,48(r2)
    b624:	00bff204 	movi	r2,-56
    b628:	1884703a 	and	r2,r3,r2
    b62c:	1007883a 	mov	r3,r2
    b630:	e0bff817 	ldw	r2,-32(fp)
    b634:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    b638:	e0bff817 	ldw	r2,-32(fp)
    b63c:	00c00044 	movi	r3,1
    b640:	10c00c45 	stb	r3,49(r2)
    b644:	00000206 	br	b650 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    b648:	e0bff817 	ldw	r2,-32(fp)
    b64c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    b650:	e0bff817 	ldw	r2,-32(fp)
    b654:	10800c03 	ldbu	r2,48(r2)
    b658:	10803fcc 	andi	r2,r2,255
    b65c:	1080020c 	andi	r2,r2,8
    b660:	1000211e 	bne	r2,zero,b6e8 <OSTimeDlyResume+0x1c4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    b664:	e0bff817 	ldw	r2,-32(fp)
    b668:	10c00d83 	ldbu	r3,54(r2)
    b66c:	00800074 	movhi	r2,1
    b670:	1089f204 	addi	r2,r2,10184
    b674:	10800003 	ldbu	r2,0(r2)
    b678:	1884b03a 	or	r2,r3,r2
    b67c:	1007883a 	mov	r3,r2
    b680:	00800074 	movhi	r2,1
    b684:	1089f204 	addi	r2,r2,10184
    b688:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    b68c:	e0bff817 	ldw	r2,-32(fp)
    b690:	10800d03 	ldbu	r2,52(r2)
    b694:	10803fcc 	andi	r2,r2,255
    b698:	e0fff817 	ldw	r3,-32(fp)
    b69c:	18c00d03 	ldbu	r3,52(r3)
    b6a0:	18c03fcc 	andi	r3,r3,255
    b6a4:	01000074 	movhi	r4,1
    b6a8:	2109f244 	addi	r4,r4,10185
    b6ac:	20c7883a 	add	r3,r4,r3
    b6b0:	19000003 	ldbu	r4,0(r3)
    b6b4:	e0fff817 	ldw	r3,-32(fp)
    b6b8:	18c00d43 	ldbu	r3,53(r3)
    b6bc:	20c6b03a 	or	r3,r4,r3
    b6c0:	01000074 	movhi	r4,1
    b6c4:	2109f244 	addi	r4,r4,10185
    b6c8:	2085883a 	add	r2,r4,r2
    b6cc:	10c00005 	stb	r3,0(r2)
    b6d0:	e0bff717 	ldw	r2,-36(fp)
    b6d4:	e0bffd15 	stw	r2,-12(fp)
    b6d8:	e0bffd17 	ldw	r2,-12(fp)
    b6dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    b6e0:	000535c0 	call	535c <OS_Sched>
    b6e4:	00000406 	br	b6f8 <OSTimeDlyResume+0x1d4>
    b6e8:	e0bff717 	ldw	r2,-36(fp)
    b6ec:	e0bffe15 	stw	r2,-8(fp)
    b6f0:	e0bffe17 	ldw	r2,-8(fp)
    b6f4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    b6f8:	0005883a 	mov	r2,zero
}
    b6fc:	e037883a 	mov	sp,fp
    b700:	dfc00117 	ldw	ra,4(sp)
    b704:	df000017 	ldw	fp,0(sp)
    b708:	dec00204 	addi	sp,sp,8
    b70c:	f800283a 	ret

0000b710 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    b710:	defffb04 	addi	sp,sp,-20
    b714:	df000415 	stw	fp,16(sp)
    b718:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b71c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b720:	0005303a 	rdctl	r2,status
    b724:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b728:	e0fffe17 	ldw	r3,-8(fp)
    b72c:	00bfff84 	movi	r2,-2
    b730:	1884703a 	and	r2,r3,r2
    b734:	1001703a 	wrctl	status,r2
  
  return context;
    b738:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    b73c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    b740:	00800074 	movhi	r2,1
    b744:	1089f704 	addi	r2,r2,10204
    b748:	10800017 	ldw	r2,0(r2)
    b74c:	e0bffd15 	stw	r2,-12(fp)
    b750:	e0bffc17 	ldw	r2,-16(fp)
    b754:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b758:	e0bfff17 	ldw	r2,-4(fp)
    b75c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    b760:	e0bffd17 	ldw	r2,-12(fp)
}
    b764:	e037883a 	mov	sp,fp
    b768:	df000017 	ldw	fp,0(sp)
    b76c:	dec00104 	addi	sp,sp,4
    b770:	f800283a 	ret

0000b774 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    b774:	defffb04 	addi	sp,sp,-20
    b778:	df000415 	stw	fp,16(sp)
    b77c:	df000404 	addi	fp,sp,16
    b780:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b784:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b788:	0005303a 	rdctl	r2,status
    b78c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b790:	e0fffd17 	ldw	r3,-12(fp)
    b794:	00bfff84 	movi	r2,-2
    b798:	1884703a 	and	r2,r3,r2
    b79c:	1001703a 	wrctl	status,r2
  
  return context;
    b7a0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    b7a4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    b7a8:	00800074 	movhi	r2,1
    b7ac:	1089f704 	addi	r2,r2,10204
    b7b0:	e0ffff17 	ldw	r3,-4(fp)
    b7b4:	10c00015 	stw	r3,0(r2)
    b7b8:	e0bffc17 	ldw	r2,-16(fp)
    b7bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b7c0:	e0bffe17 	ldw	r2,-8(fp)
    b7c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    b7c8:	e037883a 	mov	sp,fp
    b7cc:	df000017 	ldw	fp,0(sp)
    b7d0:	dec00104 	addi	sp,sp,4
    b7d4:	f800283a 	ret

0000b7d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b7d8:	defffd04 	addi	sp,sp,-12
    b7dc:	dfc00215 	stw	ra,8(sp)
    b7e0:	df000115 	stw	fp,4(sp)
    b7e4:	df000104 	addi	fp,sp,4
    b7e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b7ec:	e13fff17 	ldw	r4,-4(fp)
    b7f0:	01400074 	movhi	r5,1
    b7f4:	2942ff04 	addi	r5,r5,3068
    b7f8:	000c8800 	call	c880 <alt_dev_llist_insert>
}
    b7fc:	e037883a 	mov	sp,fp
    b800:	dfc00117 	ldw	ra,4(sp)
    b804:	df000017 	ldw	fp,0(sp)
    b808:	dec00204 	addi	sp,sp,8
    b80c:	f800283a 	ret

0000b810 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b810:	defffd04 	addi	sp,sp,-12
    b814:	dfc00215 	stw	ra,8(sp)
    b818:	df000115 	stw	fp,4(sp)
    b81c:	df000104 	addi	fp,sp,4
    b820:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_S0, cpu_s0);
    b824:	000d0fc0 	call	d0fc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b828:	00800044 	movi	r2,1
    b82c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b830:	e037883a 	mov	sp,fp
    b834:	dfc00117 	ldw	ra,4(sp)
    b838:	df000017 	ldw	fp,0(sp)
    b83c:	dec00204 	addi	sp,sp,8
    b840:	f800283a 	ret

0000b844 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b844:	defffe04 	addi	sp,sp,-8
    b848:	dfc00115 	stw	ra,4(sp)
    b84c:	df000015 	stw	fp,0(sp)
    b850:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_CPU_S0, timer_cpu_s0);
    b854:	01024034 	movhi	r4,2304
    b858:	000b883a 	mov	r5,zero
    b85c:	000d883a 	mov	r6,zero
    b860:	01c01904 	movi	r7,100
    b864:	000c6540 	call	c654 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_CPU_S0, jtag_uart_cpu_s0);
    b868:	01000074 	movhi	r4,1
    b86c:	213ee804 	addi	r4,r4,-1120
    b870:	000b883a 	mov	r5,zero
    b874:	01800084 	movi	r6,2
    b878:	000ba000 	call	ba00 <altera_avalon_jtag_uart_init>
    b87c:	01000074 	movhi	r4,1
    b880:	213ede04 	addi	r4,r4,-1160
    b884:	000b7d80 	call	b7d8 <alt_dev_reg>
}
    b888:	e037883a 	mov	sp,fp
    b88c:	dfc00117 	ldw	ra,4(sp)
    b890:	df000017 	ldw	fp,0(sp)
    b894:	dec00204 	addi	sp,sp,8
    b898:	f800283a 	ret

0000b89c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b89c:	defffa04 	addi	sp,sp,-24
    b8a0:	dfc00515 	stw	ra,20(sp)
    b8a4:	df000415 	stw	fp,16(sp)
    b8a8:	df000404 	addi	fp,sp,16
    b8ac:	e13ffd15 	stw	r4,-12(fp)
    b8b0:	e17ffe15 	stw	r5,-8(fp)
    b8b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b8b8:	e0bffd17 	ldw	r2,-12(fp)
    b8bc:	10800017 	ldw	r2,0(r2)
    b8c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b8c4:	e0bffc17 	ldw	r2,-16(fp)
    b8c8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    b8cc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b8d0:	10800217 	ldw	r2,8(r2)
    b8d4:	1809883a 	mov	r4,r3
    b8d8:	e17ffe17 	ldw	r5,-8(fp)
    b8dc:	e1bfff17 	ldw	r6,-4(fp)
    b8e0:	100f883a 	mov	r7,r2
    b8e4:	000c0480 	call	c048 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b8e8:	e037883a 	mov	sp,fp
    b8ec:	dfc00117 	ldw	ra,4(sp)
    b8f0:	df000017 	ldw	fp,0(sp)
    b8f4:	dec00204 	addi	sp,sp,8
    b8f8:	f800283a 	ret

0000b8fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b8fc:	defffa04 	addi	sp,sp,-24
    b900:	dfc00515 	stw	ra,20(sp)
    b904:	df000415 	stw	fp,16(sp)
    b908:	df000404 	addi	fp,sp,16
    b90c:	e13ffd15 	stw	r4,-12(fp)
    b910:	e17ffe15 	stw	r5,-8(fp)
    b914:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b918:	e0bffd17 	ldw	r2,-12(fp)
    b91c:	10800017 	ldw	r2,0(r2)
    b920:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b924:	e0bffc17 	ldw	r2,-16(fp)
    b928:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    b92c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b930:	10800217 	ldw	r2,8(r2)
    b934:	1809883a 	mov	r4,r3
    b938:	e17ffe17 	ldw	r5,-8(fp)
    b93c:	e1bfff17 	ldw	r6,-4(fp)
    b940:	100f883a 	mov	r7,r2
    b944:	000c30c0 	call	c30c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b948:	e037883a 	mov	sp,fp
    b94c:	dfc00117 	ldw	ra,4(sp)
    b950:	df000017 	ldw	fp,0(sp)
    b954:	dec00204 	addi	sp,sp,8
    b958:	f800283a 	ret

0000b95c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b95c:	defffc04 	addi	sp,sp,-16
    b960:	dfc00315 	stw	ra,12(sp)
    b964:	df000215 	stw	fp,8(sp)
    b968:	df000204 	addi	fp,sp,8
    b96c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b970:	e0bfff17 	ldw	r2,-4(fp)
    b974:	10800017 	ldw	r2,0(r2)
    b978:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b97c:	e0bffe17 	ldw	r2,-8(fp)
    b980:	10c00a04 	addi	r3,r2,40
    b984:	e0bfff17 	ldw	r2,-4(fp)
    b988:	10800217 	ldw	r2,8(r2)
    b98c:	1809883a 	mov	r4,r3
    b990:	100b883a 	mov	r5,r2
    b994:	000beec0 	call	beec <altera_avalon_jtag_uart_close>
}
    b998:	e037883a 	mov	sp,fp
    b99c:	dfc00117 	ldw	ra,4(sp)
    b9a0:	df000017 	ldw	fp,0(sp)
    b9a4:	dec00204 	addi	sp,sp,8
    b9a8:	f800283a 	ret

0000b9ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b9ac:	defffa04 	addi	sp,sp,-24
    b9b0:	dfc00515 	stw	ra,20(sp)
    b9b4:	df000415 	stw	fp,16(sp)
    b9b8:	df000404 	addi	fp,sp,16
    b9bc:	e13ffd15 	stw	r4,-12(fp)
    b9c0:	e17ffe15 	stw	r5,-8(fp)
    b9c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b9c8:	e0bffd17 	ldw	r2,-12(fp)
    b9cc:	10800017 	ldw	r2,0(r2)
    b9d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b9d4:	e0bffc17 	ldw	r2,-16(fp)
    b9d8:	10800a04 	addi	r2,r2,40
    b9dc:	1009883a 	mov	r4,r2
    b9e0:	e17ffe17 	ldw	r5,-8(fp)
    b9e4:	e1bfff17 	ldw	r6,-4(fp)
    b9e8:	000bf540 	call	bf54 <altera_avalon_jtag_uart_ioctl>
}
    b9ec:	e037883a 	mov	sp,fp
    b9f0:	dfc00117 	ldw	ra,4(sp)
    b9f4:	df000017 	ldw	fp,0(sp)
    b9f8:	dec00204 	addi	sp,sp,8
    b9fc:	f800283a 	ret

0000ba00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ba00:	defff504 	addi	sp,sp,-44
    ba04:	dfc00a15 	stw	ra,40(sp)
    ba08:	df000915 	stw	fp,36(sp)
    ba0c:	df000904 	addi	fp,sp,36
    ba10:	e13ffd15 	stw	r4,-12(fp)
    ba14:	e17ffe15 	stw	r5,-8(fp)
    ba18:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    ba1c:	e0bffd17 	ldw	r2,-12(fp)
    ba20:	10800c04 	addi	r2,r2,48
    ba24:	e0bff715 	stw	r2,-36(fp)
    ba28:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    ba2c:	e0fff80b 	ldhu	r3,-32(fp)
    ba30:	e0bffc84 	addi	r2,fp,-14
    ba34:	1809883a 	mov	r4,r3
    ba38:	100b883a 	mov	r5,r2
    ba3c:	0005ec00 	call	5ec0 <OSFlagCreate>
    ba40:	e0fff717 	ldw	r3,-36(fp)
    ba44:	18800015 	stw	r2,0(r3)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    ba48:	e0bffd17 	ldw	r2,-12(fp)
    ba4c:	10800a04 	addi	r2,r2,40
    ba50:	e0bff915 	stw	r2,-28(fp)
    ba54:	00800044 	movi	r2,1
    ba58:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    ba5c:	e0bffa0b 	ldhu	r2,-24(fp)
    ba60:	1009883a 	mov	r4,r2
    ba64:	0008e480 	call	8e48 <OSSemCreate>
    ba68:	e0fff917 	ldw	r3,-28(fp)
    ba6c:	18800015 	stw	r2,0(r3)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    ba70:	e0bffd17 	ldw	r2,-12(fp)
    ba74:	10800b04 	addi	r2,r2,44
    ba78:	e0bffb15 	stw	r2,-20(fp)
    ba7c:	00800044 	movi	r2,1
    ba80:	e0bffc0d 	sth	r2,-16(fp)
    ba84:	e0bffc0b 	ldhu	r2,-16(fp)
    ba88:	1009883a 	mov	r4,r2
    ba8c:	0008e480 	call	8e48 <OSSemCreate>
    ba90:	e0fffb17 	ldw	r3,-20(fp)
    ba94:	18800015 	stw	r2,0(r3)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ba98:	e0bffd17 	ldw	r2,-12(fp)
    ba9c:	00c00044 	movi	r3,1
    baa0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    baa4:	e0bffd17 	ldw	r2,-12(fp)
    baa8:	10800017 	ldw	r2,0(r2)
    baac:	10800104 	addi	r2,r2,4
    bab0:	e0fffd17 	ldw	r3,-12(fp)
    bab4:	18c00817 	ldw	r3,32(r3)
    bab8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    babc:	e0bfff17 	ldw	r2,-4(fp)
    bac0:	1009883a 	mov	r4,r2
    bac4:	e17ffd17 	ldw	r5,-12(fp)
    bac8:	01800074 	movhi	r6,1
    bacc:	31aecc04 	addi	r6,r6,-17616
    bad0:	000cb400 	call	cb40 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    bad4:	e0bffd17 	ldw	r2,-12(fp)
    bad8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    badc:	e0bffd17 	ldw	r2,-12(fp)
    bae0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bae4:	00800074 	movhi	r2,1
    bae8:	1089fc04 	addi	r2,r2,10224
    baec:	10800017 	ldw	r2,0(r2)
    baf0:	1809883a 	mov	r4,r3
    baf4:	100b883a 	mov	r5,r2
    baf8:	01800074 	movhi	r6,1
    bafc:	31af7804 	addi	r6,r6,-16928
    bb00:	e1fffd17 	ldw	r7,-12(fp)
    bb04:	000c6d40 	call	c6d4 <alt_alarm_start>
    bb08:	1000040e 	bge	r2,zero,bb1c <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    bb0c:	e0bffd17 	ldw	r2,-12(fp)
    bb10:	00e00034 	movhi	r3,32768
    bb14:	18ffffc4 	addi	r3,r3,-1
    bb18:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    bb1c:	e037883a 	mov	sp,fp
    bb20:	dfc00117 	ldw	ra,4(sp)
    bb24:	df000017 	ldw	fp,0(sp)
    bb28:	dec00204 	addi	sp,sp,8
    bb2c:	f800283a 	ret

0000bb30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    bb30:	defff104 	addi	sp,sp,-60
    bb34:	dfc00e15 	stw	ra,56(sp)
    bb38:	df000d15 	stw	fp,52(sp)
    bb3c:	df000d04 	addi	fp,sp,52
    bb40:	e13ffe15 	stw	r4,-8(fp)
    bb44:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    bb48:	e0bffe17 	ldw	r2,-8(fp)
    bb4c:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    bb50:	e0bff517 	ldw	r2,-44(fp)
    bb54:	10800017 	ldw	r2,0(r2)
    bb58:	e0bff615 	stw	r2,-40(fp)
    bb5c:	00000106 	br	bb64 <altera_avalon_jtag_uart_irq+0x34>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
    bb60:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bb64:	e0bff617 	ldw	r2,-40(fp)
    bb68:	10800104 	addi	r2,r2,4
    bb6c:	10800037 	ldwio	r2,0(r2)
    bb70:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    bb74:	e0bff717 	ldw	r2,-36(fp)
    bb78:	1080c00c 	andi	r2,r2,768
    bb7c:	10009226 	beq	r2,zero,bdc8 <altera_avalon_jtag_uart_irq+0x298>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    bb80:	e0bff717 	ldw	r2,-36(fp)
    bb84:	1080400c 	andi	r2,r2,256
    bb88:	10004826 	beq	r2,zero,bcac <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    bb8c:	00800074 	movhi	r2,1
    bb90:	e0bff315 	stw	r2,-52(fp)
    bb94:	00000106 	br	bb9c <altera_avalon_jtag_uart_irq+0x6c>
        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    bb98:	0001883a 	nop
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bb9c:	e0bff517 	ldw	r2,-44(fp)
    bba0:	10800d17 	ldw	r2,52(r2)
    bba4:	10800044 	addi	r2,r2,1
    bba8:	1081ffcc 	andi	r2,r2,2047
    bbac:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    bbb0:	e0bff517 	ldw	r2,-44(fp)
    bbb4:	10c00e17 	ldw	r3,56(r2)
    bbb8:	e0bff817 	ldw	r2,-32(fp)
    bbbc:	18802726 	beq	r3,r2,bc5c <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bbc0:	e0bff617 	ldw	r2,-40(fp)
    bbc4:	10800037 	ldwio	r2,0(r2)
    bbc8:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    bbcc:	e0bff317 	ldw	r2,-52(fp)
    bbd0:	10a0000c 	andi	r2,r2,32768
    bbd4:	10002326 	beq	r2,zero,bc64 <altera_avalon_jtag_uart_irq+0x134>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bbd8:	e0bff517 	ldw	r2,-44(fp)
    bbdc:	10800d17 	ldw	r2,52(r2)
    bbe0:	e0fff317 	ldw	r3,-52(fp)
    bbe4:	e13ff517 	ldw	r4,-44(fp)
    bbe8:	2085883a 	add	r2,r4,r2
    bbec:	10801104 	addi	r2,r2,68
    bbf0:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bbf4:	e0bff517 	ldw	r2,-44(fp)
    bbf8:	10800d17 	ldw	r2,52(r2)
    bbfc:	10800044 	addi	r2,r2,1
    bc00:	10c1ffcc 	andi	r3,r2,2047
    bc04:	e0bff517 	ldw	r2,-44(fp)
    bc08:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    bc0c:	e0bff517 	ldw	r2,-44(fp)
    bc10:	10800c17 	ldw	r2,48(r2)
    bc14:	e0bff915 	stw	r2,-28(fp)
    bc18:	00800044 	movi	r2,1
    bc1c:	e0bffa0d 	sth	r2,-24(fp)
    bc20:	00800044 	movi	r2,1
    bc24:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    bc28:	00800074 	movhi	r2,1
    bc2c:	1089e644 	addi	r2,r2,10137
    bc30:	10800003 	ldbu	r2,0(r2)
    bc34:	10803fcc 	andi	r2,r2,255
    bc38:	103fd726 	beq	r2,zero,bb98 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
    bc3c:	e17ffa0b 	ldhu	r5,-24(fp)
    bc40:	e0fffa83 	ldbu	r3,-22(fp)
    bc44:	e0bffcc4 	addi	r2,fp,-13
    bc48:	e13ff917 	ldw	r4,-28(fp)
    bc4c:	180d883a 	mov	r6,r3
    bc50:	100f883a 	mov	r7,r2
    bc54:	0006b440 	call	6b44 <OSFlagPost>
      }
    bc58:	003fcf06 	br	bb98 <altera_avalon_jtag_uart_irq+0x68>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    bc5c:	0001883a 	nop
    bc60:	00000106 	br	bc68 <altera_avalon_jtag_uart_irq+0x138>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    bc64:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    bc68:	e0bff317 	ldw	r2,-52(fp)
    bc6c:	10bfffec 	andhi	r2,r2,65535
    bc70:	10000e26 	beq	r2,zero,bcac <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bc74:	e0bff517 	ldw	r2,-44(fp)
    bc78:	10c00817 	ldw	r3,32(r2)
    bc7c:	00bfff84 	movi	r2,-2
    bc80:	1886703a 	and	r3,r3,r2
    bc84:	e0bff517 	ldw	r2,-44(fp)
    bc88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    bc8c:	e0bff617 	ldw	r2,-40(fp)
    bc90:	10800104 	addi	r2,r2,4
    bc94:	e0fff517 	ldw	r3,-44(fp)
    bc98:	18c00817 	ldw	r3,32(r3)
    bc9c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bca0:	e0bff617 	ldw	r2,-40(fp)
    bca4:	10800104 	addi	r2,r2,4
    bca8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    bcac:	e0bff717 	ldw	r2,-36(fp)
    bcb0:	1080800c 	andi	r2,r2,512
    bcb4:	103faa26 	beq	r2,zero,bb60 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    bcb8:	e0bff717 	ldw	r2,-36(fp)
    bcbc:	1004d43a 	srli	r2,r2,16
    bcc0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    bcc4:	00002706 	br	bd64 <altera_avalon_jtag_uart_irq+0x234>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    bcc8:	e0bff617 	ldw	r2,-40(fp)
    bccc:	e0fff517 	ldw	r3,-44(fp)
    bcd0:	18c01017 	ldw	r3,64(r3)
    bcd4:	e13ff517 	ldw	r4,-44(fp)
    bcd8:	20c7883a 	add	r3,r4,r3
    bcdc:	18c21104 	addi	r3,r3,2116
    bce0:	18c00003 	ldbu	r3,0(r3)
    bce4:	18c03fcc 	andi	r3,r3,255
    bce8:	18c0201c 	xori	r3,r3,128
    bcec:	18ffe004 	addi	r3,r3,-128
    bcf0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bcf4:	e0bff517 	ldw	r2,-44(fp)
    bcf8:	10801017 	ldw	r2,64(r2)
    bcfc:	10800044 	addi	r2,r2,1
    bd00:	10c1ffcc 	andi	r3,r2,2047
    bd04:	e0bff517 	ldw	r2,-44(fp)
    bd08:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    bd0c:	e0bff517 	ldw	r2,-44(fp)
    bd10:	10800c17 	ldw	r2,48(r2)
    bd14:	e0bffb15 	stw	r2,-20(fp)
    bd18:	00800084 	movi	r2,2
    bd1c:	e0bffc0d 	sth	r2,-16(fp)
    bd20:	00800044 	movi	r2,1
    bd24:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    bd28:	00800074 	movhi	r2,1
    bd2c:	1089e644 	addi	r2,r2,10137
    bd30:	10800003 	ldbu	r2,0(r2)
    bd34:	10803fcc 	andi	r2,r2,255
    bd38:	10000726 	beq	r2,zero,bd58 <altera_avalon_jtag_uart_irq+0x228>
  {
    OSFlagPost (group, flags, opt, &err);
    bd3c:	e17ffc0b 	ldhu	r5,-16(fp)
    bd40:	e0fffc83 	ldbu	r3,-14(fp)
    bd44:	e0bffd04 	addi	r2,fp,-12
    bd48:	e13ffb17 	ldw	r4,-20(fp)
    bd4c:	180d883a 	mov	r6,r3
    bd50:	100f883a 	mov	r7,r2
    bd54:	0006b440 	call	6b44 <OSFlagPost>

        space--;
    bd58:	e0bff417 	ldw	r2,-48(fp)
    bd5c:	10bfffc4 	addi	r2,r2,-1
    bd60:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    bd64:	e0bff417 	ldw	r2,-48(fp)
    bd68:	10000526 	beq	r2,zero,bd80 <altera_avalon_jtag_uart_irq+0x250>
    bd6c:	e0bff517 	ldw	r2,-44(fp)
    bd70:	10c01017 	ldw	r3,64(r2)
    bd74:	e0bff517 	ldw	r2,-44(fp)
    bd78:	10800f17 	ldw	r2,60(r2)
    bd7c:	18bfd21e 	bne	r3,r2,bcc8 <altera_avalon_jtag_uart_irq+0x198>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    bd80:	e0bff417 	ldw	r2,-48(fp)
    bd84:	103f7626 	beq	r2,zero,bb60 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bd88:	e0bff517 	ldw	r2,-44(fp)
    bd8c:	10c00817 	ldw	r3,32(r2)
    bd90:	00bfff44 	movi	r2,-3
    bd94:	1886703a 	and	r3,r3,r2
    bd98:	e0bff517 	ldw	r2,-44(fp)
    bd9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bda0:	e0bff517 	ldw	r2,-44(fp)
    bda4:	10800017 	ldw	r2,0(r2)
    bda8:	10800104 	addi	r2,r2,4
    bdac:	e0fff517 	ldw	r3,-44(fp)
    bdb0:	18c00817 	ldw	r3,32(r3)
    bdb4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    bdb8:	e0bff617 	ldw	r2,-40(fp)
    bdbc:	10800104 	addi	r2,r2,4
    bdc0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    bdc4:	003f6606 	br	bb60 <altera_avalon_jtag_uart_irq+0x30>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    bdc8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    bdcc:	e037883a 	mov	sp,fp
    bdd0:	dfc00117 	ldw	ra,4(sp)
    bdd4:	df000017 	ldw	fp,0(sp)
    bdd8:	dec00204 	addi	sp,sp,8
    bddc:	f800283a 	ret

0000bde0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    bde0:	defff904 	addi	sp,sp,-28
    bde4:	dfc00615 	stw	ra,24(sp)
    bde8:	df000515 	stw	fp,20(sp)
    bdec:	df000504 	addi	fp,sp,20
    bdf0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    bdf4:	e0bfff17 	ldw	r2,-4(fp)
    bdf8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    bdfc:	e0bffb17 	ldw	r2,-20(fp)
    be00:	10800017 	ldw	r2,0(r2)
    be04:	10800104 	addi	r2,r2,4
    be08:	10800037 	ldwio	r2,0(r2)
    be0c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    be10:	e0bffc17 	ldw	r2,-16(fp)
    be14:	1081000c 	andi	r2,r2,1024
    be18:	10000a26 	beq	r2,zero,be44 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    be1c:	e0bffb17 	ldw	r2,-20(fp)
    be20:	10800017 	ldw	r2,0(r2)
    be24:	10800104 	addi	r2,r2,4
    be28:	e0fffb17 	ldw	r3,-20(fp)
    be2c:	18c00817 	ldw	r3,32(r3)
    be30:	18c10014 	ori	r3,r3,1024
    be34:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    be38:	e0bffb17 	ldw	r2,-20(fp)
    be3c:	10000915 	stw	zero,36(r2)
    be40:	00002206 	br	becc <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    be44:	e0bffb17 	ldw	r2,-20(fp)
    be48:	10800917 	ldw	r2,36(r2)
    be4c:	00e00034 	movhi	r3,32768
    be50:	18ffff04 	addi	r3,r3,-4
    be54:	18801d36 	bltu	r3,r2,becc <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
    be58:	e0bffb17 	ldw	r2,-20(fp)
    be5c:	10800917 	ldw	r2,36(r2)
    be60:	10c00044 	addi	r3,r2,1
    be64:	e0bffb17 	ldw	r2,-20(fp)
    be68:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    be6c:	e0bffb17 	ldw	r2,-20(fp)
    be70:	10c00917 	ldw	r3,36(r2)
    be74:	e0bffb17 	ldw	r2,-20(fp)
    be78:	10800117 	ldw	r2,4(r2)
    be7c:	18801336 	bltu	r3,r2,becc <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    be80:	e0bffb17 	ldw	r2,-20(fp)
    be84:	10800c17 	ldw	r2,48(r2)
    be88:	e0bffd15 	stw	r2,-12(fp)
    be8c:	00800104 	movi	r2,4
    be90:	e0bffe0d 	sth	r2,-8(fp)
    be94:	00800044 	movi	r2,1
    be98:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    be9c:	00800074 	movhi	r2,1
    bea0:	1089e644 	addi	r2,r2,10137
    bea4:	10800003 	ldbu	r2,0(r2)
    bea8:	10803fcc 	andi	r2,r2,255
    beac:	10000726 	beq	r2,zero,becc <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
    beb0:	e17ffe0b 	ldhu	r5,-8(fp)
    beb4:	e0fffe83 	ldbu	r3,-6(fp)
    beb8:	e0bffec4 	addi	r2,fp,-5
    bebc:	e13ffd17 	ldw	r4,-12(fp)
    bec0:	180d883a 	mov	r6,r3
    bec4:	100f883a 	mov	r7,r2
    bec8:	0006b440 	call	6b44 <OSFlagPost>
    becc:	00800074 	movhi	r2,1
    bed0:	1089fc04 	addi	r2,r2,10224
    bed4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    bed8:	e037883a 	mov	sp,fp
    bedc:	dfc00117 	ldw	ra,4(sp)
    bee0:	df000017 	ldw	fp,0(sp)
    bee4:	dec00204 	addi	sp,sp,8
    bee8:	f800283a 	ret

0000beec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    beec:	defffd04 	addi	sp,sp,-12
    bef0:	df000215 	stw	fp,8(sp)
    bef4:	df000204 	addi	fp,sp,8
    bef8:	e13ffe15 	stw	r4,-8(fp)
    befc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bf00:	00000506 	br	bf18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    bf04:	e0bfff17 	ldw	r2,-4(fp)
    bf08:	1090000c 	andi	r2,r2,16384
    bf0c:	10000226 	beq	r2,zero,bf18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    bf10:	00bffd44 	movi	r2,-11
    bf14:	00000b06 	br	bf44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    bf18:	e0bffe17 	ldw	r2,-8(fp)
    bf1c:	10c01017 	ldw	r3,64(r2)
    bf20:	e0bffe17 	ldw	r2,-8(fp)
    bf24:	10800f17 	ldw	r2,60(r2)
    bf28:	18800526 	beq	r3,r2,bf40 <altera_avalon_jtag_uart_close+0x54>
    bf2c:	e0bffe17 	ldw	r2,-8(fp)
    bf30:	10c00917 	ldw	r3,36(r2)
    bf34:	e0bffe17 	ldw	r2,-8(fp)
    bf38:	10800117 	ldw	r2,4(r2)
    bf3c:	18bff136 	bltu	r3,r2,bf04 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    bf40:	0005883a 	mov	r2,zero
}
    bf44:	e037883a 	mov	sp,fp
    bf48:	df000017 	ldw	fp,0(sp)
    bf4c:	dec00104 	addi	sp,sp,4
    bf50:	f800283a 	ret

0000bf54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    bf54:	defffa04 	addi	sp,sp,-24
    bf58:	df000515 	stw	fp,20(sp)
    bf5c:	df000504 	addi	fp,sp,20
    bf60:	e13ffd15 	stw	r4,-12(fp)
    bf64:	e17ffe15 	stw	r5,-8(fp)
    bf68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    bf6c:	00bff9c4 	movi	r2,-25
    bf70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    bf74:	e0bffe17 	ldw	r2,-8(fp)
    bf78:	10da8060 	cmpeqi	r3,r2,27137
    bf7c:	1800031e 	bne	r3,zero,bf8c <altera_avalon_jtag_uart_ioctl+0x38>
    bf80:	109a80a0 	cmpeqi	r2,r2,27138
    bf84:	1000181e 	bne	r2,zero,bfe8 <altera_avalon_jtag_uart_ioctl+0x94>
    bf88:	00002606 	br	c024 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    bf8c:	e0bffd17 	ldw	r2,-12(fp)
    bf90:	10c00117 	ldw	r3,4(r2)
    bf94:	00a00034 	movhi	r2,32768
    bf98:	10bfffc4 	addi	r2,r2,-1
    bf9c:	18802226 	beq	r3,r2,c028 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
    bfa0:	e0bfff17 	ldw	r2,-4(fp)
    bfa4:	10800017 	ldw	r2,0(r2)
    bfa8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    bfac:	e0bffc17 	ldw	r2,-16(fp)
    bfb0:	10800090 	cmplti	r2,r2,2
    bfb4:	1000061e 	bne	r2,zero,bfd0 <altera_avalon_jtag_uart_ioctl+0x7c>
    bfb8:	e0fffc17 	ldw	r3,-16(fp)
    bfbc:	00a00034 	movhi	r2,32768
    bfc0:	10bfffc4 	addi	r2,r2,-1
    bfc4:	18800226 	beq	r3,r2,bfd0 <altera_avalon_jtag_uart_ioctl+0x7c>
    bfc8:	e0bffc17 	ldw	r2,-16(fp)
    bfcc:	00000206 	br	bfd8 <altera_avalon_jtag_uart_ioctl+0x84>
    bfd0:	00a00034 	movhi	r2,32768
    bfd4:	10bfff84 	addi	r2,r2,-2
    bfd8:	e0fffd17 	ldw	r3,-12(fp)
    bfdc:	18800115 	stw	r2,4(r3)
      rc = 0;
    bfe0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    bfe4:	00001006 	br	c028 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    bfe8:	e0bffd17 	ldw	r2,-12(fp)
    bfec:	10c00117 	ldw	r3,4(r2)
    bff0:	00a00034 	movhi	r2,32768
    bff4:	10bfffc4 	addi	r2,r2,-1
    bff8:	18800d26 	beq	r3,r2,c030 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    bffc:	e0bffd17 	ldw	r2,-12(fp)
    c000:	10c00917 	ldw	r3,36(r2)
    c004:	e0bffd17 	ldw	r2,-12(fp)
    c008:	10800117 	ldw	r2,4(r2)
    c00c:	1885803a 	cmpltu	r2,r3,r2
    c010:	10c03fcc 	andi	r3,r2,255
    c014:	e0bfff17 	ldw	r2,-4(fp)
    c018:	10c00015 	stw	r3,0(r2)
      rc = 0;
    c01c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    c020:	00000306 	br	c030 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
    c024:	00000306 	br	c034 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    c028:	0001883a 	nop
    c02c:	00000106 	br	c034 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    c030:	0001883a 	nop

  default:
    break;
  }

  return rc;
    c034:	e0bffb17 	ldw	r2,-20(fp)
}
    c038:	e037883a 	mov	sp,fp
    c03c:	df000017 	ldw	fp,0(sp)
    c040:	dec00104 	addi	sp,sp,4
    c044:	f800283a 	ret

0000c048 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c048:	deffec04 	addi	sp,sp,-80
    c04c:	dfc01315 	stw	ra,76(sp)
    c050:	df001215 	stw	fp,72(sp)
    c054:	df001204 	addi	fp,sp,72
    c058:	e13ffc15 	stw	r4,-16(fp)
    c05c:	e17ffd15 	stw	r5,-12(fp)
    c060:	e1bffe15 	stw	r6,-8(fp)
    c064:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    c068:	e0bffd17 	ldw	r2,-12(fp)
    c06c:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    c070:	e0bffc17 	ldw	r2,-16(fp)
    c074:	10800a17 	ldw	r2,40(r2)
    c078:	e0bff415 	stw	r2,-48(fp)
    c07c:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    c080:	e0fff50b 	ldhu	r3,-44(fp)
    c084:	e0bffb04 	addi	r2,fp,-20
    c088:	e13ff417 	ldw	r4,-48(fp)
    c08c:	180b883a 	mov	r5,r3
    c090:	100d883a 	mov	r6,r2
    c094:	00091b80 	call	91b8 <OSSemPend>

  while (space > 0)
    c098:	00006406 	br	c22c <altera_avalon_jtag_uart_read+0x1e4>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c09c:	e0bffc17 	ldw	r2,-16(fp)
    c0a0:	10800d17 	ldw	r2,52(r2)
    c0a4:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
    c0a8:	e0bffc17 	ldw	r2,-16(fp)
    c0ac:	10800e17 	ldw	r2,56(r2)
    c0b0:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
    c0b4:	e0fff117 	ldw	r3,-60(fp)
    c0b8:	e0bff217 	ldw	r2,-56(fp)
    c0bc:	18800536 	bltu	r3,r2,c0d4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    c0c0:	e0fff117 	ldw	r3,-60(fp)
    c0c4:	e0bff217 	ldw	r2,-56(fp)
    c0c8:	1885c83a 	sub	r2,r3,r2
    c0cc:	e0bff015 	stw	r2,-64(fp)
    c0d0:	00000406 	br	c0e4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c0d4:	00c20004 	movi	r3,2048
    c0d8:	e0bff217 	ldw	r2,-56(fp)
    c0dc:	1885c83a 	sub	r2,r3,r2
    c0e0:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
    c0e4:	e0bff017 	ldw	r2,-64(fp)
    c0e8:	10001e26 	beq	r2,zero,c164 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    c0ec:	e0fffe17 	ldw	r3,-8(fp)
    c0f0:	e0bff017 	ldw	r2,-64(fp)
    c0f4:	1880022e 	bgeu	r3,r2,c100 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    c0f8:	e0bffe17 	ldw	r2,-8(fp)
    c0fc:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c100:	e0bff217 	ldw	r2,-56(fp)
    c104:	10801104 	addi	r2,r2,68
    c108:	e0fffc17 	ldw	r3,-16(fp)
    c10c:	1885883a 	add	r2,r3,r2
    c110:	e13fef17 	ldw	r4,-68(fp)
    c114:	100b883a 	mov	r5,r2
    c118:	e1bff017 	ldw	r6,-64(fp)
    c11c:	000119c0 	call	119c <memcpy>
      ptr   += n;
    c120:	e0ffef17 	ldw	r3,-68(fp)
    c124:	e0bff017 	ldw	r2,-64(fp)
    c128:	1885883a 	add	r2,r3,r2
    c12c:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
    c130:	e0fffe17 	ldw	r3,-8(fp)
    c134:	e0bff017 	ldw	r2,-64(fp)
    c138:	1885c83a 	sub	r2,r3,r2
    c13c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c140:	e0fff217 	ldw	r3,-56(fp)
    c144:	e0bff017 	ldw	r2,-64(fp)
    c148:	1885883a 	add	r2,r3,r2
    c14c:	10c1ffcc 	andi	r3,r2,2047
    c150:	e0bffc17 	ldw	r2,-16(fp)
    c154:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    c158:	e0bffe17 	ldw	r2,-8(fp)
    c15c:	00bfcf16 	blt	zero,r2,c09c <altera_avalon_jtag_uart_read+0x54>
    c160:	00000106 	br	c168 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    c164:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    c168:	e0ffef17 	ldw	r3,-68(fp)
    c16c:	e0bffd17 	ldw	r2,-12(fp)
    c170:	1880311e 	bne	r3,r2,c238 <altera_avalon_jtag_uart_read+0x1f0>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c174:	e0bfff17 	ldw	r2,-4(fp)
    c178:	1090000c 	andi	r2,r2,16384
    c17c:	1000301e 	bne	r2,zero,c240 <altera_avalon_jtag_uart_read+0x1f8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    c180:	00800074 	movhi	r2,1
    c184:	1089e644 	addi	r2,r2,10137
    c188:	10800003 	ldbu	r2,0(r2)
    c18c:	10803fcc 	andi	r2,r2,255
    c190:	10800058 	cmpnei	r2,r2,1
    c194:	1000171e 	bne	r2,zero,c1f4 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    c198:	e0bffc17 	ldw	r2,-16(fp)
    c19c:	10800c17 	ldw	r2,48(r2)
    c1a0:	e0bff615 	stw	r2,-40(fp)
    c1a4:	00800144 	movi	r2,5
    c1a8:	e0bff70d 	sth	r2,-36(fp)
    c1ac:	00bfe0c4 	movi	r2,-125
    c1b0:	e0bff785 	stb	r2,-34(fp)
    c1b4:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    c1b8:	00800074 	movhi	r2,1
    c1bc:	1089e644 	addi	r2,r2,10137
    c1c0:	10800003 	ldbu	r2,0(r2)
    c1c4:	10803fcc 	andi	r2,r2,255
    c1c8:	10001426 	beq	r2,zero,c21c <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    c1cc:	e17ff70b 	ldhu	r5,-36(fp)
    c1d0:	e0fff783 	ldbu	r3,-34(fp)
    c1d4:	e0bff80b 	ldhu	r2,-32(fp)
    c1d8:	e13ffb44 	addi	r4,fp,-19
    c1dc:	d9000015 	stw	r4,0(sp)
    c1e0:	e13ff617 	ldw	r4,-40(fp)
    c1e4:	180d883a 	mov	r6,r3
    c1e8:	100f883a 	mov	r7,r2
    c1ec:	00064dc0 	call	64dc <OSFlagPend>
    c1f0:	00000a06 	br	c21c <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c1f4:	0001883a 	nop
    c1f8:	e0bffc17 	ldw	r2,-16(fp)
    c1fc:	10c00d17 	ldw	r3,52(r2)
    c200:	e0bff117 	ldw	r2,-60(fp)
    c204:	1880051e 	bne	r3,r2,c21c <altera_avalon_jtag_uart_read+0x1d4>
    c208:	e0bffc17 	ldw	r2,-16(fp)
    c20c:	10c00917 	ldw	r3,36(r2)
    c210:	e0bffc17 	ldw	r2,-16(fp)
    c214:	10800117 	ldw	r2,4(r2)
    c218:	18bff736 	bltu	r3,r2,c1f8 <altera_avalon_jtag_uart_read+0x1b0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c21c:	e0bffc17 	ldw	r2,-16(fp)
    c220:	10c00d17 	ldw	r3,52(r2)
    c224:	e0bff117 	ldw	r2,-60(fp)
    c228:	18800726 	beq	r3,r2,c248 <altera_avalon_jtag_uart_read+0x200>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c22c:	e0bffe17 	ldw	r2,-8(fp)
    c230:	00bf9a16 	blt	zero,r2,c09c <altera_avalon_jtag_uart_read+0x54>
    c234:	00000506 	br	c24c <altera_avalon_jtag_uart_read+0x204>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    c238:	0001883a 	nop
    c23c:	00000306 	br	c24c <altera_avalon_jtag_uart_read+0x204>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    c240:	0001883a 	nop
    c244:	00000106 	br	c24c <altera_avalon_jtag_uart_read+0x204>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    c248:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    c24c:	e0bffc17 	ldw	r2,-16(fp)
    c250:	10800a17 	ldw	r2,40(r2)
    c254:	1009883a 	mov	r4,r2
    c258:	00095980 	call	9598 <OSSemPost>

  if (ptr != buffer)
    c25c:	e0ffef17 	ldw	r3,-68(fp)
    c260:	e0bffd17 	ldw	r2,-12(fp)
    c264:	18801726 	beq	r3,r2,c2c4 <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c268:	0005303a 	rdctl	r2,status
    c26c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c270:	e0fff917 	ldw	r3,-28(fp)
    c274:	00bfff84 	movi	r2,-2
    c278:	1884703a 	and	r2,r3,r2
    c27c:	1001703a 	wrctl	status,r2
  
  return context;
    c280:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c284:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c288:	e0bffc17 	ldw	r2,-16(fp)
    c28c:	10800817 	ldw	r2,32(r2)
    c290:	10c00054 	ori	r3,r2,1
    c294:	e0bffc17 	ldw	r2,-16(fp)
    c298:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c29c:	e0bffc17 	ldw	r2,-16(fp)
    c2a0:	10800017 	ldw	r2,0(r2)
    c2a4:	10800104 	addi	r2,r2,4
    c2a8:	e0fffc17 	ldw	r3,-16(fp)
    c2ac:	18c00817 	ldw	r3,32(r3)
    c2b0:	10c00035 	stwio	r3,0(r2)
    c2b4:	e0bff317 	ldw	r2,-52(fp)
    c2b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c2bc:	e0bffa17 	ldw	r2,-24(fp)
    c2c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c2c4:	e0ffef17 	ldw	r3,-68(fp)
    c2c8:	e0bffd17 	ldw	r2,-12(fp)
    c2cc:	18800426 	beq	r3,r2,c2e0 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
    c2d0:	e0ffef17 	ldw	r3,-68(fp)
    c2d4:	e0bffd17 	ldw	r2,-12(fp)
    c2d8:	1885c83a 	sub	r2,r3,r2
    c2dc:	00000606 	br	c2f8 <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
    c2e0:	e0bfff17 	ldw	r2,-4(fp)
    c2e4:	1090000c 	andi	r2,r2,16384
    c2e8:	10000226 	beq	r2,zero,c2f4 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
    c2ec:	00bffd44 	movi	r2,-11
    c2f0:	00000106 	br	c2f8 <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
    c2f4:	00bffec4 	movi	r2,-5
}
    c2f8:	e037883a 	mov	sp,fp
    c2fc:	dfc00117 	ldw	ra,4(sp)
    c300:	df000017 	ldw	fp,0(sp)
    c304:	dec00204 	addi	sp,sp,8
    c308:	f800283a 	ret

0000c30c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c30c:	deffed04 	addi	sp,sp,-76
    c310:	dfc01215 	stw	ra,72(sp)
    c314:	df001115 	stw	fp,68(sp)
    c318:	df001104 	addi	fp,sp,68
    c31c:	e13ffc15 	stw	r4,-16(fp)
    c320:	e17ffd15 	stw	r5,-12(fp)
    c324:	e1bffe15 	stw	r6,-8(fp)
    c328:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c32c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c330:	e0bffd17 	ldw	r2,-12(fp)
    c334:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    c338:	e0bffc17 	ldw	r2,-16(fp)
    c33c:	10800b17 	ldw	r2,44(r2)
    c340:	e0bff515 	stw	r2,-44(fp)
    c344:	e03ff60d 	sth	zero,-40(fp)
    c348:	e0fff60b 	ldhu	r3,-40(fp)
    c34c:	e0bffbc4 	addi	r2,fp,-17
    c350:	e13ff517 	ldw	r4,-44(fp)
    c354:	180b883a 	mov	r5,r3
    c358:	100d883a 	mov	r6,r2
    c35c:	00091b80 	call	91b8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c360:	00003706 	br	c440 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c364:	e0bffc17 	ldw	r2,-16(fp)
    c368:	10800f17 	ldw	r2,60(r2)
    c36c:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
    c370:	e0bffc17 	ldw	r2,-16(fp)
    c374:	10801017 	ldw	r2,64(r2)
    c378:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    c37c:	e0fff317 	ldw	r3,-52(fp)
    c380:	e0bff017 	ldw	r2,-64(fp)
    c384:	1880062e 	bgeu	r3,r2,c3a0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    c388:	e0fff017 	ldw	r3,-64(fp)
    c38c:	e0bff317 	ldw	r2,-52(fp)
    c390:	1885c83a 	sub	r2,r3,r2
    c394:	10bfffc4 	addi	r2,r2,-1
    c398:	e0bff115 	stw	r2,-60(fp)
    c39c:	00000b06 	br	c3cc <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    c3a0:	e0bff017 	ldw	r2,-64(fp)
    c3a4:	10000526 	beq	r2,zero,c3bc <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c3a8:	00c20004 	movi	r3,2048
    c3ac:	e0bff317 	ldw	r2,-52(fp)
    c3b0:	1885c83a 	sub	r2,r3,r2
    c3b4:	e0bff115 	stw	r2,-60(fp)
    c3b8:	00000406 	br	c3cc <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c3bc:	00c1ffc4 	movi	r3,2047
    c3c0:	e0bff317 	ldw	r2,-52(fp)
    c3c4:	1885c83a 	sub	r2,r3,r2
    c3c8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    c3cc:	e0bff117 	ldw	r2,-60(fp)
    c3d0:	10001e26 	beq	r2,zero,c44c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    c3d4:	e0fffe17 	ldw	r3,-8(fp)
    c3d8:	e0bff117 	ldw	r2,-60(fp)
    c3dc:	1880022e 	bgeu	r3,r2,c3e8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    c3e0:	e0bffe17 	ldw	r2,-8(fp)
    c3e4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c3e8:	e0bff317 	ldw	r2,-52(fp)
    c3ec:	10821104 	addi	r2,r2,2116
    c3f0:	e0fffc17 	ldw	r3,-16(fp)
    c3f4:	1885883a 	add	r2,r3,r2
    c3f8:	1009883a 	mov	r4,r2
    c3fc:	e17ffd17 	ldw	r5,-12(fp)
    c400:	e1bff117 	ldw	r6,-60(fp)
    c404:	000119c0 	call	119c <memcpy>
      ptr   += n;
    c408:	e0fffd17 	ldw	r3,-12(fp)
    c40c:	e0bff117 	ldw	r2,-60(fp)
    c410:	1885883a 	add	r2,r3,r2
    c414:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    c418:	e0fffe17 	ldw	r3,-8(fp)
    c41c:	e0bff117 	ldw	r2,-60(fp)
    c420:	1885c83a 	sub	r2,r3,r2
    c424:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c428:	e0fff317 	ldw	r3,-52(fp)
    c42c:	e0bff117 	ldw	r2,-60(fp)
    c430:	1885883a 	add	r2,r3,r2
    c434:	10c1ffcc 	andi	r3,r2,2047
    c438:	e0bffc17 	ldw	r2,-16(fp)
    c43c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c440:	e0bffe17 	ldw	r2,-8(fp)
    c444:	00bfc716 	blt	zero,r2,c364 <altera_avalon_jtag_uart_write+0x58>
    c448:	00000106 	br	c450 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    c44c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c450:	0005303a 	rdctl	r2,status
    c454:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c458:	e0fff717 	ldw	r3,-36(fp)
    c45c:	00bfff84 	movi	r2,-2
    c460:	1884703a 	and	r2,r3,r2
    c464:	1001703a 	wrctl	status,r2
  
  return context;
    c468:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c46c:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c470:	e0bffc17 	ldw	r2,-16(fp)
    c474:	10800817 	ldw	r2,32(r2)
    c478:	10c00094 	ori	r3,r2,2
    c47c:	e0bffc17 	ldw	r2,-16(fp)
    c480:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c484:	e0bffc17 	ldw	r2,-16(fp)
    c488:	10800017 	ldw	r2,0(r2)
    c48c:	10800104 	addi	r2,r2,4
    c490:	e0fffc17 	ldw	r3,-16(fp)
    c494:	18c00817 	ldw	r3,32(r3)
    c498:	10c00035 	stwio	r3,0(r2)
    c49c:	e0bff417 	ldw	r2,-48(fp)
    c4a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c4a4:	e0bff817 	ldw	r2,-32(fp)
    c4a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c4ac:	e0bffe17 	ldw	r2,-8(fp)
    c4b0:	00802e0e 	bge	zero,r2,c56c <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    c4b4:	e0bfff17 	ldw	r2,-4(fp)
    c4b8:	1090000c 	andi	r2,r2,16384
    c4bc:	10002e1e 	bne	r2,zero,c578 <altera_avalon_jtag_uart_write+0x26c>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    c4c0:	00800074 	movhi	r2,1
    c4c4:	1089e644 	addi	r2,r2,10137
    c4c8:	10800003 	ldbu	r2,0(r2)
    c4cc:	10803fcc 	andi	r2,r2,255
    c4d0:	10800058 	cmpnei	r2,r2,1
    c4d4:	1000171e 	bne	r2,zero,c534 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    c4d8:	e0bffc17 	ldw	r2,-16(fp)
    c4dc:	10800c17 	ldw	r2,48(r2)
    c4e0:	e0bff915 	stw	r2,-28(fp)
    c4e4:	00800184 	movi	r2,6
    c4e8:	e0bffa0d 	sth	r2,-24(fp)
    c4ec:	00bfe0c4 	movi	r2,-125
    c4f0:	e0bffa85 	stb	r2,-22(fp)
    c4f4:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    c4f8:	00800074 	movhi	r2,1
    c4fc:	1089e644 	addi	r2,r2,10137
    c500:	10800003 	ldbu	r2,0(r2)
    c504:	10803fcc 	andi	r2,r2,255
    c508:	10001426 	beq	r2,zero,c55c <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    c50c:	e17ffa0b 	ldhu	r5,-24(fp)
    c510:	e0fffa83 	ldbu	r3,-22(fp)
    c514:	e0bffb0b 	ldhu	r2,-20(fp)
    c518:	e13ffb84 	addi	r4,fp,-18
    c51c:	d9000015 	stw	r4,0(sp)
    c520:	e13ff917 	ldw	r4,-28(fp)
    c524:	180d883a 	mov	r6,r3
    c528:	100f883a 	mov	r7,r2
    c52c:	00064dc0 	call	64dc <OSFlagPend>
    c530:	00000a06 	br	c55c <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c534:	0001883a 	nop
    c538:	e0bffc17 	ldw	r2,-16(fp)
    c53c:	10c01017 	ldw	r3,64(r2)
    c540:	e0bff017 	ldw	r2,-64(fp)
    c544:	1880051e 	bne	r3,r2,c55c <altera_avalon_jtag_uart_write+0x250>
    c548:	e0bffc17 	ldw	r2,-16(fp)
    c54c:	10c00917 	ldw	r3,36(r2)
    c550:	e0bffc17 	ldw	r2,-16(fp)
    c554:	10800117 	ldw	r2,4(r2)
    c558:	18bff736 	bltu	r3,r2,c538 <altera_avalon_jtag_uart_write+0x22c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c55c:	e0bffc17 	ldw	r2,-16(fp)
    c560:	10c01017 	ldw	r3,64(r2)
    c564:	e0bff017 	ldw	r2,-64(fp)
    c568:	18800526 	beq	r3,r2,c580 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
    c56c:	e0bffe17 	ldw	r2,-8(fp)
    c570:	00bfb316 	blt	zero,r2,c440 <altera_avalon_jtag_uart_write+0x134>
    c574:	00000306 	br	c584 <altera_avalon_jtag_uart_write+0x278>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    c578:	0001883a 	nop
    c57c:	00000106 	br	c584 <altera_avalon_jtag_uart_write+0x278>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
    c580:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    c584:	e0bffc17 	ldw	r2,-16(fp)
    c588:	10800b17 	ldw	r2,44(r2)
    c58c:	1009883a 	mov	r4,r2
    c590:	00095980 	call	9598 <OSSemPost>

  if (ptr != start)
    c594:	e0fffd17 	ldw	r3,-12(fp)
    c598:	e0bff217 	ldw	r2,-56(fp)
    c59c:	18800426 	beq	r3,r2,c5b0 <altera_avalon_jtag_uart_write+0x2a4>
    return ptr - start;
    c5a0:	e0fffd17 	ldw	r3,-12(fp)
    c5a4:	e0bff217 	ldw	r2,-56(fp)
    c5a8:	1885c83a 	sub	r2,r3,r2
    c5ac:	00000606 	br	c5c8 <altera_avalon_jtag_uart_write+0x2bc>
  else if (flags & O_NONBLOCK)
    c5b0:	e0bfff17 	ldw	r2,-4(fp)
    c5b4:	1090000c 	andi	r2,r2,16384
    c5b8:	10000226 	beq	r2,zero,c5c4 <altera_avalon_jtag_uart_write+0x2b8>
    return -EWOULDBLOCK;
    c5bc:	00bffd44 	movi	r2,-11
    c5c0:	00000106 	br	c5c8 <altera_avalon_jtag_uart_write+0x2bc>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    c5c4:	00bffec4 	movi	r2,-5
}
    c5c8:	e037883a 	mov	sp,fp
    c5cc:	dfc00117 	ldw	ra,4(sp)
    c5d0:	df000017 	ldw	fp,0(sp)
    c5d4:	dec00204 	addi	sp,sp,8
    c5d8:	f800283a 	ret

0000c5dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c5dc:	defff904 	addi	sp,sp,-28
    c5e0:	dfc00615 	stw	ra,24(sp)
    c5e4:	df000515 	stw	fp,20(sp)
    c5e8:	df000504 	addi	fp,sp,20
    c5ec:	e13ffe15 	stw	r4,-8(fp)
    c5f0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c5f4:	0007883a 	mov	r3,zero
    c5f8:	e0bffe17 	ldw	r2,-8(fp)
    c5fc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c600:	e0bffe17 	ldw	r2,-8(fp)
    c604:	10800104 	addi	r2,r2,4
    c608:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c60c:	0005303a 	rdctl	r2,status
    c610:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c614:	e0fffc17 	ldw	r3,-16(fp)
    c618:	00bfff84 	movi	r2,-2
    c61c:	1884703a 	and	r2,r3,r2
    c620:	1001703a 	wrctl	status,r2
  
  return context;
    c624:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c628:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    c62c:	000cff80 	call	cff8 <alt_tick>
    c630:	e0bffb17 	ldw	r2,-20(fp)
    c634:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c638:	e0bffd17 	ldw	r2,-12(fp)
    c63c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c640:	e037883a 	mov	sp,fp
    c644:	dfc00117 	ldw	ra,4(sp)
    c648:	df000017 	ldw	fp,0(sp)
    c64c:	dec00204 	addi	sp,sp,8
    c650:	f800283a 	ret

0000c654 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c654:	defff904 	addi	sp,sp,-28
    c658:	dfc00615 	stw	ra,24(sp)
    c65c:	df000515 	stw	fp,20(sp)
    c660:	df000504 	addi	fp,sp,20
    c664:	e13ffc15 	stw	r4,-16(fp)
    c668:	e17ffd15 	stw	r5,-12(fp)
    c66c:	e1bffe15 	stw	r6,-8(fp)
    c670:	e1ffff15 	stw	r7,-4(fp)
    c674:	e0bfff17 	ldw	r2,-4(fp)
    c678:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c67c:	00800074 	movhi	r2,1
    c680:	1089fc04 	addi	r2,r2,10224
    c684:	10800017 	ldw	r2,0(r2)
    c688:	1000041e 	bne	r2,zero,c69c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    c68c:	00800074 	movhi	r2,1
    c690:	1089fc04 	addi	r2,r2,10224
    c694:	e0fffb17 	ldw	r3,-20(fp)
    c698:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c69c:	e0bffc17 	ldw	r2,-16(fp)
    c6a0:	10800104 	addi	r2,r2,4
    c6a4:	00c001c4 	movi	r3,7
    c6a8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    c6ac:	e13ffe17 	ldw	r4,-8(fp)
    c6b0:	e17ffc17 	ldw	r5,-16(fp)
    c6b4:	01800074 	movhi	r6,1
    c6b8:	31b17704 	addi	r6,r6,-14884
    c6bc:	000cb400 	call	cb40 <alt_irq_register>
#endif  
}
    c6c0:	e037883a 	mov	sp,fp
    c6c4:	dfc00117 	ldw	ra,4(sp)
    c6c8:	df000017 	ldw	fp,0(sp)
    c6cc:	dec00204 	addi	sp,sp,8
    c6d0:	f800283a 	ret

0000c6d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    c6d4:	defff504 	addi	sp,sp,-44
    c6d8:	df000a15 	stw	fp,40(sp)
    c6dc:	df000a04 	addi	fp,sp,40
    c6e0:	e13ffc15 	stw	r4,-16(fp)
    c6e4:	e17ffd15 	stw	r5,-12(fp)
    c6e8:	e1bffe15 	stw	r6,-8(fp)
    c6ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    c6f0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c6f4:	00800074 	movhi	r2,1
    c6f8:	1089fc04 	addi	r2,r2,10224
    c6fc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    c700:	10003f26 	beq	r2,zero,c800 <alt_alarm_start+0x12c>
  {
    if (alarm)
    c704:	e0bffc17 	ldw	r2,-16(fp)
    c708:	10003b26 	beq	r2,zero,c7f8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    c70c:	e0bffc17 	ldw	r2,-16(fp)
    c710:	e0fffe17 	ldw	r3,-8(fp)
    c714:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    c718:	e0bffc17 	ldw	r2,-16(fp)
    c71c:	e0ffff17 	ldw	r3,-4(fp)
    c720:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c724:	0005303a 	rdctl	r2,status
    c728:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c72c:	e0fff817 	ldw	r3,-32(fp)
    c730:	00bfff84 	movi	r2,-2
    c734:	1884703a 	and	r2,r3,r2
    c738:	1001703a 	wrctl	status,r2
  
  return context;
    c73c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    c740:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    c744:	00800074 	movhi	r2,1
    c748:	1089fd04 	addi	r2,r2,10228
    c74c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    c750:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    c754:	e0fffd17 	ldw	r3,-12(fp)
    c758:	e0bff617 	ldw	r2,-40(fp)
    c75c:	1885883a 	add	r2,r3,r2
    c760:	10c00044 	addi	r3,r2,1
    c764:	e0bffc17 	ldw	r2,-16(fp)
    c768:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	10c00217 	ldw	r3,8(r2)
    c774:	e0bff617 	ldw	r2,-40(fp)
    c778:	1880042e 	bgeu	r3,r2,c78c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    c77c:	e0bffc17 	ldw	r2,-16(fp)
    c780:	00c00044 	movi	r3,1
    c784:	10c00405 	stb	r3,16(r2)
    c788:	00000206 	br	c794 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    c78c:	e0bffc17 	ldw	r2,-16(fp)
    c790:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    c794:	e0bffc17 	ldw	r2,-16(fp)
    c798:	00c00074 	movhi	r3,1
    c79c:	18c32404 	addi	r3,r3,3216
    c7a0:	e0fff915 	stw	r3,-28(fp)
    c7a4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c7a8:	e0bffa17 	ldw	r2,-24(fp)
    c7ac:	e0fff917 	ldw	r3,-28(fp)
    c7b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c7b4:	e0bff917 	ldw	r2,-28(fp)
    c7b8:	10c00017 	ldw	r3,0(r2)
    c7bc:	e0bffa17 	ldw	r2,-24(fp)
    c7c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c7c4:	e0bff917 	ldw	r2,-28(fp)
    c7c8:	10800017 	ldw	r2,0(r2)
    c7cc:	e0fffa17 	ldw	r3,-24(fp)
    c7d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c7d4:	e0bff917 	ldw	r2,-28(fp)
    c7d8:	e0fffa17 	ldw	r3,-24(fp)
    c7dc:	10c00015 	stw	r3,0(r2)
    c7e0:	e0bff717 	ldw	r2,-36(fp)
    c7e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c7e8:	e0bffb17 	ldw	r2,-20(fp)
    c7ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    c7f0:	0005883a 	mov	r2,zero
    c7f4:	00000306 	br	c804 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    c7f8:	00bffa84 	movi	r2,-22
    c7fc:	00000106 	br	c804 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    c800:	00bfde84 	movi	r2,-134
  }
}
    c804:	e037883a 	mov	sp,fp
    c808:	df000017 	ldw	fp,0(sp)
    c80c:	dec00104 	addi	sp,sp,4
    c810:	f800283a 	ret

0000c814 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c814:	deffff04 	addi	sp,sp,-4
    c818:	df000015 	stw	fp,0(sp)
    c81c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c820:	e037883a 	mov	sp,fp
    c824:	df000017 	ldw	fp,0(sp)
    c828:	dec00104 	addi	sp,sp,4
    c82c:	f800283a 	ret

0000c830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c830:	defffe04 	addi	sp,sp,-8
    c834:	dfc00115 	stw	ra,4(sp)
    c838:	df000015 	stw	fp,0(sp)
    c83c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c840:	00800074 	movhi	r2,1
    c844:	10830204 	addi	r2,r2,3080
    c848:	10800017 	ldw	r2,0(r2)
    c84c:	10000526 	beq	r2,zero,c864 <alt_get_errno+0x34>
    c850:	00800074 	movhi	r2,1
    c854:	10830204 	addi	r2,r2,3080
    c858:	10800017 	ldw	r2,0(r2)
    c85c:	103ee83a 	callr	r2
    c860:	00000206 	br	c86c <alt_get_errno+0x3c>
    c864:	00800074 	movhi	r2,1
    c868:	1089dd04 	addi	r2,r2,10100
}
    c86c:	e037883a 	mov	sp,fp
    c870:	dfc00117 	ldw	ra,4(sp)
    c874:	df000017 	ldw	fp,0(sp)
    c878:	dec00204 	addi	sp,sp,8
    c87c:	f800283a 	ret

0000c880 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c880:	defffa04 	addi	sp,sp,-24
    c884:	dfc00515 	stw	ra,20(sp)
    c888:	df000415 	stw	fp,16(sp)
    c88c:	df000404 	addi	fp,sp,16
    c890:	e13ffe15 	stw	r4,-8(fp)
    c894:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c898:	e0bffe17 	ldw	r2,-8(fp)
    c89c:	10000326 	beq	r2,zero,c8ac <alt_dev_llist_insert+0x2c>
    c8a0:	e0bffe17 	ldw	r2,-8(fp)
    c8a4:	10800217 	ldw	r2,8(r2)
    c8a8:	1000051e 	bne	r2,zero,c8c0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    c8ac:	000c8300 	call	c830 <alt_get_errno>
    c8b0:	00c00584 	movi	r3,22
    c8b4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    c8b8:	00bffa84 	movi	r2,-22
    c8bc:	00001306 	br	c90c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c8c0:	e0bffe17 	ldw	r2,-8(fp)
    c8c4:	e0ffff17 	ldw	r3,-4(fp)
    c8c8:	e0fffc15 	stw	r3,-16(fp)
    c8cc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c8d0:	e0bffd17 	ldw	r2,-12(fp)
    c8d4:	e0fffc17 	ldw	r3,-16(fp)
    c8d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c8dc:	e0bffc17 	ldw	r2,-16(fp)
    c8e0:	10c00017 	ldw	r3,0(r2)
    c8e4:	e0bffd17 	ldw	r2,-12(fp)
    c8e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c8ec:	e0bffc17 	ldw	r2,-16(fp)
    c8f0:	10800017 	ldw	r2,0(r2)
    c8f4:	e0fffd17 	ldw	r3,-12(fp)
    c8f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c8fc:	e0bffc17 	ldw	r2,-16(fp)
    c900:	e0fffd17 	ldw	r3,-12(fp)
    c904:	10c00015 	stw	r3,0(r2)

  return 0;  
    c908:	0005883a 	mov	r2,zero
}
    c90c:	e037883a 	mov	sp,fp
    c910:	dfc00117 	ldw	ra,4(sp)
    c914:	df000017 	ldw	fp,0(sp)
    c918:	dec00204 	addi	sp,sp,8
    c91c:	f800283a 	ret

0000c920 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c920:	defffd04 	addi	sp,sp,-12
    c924:	dfc00215 	stw	ra,8(sp)
    c928:	df000115 	stw	fp,4(sp)
    c92c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c930:	00800074 	movhi	r2,1
    c934:	10bbc804 	addi	r2,r2,-4320
    c938:	e0bfff15 	stw	r2,-4(fp)
    c93c:	00000606 	br	c958 <_do_ctors+0x38>
        (*ctor) (); 
    c940:	e0bfff17 	ldw	r2,-4(fp)
    c944:	10800017 	ldw	r2,0(r2)
    c948:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c94c:	e0bfff17 	ldw	r2,-4(fp)
    c950:	10bfff04 	addi	r2,r2,-4
    c954:	e0bfff15 	stw	r2,-4(fp)
    c958:	e0ffff17 	ldw	r3,-4(fp)
    c95c:	00800074 	movhi	r2,1
    c960:	10bbc904 	addi	r2,r2,-4316
    c964:	18bff62e 	bgeu	r3,r2,c940 <_do_ctors+0x20>
        (*ctor) (); 
}
    c968:	e037883a 	mov	sp,fp
    c96c:	dfc00117 	ldw	ra,4(sp)
    c970:	df000017 	ldw	fp,0(sp)
    c974:	dec00204 	addi	sp,sp,8
    c978:	f800283a 	ret

0000c97c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c97c:	defffd04 	addi	sp,sp,-12
    c980:	dfc00215 	stw	ra,8(sp)
    c984:	df000115 	stw	fp,4(sp)
    c988:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c98c:	00800074 	movhi	r2,1
    c990:	10bbc804 	addi	r2,r2,-4320
    c994:	e0bfff15 	stw	r2,-4(fp)
    c998:	00000606 	br	c9b4 <_do_dtors+0x38>
        (*dtor) (); 
    c99c:	e0bfff17 	ldw	r2,-4(fp)
    c9a0:	10800017 	ldw	r2,0(r2)
    c9a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c9a8:	e0bfff17 	ldw	r2,-4(fp)
    c9ac:	10bfff04 	addi	r2,r2,-4
    c9b0:	e0bfff15 	stw	r2,-4(fp)
    c9b4:	e0ffff17 	ldw	r3,-4(fp)
    c9b8:	00800074 	movhi	r2,1
    c9bc:	10bbc904 	addi	r2,r2,-4316
    c9c0:	18bff62e 	bgeu	r3,r2,c99c <_do_dtors+0x20>
        (*dtor) (); 
}
    c9c4:	e037883a 	mov	sp,fp
    c9c8:	dfc00117 	ldw	ra,4(sp)
    c9cc:	df000017 	ldw	fp,0(sp)
    c9d0:	dec00204 	addi	sp,sp,8
    c9d4:	f800283a 	ret

0000c9d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c9d8:	defffe04 	addi	sp,sp,-8
    c9dc:	dfc00115 	stw	ra,4(sp)
    c9e0:	df000015 	stw	fp,0(sp)
    c9e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c9e8:	0009883a 	mov	r4,zero
    c9ec:	01440004 	movi	r5,4096
    c9f0:	000d8880 	call	d888 <alt_icache_flush>
#endif
}
    c9f4:	e037883a 	mov	sp,fp
    c9f8:	dfc00117 	ldw	ra,4(sp)
    c9fc:	df000017 	ldw	fp,0(sp)
    ca00:	dec00204 	addi	sp,sp,8
    ca04:	f800283a 	ret

0000ca08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ca08:	defff904 	addi	sp,sp,-28
    ca0c:	dfc00615 	stw	ra,24(sp)
    ca10:	df000515 	stw	fp,20(sp)
    ca14:	df000504 	addi	fp,sp,20
    ca18:	e13ffc15 	stw	r4,-16(fp)
    ca1c:	e17ffd15 	stw	r5,-12(fp)
    ca20:	e1bffe15 	stw	r6,-8(fp)
    ca24:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    ca28:	e13ffd17 	ldw	r4,-12(fp)
    ca2c:	e17ffe17 	ldw	r5,-8(fp)
    ca30:	e1bfff17 	ldw	r6,-4(fp)
    ca34:	000ce0c0 	call	ce0c <open>
    ca38:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ca3c:	e0bffb17 	ldw	r2,-20(fp)
    ca40:	10001c16 	blt	r2,zero,cab4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    ca44:	00c00074 	movhi	r3,1
    ca48:	18fe7e04 	addi	r3,r3,-1544
    ca4c:	e0bffb17 	ldw	r2,-20(fp)
    ca50:	10800324 	muli	r2,r2,12
    ca54:	1885883a 	add	r2,r3,r2
    ca58:	10c00017 	ldw	r3,0(r2)
    ca5c:	e0bffc17 	ldw	r2,-16(fp)
    ca60:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ca64:	00c00074 	movhi	r3,1
    ca68:	18fe7e04 	addi	r3,r3,-1544
    ca6c:	e0bffb17 	ldw	r2,-20(fp)
    ca70:	10800324 	muli	r2,r2,12
    ca74:	1885883a 	add	r2,r3,r2
    ca78:	10800104 	addi	r2,r2,4
    ca7c:	10c00017 	ldw	r3,0(r2)
    ca80:	e0bffc17 	ldw	r2,-16(fp)
    ca84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    ca88:	00c00074 	movhi	r3,1
    ca8c:	18fe7e04 	addi	r3,r3,-1544
    ca90:	e0bffb17 	ldw	r2,-20(fp)
    ca94:	10800324 	muli	r2,r2,12
    ca98:	1885883a 	add	r2,r3,r2
    ca9c:	10800204 	addi	r2,r2,8
    caa0:	10c00017 	ldw	r3,0(r2)
    caa4:	e0bffc17 	ldw	r2,-16(fp)
    caa8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    caac:	e13ffb17 	ldw	r4,-20(fp)
    cab0:	00034bc0 	call	34bc <alt_release_fd>
  }
} 
    cab4:	e037883a 	mov	sp,fp
    cab8:	dfc00117 	ldw	ra,4(sp)
    cabc:	df000017 	ldw	fp,0(sp)
    cac0:	dec00204 	addi	sp,sp,8
    cac4:	f800283a 	ret

0000cac8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    cac8:	defffb04 	addi	sp,sp,-20
    cacc:	dfc00415 	stw	ra,16(sp)
    cad0:	df000315 	stw	fp,12(sp)
    cad4:	df000304 	addi	fp,sp,12
    cad8:	e13ffd15 	stw	r4,-12(fp)
    cadc:	e17ffe15 	stw	r5,-8(fp)
    cae0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    cae4:	01000074 	movhi	r4,1
    cae8:	213e8104 	addi	r4,r4,-1532
    caec:	e17ffd17 	ldw	r5,-12(fp)
    caf0:	01800044 	movi	r6,1
    caf4:	01c07fc4 	movi	r7,511
    caf8:	000ca080 	call	ca08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    cafc:	01000074 	movhi	r4,1
    cb00:	213e7e04 	addi	r4,r4,-1544
    cb04:	e17ffe17 	ldw	r5,-8(fp)
    cb08:	000d883a 	mov	r6,zero
    cb0c:	01c07fc4 	movi	r7,511
    cb10:	000ca080 	call	ca08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    cb14:	01000074 	movhi	r4,1
    cb18:	213e8404 	addi	r4,r4,-1520
    cb1c:	e17fff17 	ldw	r5,-4(fp)
    cb20:	01800044 	movi	r6,1
    cb24:	01c07fc4 	movi	r7,511
    cb28:	000ca080 	call	ca08 <alt_open_fd>
}  
    cb2c:	e037883a 	mov	sp,fp
    cb30:	dfc00117 	ldw	ra,4(sp)
    cb34:	df000017 	ldw	fp,0(sp)
    cb38:	dec00204 	addi	sp,sp,8
    cb3c:	f800283a 	ret

0000cb40 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    cb40:	defff004 	addi	sp,sp,-64
    cb44:	df000f15 	stw	fp,60(sp)
    cb48:	df000f04 	addi	fp,sp,60
    cb4c:	e13ffd15 	stw	r4,-12(fp)
    cb50:	e17ffe15 	stw	r5,-8(fp)
    cb54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    cb58:	00bffa84 	movi	r2,-22
    cb5c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    cb60:	e0bffd17 	ldw	r2,-12(fp)
    cb64:	10800828 	cmpgeui	r2,r2,32
    cb68:	10005c1e 	bne	r2,zero,ccdc <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cb6c:	0005303a 	rdctl	r2,status
    cb70:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cb74:	e0fff317 	ldw	r3,-52(fp)
    cb78:	00bfff84 	movi	r2,-2
    cb7c:	1884703a 	and	r2,r3,r2
    cb80:	1001703a 	wrctl	status,r2
  
  return context;
    cb84:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    cb88:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    cb8c:	00c000b4 	movhi	r3,2
    cb90:	18e8fd04 	addi	r3,r3,-23564
    cb94:	e0bffd17 	ldw	r2,-12(fp)
    cb98:	100490fa 	slli	r2,r2,3
    cb9c:	1885883a 	add	r2,r3,r2
    cba0:	e0ffff17 	ldw	r3,-4(fp)
    cba4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    cba8:	00c000b4 	movhi	r3,2
    cbac:	18e8fd04 	addi	r3,r3,-23564
    cbb0:	e0bffd17 	ldw	r2,-12(fp)
    cbb4:	100490fa 	slli	r2,r2,3
    cbb8:	1885883a 	add	r2,r3,r2
    cbbc:	10800104 	addi	r2,r2,4
    cbc0:	e0fffe17 	ldw	r3,-8(fp)
    cbc4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    cbc8:	e0bfff17 	ldw	r2,-4(fp)
    cbcc:	10001f26 	beq	r2,zero,cc4c <alt_irq_register+0x10c>
    cbd0:	e0bffd17 	ldw	r2,-12(fp)
    cbd4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cbd8:	0005303a 	rdctl	r2,status
    cbdc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cbe0:	e0fff517 	ldw	r3,-44(fp)
    cbe4:	00bfff84 	movi	r2,-2
    cbe8:	1884703a 	and	r2,r3,r2
    cbec:	1001703a 	wrctl	status,r2
  
  return context;
    cbf0:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cbf4:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    cbf8:	e0bff417 	ldw	r2,-48(fp)
    cbfc:	00c00044 	movi	r3,1
    cc00:	1884983a 	sll	r2,r3,r2
    cc04:	1007883a 	mov	r3,r2
    cc08:	00800074 	movhi	r2,1
    cc0c:	1089fb04 	addi	r2,r2,10220
    cc10:	10800017 	ldw	r2,0(r2)
    cc14:	1886b03a 	or	r3,r3,r2
    cc18:	00800074 	movhi	r2,1
    cc1c:	1089fb04 	addi	r2,r2,10220
    cc20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cc24:	00800074 	movhi	r2,1
    cc28:	1089fb04 	addi	r2,r2,10220
    cc2c:	10800017 	ldw	r2,0(r2)
    cc30:	100170fa 	wrctl	ienable,r2
    cc34:	e0bff617 	ldw	r2,-40(fp)
    cc38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc3c:	e0bff717 	ldw	r2,-36(fp)
    cc40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cc44:	0005883a 	mov	r2,zero
    cc48:	00001f06 	br	ccc8 <alt_irq_register+0x188>
    cc4c:	e0bffd17 	ldw	r2,-12(fp)
    cc50:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cc54:	0005303a 	rdctl	r2,status
    cc58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cc5c:	e0fff917 	ldw	r3,-28(fp)
    cc60:	00bfff84 	movi	r2,-2
    cc64:	1884703a 	and	r2,r3,r2
    cc68:	1001703a 	wrctl	status,r2
  
  return context;
    cc6c:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cc70:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    cc74:	e0bff817 	ldw	r2,-32(fp)
    cc78:	00c00044 	movi	r3,1
    cc7c:	1884983a 	sll	r2,r3,r2
    cc80:	0084303a 	nor	r2,zero,r2
    cc84:	1007883a 	mov	r3,r2
    cc88:	00800074 	movhi	r2,1
    cc8c:	1089fb04 	addi	r2,r2,10220
    cc90:	10800017 	ldw	r2,0(r2)
    cc94:	1886703a 	and	r3,r3,r2
    cc98:	00800074 	movhi	r2,1
    cc9c:	1089fb04 	addi	r2,r2,10220
    cca0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cca4:	00800074 	movhi	r2,1
    cca8:	1089fb04 	addi	r2,r2,10220
    ccac:	10800017 	ldw	r2,0(r2)
    ccb0:	100170fa 	wrctl	ienable,r2
    ccb4:	e0bffa17 	ldw	r2,-24(fp)
    ccb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ccbc:	e0bffb17 	ldw	r2,-20(fp)
    ccc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ccc4:	0005883a 	mov	r2,zero
    ccc8:	e0bff115 	stw	r2,-60(fp)
    cccc:	e0bff217 	ldw	r2,-56(fp)
    ccd0:	e0bffc15 	stw	r2,-16(fp)
    ccd4:	e0bffc17 	ldw	r2,-16(fp)
    ccd8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    ccdc:	e0bff117 	ldw	r2,-60(fp)
}
    cce0:	e037883a 	mov	sp,fp
    cce4:	df000017 	ldw	fp,0(sp)
    cce8:	dec00104 	addi	sp,sp,4
    ccec:	f800283a 	ret

0000ccf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccf0:	defffe04 	addi	sp,sp,-8
    ccf4:	dfc00115 	stw	ra,4(sp)
    ccf8:	df000015 	stw	fp,0(sp)
    ccfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cd00:	00800074 	movhi	r2,1
    cd04:	10830204 	addi	r2,r2,3080
    cd08:	10800017 	ldw	r2,0(r2)
    cd0c:	10000526 	beq	r2,zero,cd24 <alt_get_errno+0x34>
    cd10:	00800074 	movhi	r2,1
    cd14:	10830204 	addi	r2,r2,3080
    cd18:	10800017 	ldw	r2,0(r2)
    cd1c:	103ee83a 	callr	r2
    cd20:	00000206 	br	cd2c <alt_get_errno+0x3c>
    cd24:	00800074 	movhi	r2,1
    cd28:	1089dd04 	addi	r2,r2,10100
}
    cd2c:	e037883a 	mov	sp,fp
    cd30:	dfc00117 	ldw	ra,4(sp)
    cd34:	df000017 	ldw	fp,0(sp)
    cd38:	dec00204 	addi	sp,sp,8
    cd3c:	f800283a 	ret

0000cd40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    cd40:	defffd04 	addi	sp,sp,-12
    cd44:	df000215 	stw	fp,8(sp)
    cd48:	df000204 	addi	fp,sp,8
    cd4c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    cd50:	e0bfff17 	ldw	r2,-4(fp)
    cd54:	10800217 	ldw	r2,8(r2)
    cd58:	10d00034 	orhi	r3,r2,16384
    cd5c:	e0bfff17 	ldw	r2,-4(fp)
    cd60:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cd64:	e03ffe15 	stw	zero,-8(fp)
    cd68:	00001d06 	br	cde0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    cd6c:	00c00074 	movhi	r3,1
    cd70:	18fe7e04 	addi	r3,r3,-1544
    cd74:	e0bffe17 	ldw	r2,-8(fp)
    cd78:	10800324 	muli	r2,r2,12
    cd7c:	1885883a 	add	r2,r3,r2
    cd80:	10c00017 	ldw	r3,0(r2)
    cd84:	e0bfff17 	ldw	r2,-4(fp)
    cd88:	10800017 	ldw	r2,0(r2)
    cd8c:	1880111e 	bne	r3,r2,cdd4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    cd90:	00c00074 	movhi	r3,1
    cd94:	18fe7e04 	addi	r3,r3,-1544
    cd98:	e0bffe17 	ldw	r2,-8(fp)
    cd9c:	10800324 	muli	r2,r2,12
    cda0:	1885883a 	add	r2,r3,r2
    cda4:	10800204 	addi	r2,r2,8
    cda8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    cdac:	1000090e 	bge	r2,zero,cdd4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    cdb0:	e0bffe17 	ldw	r2,-8(fp)
    cdb4:	10c00324 	muli	r3,r2,12
    cdb8:	00800074 	movhi	r2,1
    cdbc:	10be7e04 	addi	r2,r2,-1544
    cdc0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    cdc4:	e0bfff17 	ldw	r2,-4(fp)
    cdc8:	18800226 	beq	r3,r2,cdd4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    cdcc:	00bffcc4 	movi	r2,-13
    cdd0:	00000a06 	br	cdfc <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cdd4:	e0bffe17 	ldw	r2,-8(fp)
    cdd8:	10800044 	addi	r2,r2,1
    cddc:	e0bffe15 	stw	r2,-8(fp)
    cde0:	00800074 	movhi	r2,1
    cde4:	10830104 	addi	r2,r2,3076
    cde8:	10800017 	ldw	r2,0(r2)
    cdec:	1007883a 	mov	r3,r2
    cdf0:	e0bffe17 	ldw	r2,-8(fp)
    cdf4:	18bfdd2e 	bgeu	r3,r2,cd6c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    cdf8:	0005883a 	mov	r2,zero
}
    cdfc:	e037883a 	mov	sp,fp
    ce00:	df000017 	ldw	fp,0(sp)
    ce04:	dec00104 	addi	sp,sp,4
    ce08:	f800283a 	ret

0000ce0c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ce0c:	defff604 	addi	sp,sp,-40
    ce10:	dfc00915 	stw	ra,36(sp)
    ce14:	df000815 	stw	fp,32(sp)
    ce18:	df000804 	addi	fp,sp,32
    ce1c:	e13ffd15 	stw	r4,-12(fp)
    ce20:	e17ffe15 	stw	r5,-8(fp)
    ce24:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ce28:	00bfffc4 	movi	r2,-1
    ce2c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    ce30:	00bffb44 	movi	r2,-19
    ce34:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    ce38:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ce3c:	e13ffd17 	ldw	r4,-12(fp)
    ce40:	01400074 	movhi	r5,1
    ce44:	2942ff04 	addi	r5,r5,3068
    ce48:	000d5e80 	call	d5e8 <alt_find_dev>
    ce4c:	e0bff815 	stw	r2,-32(fp)
    ce50:	e0bff817 	ldw	r2,-32(fp)
    ce54:	1000051e 	bne	r2,zero,ce6c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ce58:	e13ffd17 	ldw	r4,-12(fp)
    ce5c:	000d6780 	call	d678 <alt_find_file>
    ce60:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    ce64:	00800044 	movi	r2,1
    ce68:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ce6c:	e0bff817 	ldw	r2,-32(fp)
    ce70:	10002926 	beq	r2,zero,cf18 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ce74:	e13ff817 	ldw	r4,-32(fp)
    ce78:	000d78c0 	call	d78c <alt_get_fd>
    ce7c:	e0bff915 	stw	r2,-28(fp)
    ce80:	e0bff917 	ldw	r2,-28(fp)
    ce84:	1000030e 	bge	r2,zero,ce94 <open+0x88>
    {
      status = index;
    ce88:	e0bff917 	ldw	r2,-28(fp)
    ce8c:	e0bffa15 	stw	r2,-24(fp)
    ce90:	00002306 	br	cf20 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    ce94:	e0bff917 	ldw	r2,-28(fp)
    ce98:	10c00324 	muli	r3,r2,12
    ce9c:	00800074 	movhi	r2,1
    cea0:	10be7e04 	addi	r2,r2,-1544
    cea4:	1885883a 	add	r2,r3,r2
    cea8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ceac:	e0fffe17 	ldw	r3,-8(fp)
    ceb0:	00900034 	movhi	r2,16384
    ceb4:	10bfffc4 	addi	r2,r2,-1
    ceb8:	1886703a 	and	r3,r3,r2
    cebc:	e0bffc17 	ldw	r2,-16(fp)
    cec0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    cec4:	e0bffb17 	ldw	r2,-20(fp)
    cec8:	1000051e 	bne	r2,zero,cee0 <open+0xd4>
    cecc:	e13ffc17 	ldw	r4,-16(fp)
    ced0:	000cd400 	call	cd40 <alt_file_locked>
    ced4:	e0bffa15 	stw	r2,-24(fp)
    ced8:	e0bffa17 	ldw	r2,-24(fp)
    cedc:	10001016 	blt	r2,zero,cf20 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    cee0:	e0bff817 	ldw	r2,-32(fp)
    cee4:	10800317 	ldw	r2,12(r2)
    cee8:	10000826 	beq	r2,zero,cf0c <open+0x100>
    ceec:	e0bff817 	ldw	r2,-32(fp)
    cef0:	10800317 	ldw	r2,12(r2)
    cef4:	e13ffc17 	ldw	r4,-16(fp)
    cef8:	e17ffd17 	ldw	r5,-12(fp)
    cefc:	e1bffe17 	ldw	r6,-8(fp)
    cf00:	e1ffff17 	ldw	r7,-4(fp)
    cf04:	103ee83a 	callr	r2
    cf08:	00000106 	br	cf10 <open+0x104>
    cf0c:	0005883a 	mov	r2,zero
    cf10:	e0bffa15 	stw	r2,-24(fp)
    cf14:	00000206 	br	cf20 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    cf18:	00bffb44 	movi	r2,-19
    cf1c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    cf20:	e0bffa17 	ldw	r2,-24(fp)
    cf24:	1000080e 	bge	r2,zero,cf48 <open+0x13c>
  {
    alt_release_fd (index);  
    cf28:	e13ff917 	ldw	r4,-28(fp)
    cf2c:	00034bc0 	call	34bc <alt_release_fd>
    ALT_ERRNO = -status;
    cf30:	000ccf00 	call	ccf0 <alt_get_errno>
    cf34:	e0fffa17 	ldw	r3,-24(fp)
    cf38:	00c7c83a 	sub	r3,zero,r3
    cf3c:	10c00015 	stw	r3,0(r2)
    return -1;
    cf40:	00bfffc4 	movi	r2,-1
    cf44:	00000106 	br	cf4c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    cf48:	e0bff917 	ldw	r2,-28(fp)
}
    cf4c:	e037883a 	mov	sp,fp
    cf50:	dfc00117 	ldw	ra,4(sp)
    cf54:	df000017 	ldw	fp,0(sp)
    cf58:	dec00204 	addi	sp,sp,8
    cf5c:	f800283a 	ret

0000cf60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    cf60:	defffa04 	addi	sp,sp,-24
    cf64:	df000515 	stw	fp,20(sp)
    cf68:	df000504 	addi	fp,sp,20
    cf6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf70:	0005303a 	rdctl	r2,status
    cf74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf78:	e0fffc17 	ldw	r3,-16(fp)
    cf7c:	00bfff84 	movi	r2,-2
    cf80:	1884703a 	and	r2,r3,r2
    cf84:	1001703a 	wrctl	status,r2
  
  return context;
    cf88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    cf8c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    cf90:	e0bfff17 	ldw	r2,-4(fp)
    cf94:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    cf98:	e0bffd17 	ldw	r2,-12(fp)
    cf9c:	10800017 	ldw	r2,0(r2)
    cfa0:	e0fffd17 	ldw	r3,-12(fp)
    cfa4:	18c00117 	ldw	r3,4(r3)
    cfa8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    cfac:	e0bffd17 	ldw	r2,-12(fp)
    cfb0:	10800117 	ldw	r2,4(r2)
    cfb4:	e0fffd17 	ldw	r3,-12(fp)
    cfb8:	18c00017 	ldw	r3,0(r3)
    cfbc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    cfc0:	e0bffd17 	ldw	r2,-12(fp)
    cfc4:	e0fffd17 	ldw	r3,-12(fp)
    cfc8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    cfcc:	e0bffd17 	ldw	r2,-12(fp)
    cfd0:	e0fffd17 	ldw	r3,-12(fp)
    cfd4:	10c00015 	stw	r3,0(r2)
    cfd8:	e0bffb17 	ldw	r2,-20(fp)
    cfdc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cfe0:	e0bffe17 	ldw	r2,-8(fp)
    cfe4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    cfe8:	e037883a 	mov	sp,fp
    cfec:	df000017 	ldw	fp,0(sp)
    cff0:	dec00104 	addi	sp,sp,4
    cff4:	f800283a 	ret

0000cff8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    cff8:	defffb04 	addi	sp,sp,-20
    cffc:	dfc00415 	stw	ra,16(sp)
    d000:	df000315 	stw	fp,12(sp)
    d004:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d008:	d0a02b17 	ldw	r2,-32596(gp)
    d00c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d010:	d0a70417 	ldw	r2,-25584(gp)
    d014:	10800044 	addi	r2,r2,1
    d018:	d0a70415 	stw	r2,-25584(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d01c:	00002e06 	br	d0d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    d020:	e0bffd17 	ldw	r2,-12(fp)
    d024:	10800017 	ldw	r2,0(r2)
    d028:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d02c:	e0bffd17 	ldw	r2,-12(fp)
    d030:	10800403 	ldbu	r2,16(r2)
    d034:	10803fcc 	andi	r2,r2,255
    d038:	10000426 	beq	r2,zero,d04c <alt_tick+0x54>
    d03c:	d0a70417 	ldw	r2,-25584(gp)
    d040:	1000021e 	bne	r2,zero,d04c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    d044:	e0bffd17 	ldw	r2,-12(fp)
    d048:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d04c:	e0bffd17 	ldw	r2,-12(fp)
    d050:	10800217 	ldw	r2,8(r2)
    d054:	d0e70417 	ldw	r3,-25584(gp)
    d058:	18801d36 	bltu	r3,r2,d0d0 <alt_tick+0xd8>
    d05c:	e0bffd17 	ldw	r2,-12(fp)
    d060:	10800403 	ldbu	r2,16(r2)
    d064:	10803fcc 	andi	r2,r2,255
    d068:	1000191e 	bne	r2,zero,d0d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    d06c:	e0bffd17 	ldw	r2,-12(fp)
    d070:	10c00317 	ldw	r3,12(r2)
    d074:	e0bffd17 	ldw	r2,-12(fp)
    d078:	10800517 	ldw	r2,20(r2)
    d07c:	1009883a 	mov	r4,r2
    d080:	183ee83a 	callr	r3
    d084:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d088:	e0bfff17 	ldw	r2,-4(fp)
    d08c:	1000031e 	bne	r2,zero,d09c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    d090:	e13ffd17 	ldw	r4,-12(fp)
    d094:	000cf600 	call	cf60 <alt_alarm_stop>
    d098:	00000d06 	br	d0d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    d09c:	e0bffd17 	ldw	r2,-12(fp)
    d0a0:	10c00217 	ldw	r3,8(r2)
    d0a4:	e0bfff17 	ldw	r2,-4(fp)
    d0a8:	1887883a 	add	r3,r3,r2
    d0ac:	e0bffd17 	ldw	r2,-12(fp)
    d0b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d0b4:	e0bffd17 	ldw	r2,-12(fp)
    d0b8:	10c00217 	ldw	r3,8(r2)
    d0bc:	d0a70417 	ldw	r2,-25584(gp)
    d0c0:	1880032e 	bgeu	r3,r2,d0d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    d0c4:	e0bffd17 	ldw	r2,-12(fp)
    d0c8:	00c00044 	movi	r3,1
    d0cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    d0d0:	e0bffe17 	ldw	r2,-8(fp)
    d0d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d0d8:	e0fffd17 	ldw	r3,-12(fp)
    d0dc:	d0a02b04 	addi	r2,gp,-32596
    d0e0:	18bfcf1e 	bne	r3,r2,d020 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    d0e4:	00046e40 	call	46e4 <OSTimeTick>
}
    d0e8:	e037883a 	mov	sp,fp
    d0ec:	dfc00117 	ldw	ra,4(sp)
    d0f0:	df000017 	ldw	fp,0(sp)
    d0f4:	dec00204 	addi	sp,sp,8
    d0f8:	f800283a 	ret

0000d0fc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    d0fc:	deffff04 	addi	sp,sp,-4
    d100:	df000015 	stw	fp,0(sp)
    d104:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d108:	000170fa 	wrctl	ienable,zero
}
    d10c:	e037883a 	mov	sp,fp
    d110:	df000017 	ldw	fp,0(sp)
    d114:	dec00104 	addi	sp,sp,4
    d118:	f800283a 	ret

0000d11c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    d11c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    d120:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    d124:	d126fd17 	ldw	r4,-25612(gp)

      stw ra,  0(sp)
    d128:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    d12c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    d130:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    d134:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    d138:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    d13c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    d140:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    d144:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    d148:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    d14c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    d150:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    d154:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    d158:	000d5200 	call	d520 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    d15c:	d126f717 	ldw	r4,-25636(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    d160:	d166ef07 	ldb	r5,-25668(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    d164:	d126fd15 	stw	r4,-25612(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    d168:	d166ef45 	stb	r5,-25667(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    d16c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    d170:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    d174:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    d178:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    d17c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    d180:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    d184:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    d188:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    d18c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    d190:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    d194:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    d198:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    d19c:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    d1a0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    d1a4:	f800283a 	ret

0000d1a8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    d1a8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    d1ac:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    d1b0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    d1b4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    d1b8:	000d5200 	call	d520 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    d1bc:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    d1c0:	d4a6ed45 	stb	r18,-25675(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    d1c4:	003fe506 	br	d15c <OSCtxSw+0x40>

0000d1c8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    d1c8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    d1cc:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    d1d0:	10800054 	ori	r2,r2,1
      wrctl status, r2
    d1d4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    d1d8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    d1dc:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    d1e0:	dec00204 	addi	sp,sp,8

      callr r2
    d1e4:	103ee83a 	callr	r2

      nop
    d1e8:	0001883a 	nop

0000d1ec <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    d1ec:	defff704 	addi	sp,sp,-36
    d1f0:	dfc00815 	stw	ra,32(sp)
    d1f4:	df000715 	stw	fp,28(sp)
    d1f8:	df000704 	addi	fp,sp,28
    d1fc:	e13ffc15 	stw	r4,-16(fp)
    d200:	e17ffd15 	stw	r5,-12(fp)
    d204:	e1bffe15 	stw	r6,-8(fp)
    d208:	3805883a 	mov	r2,r7
    d20c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    d210:	e0fffe17 	ldw	r3,-8(fp)
    d214:	00bfff04 	movi	r2,-4
    d218:	1884703a 	and	r2,r3,r2
    d21c:	10bf0004 	addi	r2,r2,-1024
    d220:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    d224:	e0bff917 	ldw	r2,-28(fp)
    d228:	10000015 	stw	zero,0(r2)
    d22c:	e0bff917 	ldw	r2,-28(fp)
    d230:	10c0bb04 	addi	r3,r2,748
    d234:	e0bff917 	ldw	r2,-28(fp)
    d238:	10c00115 	stw	r3,4(r2)
    d23c:	e0bff917 	ldw	r2,-28(fp)
    d240:	10c0d204 	addi	r3,r2,840
    d244:	e0bff917 	ldw	r2,-28(fp)
    d248:	10c00215 	stw	r3,8(r2)
    d24c:	e0bff917 	ldw	r2,-28(fp)
    d250:	10c0e904 	addi	r3,r2,932
    d254:	e0bff917 	ldw	r2,-28(fp)
    d258:	10c00315 	stw	r3,12(r2)
    d25c:	e0bff917 	ldw	r2,-28(fp)
    d260:	10000415 	stw	zero,16(r2)
    d264:	e0bff917 	ldw	r2,-28(fp)
    d268:	10800504 	addi	r2,r2,20
    d26c:	1009883a 	mov	r4,r2
    d270:	000b883a 	mov	r5,zero
    d274:	01800644 	movi	r6,25
    d278:	00027940 	call	2794 <memset>
    d27c:	e0bff917 	ldw	r2,-28(fp)
    d280:	10000c15 	stw	zero,48(r2)
    d284:	e0bff917 	ldw	r2,-28(fp)
    d288:	00c00074 	movhi	r3,1
    d28c:	18fc2c04 	addi	r3,r3,-3920
    d290:	10c00d15 	stw	r3,52(r2)
    d294:	e0bff917 	ldw	r2,-28(fp)
    d298:	10000e15 	stw	zero,56(r2)
    d29c:	e0bff917 	ldw	r2,-28(fp)
    d2a0:	10000f15 	stw	zero,60(r2)
    d2a4:	e0bff917 	ldw	r2,-28(fp)
    d2a8:	10001015 	stw	zero,64(r2)
    d2ac:	e0bff917 	ldw	r2,-28(fp)
    d2b0:	10001115 	stw	zero,68(r2)
    d2b4:	e0bff917 	ldw	r2,-28(fp)
    d2b8:	10001215 	stw	zero,72(r2)
    d2bc:	e0bff917 	ldw	r2,-28(fp)
    d2c0:	10001315 	stw	zero,76(r2)
    d2c4:	e0bff917 	ldw	r2,-28(fp)
    d2c8:	10001415 	stw	zero,80(r2)
    d2cc:	e0bff917 	ldw	r2,-28(fp)
    d2d0:	10001515 	stw	zero,84(r2)
    d2d4:	e0bff917 	ldw	r2,-28(fp)
    d2d8:	10001615 	stw	zero,88(r2)
    d2dc:	e0bff917 	ldw	r2,-28(fp)
    d2e0:	10001715 	stw	zero,92(r2)
    d2e4:	e0bff917 	ldw	r2,-28(fp)
    d2e8:	10001805 	stb	zero,96(r2)
    d2ec:	e0bff917 	ldw	r2,-28(fp)
    d2f0:	10801f04 	addi	r2,r2,124
    d2f4:	1009883a 	mov	r4,r2
    d2f8:	000b883a 	mov	r5,zero
    d2fc:	01800904 	movi	r6,36
    d300:	00027940 	call	2794 <memset>
    d304:	e0bff917 	ldw	r2,-28(fp)
    d308:	10002815 	stw	zero,160(r2)
    d30c:	e0bff917 	ldw	r2,-28(fp)
    d310:	00c00044 	movi	r3,1
    d314:	10c02915 	stw	r3,164(r2)
    d318:	10002a15 	stw	zero,168(r2)
    d31c:	e0bff917 	ldw	r2,-28(fp)
    d320:	00ccc384 	movi	r3,13070
    d324:	10c02b0d 	sth	r3,172(r2)
    d328:	e0bff917 	ldw	r2,-28(fp)
    d32c:	00eaf344 	movi	r3,-21555
    d330:	10c02b8d 	sth	r3,174(r2)
    d334:	e0bff917 	ldw	r2,-28(fp)
    d338:	00c48d04 	movi	r3,4660
    d33c:	10c02c0d 	sth	r3,176(r2)
    d340:	e0bff917 	ldw	r2,-28(fp)
    d344:	00f99b44 	movi	r3,-6547
    d348:	10c02c8d 	sth	r3,178(r2)
    d34c:	e0bff917 	ldw	r2,-28(fp)
    d350:	00f7bb04 	movi	r3,-8468
    d354:	10c02d0d 	sth	r3,180(r2)
    d358:	e0bff917 	ldw	r2,-28(fp)
    d35c:	00c00144 	movi	r3,5
    d360:	10c02d8d 	sth	r3,182(r2)
    d364:	e0bff917 	ldw	r2,-28(fp)
    d368:	00c002c4 	movi	r3,11
    d36c:	10c02e0d 	sth	r3,184(r2)
    d370:	e0bff917 	ldw	r2,-28(fp)
    d374:	10002f15 	stw	zero,188(r2)
    d378:	e0bff917 	ldw	r2,-28(fp)
    d37c:	10003015 	stw	zero,192(r2)
    d380:	e0bff917 	ldw	r2,-28(fp)
    d384:	10003115 	stw	zero,196(r2)
    d388:	e0bff917 	ldw	r2,-28(fp)
    d38c:	10003215 	stw	zero,200(r2)
    d390:	e0bff917 	ldw	r2,-28(fp)
    d394:	10003315 	stw	zero,204(r2)
    d398:	e0bff917 	ldw	r2,-28(fp)
    d39c:	10003415 	stw	zero,208(r2)
    d3a0:	e0bff917 	ldw	r2,-28(fp)
    d3a4:	10003e15 	stw	zero,248(r2)
    d3a8:	e0bff917 	ldw	r2,-28(fp)
    d3ac:	10003f15 	stw	zero,252(r2)
    d3b0:	e0bff917 	ldw	r2,-28(fp)
    d3b4:	10004015 	stw	zero,256(r2)
    d3b8:	e0bff917 	ldw	r2,-28(fp)
    d3bc:	10004115 	stw	zero,260(r2)
    d3c0:	e0bff917 	ldw	r2,-28(fp)
    d3c4:	10004215 	stw	zero,264(r2)
    d3c8:	e0bff917 	ldw	r2,-28(fp)
    d3cc:	10004315 	stw	zero,268(r2)
    d3d0:	e0bff917 	ldw	r2,-28(fp)
    d3d4:	10004415 	stw	zero,272(r2)
    d3d8:	e0bff917 	ldw	r2,-28(fp)
    d3dc:	10004515 	stw	zero,276(r2)
    d3e0:	e0bff917 	ldw	r2,-28(fp)
    d3e4:	10004615 	stw	zero,280(r2)
    d3e8:	e0bff917 	ldw	r2,-28(fp)
    d3ec:	10004715 	stw	zero,284(r2)
    d3f0:	e0bff917 	ldw	r2,-28(fp)
    d3f4:	10003505 	stb	zero,212(r2)
    d3f8:	e0bff917 	ldw	r2,-28(fp)
    d3fc:	10003705 	stb	zero,220(r2)
    d400:	e0bff917 	ldw	r2,-28(fp)
    d404:	10003d15 	stw	zero,244(r2)
    d408:	e0bff917 	ldw	r2,-28(fp)
    d40c:	10005215 	stw	zero,328(r2)
    d410:	e0bff917 	ldw	r2,-28(fp)
    d414:	10005315 	stw	zero,332(r2)
    d418:	e0bff917 	ldw	r2,-28(fp)
    d41c:	10005415 	stw	zero,336(r2)
    d420:	e0bff917 	ldw	r2,-28(fp)
    d424:	10005515 	stw	zero,340(r2)
    d428:	e0bff917 	ldw	r2,-28(fp)
    d42c:	1000b515 	stw	zero,724(r2)
    d430:	e0bff917 	ldw	r2,-28(fp)
    d434:	10007515 	stw	zero,468(r2)
    d438:	e0bff917 	ldw	r2,-28(fp)
    d43c:	1000b715 	stw	zero,732(r2)
    d440:	e0bff917 	ldw	r2,-28(fp)
    d444:	1000b815 	stw	zero,736(r2)
    d448:	e0bff917 	ldw	r2,-28(fp)
    d44c:	1000b915 	stw	zero,740(r2)
    d450:	e0bff917 	ldw	r2,-28(fp)
    d454:	1000ba15 	stw	zero,744(r2)
    d458:	e0bff917 	ldw	r2,-28(fp)
    d45c:	1080bb04 	addi	r2,r2,748
    d460:	1009883a 	mov	r4,r2
    d464:	000b883a 	mov	r5,zero
    d468:	01804504 	movi	r6,276
    d46c:	00027940 	call	2794 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    d470:	e0bff917 	ldw	r2,-28(fp)
    d474:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    d478:	e0bffa17 	ldw	r2,-24(fp)
    d47c:	10bff304 	addi	r2,r2,-52
    d480:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    d484:	e0bffb17 	ldw	r2,-20(fp)
    d488:	10800c04 	addi	r2,r2,48
    d48c:	e0fffc17 	ldw	r3,-16(fp)
    d490:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    d494:	e0bffb17 	ldw	r2,-20(fp)
    d498:	10800b04 	addi	r2,r2,44
    d49c:	e0fffd17 	ldw	r3,-12(fp)
    d4a0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    d4a4:	e0bffb17 	ldw	r2,-20(fp)
    d4a8:	10800a04 	addi	r2,r2,40
    d4ac:	e0fff917 	ldw	r3,-28(fp)
    d4b0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    d4b4:	00800074 	movhi	r2,1
    d4b8:	10b47204 	addi	r2,r2,-11832
    d4bc:	10c00104 	addi	r3,r2,4
    d4c0:	e0bffb17 	ldw	r2,-20(fp)
    d4c4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    d4c8:	e0bffb17 	ldw	r2,-20(fp)
}
    d4cc:	e037883a 	mov	sp,fp
    d4d0:	dfc00117 	ldw	ra,4(sp)
    d4d4:	df000017 	ldw	fp,0(sp)
    d4d8:	dec00204 	addi	sp,sp,8
    d4dc:	f800283a 	ret

0000d4e0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    d4e0:	defffe04 	addi	sp,sp,-8
    d4e4:	df000115 	stw	fp,4(sp)
    d4e8:	df000104 	addi	fp,sp,4
    d4ec:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    d4f0:	e037883a 	mov	sp,fp
    d4f4:	df000017 	ldw	fp,0(sp)
    d4f8:	dec00104 	addi	sp,sp,4
    d4fc:	f800283a 	ret

0000d500 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    d500:	defffe04 	addi	sp,sp,-8
    d504:	df000115 	stw	fp,4(sp)
    d508:	df000104 	addi	fp,sp,4
    d50c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    d510:	e037883a 	mov	sp,fp
    d514:	df000017 	ldw	fp,0(sp)
    d518:	dec00104 	addi	sp,sp,4
    d51c:	f800283a 	ret

0000d520 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    d520:	deffff04 	addi	sp,sp,-4
    d524:	df000015 	stw	fp,0(sp)
    d528:	d839883a 	mov	fp,sp
}
    d52c:	e037883a 	mov	sp,fp
    d530:	df000017 	ldw	fp,0(sp)
    d534:	dec00104 	addi	sp,sp,4
    d538:	f800283a 	ret

0000d53c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    d53c:	deffff04 	addi	sp,sp,-4
    d540:	df000015 	stw	fp,0(sp)
    d544:	d839883a 	mov	fp,sp
}
    d548:	e037883a 	mov	sp,fp
    d54c:	df000017 	ldw	fp,0(sp)
    d550:	dec00104 	addi	sp,sp,4
    d554:	f800283a 	ret

0000d558 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    d558:	deffff04 	addi	sp,sp,-4
    d55c:	df000015 	stw	fp,0(sp)
    d560:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    d564:	e037883a 	mov	sp,fp
    d568:	df000017 	ldw	fp,0(sp)
    d56c:	dec00104 	addi	sp,sp,4
    d570:	f800283a 	ret

0000d574 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    d574:	deffff04 	addi	sp,sp,-4
    d578:	df000015 	stw	fp,0(sp)
    d57c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    d580:	e037883a 	mov	sp,fp
    d584:	df000017 	ldw	fp,0(sp)
    d588:	dec00104 	addi	sp,sp,4
    d58c:	f800283a 	ret

0000d590 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    d590:	deffff04 	addi	sp,sp,-4
    d594:	df000015 	stw	fp,0(sp)
    d598:	d839883a 	mov	fp,sp
}
    d59c:	e037883a 	mov	sp,fp
    d5a0:	df000017 	ldw	fp,0(sp)
    d5a4:	dec00104 	addi	sp,sp,4
    d5a8:	f800283a 	ret

0000d5ac <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    d5ac:	deffff04 	addi	sp,sp,-4
    d5b0:	df000015 	stw	fp,0(sp)
    d5b4:	d839883a 	mov	fp,sp
}
    d5b8:	e037883a 	mov	sp,fp
    d5bc:	df000017 	ldw	fp,0(sp)
    d5c0:	dec00104 	addi	sp,sp,4
    d5c4:	f800283a 	ret

0000d5c8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    d5c8:	defffe04 	addi	sp,sp,-8
    d5cc:	df000115 	stw	fp,4(sp)
    d5d0:	df000104 	addi	fp,sp,4
    d5d4:	e13fff15 	stw	r4,-4(fp)
}
    d5d8:	e037883a 	mov	sp,fp
    d5dc:	df000017 	ldw	fp,0(sp)
    d5e0:	dec00104 	addi	sp,sp,4
    d5e4:	f800283a 	ret

0000d5e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d5e8:	defffa04 	addi	sp,sp,-24
    d5ec:	dfc00515 	stw	ra,20(sp)
    d5f0:	df000415 	stw	fp,16(sp)
    d5f4:	df000404 	addi	fp,sp,16
    d5f8:	e13ffe15 	stw	r4,-8(fp)
    d5fc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d600:	e0bfff17 	ldw	r2,-4(fp)
    d604:	10800017 	ldw	r2,0(r2)
    d608:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d60c:	e13ffe17 	ldw	r4,-8(fp)
    d610:	00003b00 	call	3b0 <strlen>
    d614:	10800044 	addi	r2,r2,1
    d618:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d61c:	00000d06 	br	d654 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d620:	e0bffc17 	ldw	r2,-16(fp)
    d624:	10c00217 	ldw	r3,8(r2)
    d628:	e0bffd17 	ldw	r2,-12(fp)
    d62c:	1809883a 	mov	r4,r3
    d630:	e17ffe17 	ldw	r5,-8(fp)
    d634:	100d883a 	mov	r6,r2
    d638:	000d9600 	call	d960 <memcmp>
    d63c:	1000021e 	bne	r2,zero,d648 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d640:	e0bffc17 	ldw	r2,-16(fp)
    d644:	00000706 	br	d664 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d648:	e0bffc17 	ldw	r2,-16(fp)
    d64c:	10800017 	ldw	r2,0(r2)
    d650:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d654:	e0fffc17 	ldw	r3,-16(fp)
    d658:	e0bfff17 	ldw	r2,-4(fp)
    d65c:	18bff01e 	bne	r3,r2,d620 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d660:	0005883a 	mov	r2,zero
}
    d664:	e037883a 	mov	sp,fp
    d668:	dfc00117 	ldw	ra,4(sp)
    d66c:	df000017 	ldw	fp,0(sp)
    d670:	dec00204 	addi	sp,sp,8
    d674:	f800283a 	ret

0000d678 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d678:	defffb04 	addi	sp,sp,-20
    d67c:	dfc00415 	stw	ra,16(sp)
    d680:	df000315 	stw	fp,12(sp)
    d684:	df000304 	addi	fp,sp,12
    d688:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d68c:	00800074 	movhi	r2,1
    d690:	1082fd04 	addi	r2,r2,3060
    d694:	10800017 	ldw	r2,0(r2)
    d698:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d69c:	00003106 	br	d764 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    d6a0:	e0bffd17 	ldw	r2,-12(fp)
    d6a4:	10800217 	ldw	r2,8(r2)
    d6a8:	1009883a 	mov	r4,r2
    d6ac:	00003b00 	call	3b0 <strlen>
    d6b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    d6b4:	e0bffd17 	ldw	r2,-12(fp)
    d6b8:	10c00217 	ldw	r3,8(r2)
    d6bc:	e0bffe17 	ldw	r2,-8(fp)
    d6c0:	10bfffc4 	addi	r2,r2,-1
    d6c4:	1885883a 	add	r2,r3,r2
    d6c8:	10800003 	ldbu	r2,0(r2)
    d6cc:	10803fcc 	andi	r2,r2,255
    d6d0:	1080201c 	xori	r2,r2,128
    d6d4:	10bfe004 	addi	r2,r2,-128
    d6d8:	10800bd8 	cmpnei	r2,r2,47
    d6dc:	1000031e 	bne	r2,zero,d6ec <alt_find_file+0x74>
    {
      len -= 1;
    d6e0:	e0bffe17 	ldw	r2,-8(fp)
    d6e4:	10bfffc4 	addi	r2,r2,-1
    d6e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d6ec:	e0bffe17 	ldw	r2,-8(fp)
    d6f0:	e0ffff17 	ldw	r3,-4(fp)
    d6f4:	1885883a 	add	r2,r3,r2
    d6f8:	10800003 	ldbu	r2,0(r2)
    d6fc:	10803fcc 	andi	r2,r2,255
    d700:	1080201c 	xori	r2,r2,128
    d704:	10bfe004 	addi	r2,r2,-128
    d708:	10800be0 	cmpeqi	r2,r2,47
    d70c:	1000081e 	bne	r2,zero,d730 <alt_find_file+0xb8>
    d710:	e0bffe17 	ldw	r2,-8(fp)
    d714:	e0ffff17 	ldw	r3,-4(fp)
    d718:	1885883a 	add	r2,r3,r2
    d71c:	10800003 	ldbu	r2,0(r2)
    d720:	10803fcc 	andi	r2,r2,255
    d724:	1080201c 	xori	r2,r2,128
    d728:	10bfe004 	addi	r2,r2,-128
    d72c:	10000a1e 	bne	r2,zero,d758 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    d730:	e0bffd17 	ldw	r2,-12(fp)
    d734:	10c00217 	ldw	r3,8(r2)
    d738:	e0bffe17 	ldw	r2,-8(fp)
    d73c:	1809883a 	mov	r4,r3
    d740:	e17fff17 	ldw	r5,-4(fp)
    d744:	100d883a 	mov	r6,r2
    d748:	000d9600 	call	d960 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d74c:	1000021e 	bne	r2,zero,d758 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d750:	e0bffd17 	ldw	r2,-12(fp)
    d754:	00000806 	br	d778 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    d758:	e0bffd17 	ldw	r2,-12(fp)
    d75c:	10800017 	ldw	r2,0(r2)
    d760:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d764:	e0fffd17 	ldw	r3,-12(fp)
    d768:	00800074 	movhi	r2,1
    d76c:	1082fd04 	addi	r2,r2,3060
    d770:	18bfcb1e 	bne	r3,r2,d6a0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d774:	0005883a 	mov	r2,zero
}
    d778:	e037883a 	mov	sp,fp
    d77c:	dfc00117 	ldw	ra,4(sp)
    d780:	df000017 	ldw	fp,0(sp)
    d784:	dec00204 	addi	sp,sp,8
    d788:	f800283a 	ret

0000d78c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d78c:	defff904 	addi	sp,sp,-28
    d790:	dfc00615 	stw	ra,24(sp)
    d794:	df000515 	stw	fp,20(sp)
    d798:	df000504 	addi	fp,sp,20
    d79c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d7a0:	00bffa04 	movi	r2,-24
    d7a4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    d7a8:	00800074 	movhi	r2,1
    d7ac:	1089de04 	addi	r2,r2,10104
    d7b0:	10800017 	ldw	r2,0(r2)
    d7b4:	e0bffd15 	stw	r2,-12(fp)
    d7b8:	e03ffe0d 	sth	zero,-8(fp)
    d7bc:	e0fffe0b 	ldhu	r3,-8(fp)
    d7c0:	e0bffe84 	addi	r2,fp,-6
    d7c4:	e13ffd17 	ldw	r4,-12(fp)
    d7c8:	180b883a 	mov	r5,r3
    d7cc:	100d883a 	mov	r6,r2
    d7d0:	00091b80 	call	91b8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d7d4:	e03ffb15 	stw	zero,-20(fp)
    d7d8:	00001d06 	br	d850 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
    d7dc:	00c00074 	movhi	r3,1
    d7e0:	18fe7e04 	addi	r3,r3,-1544
    d7e4:	e0bffb17 	ldw	r2,-20(fp)
    d7e8:	10800324 	muli	r2,r2,12
    d7ec:	1885883a 	add	r2,r3,r2
    d7f0:	10800017 	ldw	r2,0(r2)
    d7f4:	1000131e 	bne	r2,zero,d844 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
    d7f8:	00c00074 	movhi	r3,1
    d7fc:	18fe7e04 	addi	r3,r3,-1544
    d800:	e0bffb17 	ldw	r2,-20(fp)
    d804:	10800324 	muli	r2,r2,12
    d808:	1885883a 	add	r2,r3,r2
    d80c:	e0ffff17 	ldw	r3,-4(fp)
    d810:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    d814:	00800074 	movhi	r2,1
    d818:	10830104 	addi	r2,r2,3076
    d81c:	10c00017 	ldw	r3,0(r2)
    d820:	e0bffb17 	ldw	r2,-20(fp)
    d824:	1880040e 	bge	r3,r2,d838 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
    d828:	00800074 	movhi	r2,1
    d82c:	10830104 	addi	r2,r2,3076
    d830:	e0fffb17 	ldw	r3,-20(fp)
    d834:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    d838:	e0bffb17 	ldw	r2,-20(fp)
    d83c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    d840:	00000606 	br	d85c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d844:	e0bffb17 	ldw	r2,-20(fp)
    d848:	10800044 	addi	r2,r2,1
    d84c:	e0bffb15 	stw	r2,-20(fp)
    d850:	e0bffb17 	ldw	r2,-20(fp)
    d854:	10800810 	cmplti	r2,r2,32
    d858:	103fe01e 	bne	r2,zero,d7dc <alt_get_fd+0x50>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    d85c:	00800074 	movhi	r2,1
    d860:	1089de04 	addi	r2,r2,10104
    d864:	10800017 	ldw	r2,0(r2)
    d868:	1009883a 	mov	r4,r2
    d86c:	00095980 	call	9598 <OSSemPost>

  return rc;
    d870:	e0bffc17 	ldw	r2,-16(fp)
}
    d874:	e037883a 	mov	sp,fp
    d878:	dfc00117 	ldw	ra,4(sp)
    d87c:	df000017 	ldw	fp,0(sp)
    d880:	dec00204 	addi	sp,sp,8
    d884:	f800283a 	ret

0000d888 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d888:	defffb04 	addi	sp,sp,-20
    d88c:	df000415 	stw	fp,16(sp)
    d890:	df000404 	addi	fp,sp,16
    d894:	e13ffe15 	stw	r4,-8(fp)
    d898:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d89c:	e0bfff17 	ldw	r2,-4(fp)
    d8a0:	10840070 	cmpltui	r2,r2,4097
    d8a4:	1000021e 	bne	r2,zero,d8b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d8a8:	00840004 	movi	r2,4096
    d8ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    d8b0:	e0fffe17 	ldw	r3,-8(fp)
    d8b4:	e0bfff17 	ldw	r2,-4(fp)
    d8b8:	1885883a 	add	r2,r3,r2
    d8bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d8c0:	e0bffe17 	ldw	r2,-8(fp)
    d8c4:	e0bffc15 	stw	r2,-16(fp)
    d8c8:	00000506 	br	d8e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d8cc:	e0bffc17 	ldw	r2,-16(fp)
    d8d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d8d4:	e0bffc17 	ldw	r2,-16(fp)
    d8d8:	10800804 	addi	r2,r2,32
    d8dc:	e0bffc15 	stw	r2,-16(fp)
    d8e0:	e0fffc17 	ldw	r3,-16(fp)
    d8e4:	e0bffd17 	ldw	r2,-12(fp)
    d8e8:	18bff836 	bltu	r3,r2,d8cc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    d8ec:	e0bffe17 	ldw	r2,-8(fp)
    d8f0:	108007cc 	andi	r2,r2,31
    d8f4:	10000226 	beq	r2,zero,d900 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    d8f8:	e0bffc17 	ldw	r2,-16(fp)
    d8fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    d900:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    d904:	e037883a 	mov	sp,fp
    d908:	df000017 	ldw	fp,0(sp)
    d90c:	dec00104 	addi	sp,sp,4
    d910:	f800283a 	ret

0000d914 <atexit>:
    d914:	200b883a 	mov	r5,r4
    d918:	000d883a 	mov	r6,zero
    d91c:	0009883a 	mov	r4,zero
    d920:	000f883a 	mov	r7,zero
    d924:	000d9dc1 	jmpi	d9dc <__register_exitproc>

0000d928 <exit>:
    d928:	defffe04 	addi	sp,sp,-8
    d92c:	000b883a 	mov	r5,zero
    d930:	dc000015 	stw	r16,0(sp)
    d934:	dfc00115 	stw	ra,4(sp)
    d938:	2021883a 	mov	r16,r4
    d93c:	000db0c0 	call	db0c <__call_exitprocs>
    d940:	00800074 	movhi	r2,1
    d944:	1082f904 	addi	r2,r2,3044
    d948:	11000017 	ldw	r4,0(r2)
    d94c:	20800f17 	ldw	r2,60(r4)
    d950:	10000126 	beq	r2,zero,d958 <exit+0x30>
    d954:	103ee83a 	callr	r2
    d958:	8009883a 	mov	r4,r16
    d95c:	000eee00 	call	eee0 <_exit>

0000d960 <memcmp>:
    d960:	01c000c4 	movi	r7,3
    d964:	3980192e 	bgeu	r7,r6,d9cc <memcmp+0x6c>
    d968:	2904b03a 	or	r2,r5,r4
    d96c:	11c4703a 	and	r2,r2,r7
    d970:	10000f26 	beq	r2,zero,d9b0 <memcmp+0x50>
    d974:	20c00003 	ldbu	r3,0(r4)
    d978:	28800003 	ldbu	r2,0(r5)
    d97c:	1880151e 	bne	r3,r2,d9d4 <memcmp+0x74>
    d980:	31bfff84 	addi	r6,r6,-2
    d984:	01ffffc4 	movi	r7,-1
    d988:	00000406 	br	d99c <memcmp+0x3c>
    d98c:	20c00003 	ldbu	r3,0(r4)
    d990:	28800003 	ldbu	r2,0(r5)
    d994:	31bfffc4 	addi	r6,r6,-1
    d998:	18800e1e 	bne	r3,r2,d9d4 <memcmp+0x74>
    d99c:	21000044 	addi	r4,r4,1
    d9a0:	29400044 	addi	r5,r5,1
    d9a4:	31fff91e 	bne	r6,r7,d98c <memcmp+0x2c>
    d9a8:	0005883a 	mov	r2,zero
    d9ac:	f800283a 	ret
    d9b0:	20c00017 	ldw	r3,0(r4)
    d9b4:	28800017 	ldw	r2,0(r5)
    d9b8:	1880041e 	bne	r3,r2,d9cc <memcmp+0x6c>
    d9bc:	31bfff04 	addi	r6,r6,-4
    d9c0:	21000104 	addi	r4,r4,4
    d9c4:	29400104 	addi	r5,r5,4
    d9c8:	39bff936 	bltu	r7,r6,d9b0 <memcmp+0x50>
    d9cc:	303fe91e 	bne	r6,zero,d974 <memcmp+0x14>
    d9d0:	003ff506 	br	d9a8 <memcmp+0x48>
    d9d4:	1885c83a 	sub	r2,r3,r2
    d9d8:	f800283a 	ret

0000d9dc <__register_exitproc>:
    d9dc:	defffa04 	addi	sp,sp,-24
    d9e0:	00800074 	movhi	r2,1
    d9e4:	1082f904 	addi	r2,r2,3044
    d9e8:	dc000315 	stw	r16,12(sp)
    d9ec:	14000017 	ldw	r16,0(r2)
    d9f0:	dc400415 	stw	r17,16(sp)
    d9f4:	dfc00515 	stw	ra,20(sp)
    d9f8:	80805217 	ldw	r2,328(r16)
    d9fc:	2023883a 	mov	r17,r4
    da00:	10003e26 	beq	r2,zero,dafc <__register_exitproc+0x120>
    da04:	10c00117 	ldw	r3,4(r2)
    da08:	020007c4 	movi	r8,31
    da0c:	40c0180e 	bge	r8,r3,da70 <__register_exitproc+0x94>
    da10:	00800034 	movhi	r2,0
    da14:	10800004 	addi	r2,r2,0
    da18:	1000061e 	bne	r2,zero,da34 <__register_exitproc+0x58>
    da1c:	00bfffc4 	movi	r2,-1
    da20:	dfc00517 	ldw	ra,20(sp)
    da24:	dc400417 	ldw	r17,16(sp)
    da28:	dc000317 	ldw	r16,12(sp)
    da2c:	dec00604 	addi	sp,sp,24
    da30:	f800283a 	ret
    da34:	01006404 	movi	r4,400
    da38:	d9400015 	stw	r5,0(sp)
    da3c:	d9800115 	stw	r6,4(sp)
    da40:	d9c00215 	stw	r7,8(sp)
    da44:	00000000 	call	0 <__reset>
    da48:	d9400017 	ldw	r5,0(sp)
    da4c:	d9800117 	ldw	r6,4(sp)
    da50:	d9c00217 	ldw	r7,8(sp)
    da54:	103ff126 	beq	r2,zero,da1c <__register_exitproc+0x40>
    da58:	80c05217 	ldw	r3,328(r16)
    da5c:	10000115 	stw	zero,4(r2)
    da60:	10c00015 	stw	r3,0(r2)
    da64:	80805215 	stw	r2,328(r16)
    da68:	10006215 	stw	zero,392(r2)
    da6c:	10006315 	stw	zero,396(r2)
    da70:	10c00117 	ldw	r3,4(r2)
    da74:	88000d1e 	bne	r17,zero,daac <__register_exitproc+0xd0>
    da78:	19000084 	addi	r4,r3,2
    da7c:	2109883a 	add	r4,r4,r4
    da80:	18c00044 	addi	r3,r3,1
    da84:	2109883a 	add	r4,r4,r4
    da88:	1109883a 	add	r4,r2,r4
    da8c:	10c00115 	stw	r3,4(r2)
    da90:	0005883a 	mov	r2,zero
    da94:	21400015 	stw	r5,0(r4)
    da98:	dfc00517 	ldw	ra,20(sp)
    da9c:	dc400417 	ldw	r17,16(sp)
    daa0:	dc000317 	ldw	r16,12(sp)
    daa4:	dec00604 	addi	sp,sp,24
    daa8:	f800283a 	ret
    daac:	02400044 	movi	r9,1
    dab0:	12806217 	ldw	r10,392(r2)
    dab4:	48d2983a 	sll	r9,r9,r3
    dab8:	19000804 	addi	r4,r3,32
    dabc:	18d1883a 	add	r8,r3,r3
    dac0:	2109883a 	add	r4,r4,r4
    dac4:	4211883a 	add	r8,r8,r8
    dac8:	2109883a 	add	r4,r4,r4
    dacc:	1109883a 	add	r4,r2,r4
    dad0:	1211883a 	add	r8,r2,r8
    dad4:	5254b03a 	or	r10,r10,r9
    dad8:	21c02215 	stw	r7,136(r4)
    dadc:	41802215 	stw	r6,136(r8)
    dae0:	12806215 	stw	r10,392(r2)
    dae4:	01000084 	movi	r4,2
    dae8:	893fe31e 	bne	r17,r4,da78 <__register_exitproc+0x9c>
    daec:	11006317 	ldw	r4,396(r2)
    daf0:	2252b03a 	or	r9,r4,r9
    daf4:	12406315 	stw	r9,396(r2)
    daf8:	003fdf06 	br	da78 <__register_exitproc+0x9c>
    dafc:	008000b4 	movhi	r2,2
    db00:	10a93d04 	addi	r2,r2,-23308
    db04:	80805215 	stw	r2,328(r16)
    db08:	003fbe06 	br	da04 <__register_exitproc+0x28>

0000db0c <__call_exitprocs>:
    db0c:	00800074 	movhi	r2,1
    db10:	1082f904 	addi	r2,r2,3044
    db14:	10800017 	ldw	r2,0(r2)
    db18:	defff304 	addi	sp,sp,-52
    db1c:	df000b15 	stw	fp,44(sp)
    db20:	d8800015 	stw	r2,0(sp)
    db24:	10805204 	addi	r2,r2,328
    db28:	dd400815 	stw	r21,32(sp)
    db2c:	dfc00c15 	stw	ra,48(sp)
    db30:	ddc00a15 	stw	r23,40(sp)
    db34:	dd800915 	stw	r22,36(sp)
    db38:	dd000715 	stw	r20,28(sp)
    db3c:	dcc00615 	stw	r19,24(sp)
    db40:	dc800515 	stw	r18,20(sp)
    db44:	dc400415 	stw	r17,16(sp)
    db48:	dc000315 	stw	r16,12(sp)
    db4c:	d9000115 	stw	r4,4(sp)
    db50:	2839883a 	mov	fp,r5
    db54:	d8800215 	stw	r2,8(sp)
    db58:	057fffc4 	movi	r21,-1
    db5c:	d8800017 	ldw	r2,0(sp)
    db60:	ddc00217 	ldw	r23,8(sp)
    db64:	14805217 	ldw	r18,328(r2)
    db68:	90001726 	beq	r18,zero,dbc8 <__call_exitprocs+0xbc>
    db6c:	94400117 	ldw	r17,4(r18)
    db70:	8c3fffc4 	addi	r16,r17,-1
    db74:	80001116 	blt	r16,zero,dbbc <__call_exitprocs+0xb0>
    db78:	8c400044 	addi	r17,r17,1
    db7c:	8427883a 	add	r19,r16,r16
    db80:	8c63883a 	add	r17,r17,r17
    db84:	95802204 	addi	r22,r18,136
    db88:	9ce7883a 	add	r19,r19,r19
    db8c:	8c63883a 	add	r17,r17,r17
    db90:	b4e7883a 	add	r19,r22,r19
    db94:	9463883a 	add	r17,r18,r17
    db98:	e0001726 	beq	fp,zero,dbf8 <__call_exitprocs+0xec>
    db9c:	8c87c83a 	sub	r3,r17,r18
    dba0:	b0c7883a 	add	r3,r22,r3
    dba4:	18c01e17 	ldw	r3,120(r3)
    dba8:	1f001326 	beq	r3,fp,dbf8 <__call_exitprocs+0xec>
    dbac:	843fffc4 	addi	r16,r16,-1
    dbb0:	9cffff04 	addi	r19,r19,-4
    dbb4:	8c7fff04 	addi	r17,r17,-4
    dbb8:	857ff71e 	bne	r16,r21,db98 <__call_exitprocs+0x8c>
    dbbc:	00800034 	movhi	r2,0
    dbc0:	10800004 	addi	r2,r2,0
    dbc4:	10002a1e 	bne	r2,zero,dc70 <__call_exitprocs+0x164>
    dbc8:	dfc00c17 	ldw	ra,48(sp)
    dbcc:	df000b17 	ldw	fp,44(sp)
    dbd0:	ddc00a17 	ldw	r23,40(sp)
    dbd4:	dd800917 	ldw	r22,36(sp)
    dbd8:	dd400817 	ldw	r21,32(sp)
    dbdc:	dd000717 	ldw	r20,28(sp)
    dbe0:	dcc00617 	ldw	r19,24(sp)
    dbe4:	dc800517 	ldw	r18,20(sp)
    dbe8:	dc400417 	ldw	r17,16(sp)
    dbec:	dc000317 	ldw	r16,12(sp)
    dbf0:	dec00d04 	addi	sp,sp,52
    dbf4:	f800283a 	ret
    dbf8:	91000117 	ldw	r4,4(r18)
    dbfc:	88c00017 	ldw	r3,0(r17)
    dc00:	213fffc4 	addi	r4,r4,-1
    dc04:	24001526 	beq	r4,r16,dc5c <__call_exitprocs+0x150>
    dc08:	88000015 	stw	zero,0(r17)
    dc0c:	183fe726 	beq	r3,zero,dbac <__call_exitprocs+0xa0>
    dc10:	00800044 	movi	r2,1
    dc14:	1408983a 	sll	r4,r2,r16
    dc18:	91406217 	ldw	r5,392(r18)
    dc1c:	95000117 	ldw	r20,4(r18)
    dc20:	214a703a 	and	r5,r4,r5
    dc24:	28000b26 	beq	r5,zero,dc54 <__call_exitprocs+0x148>
    dc28:	91406317 	ldw	r5,396(r18)
    dc2c:	2148703a 	and	r4,r4,r5
    dc30:	20000c1e 	bne	r4,zero,dc64 <__call_exitprocs+0x158>
    dc34:	99400017 	ldw	r5,0(r19)
    dc38:	d9000117 	ldw	r4,4(sp)
    dc3c:	183ee83a 	callr	r3
    dc40:	90c00117 	ldw	r3,4(r18)
    dc44:	1d3fc51e 	bne	r3,r20,db5c <__call_exitprocs+0x50>
    dc48:	b8c00017 	ldw	r3,0(r23)
    dc4c:	1cbfd726 	beq	r3,r18,dbac <__call_exitprocs+0xa0>
    dc50:	003fc206 	br	db5c <__call_exitprocs+0x50>
    dc54:	183ee83a 	callr	r3
    dc58:	003ff906 	br	dc40 <__call_exitprocs+0x134>
    dc5c:	94000115 	stw	r16,4(r18)
    dc60:	003fea06 	br	dc0c <__call_exitprocs+0x100>
    dc64:	99000017 	ldw	r4,0(r19)
    dc68:	183ee83a 	callr	r3
    dc6c:	003ff406 	br	dc40 <__call_exitprocs+0x134>
    dc70:	90c00117 	ldw	r3,4(r18)
    dc74:	1800071e 	bne	r3,zero,dc94 <__call_exitprocs+0x188>
    dc78:	90c00017 	ldw	r3,0(r18)
    dc7c:	18000926 	beq	r3,zero,dca4 <__call_exitprocs+0x198>
    dc80:	9009883a 	mov	r4,r18
    dc84:	b8c00015 	stw	r3,0(r23)
    dc88:	00000000 	call	0 <__reset>
    dc8c:	bc800017 	ldw	r18,0(r23)
    dc90:	003fb506 	br	db68 <__call_exitprocs+0x5c>
    dc94:	90c00017 	ldw	r3,0(r18)
    dc98:	902f883a 	mov	r23,r18
    dc9c:	1825883a 	mov	r18,r3
    dca0:	003fb106 	br	db68 <__call_exitprocs+0x5c>
    dca4:	0007883a 	mov	r3,zero
    dca8:	003ffb06 	br	dc98 <__call_exitprocs+0x18c>

0000dcac <__fixunsdfsi>:
    dcac:	defffd04 	addi	sp,sp,-12
    dcb0:	000d883a 	mov	r6,zero
    dcb4:	01d07834 	movhi	r7,16864
    dcb8:	dc400115 	stw	r17,4(sp)
    dcbc:	dc000015 	stw	r16,0(sp)
    dcc0:	dfc00215 	stw	ra,8(sp)
    dcc4:	2023883a 	mov	r17,r4
    dcc8:	2821883a 	mov	r16,r5
    dccc:	000e5d00 	call	e5d0 <__gedf2>
    dcd0:	1000080e 	bge	r2,zero,dcf4 <__fixunsdfsi+0x48>
    dcd4:	8809883a 	mov	r4,r17
    dcd8:	800b883a 	mov	r5,r16
    dcdc:	000e6340 	call	e634 <__fixdfsi>
    dce0:	dfc00217 	ldw	ra,8(sp)
    dce4:	dc400117 	ldw	r17,4(sp)
    dce8:	dc000017 	ldw	r16,0(sp)
    dcec:	dec00304 	addi	sp,sp,12
    dcf0:	f800283a 	ret
    dcf4:	000d883a 	mov	r6,zero
    dcf8:	01d07834 	movhi	r7,16864
    dcfc:	8809883a 	mov	r4,r17
    dd00:	800b883a 	mov	r5,r16
    dd04:	000e0d80 	call	e0d8 <__subdf3>
    dd08:	180b883a 	mov	r5,r3
    dd0c:	1009883a 	mov	r4,r2
    dd10:	000e6340 	call	e634 <__fixdfsi>
    dd14:	00e00034 	movhi	r3,32768
    dd18:	10c5883a 	add	r2,r2,r3
    dd1c:	dfc00217 	ldw	ra,8(sp)
    dd20:	dc400117 	ldw	r17,4(sp)
    dd24:	dc000017 	ldw	r16,0(sp)
    dd28:	dec00304 	addi	sp,sp,12
    dd2c:	f800283a 	ret

0000dd30 <_fpadd_parts>:
    dd30:	2005883a 	mov	r2,r4
    dd34:	21000017 	ldw	r4,0(r4)
    dd38:	01c00044 	movi	r7,1
    dd3c:	3900622e 	bgeu	r7,r4,dec8 <_fpadd_parts+0x198>
    dd40:	28c00017 	ldw	r3,0(r5)
    dd44:	38c05f2e 	bgeu	r7,r3,dec4 <_fpadd_parts+0x194>
    dd48:	01c00104 	movi	r7,4
    dd4c:	21c0c626 	beq	r4,r7,e068 <_fpadd_parts+0x338>
    dd50:	19c05c26 	beq	r3,r7,dec4 <_fpadd_parts+0x194>
    dd54:	01c00084 	movi	r7,2
    dd58:	19c06b26 	beq	r3,r7,df08 <_fpadd_parts+0x1d8>
    dd5c:	21c05926 	beq	r4,r7,dec4 <_fpadd_parts+0x194>
    dd60:	11c00217 	ldw	r7,8(r2)
    dd64:	2ac00217 	ldw	r11,8(r5)
    dd68:	13000317 	ldw	r12,12(r2)
    dd6c:	13400417 	ldw	r13,16(r2)
    dd70:	3ac9c83a 	sub	r4,r7,r11
    dd74:	2a000317 	ldw	r8,12(r5)
    dd78:	2a400417 	ldw	r9,16(r5)
    dd7c:	2015883a 	mov	r10,r4
    dd80:	20007516 	blt	r4,zero,df58 <_fpadd_parts+0x228>
    dd84:	00c00fc4 	movi	r3,63
    dd88:	1a805016 	blt	r3,r10,decc <_fpadd_parts+0x19c>
    dd8c:	0100870e 	bge	zero,r4,dfac <_fpadd_parts+0x27c>
    dd90:	50fff804 	addi	r3,r10,-32
    dd94:	18009916 	blt	r3,zero,dffc <_fpadd_parts+0x2cc>
    dd98:	48d6d83a 	srl	r11,r9,r3
    dd9c:	001d883a 	mov	r14,zero
    dda0:	18009e16 	blt	r3,zero,e01c <_fpadd_parts+0x2ec>
    dda4:	01000044 	movi	r4,1
    dda8:	20c6983a 	sll	r3,r4,r3
    ddac:	0015883a 	mov	r10,zero
    ddb0:	513fffc4 	addi	r4,r10,-1
    ddb4:	2295403a 	cmpgeu	r10,r4,r10
    ddb8:	1a87c83a 	sub	r3,r3,r10
    ddbc:	1a52703a 	and	r9,r3,r9
    ddc0:	2210703a 	and	r8,r4,r8
    ddc4:	4250b03a 	or	r8,r8,r9
    ddc8:	4010c03a 	cmpne	r8,r8,zero
    ddcc:	42d0b03a 	or	r8,r8,r11
    ddd0:	7013883a 	mov	r9,r14
    ddd4:	11000117 	ldw	r4,4(r2)
    ddd8:	28800117 	ldw	r2,4(r5)
    dddc:	20804126 	beq	r4,r2,dee4 <_fpadd_parts+0x1b4>
    dde0:	20006326 	beq	r4,zero,df70 <_fpadd_parts+0x240>
    dde4:	4305c83a 	sub	r2,r8,r12
    dde8:	4091803a 	cmpltu	r8,r8,r2
    ddec:	4b47c83a 	sub	r3,r9,r13
    ddf0:	1a07c83a 	sub	r3,r3,r8
    ddf4:	18006316 	blt	r3,zero,df84 <_fpadd_parts+0x254>
    ddf8:	30000115 	stw	zero,4(r6)
    ddfc:	31c00215 	stw	r7,8(r6)
    de00:	30800315 	stw	r2,12(r6)
    de04:	30c00415 	stw	r3,16(r6)
    de08:	11ffffc4 	addi	r7,r2,-1
    de0c:	388b403a 	cmpgeu	r5,r7,r2
    de10:	194bc83a 	sub	r5,r3,r5
    de14:	01040034 	movhi	r4,4096
    de18:	213fffc4 	addi	r4,r4,-1
    de1c:	21401736 	bltu	r4,r5,de7c <_fpadd_parts+0x14c>
    de20:	29008226 	beq	r5,r4,e02c <_fpadd_parts+0x2fc>
    de24:	31400217 	ldw	r5,8(r6)
    de28:	02840034 	movhi	r10,4096
    de2c:	52bfffc4 	addi	r10,r10,-1
    de30:	033fff84 	movi	r12,-2
    de34:	297fffc4 	addi	r5,r5,-1
    de38:	00000106 	br	de40 <_fpadd_parts+0x110>
    de3c:	3a804a26 	beq	r7,r10,df68 <_fpadd_parts+0x238>
    de40:	1089883a 	add	r4,r2,r2
    de44:	2091803a 	cmpltu	r8,r4,r2
    de48:	18c7883a 	add	r3,r3,r3
    de4c:	227fffc4 	addi	r9,r4,-1
    de50:	40d1883a 	add	r8,r8,r3
    de54:	490f403a 	cmpgeu	r7,r9,r4
    de58:	41cfc83a 	sub	r7,r8,r7
    de5c:	2817883a 	mov	r11,r5
    de60:	2005883a 	mov	r2,r4
    de64:	4007883a 	mov	r3,r8
    de68:	297fffc4 	addi	r5,r5,-1
    de6c:	51fff32e 	bgeu	r10,r7,de3c <_fpadd_parts+0x10c>
    de70:	31000315 	stw	r4,12(r6)
    de74:	32000415 	stw	r8,16(r6)
    de78:	32c00215 	stw	r11,8(r6)
    de7c:	010000c4 	movi	r4,3
    de80:	31000015 	stw	r4,0(r6)
    de84:	01080034 	movhi	r4,8192
    de88:	213fffc4 	addi	r4,r4,-1
    de8c:	20c00b2e 	bgeu	r4,r3,debc <_fpadd_parts+0x18c>
    de90:	180e97fa 	slli	r7,r3,31
    de94:	1008d07a 	srli	r4,r2,1
    de98:	31400217 	ldw	r5,8(r6)
    de9c:	1806d07a 	srli	r3,r3,1
    dea0:	1080004c 	andi	r2,r2,1
    dea4:	3908b03a 	or	r4,r7,r4
    dea8:	1108b03a 	or	r4,r2,r4
    deac:	29400044 	addi	r5,r5,1
    deb0:	31000315 	stw	r4,12(r6)
    deb4:	30c00415 	stw	r3,16(r6)
    deb8:	31400215 	stw	r5,8(r6)
    debc:	3005883a 	mov	r2,r6
    dec0:	f800283a 	ret
    dec4:	2805883a 	mov	r2,r5
    dec8:	f800283a 	ret
    decc:	59c01e0e 	bge	r11,r7,df48 <_fpadd_parts+0x218>
    ded0:	11000117 	ldw	r4,4(r2)
    ded4:	28800117 	ldw	r2,4(r5)
    ded8:	0011883a 	mov	r8,zero
    dedc:	0013883a 	mov	r9,zero
    dee0:	20bfbf1e 	bne	r4,r2,dde0 <_fpadd_parts+0xb0>
    dee4:	4305883a 	add	r2,r8,r12
    dee8:	1207803a 	cmpltu	r3,r2,r8
    deec:	4b53883a 	add	r9,r9,r13
    def0:	1a47883a 	add	r3,r3,r9
    def4:	31000115 	stw	r4,4(r6)
    def8:	31c00215 	stw	r7,8(r6)
    defc:	30800315 	stw	r2,12(r6)
    df00:	30c00415 	stw	r3,16(r6)
    df04:	003fdd06 	br	de7c <_fpadd_parts+0x14c>
    df08:	20ffef1e 	bne	r4,r3,dec8 <_fpadd_parts+0x198>
    df0c:	31000015 	stw	r4,0(r6)
    df10:	10c00117 	ldw	r3,4(r2)
    df14:	30c00115 	stw	r3,4(r6)
    df18:	10c00217 	ldw	r3,8(r2)
    df1c:	11000117 	ldw	r4,4(r2)
    df20:	29400117 	ldw	r5,4(r5)
    df24:	30c00215 	stw	r3,8(r6)
    df28:	10c00317 	ldw	r3,12(r2)
    df2c:	2908703a 	and	r4,r5,r4
    df30:	30c00315 	stw	r3,12(r6)
    df34:	10c00417 	ldw	r3,16(r2)
    df38:	31000115 	stw	r4,4(r6)
    df3c:	3005883a 	mov	r2,r6
    df40:	30c00415 	stw	r3,16(r6)
    df44:	f800283a 	ret
    df48:	580f883a 	mov	r7,r11
    df4c:	0019883a 	mov	r12,zero
    df50:	001b883a 	mov	r13,zero
    df54:	003f9f06 	br	ddd4 <_fpadd_parts+0xa4>
    df58:	0115c83a 	sub	r10,zero,r4
    df5c:	00c00fc4 	movi	r3,63
    df60:	1abfda16 	blt	r3,r10,decc <_fpadd_parts+0x19c>
    df64:	003f8906 	br	dd8c <_fpadd_parts+0x5c>
    df68:	627fb52e 	bgeu	r12,r9,de40 <_fpadd_parts+0x110>
    df6c:	003fc006 	br	de70 <_fpadd_parts+0x140>
    df70:	6205c83a 	sub	r2,r12,r8
    df74:	6099803a 	cmpltu	r12,r12,r2
    df78:	6a47c83a 	sub	r3,r13,r9
    df7c:	1b07c83a 	sub	r3,r3,r12
    df80:	183f9d0e 	bge	r3,zero,ddf8 <_fpadd_parts+0xc8>
    df84:	0085c83a 	sub	r2,zero,r2
    df88:	1008c03a 	cmpne	r4,r2,zero
    df8c:	00c7c83a 	sub	r3,zero,r3
    df90:	1907c83a 	sub	r3,r3,r4
    df94:	01000044 	movi	r4,1
    df98:	31000115 	stw	r4,4(r6)
    df9c:	31c00215 	stw	r7,8(r6)
    dfa0:	30800315 	stw	r2,12(r6)
    dfa4:	30c00415 	stw	r3,16(r6)
    dfa8:	003f9706 	br	de08 <_fpadd_parts+0xd8>
    dfac:	203f8926 	beq	r4,zero,ddd4 <_fpadd_parts+0xa4>
    dfb0:	50fff804 	addi	r3,r10,-32
    dfb4:	3a8f883a 	add	r7,r7,r10
    dfb8:	18002316 	blt	r3,zero,e048 <_fpadd_parts+0x318>
    dfbc:	68d6d83a 	srl	r11,r13,r3
    dfc0:	001d883a 	mov	r14,zero
    dfc4:	18001c16 	blt	r3,zero,e038 <_fpadd_parts+0x308>
    dfc8:	01000044 	movi	r4,1
    dfcc:	20c6983a 	sll	r3,r4,r3
    dfd0:	0015883a 	mov	r10,zero
    dfd4:	513fffc4 	addi	r4,r10,-1
    dfd8:	2295403a 	cmpgeu	r10,r4,r10
    dfdc:	1a87c83a 	sub	r3,r3,r10
    dfe0:	1b5a703a 	and	r13,r3,r13
    dfe4:	2318703a 	and	r12,r4,r12
    dfe8:	6358b03a 	or	r12,r12,r13
    dfec:	6018c03a 	cmpne	r12,r12,zero
    dff0:	62d8b03a 	or	r12,r12,r11
    dff4:	701b883a 	mov	r13,r14
    dff8:	003f7606 	br	ddd4 <_fpadd_parts+0xa4>
    dffc:	4808907a 	slli	r4,r9,1
    e000:	02c007c4 	movi	r11,31
    e004:	5a97c83a 	sub	r11,r11,r10
    e008:	22c8983a 	sll	r4,r4,r11
    e00c:	4296d83a 	srl	r11,r8,r10
    e010:	4a9cd83a 	srl	r14,r9,r10
    e014:	22d6b03a 	or	r11,r4,r11
    e018:	003f6106 	br	dda0 <_fpadd_parts+0x70>
    e01c:	00c00044 	movi	r3,1
    e020:	1a94983a 	sll	r10,r3,r10
    e024:	0007883a 	mov	r3,zero
    e028:	003f6106 	br	ddb0 <_fpadd_parts+0x80>
    e02c:	013fff84 	movi	r4,-2
    e030:	21ff7c2e 	bgeu	r4,r7,de24 <_fpadd_parts+0xf4>
    e034:	003f9106 	br	de7c <_fpadd_parts+0x14c>
    e038:	00c00044 	movi	r3,1
    e03c:	1a94983a 	sll	r10,r3,r10
    e040:	0007883a 	mov	r3,zero
    e044:	003fe306 	br	dfd4 <_fpadd_parts+0x2a4>
    e048:	6816907a 	slli	r11,r13,1
    e04c:	010007c4 	movi	r4,31
    e050:	2289c83a 	sub	r4,r4,r10
    e054:	5908983a 	sll	r4,r11,r4
    e058:	6296d83a 	srl	r11,r12,r10
    e05c:	6a9cd83a 	srl	r14,r13,r10
    e060:	22d6b03a 	or	r11,r4,r11
    e064:	003fd706 	br	dfc4 <_fpadd_parts+0x294>
    e068:	193f971e 	bne	r3,r4,dec8 <_fpadd_parts+0x198>
    e06c:	11000117 	ldw	r4,4(r2)
    e070:	28c00117 	ldw	r3,4(r5)
    e074:	20ff9426 	beq	r4,r3,dec8 <_fpadd_parts+0x198>
    e078:	00800074 	movhi	r2,1
    e07c:	10bc2d04 	addi	r2,r2,-3916
    e080:	f800283a 	ret

0000e084 <__adddf3>:
    e084:	deffec04 	addi	sp,sp,-80
    e088:	d9001115 	stw	r4,68(sp)
    e08c:	d9401215 	stw	r5,72(sp)
    e090:	d9001104 	addi	r4,sp,68
    e094:	d9400a04 	addi	r5,sp,40
    e098:	dfc01315 	stw	ra,76(sp)
    e09c:	d9c01015 	stw	r7,64(sp)
    e0a0:	d9800f15 	stw	r6,60(sp)
    e0a4:	000ec840 	call	ec84 <__unpack_d>
    e0a8:	d9000f04 	addi	r4,sp,60
    e0ac:	d9400504 	addi	r5,sp,20
    e0b0:	000ec840 	call	ec84 <__unpack_d>
    e0b4:	d9000a04 	addi	r4,sp,40
    e0b8:	d9400504 	addi	r5,sp,20
    e0bc:	d80d883a 	mov	r6,sp
    e0c0:	000dd300 	call	dd30 <_fpadd_parts>
    e0c4:	1009883a 	mov	r4,r2
    e0c8:	000ea600 	call	ea60 <__pack_d>
    e0cc:	dfc01317 	ldw	ra,76(sp)
    e0d0:	dec01404 	addi	sp,sp,80
    e0d4:	f800283a 	ret

0000e0d8 <__subdf3>:
    e0d8:	deffec04 	addi	sp,sp,-80
    e0dc:	d9001115 	stw	r4,68(sp)
    e0e0:	d9401215 	stw	r5,72(sp)
    e0e4:	d9001104 	addi	r4,sp,68
    e0e8:	d9400a04 	addi	r5,sp,40
    e0ec:	dfc01315 	stw	ra,76(sp)
    e0f0:	d9c01015 	stw	r7,64(sp)
    e0f4:	d9800f15 	stw	r6,60(sp)
    e0f8:	000ec840 	call	ec84 <__unpack_d>
    e0fc:	d9000f04 	addi	r4,sp,60
    e100:	d9400504 	addi	r5,sp,20
    e104:	000ec840 	call	ec84 <__unpack_d>
    e108:	d8800617 	ldw	r2,24(sp)
    e10c:	d9000a04 	addi	r4,sp,40
    e110:	d9400504 	addi	r5,sp,20
    e114:	d80d883a 	mov	r6,sp
    e118:	1080005c 	xori	r2,r2,1
    e11c:	d8800615 	stw	r2,24(sp)
    e120:	000dd300 	call	dd30 <_fpadd_parts>
    e124:	1009883a 	mov	r4,r2
    e128:	000ea600 	call	ea60 <__pack_d>
    e12c:	dfc01317 	ldw	ra,76(sp)
    e130:	dec01404 	addi	sp,sp,80
    e134:	f800283a 	ret

0000e138 <__muldf3>:
    e138:	deffe404 	addi	sp,sp,-112
    e13c:	d9001115 	stw	r4,68(sp)
    e140:	d9401215 	stw	r5,72(sp)
    e144:	d9001104 	addi	r4,sp,68
    e148:	d9400a04 	addi	r5,sp,40
    e14c:	dfc01b15 	stw	ra,108(sp)
    e150:	d9800f15 	stw	r6,60(sp)
    e154:	d9c01015 	stw	r7,64(sp)
    e158:	ddc01a15 	stw	r23,104(sp)
    e15c:	dd801915 	stw	r22,100(sp)
    e160:	dd401815 	stw	r21,96(sp)
    e164:	dd001715 	stw	r20,92(sp)
    e168:	dcc01615 	stw	r19,88(sp)
    e16c:	dc801515 	stw	r18,84(sp)
    e170:	dc401415 	stw	r17,80(sp)
    e174:	dc001315 	stw	r16,76(sp)
    e178:	000ec840 	call	ec84 <__unpack_d>
    e17c:	d9000f04 	addi	r4,sp,60
    e180:	d9400504 	addi	r5,sp,20
    e184:	000ec840 	call	ec84 <__unpack_d>
    e188:	d8c00a17 	ldw	r3,40(sp)
    e18c:	00800044 	movi	r2,1
    e190:	10c01136 	bltu	r2,r3,e1d8 <__muldf3+0xa0>
    e194:	d8c00b17 	ldw	r3,44(sp)
    e198:	d8800617 	ldw	r2,24(sp)
    e19c:	d9000a04 	addi	r4,sp,40
    e1a0:	1884c03a 	cmpne	r2,r3,r2
    e1a4:	d8800b15 	stw	r2,44(sp)
    e1a8:	000ea600 	call	ea60 <__pack_d>
    e1ac:	dfc01b17 	ldw	ra,108(sp)
    e1b0:	ddc01a17 	ldw	r23,104(sp)
    e1b4:	dd801917 	ldw	r22,100(sp)
    e1b8:	dd401817 	ldw	r21,96(sp)
    e1bc:	dd001717 	ldw	r20,92(sp)
    e1c0:	dcc01617 	ldw	r19,88(sp)
    e1c4:	dc801517 	ldw	r18,84(sp)
    e1c8:	dc401417 	ldw	r17,80(sp)
    e1cc:	dc001317 	ldw	r16,76(sp)
    e1d0:	dec01c04 	addi	sp,sp,112
    e1d4:	f800283a 	ret
    e1d8:	d9000517 	ldw	r4,20(sp)
    e1dc:	11000636 	bltu	r2,r4,e1f8 <__muldf3+0xc0>
    e1e0:	d8800617 	ldw	r2,24(sp)
    e1e4:	d8c00b17 	ldw	r3,44(sp)
    e1e8:	d9000504 	addi	r4,sp,20
    e1ec:	1884c03a 	cmpne	r2,r3,r2
    e1f0:	d8800615 	stw	r2,24(sp)
    e1f4:	003fec06 	br	e1a8 <__muldf3+0x70>
    e1f8:	00800104 	movi	r2,4
    e1fc:	1880051e 	bne	r3,r2,e214 <__muldf3+0xdc>
    e200:	00800084 	movi	r2,2
    e204:	20bfe31e 	bne	r4,r2,e194 <__muldf3+0x5c>
    e208:	01000074 	movhi	r4,1
    e20c:	213c2d04 	addi	r4,r4,-3916
    e210:	003fe506 	br	e1a8 <__muldf3+0x70>
    e214:	2080031e 	bne	r4,r2,e224 <__muldf3+0xec>
    e218:	00800084 	movi	r2,2
    e21c:	18bffa26 	beq	r3,r2,e208 <__muldf3+0xd0>
    e220:	003fef06 	br	e1e0 <__muldf3+0xa8>
    e224:	00800084 	movi	r2,2
    e228:	18bfda26 	beq	r3,r2,e194 <__muldf3+0x5c>
    e22c:	20bfec26 	beq	r4,r2,e1e0 <__muldf3+0xa8>
    e230:	dc000d17 	ldw	r16,52(sp)
    e234:	dd000817 	ldw	r20,32(sp)
    e238:	dc800917 	ldw	r18,36(sp)
    e23c:	8009883a 	mov	r4,r16
    e240:	000b883a 	mov	r5,zero
    e244:	a00d883a 	mov	r6,r20
    e248:	000f883a 	mov	r7,zero
    e24c:	000e9540 	call	e954 <__muldi3>
    e250:	dc400e17 	ldw	r17,56(sp)
    e254:	9009883a 	mov	r4,r18
    e258:	800d883a 	mov	r6,r16
    e25c:	000b883a 	mov	r5,zero
    e260:	000f883a 	mov	r7,zero
    e264:	102f883a 	mov	r23,r2
    e268:	1827883a 	mov	r19,r3
    e26c:	000e9540 	call	e954 <__muldi3>
    e270:	900d883a 	mov	r6,r18
    e274:	8809883a 	mov	r4,r17
    e278:	000b883a 	mov	r5,zero
    e27c:	000f883a 	mov	r7,zero
    e280:	102b883a 	mov	r21,r2
    e284:	1821883a 	mov	r16,r3
    e288:	000e9540 	call	e954 <__muldi3>
    e28c:	8809883a 	mov	r4,r17
    e290:	000b883a 	mov	r5,zero
    e294:	a00d883a 	mov	r6,r20
    e298:	000f883a 	mov	r7,zero
    e29c:	102d883a 	mov	r22,r2
    e2a0:	1825883a 	mov	r18,r3
    e2a4:	000e9540 	call	e954 <__muldi3>
    e2a8:	154b883a 	add	r5,r2,r21
    e2ac:	2889803a 	cmpltu	r4,r5,r2
    e2b0:	1c07883a 	add	r3,r3,r16
    e2b4:	20c9883a 	add	r4,r4,r3
    e2b8:	24004b36 	bltu	r4,r16,e3e8 <__muldf3+0x2b0>
    e2bc:	8100011e 	bne	r16,r4,e2c4 <__muldf3+0x18c>
    e2c0:	2d404936 	bltu	r5,r21,e3e8 <__muldf3+0x2b0>
    e2c4:	0011883a 	mov	r8,zero
    e2c8:	0007883a 	mov	r3,zero
    e2cc:	2ccb883a 	add	r5,r5,r19
    e2d0:	b80d883a 	mov	r6,r23
    e2d4:	2cc0012e 	bgeu	r5,r19,e2dc <__muldf3+0x1a4>
    e2d8:	02000044 	movi	r8,1
    e2dc:	258f883a 	add	r7,r4,r22
    e2e0:	3909803a 	cmpltu	r4,r7,r4
    e2e4:	da400c17 	ldw	r9,48(sp)
    e2e8:	2489883a 	add	r4,r4,r18
    e2ec:	d8800717 	ldw	r2,28(sp)
    e2f0:	20c9883a 	add	r4,r4,r3
    e2f4:	da800b17 	ldw	r10,44(sp)
    e2f8:	d8c00617 	ldw	r3,24(sp)
    e2fc:	3a11883a 	add	r8,r7,r8
    e300:	4885883a 	add	r2,r9,r2
    e304:	50c6c03a 	cmpne	r3,r10,r3
    e308:	41cf803a 	cmpltu	r7,r8,r7
    e30c:	12400104 	addi	r9,r2,4
    e310:	d8c00115 	stw	r3,4(sp)
    e314:	3909883a 	add	r4,r7,r4
    e318:	da400215 	stw	r9,8(sp)
    e31c:	03480034 	movhi	r13,8192
    e320:	6b7fffc4 	addi	r13,r13,-1
    e324:	4007883a 	mov	r3,r8
    e328:	6900102e 	bgeu	r13,r4,e36c <__muldf3+0x234>
    e32c:	10800144 	addi	r2,r2,5
    e330:	180ed07a 	srli	r7,r3,1
    e334:	18c0004c 	andi	r3,r3,1
    e338:	201097fa 	slli	r8,r4,31
    e33c:	281697fa 	slli	r11,r5,31
    e340:	2008d07a 	srli	r4,r4,1
    e344:	3014d07a 	srli	r10,r6,1
    e348:	2812d07a 	srli	r9,r5,1
    e34c:	1019883a 	mov	r12,r2
    e350:	18000226 	beq	r3,zero,e35c <__muldf3+0x224>
    e354:	5a8cb03a 	or	r6,r11,r10
    e358:	49600034 	orhi	r5,r9,32768
    e35c:	41c6b03a 	or	r3,r8,r7
    e360:	10800044 	addi	r2,r2,1
    e364:	693ff236 	bltu	r13,r4,e330 <__muldf3+0x1f8>
    e368:	db000215 	stw	r12,8(sp)
    e36c:	03440034 	movhi	r13,4096
    e370:	6b7fffc4 	addi	r13,r13,-1
    e374:	69001336 	bltu	r13,r4,e3c4 <__muldf3+0x28c>
    e378:	d8800217 	ldw	r2,8(sp)
    e37c:	10bfffc4 	addi	r2,r2,-1
    e380:	18d3883a 	add	r9,r3,r3
    e384:	48c7803a 	cmpltu	r3,r9,r3
    e388:	2109883a 	add	r4,r4,r4
    e38c:	190f883a 	add	r7,r3,r4
    e390:	3191883a 	add	r8,r6,r6
    e394:	4197803a 	cmpltu	r11,r8,r6
    e398:	2955883a 	add	r10,r5,r5
    e39c:	1019883a 	mov	r12,r2
    e3a0:	4807883a 	mov	r3,r9
    e3a4:	3809883a 	mov	r4,r7
    e3a8:	2800010e 	bge	r5,zero,e3b0 <__muldf3+0x278>
    e3ac:	48c00054 	ori	r3,r9,1
    e3b0:	400d883a 	mov	r6,r8
    e3b4:	5a8b883a 	add	r5,r11,r10
    e3b8:	10bfffc4 	addi	r2,r2,-1
    e3bc:	69fff02e 	bgeu	r13,r7,e380 <__muldf3+0x248>
    e3c0:	db000215 	stw	r12,8(sp)
    e3c4:	18803fcc 	andi	r2,r3,255
    e3c8:	01c02004 	movi	r7,128
    e3cc:	11c00926 	beq	r2,r7,e3f4 <__muldf3+0x2bc>
    e3d0:	008000c4 	movi	r2,3
    e3d4:	d9000415 	stw	r4,16(sp)
    e3d8:	d8c00315 	stw	r3,12(sp)
    e3dc:	d8800015 	stw	r2,0(sp)
    e3e0:	d809883a 	mov	r4,sp
    e3e4:	003f7006 	br	e1a8 <__muldf3+0x70>
    e3e8:	0011883a 	mov	r8,zero
    e3ec:	00c00044 	movi	r3,1
    e3f0:	003fb606 	br	e2cc <__muldf3+0x194>
    e3f4:	19c0400c 	andi	r7,r3,256
    e3f8:	383ff51e 	bne	r7,zero,e3d0 <__muldf3+0x298>
    e3fc:	314ab03a 	or	r5,r6,r5
    e400:	283ff326 	beq	r5,zero,e3d0 <__muldf3+0x298>
    e404:	1885883a 	add	r2,r3,r2
    e408:	10cb803a 	cmpltu	r5,r2,r3
    e40c:	00ffc004 	movi	r3,-256
    e410:	10c6703a 	and	r3,r2,r3
    e414:	2909883a 	add	r4,r5,r4
    e418:	003fed06 	br	e3d0 <__muldf3+0x298>

0000e41c <__divdf3>:
    e41c:	defff104 	addi	sp,sp,-60
    e420:	d9000c15 	stw	r4,48(sp)
    e424:	d9400d15 	stw	r5,52(sp)
    e428:	d9000c04 	addi	r4,sp,48
    e42c:	d9400504 	addi	r5,sp,20
    e430:	dfc00e15 	stw	ra,56(sp)
    e434:	d9800a15 	stw	r6,40(sp)
    e438:	d9c00b15 	stw	r7,44(sp)
    e43c:	000ec840 	call	ec84 <__unpack_d>
    e440:	d9000a04 	addi	r4,sp,40
    e444:	d80b883a 	mov	r5,sp
    e448:	000ec840 	call	ec84 <__unpack_d>
    e44c:	d8c00517 	ldw	r3,20(sp)
    e450:	00800044 	movi	r2,1
    e454:	10c00536 	bltu	r2,r3,e46c <__divdf3+0x50>
    e458:	d9000504 	addi	r4,sp,20
    e45c:	000ea600 	call	ea60 <__pack_d>
    e460:	dfc00e17 	ldw	ra,56(sp)
    e464:	dec00f04 	addi	sp,sp,60
    e468:	f800283a 	ret
    e46c:	d9000017 	ldw	r4,0(sp)
    e470:	11000536 	bltu	r2,r4,e488 <__divdf3+0x6c>
    e474:	d809883a 	mov	r4,sp
    e478:	000ea600 	call	ea60 <__pack_d>
    e47c:	dfc00e17 	ldw	ra,56(sp)
    e480:	dec00f04 	addi	sp,sp,60
    e484:	f800283a 	ret
    e488:	d9800617 	ldw	r6,24(sp)
    e48c:	d9400117 	ldw	r5,4(sp)
    e490:	00800104 	movi	r2,4
    e494:	314af03a 	xor	r5,r6,r5
    e498:	d9400615 	stw	r5,24(sp)
    e49c:	18800226 	beq	r3,r2,e4a8 <__divdf3+0x8c>
    e4a0:	01400084 	movi	r5,2
    e4a4:	1940041e 	bne	r3,r5,e4b8 <__divdf3+0x9c>
    e4a8:	193feb1e 	bne	r3,r4,e458 <__divdf3+0x3c>
    e4ac:	01000074 	movhi	r4,1
    e4b0:	213c2d04 	addi	r4,r4,-3916
    e4b4:	003fe906 	br	e45c <__divdf3+0x40>
    e4b8:	20803326 	beq	r4,r2,e588 <__divdf3+0x16c>
    e4bc:	21403726 	beq	r4,r5,e59c <__divdf3+0x180>
    e4c0:	d8800217 	ldw	r2,8(sp)
    e4c4:	d9000717 	ldw	r4,28(sp)
    e4c8:	d8c00917 	ldw	r3,36(sp)
    e4cc:	da000417 	ldw	r8,16(sp)
    e4d0:	2089c83a 	sub	r4,r4,r2
    e4d4:	d9000715 	stw	r4,28(sp)
    e4d8:	d8800817 	ldw	r2,32(sp)
    e4dc:	dbc00317 	ldw	r15,12(sp)
    e4e0:	1a000236 	bltu	r3,r8,e4ec <__divdf3+0xd0>
    e4e4:	40c0081e 	bne	r8,r3,e508 <__divdf3+0xec>
    e4e8:	13c0072e 	bgeu	r2,r15,e508 <__divdf3+0xec>
    e4ec:	108b883a 	add	r5,r2,r2
    e4f0:	288d803a 	cmpltu	r6,r5,r2
    e4f4:	18c7883a 	add	r3,r3,r3
    e4f8:	213fffc4 	addi	r4,r4,-1
    e4fc:	2805883a 	mov	r2,r5
    e500:	30c7883a 	add	r3,r6,r3
    e504:	d9000715 	stw	r4,28(sp)
    e508:	01400f44 	movi	r5,61
    e50c:	000f883a 	mov	r7,zero
    e510:	01040034 	movhi	r4,4096
    e514:	0019883a 	mov	r12,zero
    e518:	001b883a 	mov	r13,zero
    e51c:	201697fa 	slli	r11,r4,31
    e520:	3814d07a 	srli	r10,r7,1
    e524:	297fffc4 	addi	r5,r5,-1
    e528:	1a000936 	bltu	r3,r8,e550 <__divdf3+0x134>
    e52c:	13cdc83a 	sub	r6,r2,r15
    e530:	1193803a 	cmpltu	r9,r2,r6
    e534:	1a1dc83a 	sub	r14,r3,r8
    e538:	40c0011e 	bne	r8,r3,e540 <__divdf3+0x124>
    e53c:	13c00436 	bltu	r2,r15,e550 <__divdf3+0x134>
    e540:	3005883a 	mov	r2,r6
    e544:	7247c83a 	sub	r3,r14,r9
    e548:	61d8b03a 	or	r12,r12,r7
    e54c:	691ab03a 	or	r13,r13,r4
    e550:	108d883a 	add	r6,r2,r2
    e554:	3093803a 	cmpltu	r9,r6,r2
    e558:	18c7883a 	add	r3,r3,r3
    e55c:	5a8eb03a 	or	r7,r11,r10
    e560:	2008d07a 	srli	r4,r4,1
    e564:	3005883a 	mov	r2,r6
    e568:	48c7883a 	add	r3,r9,r3
    e56c:	283feb1e 	bne	r5,zero,e51c <__divdf3+0x100>
    e570:	61003fcc 	andi	r4,r12,255
    e574:	01402004 	movi	r5,128
    e578:	21400b26 	beq	r4,r5,e5a8 <__divdf3+0x18c>
    e57c:	db000815 	stw	r12,32(sp)
    e580:	db400915 	stw	r13,36(sp)
    e584:	003fb406 	br	e458 <__divdf3+0x3c>
    e588:	d8000815 	stw	zero,32(sp)
    e58c:	d8000915 	stw	zero,36(sp)
    e590:	d8000715 	stw	zero,28(sp)
    e594:	d9000504 	addi	r4,sp,20
    e598:	003fb006 	br	e45c <__divdf3+0x40>
    e59c:	d8800515 	stw	r2,20(sp)
    e5a0:	d9000504 	addi	r4,sp,20
    e5a4:	003fad06 	br	e45c <__divdf3+0x40>
    e5a8:	6140400c 	andi	r5,r12,256
    e5ac:	283ff31e 	bne	r5,zero,e57c <__divdf3+0x160>
    e5b0:	30c4b03a 	or	r2,r6,r3
    e5b4:	103ff126 	beq	r2,zero,e57c <__divdf3+0x160>
    e5b8:	6109883a 	add	r4,r12,r4
    e5bc:	2305803a 	cmpltu	r2,r4,r12
    e5c0:	033fc004 	movi	r12,-256
    e5c4:	2318703a 	and	r12,r4,r12
    e5c8:	135b883a 	add	r13,r2,r13
    e5cc:	003feb06 	br	e57c <__divdf3+0x160>

0000e5d0 <__gedf2>:
    e5d0:	defff104 	addi	sp,sp,-60
    e5d4:	d9000c15 	stw	r4,48(sp)
    e5d8:	d9400d15 	stw	r5,52(sp)
    e5dc:	d9000c04 	addi	r4,sp,48
    e5e0:	d9400504 	addi	r5,sp,20
    e5e4:	dfc00e15 	stw	ra,56(sp)
    e5e8:	d9800a15 	stw	r6,40(sp)
    e5ec:	d9c00b15 	stw	r7,44(sp)
    e5f0:	000ec840 	call	ec84 <__unpack_d>
    e5f4:	d9000a04 	addi	r4,sp,40
    e5f8:	d80b883a 	mov	r5,sp
    e5fc:	000ec840 	call	ec84 <__unpack_d>
    e600:	d8c00517 	ldw	r3,20(sp)
    e604:	00800044 	movi	r2,1
    e608:	10c0082e 	bgeu	r2,r3,e62c <__gedf2+0x5c>
    e60c:	d8c00017 	ldw	r3,0(sp)
    e610:	10c0062e 	bgeu	r2,r3,e62c <__gedf2+0x5c>
    e614:	d9000504 	addi	r4,sp,20
    e618:	d80b883a 	mov	r5,sp
    e61c:	000ed880 	call	ed88 <__fpcmp_parts_d>
    e620:	dfc00e17 	ldw	ra,56(sp)
    e624:	dec00f04 	addi	sp,sp,60
    e628:	f800283a 	ret
    e62c:	00bfffc4 	movi	r2,-1
    e630:	003ffb06 	br	e620 <__gedf2+0x50>

0000e634 <__fixdfsi>:
    e634:	defff804 	addi	sp,sp,-32
    e638:	d9000515 	stw	r4,20(sp)
    e63c:	d9400615 	stw	r5,24(sp)
    e640:	d9000504 	addi	r4,sp,20
    e644:	d80b883a 	mov	r5,sp
    e648:	dfc00715 	stw	ra,28(sp)
    e64c:	000ec840 	call	ec84 <__unpack_d>
    e650:	d8800017 	ldw	r2,0(sp)
    e654:	00c00084 	movi	r3,2
    e658:	10c01c26 	beq	r2,r3,e6cc <__fixdfsi+0x98>
    e65c:	00c00044 	movi	r3,1
    e660:	18801a2e 	bgeu	r3,r2,e6cc <__fixdfsi+0x98>
    e664:	00c00104 	movi	r3,4
    e668:	10c01126 	beq	r2,r3,e6b0 <__fixdfsi+0x7c>
    e66c:	d8800217 	ldw	r2,8(sp)
    e670:	10001616 	blt	r2,zero,e6cc <__fixdfsi+0x98>
    e674:	00c00784 	movi	r3,30
    e678:	18800d16 	blt	r3,r2,e6b0 <__fixdfsi+0x7c>
    e67c:	00c00f04 	movi	r3,60
    e680:	1885c83a 	sub	r2,r3,r2
    e684:	10fff804 	addi	r3,r2,-32
    e688:	d9400317 	ldw	r5,12(sp)
    e68c:	d9000417 	ldw	r4,16(sp)
    e690:	18001616 	blt	r3,zero,e6ec <__fixdfsi+0xb8>
    e694:	20c4d83a 	srl	r2,r4,r3
    e698:	d8c00117 	ldw	r3,4(sp)
    e69c:	18000126 	beq	r3,zero,e6a4 <__fixdfsi+0x70>
    e6a0:	0085c83a 	sub	r2,zero,r2
    e6a4:	dfc00717 	ldw	ra,28(sp)
    e6a8:	dec00804 	addi	sp,sp,32
    e6ac:	f800283a 	ret
    e6b0:	d8800117 	ldw	r2,4(sp)
    e6b4:	1000091e 	bne	r2,zero,e6dc <__fixdfsi+0xa8>
    e6b8:	00a00034 	movhi	r2,32768
    e6bc:	10bfffc4 	addi	r2,r2,-1
    e6c0:	dfc00717 	ldw	ra,28(sp)
    e6c4:	dec00804 	addi	sp,sp,32
    e6c8:	f800283a 	ret
    e6cc:	0005883a 	mov	r2,zero
    e6d0:	dfc00717 	ldw	ra,28(sp)
    e6d4:	dec00804 	addi	sp,sp,32
    e6d8:	f800283a 	ret
    e6dc:	00a00034 	movhi	r2,32768
    e6e0:	dfc00717 	ldw	ra,28(sp)
    e6e4:	dec00804 	addi	sp,sp,32
    e6e8:	f800283a 	ret
    e6ec:	2008907a 	slli	r4,r4,1
    e6f0:	018007c4 	movi	r6,31
    e6f4:	308dc83a 	sub	r6,r6,r2
    e6f8:	2188983a 	sll	r4,r4,r6
    e6fc:	2884d83a 	srl	r2,r5,r2
    e700:	2084b03a 	or	r2,r4,r2
    e704:	003fe406 	br	e698 <__fixdfsi+0x64>

0000e708 <__floatunsidf>:
    e708:	defff904 	addi	sp,sp,-28
    e70c:	dc000515 	stw	r16,20(sp)
    e710:	dfc00615 	stw	ra,24(sp)
    e714:	d8000115 	stw	zero,4(sp)
    e718:	2021883a 	mov	r16,r4
    e71c:	20001726 	beq	r4,zero,e77c <__floatunsidf+0x74>
    e720:	008000c4 	movi	r2,3
    e724:	d8800015 	stw	r2,0(sp)
    e728:	00800f04 	movi	r2,60
    e72c:	d8800215 	stw	r2,8(sp)
    e730:	000e9b40 	call	e9b4 <__clzsi2>
    e734:	10c00744 	addi	r3,r2,29
    e738:	18001816 	blt	r3,zero,e79c <__floatunsidf+0x94>
    e73c:	18002d26 	beq	r3,zero,e7f4 <__floatunsidf+0xec>
    e740:	113fff44 	addi	r4,r2,-3
    e744:	20002e16 	blt	r4,zero,e800 <__floatunsidf+0xf8>
    e748:	8108983a 	sll	r4,r16,r4
    e74c:	0021883a 	mov	r16,zero
    e750:	014007c4 	movi	r5,31
    e754:	2885c83a 	sub	r2,r5,r2
    e758:	dc000315 	stw	r16,12(sp)
    e75c:	d9000415 	stw	r4,16(sp)
    e760:	d8800215 	stw	r2,8(sp)
    e764:	d809883a 	mov	r4,sp
    e768:	000ea600 	call	ea60 <__pack_d>
    e76c:	dfc00617 	ldw	ra,24(sp)
    e770:	dc000517 	ldw	r16,20(sp)
    e774:	dec00704 	addi	sp,sp,28
    e778:	f800283a 	ret
    e77c:	00800084 	movi	r2,2
    e780:	d809883a 	mov	r4,sp
    e784:	d8800015 	stw	r2,0(sp)
    e788:	000ea600 	call	ea60 <__pack_d>
    e78c:	dfc00617 	ldw	ra,24(sp)
    e790:	dc000517 	ldw	r16,20(sp)
    e794:	dec00704 	addi	sp,sp,28
    e798:	f800283a 	ret
    e79c:	00c7c83a 	sub	r3,zero,r3
    e7a0:	193ff804 	addi	r4,r3,-32
    e7a4:	20001c16 	blt	r4,zero,e818 <__floatunsidf+0x110>
    e7a8:	000b883a 	mov	r5,zero
    e7ac:	2009d7fa 	srai	r4,r4,31
    e7b0:	80c6d83a 	srl	r3,r16,r3
    e7b4:	297fffc4 	addi	r5,r5,-1
    e7b8:	2c20703a 	and	r16,r5,r16
    e7bc:	8020c03a 	cmpne	r16,r16,zero
    e7c0:	1906703a 	and	r3,r3,r4
    e7c4:	010007c4 	movi	r4,31
    e7c8:	80c6b03a 	or	r3,r16,r3
    e7cc:	2085c83a 	sub	r2,r4,r2
    e7d0:	d809883a 	mov	r4,sp
    e7d4:	d8c00315 	stw	r3,12(sp)
    e7d8:	d8000415 	stw	zero,16(sp)
    e7dc:	d8800215 	stw	r2,8(sp)
    e7e0:	000ea600 	call	ea60 <__pack_d>
    e7e4:	dfc00617 	ldw	ra,24(sp)
    e7e8:	dc000517 	ldw	r16,20(sp)
    e7ec:	dec00704 	addi	sp,sp,28
    e7f0:	f800283a 	ret
    e7f4:	dc000315 	stw	r16,12(sp)
    e7f8:	d8000415 	stw	zero,16(sp)
    e7fc:	003fd906 	br	e764 <__floatunsidf+0x5c>
    e800:	800ad07a 	srli	r5,r16,1
    e804:	010007c4 	movi	r4,31
    e808:	20c9c83a 	sub	r4,r4,r3
    e80c:	2908d83a 	srl	r4,r5,r4
    e810:	80e0983a 	sll	r16,r16,r3
    e814:	003fce06 	br	e750 <__floatunsidf+0x48>
    e818:	01400044 	movi	r5,1
    e81c:	28ca983a 	sll	r5,r5,r3
    e820:	003fe206 	br	e7ac <__floatunsidf+0xa4>

0000e824 <udivmodsi4>:
    e824:	2005883a 	mov	r2,r4
    e828:	2900182e 	bgeu	r5,r4,e88c <udivmodsi4+0x68>
    e82c:	28001716 	blt	r5,zero,e88c <udivmodsi4+0x68>
    e830:	01000804 	movi	r4,32
    e834:	00c00044 	movi	r3,1
    e838:	00000206 	br	e844 <udivmodsi4+0x20>
    e83c:	20001126 	beq	r4,zero,e884 <udivmodsi4+0x60>
    e840:	28000516 	blt	r5,zero,e858 <udivmodsi4+0x34>
    e844:	294b883a 	add	r5,r5,r5
    e848:	213fffc4 	addi	r4,r4,-1
    e84c:	18c7883a 	add	r3,r3,r3
    e850:	28bffa36 	bltu	r5,r2,e83c <udivmodsi4+0x18>
    e854:	18000b26 	beq	r3,zero,e884 <udivmodsi4+0x60>
    e858:	0009883a 	mov	r4,zero
    e85c:	11400236 	bltu	r2,r5,e868 <udivmodsi4+0x44>
    e860:	1145c83a 	sub	r2,r2,r5
    e864:	20c8b03a 	or	r4,r4,r3
    e868:	1806d07a 	srli	r3,r3,1
    e86c:	280ad07a 	srli	r5,r5,1
    e870:	183ffa1e 	bne	r3,zero,e85c <udivmodsi4+0x38>
    e874:	3000021e 	bne	r6,zero,e880 <udivmodsi4+0x5c>
    e878:	2005883a 	mov	r2,r4
    e87c:	f800283a 	ret
    e880:	f800283a 	ret
    e884:	0009883a 	mov	r4,zero
    e888:	003ffa06 	br	e874 <udivmodsi4+0x50>
    e88c:	00c00044 	movi	r3,1
    e890:	0009883a 	mov	r4,zero
    e894:	003ff106 	br	e85c <udivmodsi4+0x38>

0000e898 <__divsi3>:
    e898:	defffe04 	addi	sp,sp,-8
    e89c:	dfc00115 	stw	ra,4(sp)
    e8a0:	dc000015 	stw	r16,0(sp)
    e8a4:	20000a16 	blt	r4,zero,e8d0 <__divsi3+0x38>
    e8a8:	0021883a 	mov	r16,zero
    e8ac:	28000b16 	blt	r5,zero,e8dc <__divsi3+0x44>
    e8b0:	000d883a 	mov	r6,zero
    e8b4:	000e8240 	call	e824 <udivmodsi4>
    e8b8:	80000126 	beq	r16,zero,e8c0 <__divsi3+0x28>
    e8bc:	0085c83a 	sub	r2,zero,r2
    e8c0:	dfc00117 	ldw	ra,4(sp)
    e8c4:	dc000017 	ldw	r16,0(sp)
    e8c8:	dec00204 	addi	sp,sp,8
    e8cc:	f800283a 	ret
    e8d0:	0109c83a 	sub	r4,zero,r4
    e8d4:	04000044 	movi	r16,1
    e8d8:	283ff50e 	bge	r5,zero,e8b0 <__divsi3+0x18>
    e8dc:	014bc83a 	sub	r5,zero,r5
    e8e0:	8400005c 	xori	r16,r16,1
    e8e4:	003ff206 	br	e8b0 <__divsi3+0x18>

0000e8e8 <__modsi3>:
    e8e8:	deffff04 	addi	sp,sp,-4
    e8ec:	dfc00015 	stw	ra,0(sp)
    e8f0:	20000516 	blt	r4,zero,e908 <__modsi3+0x20>
    e8f4:	28000c16 	blt	r5,zero,e928 <__modsi3+0x40>
    e8f8:	01800044 	movi	r6,1
    e8fc:	dfc00017 	ldw	ra,0(sp)
    e900:	dec00104 	addi	sp,sp,4
    e904:	000e8241 	jmpi	e824 <udivmodsi4>
    e908:	0109c83a 	sub	r4,zero,r4
    e90c:	28000b16 	blt	r5,zero,e93c <__modsi3+0x54>
    e910:	01800044 	movi	r6,1
    e914:	000e8240 	call	e824 <udivmodsi4>
    e918:	0085c83a 	sub	r2,zero,r2
    e91c:	dfc00017 	ldw	ra,0(sp)
    e920:	dec00104 	addi	sp,sp,4
    e924:	f800283a 	ret
    e928:	014bc83a 	sub	r5,zero,r5
    e92c:	01800044 	movi	r6,1
    e930:	dfc00017 	ldw	ra,0(sp)
    e934:	dec00104 	addi	sp,sp,4
    e938:	000e8241 	jmpi	e824 <udivmodsi4>
    e93c:	014bc83a 	sub	r5,zero,r5
    e940:	003ff306 	br	e910 <__modsi3+0x28>

0000e944 <__udivsi3>:
    e944:	000d883a 	mov	r6,zero
    e948:	000e8241 	jmpi	e824 <udivmodsi4>

0000e94c <__umodsi3>:
    e94c:	01800044 	movi	r6,1
    e950:	000e8241 	jmpi	e824 <udivmodsi4>

0000e954 <__muldi3>:
    e954:	20bfffcc 	andi	r2,r4,65535
    e958:	2010d43a 	srli	r8,r4,16
    e95c:	30ffffcc 	andi	r3,r6,65535
    e960:	3014d43a 	srli	r10,r6,16
    e964:	1893383a 	mul	r9,r3,r2
    e968:	1a07383a 	mul	r3,r3,r8
    e96c:	5085383a 	mul	r2,r10,r2
    e970:	4816d43a 	srli	r11,r9,16
    e974:	5211383a 	mul	r8,r10,r8
    e978:	1885883a 	add	r2,r3,r2
    e97c:	12c5883a 	add	r2,r2,r11
    e980:	10c0022e 	bgeu	r2,r3,e98c <__muldi3+0x38>
    e984:	00c00074 	movhi	r3,1
    e988:	40d1883a 	add	r8,r8,r3
    e98c:	1014d43a 	srli	r10,r2,16
    e990:	21c9383a 	mul	r4,r4,r7
    e994:	314d383a 	mul	r6,r6,r5
    e998:	1004943a 	slli	r2,r2,16
    e99c:	4291883a 	add	r8,r8,r10
    e9a0:	4a7fffcc 	andi	r9,r9,65535
    e9a4:	2187883a 	add	r3,r4,r6
    e9a8:	1245883a 	add	r2,r2,r9
    e9ac:	1a07883a 	add	r3,r3,r8
    e9b0:	f800283a 	ret

0000e9b4 <__clzsi2>:
    e9b4:	00bfffd4 	movui	r2,65535
    e9b8:	11000b36 	bltu	r2,r4,e9e8 <__clzsi2+0x34>
    e9bc:	00803fc4 	movi	r2,255
    e9c0:	11001e2e 	bgeu	r2,r4,ea3c <__clzsi2+0x88>
    e9c4:	00c00204 	movi	r3,8
    e9c8:	20c8d83a 	srl	r4,r4,r3
    e9cc:	00c00074 	movhi	r3,1
    e9d0:	18fc3204 	addi	r3,r3,-3896
    e9d4:	00800604 	movi	r2,24
    e9d8:	1909883a 	add	r4,r3,r4
    e9dc:	20c00003 	ldbu	r3,0(r4)
    e9e0:	10c5c83a 	sub	r2,r2,r3
    e9e4:	f800283a 	ret
    e9e8:	00804034 	movhi	r2,256
    e9ec:	10bfffc4 	addi	r2,r2,-1
    e9f0:	11000936 	bltu	r2,r4,ea18 <__clzsi2+0x64>
    e9f4:	00800404 	movi	r2,16
    e9f8:	1007883a 	mov	r3,r2
    e9fc:	20c8d83a 	srl	r4,r4,r3
    ea00:	00c00074 	movhi	r3,1
    ea04:	18fc3204 	addi	r3,r3,-3896
    ea08:	1909883a 	add	r4,r3,r4
    ea0c:	20c00003 	ldbu	r3,0(r4)
    ea10:	10c5c83a 	sub	r2,r2,r3
    ea14:	f800283a 	ret
    ea18:	00c00604 	movi	r3,24
    ea1c:	20c8d83a 	srl	r4,r4,r3
    ea20:	00c00074 	movhi	r3,1
    ea24:	18fc3204 	addi	r3,r3,-3896
    ea28:	00800204 	movi	r2,8
    ea2c:	1909883a 	add	r4,r3,r4
    ea30:	20c00003 	ldbu	r3,0(r4)
    ea34:	10c5c83a 	sub	r2,r2,r3
    ea38:	f800283a 	ret
    ea3c:	0007883a 	mov	r3,zero
    ea40:	20c8d83a 	srl	r4,r4,r3
    ea44:	00c00074 	movhi	r3,1
    ea48:	18fc3204 	addi	r3,r3,-3896
    ea4c:	00800804 	movi	r2,32
    ea50:	1909883a 	add	r4,r3,r4
    ea54:	20c00003 	ldbu	r3,0(r4)
    ea58:	10c5c83a 	sub	r2,r2,r3
    ea5c:	f800283a 	ret

0000ea60 <__pack_d>:
    ea60:	20800017 	ldw	r2,0(r4)
    ea64:	defff804 	addi	sp,sp,-32
    ea68:	dcc00315 	stw	r19,12(sp)
    ea6c:	dc800215 	stw	r18,8(sp)
    ea70:	dfc00715 	stw	ra,28(sp)
    ea74:	dd800615 	stw	r22,24(sp)
    ea78:	dd400515 	stw	r21,20(sp)
    ea7c:	dd000415 	stw	r20,16(sp)
    ea80:	dc400115 	stw	r17,4(sp)
    ea84:	dc000015 	stw	r16,0(sp)
    ea88:	04800044 	movi	r18,1
    ea8c:	24400317 	ldw	r17,12(r4)
    ea90:	24000417 	ldw	r16,16(r4)
    ea94:	24c00117 	ldw	r19,4(r4)
    ea98:	9080422e 	bgeu	r18,r2,eba4 <__pack_d+0x144>
    ea9c:	00c00104 	movi	r3,4
    eaa0:	10c03c26 	beq	r2,r3,eb94 <__pack_d+0x134>
    eaa4:	00c00084 	movi	r3,2
    eaa8:	10c01926 	beq	r2,r3,eb10 <__pack_d+0xb0>
    eaac:	8c04b03a 	or	r2,r17,r16
    eab0:	10001726 	beq	r2,zero,eb10 <__pack_d+0xb0>
    eab4:	21000217 	ldw	r4,8(r4)
    eab8:	00bf0084 	movi	r2,-1022
    eabc:	20804016 	blt	r4,r2,ebc0 <__pack_d+0x160>
    eac0:	0080ffc4 	movi	r2,1023
    eac4:	11003316 	blt	r2,r4,eb94 <__pack_d+0x134>
    eac8:	88803fcc 	andi	r2,r17,255
    eacc:	00c02004 	movi	r3,128
    ead0:	10c02926 	beq	r2,r3,eb78 <__pack_d+0x118>
    ead4:	88801fc4 	addi	r2,r17,127
    ead8:	1463803a 	cmpltu	r17,r2,r17
    eadc:	8c21883a 	add	r16,r17,r16
    eae0:	1023883a 	mov	r17,r2
    eae4:	00880034 	movhi	r2,8192
    eae8:	10bfffc4 	addi	r2,r2,-1
    eaec:	14001c36 	bltu	r2,r16,eb60 <__pack_d+0x100>
    eaf0:	2100ffc4 	addi	r4,r4,1023
    eaf4:	8006963a 	slli	r3,r16,24
    eaf8:	8804d23a 	srli	r2,r17,8
    eafc:	8020913a 	slli	r16,r16,4
    eb00:	2101ffcc 	andi	r4,r4,2047
    eb04:	1884b03a 	or	r2,r3,r2
    eb08:	8020d33a 	srli	r16,r16,12
    eb0c:	00000306 	br	eb1c <__pack_d+0xbc>
    eb10:	0009883a 	mov	r4,zero
    eb14:	0005883a 	mov	r2,zero
    eb18:	0021883a 	mov	r16,zero
    eb1c:	2008953a 	slli	r4,r4,20
    eb20:	982697fa 	slli	r19,r19,31
    eb24:	00c00434 	movhi	r3,16
    eb28:	18ffffc4 	addi	r3,r3,-1
    eb2c:	80e0703a 	and	r16,r16,r3
    eb30:	8106b03a 	or	r3,r16,r4
    eb34:	1cc6b03a 	or	r3,r3,r19
    eb38:	dfc00717 	ldw	ra,28(sp)
    eb3c:	dd800617 	ldw	r22,24(sp)
    eb40:	dd400517 	ldw	r21,20(sp)
    eb44:	dd000417 	ldw	r20,16(sp)
    eb48:	dcc00317 	ldw	r19,12(sp)
    eb4c:	dc800217 	ldw	r18,8(sp)
    eb50:	dc400117 	ldw	r17,4(sp)
    eb54:	dc000017 	ldw	r16,0(sp)
    eb58:	dec00804 	addi	sp,sp,32
    eb5c:	f800283a 	ret
    eb60:	800697fa 	slli	r3,r16,31
    eb64:	8804d07a 	srli	r2,r17,1
    eb68:	21010004 	addi	r4,r4,1024
    eb6c:	8020d07a 	srli	r16,r16,1
    eb70:	18a2b03a 	or	r17,r3,r2
    eb74:	003fdf06 	br	eaf4 <__pack_d+0x94>
    eb78:	88c0400c 	andi	r3,r17,256
    eb7c:	183fd926 	beq	r3,zero,eae4 <__pack_d+0x84>
    eb80:	8885883a 	add	r2,r17,r2
    eb84:	1463803a 	cmpltu	r17,r2,r17
    eb88:	8c21883a 	add	r16,r17,r16
    eb8c:	1023883a 	mov	r17,r2
    eb90:	003fd406 	br	eae4 <__pack_d+0x84>
    eb94:	0101ffc4 	movi	r4,2047
    eb98:	0005883a 	mov	r2,zero
    eb9c:	0021883a 	mov	r16,zero
    eba0:	003fde06 	br	eb1c <__pack_d+0xbc>
    eba4:	84000234 	orhi	r16,r16,8
    eba8:	00c00434 	movhi	r3,16
    ebac:	18ffffc4 	addi	r3,r3,-1
    ebb0:	8805883a 	mov	r2,r17
    ebb4:	80e0703a 	and	r16,r16,r3
    ebb8:	0101ffc4 	movi	r4,2047
    ebbc:	003fd706 	br	eb1c <__pack_d+0xbc>
    ebc0:	1129c83a 	sub	r20,r2,r4
    ebc4:	00800e04 	movi	r2,56
    ebc8:	15002716 	blt	r2,r20,ec68 <__pack_d+0x208>
    ebcc:	800b883a 	mov	r5,r16
    ebd0:	a00d883a 	mov	r6,r20
    ebd4:	8809883a 	mov	r4,r17
    ebd8:	000ee580 	call	ee58 <__lshrdi3>
    ebdc:	9009883a 	mov	r4,r18
    ebe0:	000b883a 	mov	r5,zero
    ebe4:	a00d883a 	mov	r6,r20
    ebe8:	102d883a 	mov	r22,r2
    ebec:	182b883a 	mov	r21,r3
    ebf0:	000ee9c0 	call	ee9c <__ashldi3>
    ebf4:	1009003a 	cmpeq	r4,r2,zero
    ebf8:	1907c83a 	sub	r3,r3,r4
    ebfc:	10bfffc4 	addi	r2,r2,-1
    ec00:	1c20703a 	and	r16,r3,r16
    ec04:	1444703a 	and	r2,r2,r17
    ec08:	1404b03a 	or	r2,r2,r16
    ec0c:	1004c03a 	cmpne	r2,r2,zero
    ec10:	1584b03a 	or	r2,r2,r22
    ec14:	11003fcc 	andi	r4,r2,255
    ec18:	01402004 	movi	r5,128
    ec1c:	a807883a 	mov	r3,r21
    ec20:	2140131e 	bne	r4,r5,ec70 <__pack_d+0x210>
    ec24:	1140400c 	andi	r5,r2,256
    ec28:	28000426 	beq	r5,zero,ec3c <__pack_d+0x1dc>
    ec2c:	1109883a 	add	r4,r2,r4
    ec30:	2085803a 	cmpltu	r2,r4,r2
    ec34:	1547883a 	add	r3,r2,r21
    ec38:	2005883a 	mov	r2,r4
    ec3c:	1808963a 	slli	r4,r3,24
    ec40:	1004d23a 	srli	r2,r2,8
    ec44:	1820913a 	slli	r16,r3,4
    ec48:	01440034 	movhi	r5,4096
    ec4c:	297fffc4 	addi	r5,r5,-1
    ec50:	2084b03a 	or	r2,r4,r2
    ec54:	8020d33a 	srli	r16,r16,12
    ec58:	01000044 	movi	r4,1
    ec5c:	28ffaf36 	bltu	r5,r3,eb1c <__pack_d+0xbc>
    ec60:	0009883a 	mov	r4,zero
    ec64:	003fad06 	br	eb1c <__pack_d+0xbc>
    ec68:	0005883a 	mov	r2,zero
    ec6c:	0007883a 	mov	r3,zero
    ec70:	11001fc4 	addi	r4,r2,127
    ec74:	2085803a 	cmpltu	r2,r4,r2
    ec78:	10c7883a 	add	r3,r2,r3
    ec7c:	2005883a 	mov	r2,r4
    ec80:	003fee06 	br	ec3c <__pack_d+0x1dc>

0000ec84 <__unpack_d>:
    ec84:	21800117 	ldw	r6,4(r4)
    ec88:	20c00017 	ldw	r3,0(r4)
    ec8c:	3004d7fa 	srli	r2,r6,31
    ec90:	3008d53a 	srli	r4,r6,20
    ec94:	28800115 	stw	r2,4(r5)
    ec98:	2101ffcc 	andi	r4,r4,2047
    ec9c:	00800434 	movhi	r2,16
    eca0:	10bfffc4 	addi	r2,r2,-1
    eca4:	3084703a 	and	r2,r6,r2
    eca8:	20001a1e 	bne	r4,zero,ed14 <__unpack_d+0x90>
    ecac:	1888b03a 	or	r4,r3,r2
    ecb0:	20002626 	beq	r4,zero,ed4c <__unpack_d+0xc8>
    ecb4:	1808d63a 	srli	r4,r3,24
    ecb8:	1004923a 	slli	r2,r2,8
    ecbc:	01bf0084 	movi	r6,-1022
    ecc0:	29800215 	stw	r6,8(r5)
    ecc4:	2084b03a 	or	r2,r4,r2
    ecc8:	010000c4 	movi	r4,3
    eccc:	29000015 	stw	r4,0(r5)
    ecd0:	02040034 	movhi	r8,4096
    ecd4:	423fffc4 	addi	r8,r8,-1
    ecd8:	1806923a 	slli	r3,r3,8
    ecdc:	40801836 	bltu	r8,r2,ed40 <__unpack_d+0xbc>
    ece0:	013f0044 	movi	r4,-1023
    ece4:	18cd883a 	add	r6,r3,r3
    ece8:	30c7803a 	cmpltu	r3,r6,r3
    ecec:	1085883a 	add	r2,r2,r2
    ecf0:	1885883a 	add	r2,r3,r2
    ecf4:	200f883a 	mov	r7,r4
    ecf8:	3007883a 	mov	r3,r6
    ecfc:	213fffc4 	addi	r4,r4,-1
    ed00:	40bff82e 	bgeu	r8,r2,ece4 <__unpack_d+0x60>
    ed04:	29c00215 	stw	r7,8(r5)
    ed08:	28c00315 	stw	r3,12(r5)
    ed0c:	28800415 	stw	r2,16(r5)
    ed10:	f800283a 	ret
    ed14:	01c1ffc4 	movi	r7,2047
    ed18:	21c00f26 	beq	r4,r7,ed58 <__unpack_d+0xd4>
    ed1c:	180cd63a 	srli	r6,r3,24
    ed20:	1004923a 	slli	r2,r2,8
    ed24:	213f0044 	addi	r4,r4,-1023
    ed28:	1806923a 	slli	r3,r3,8
    ed2c:	3084b03a 	or	r2,r6,r2
    ed30:	29000215 	stw	r4,8(r5)
    ed34:	010000c4 	movi	r4,3
    ed38:	10840034 	orhi	r2,r2,4096
    ed3c:	29000015 	stw	r4,0(r5)
    ed40:	28c00315 	stw	r3,12(r5)
    ed44:	28800415 	stw	r2,16(r5)
    ed48:	f800283a 	ret
    ed4c:	00800084 	movi	r2,2
    ed50:	28800015 	stw	r2,0(r5)
    ed54:	f800283a 	ret
    ed58:	1888b03a 	or	r4,r3,r2
    ed5c:	20000526 	beq	r4,zero,ed74 <__unpack_d+0xf0>
    ed60:	3180022c 	andhi	r6,r6,8
    ed64:	30000626 	beq	r6,zero,ed80 <__unpack_d+0xfc>
    ed68:	01000044 	movi	r4,1
    ed6c:	29000015 	stw	r4,0(r5)
    ed70:	003ff306 	br	ed40 <__unpack_d+0xbc>
    ed74:	00800104 	movi	r2,4
    ed78:	28800015 	stw	r2,0(r5)
    ed7c:	f800283a 	ret
    ed80:	28000015 	stw	zero,0(r5)
    ed84:	003fee06 	br	ed40 <__unpack_d+0xbc>

0000ed88 <__fpcmp_parts_d>:
    ed88:	20c00017 	ldw	r3,0(r4)
    ed8c:	00800044 	movi	r2,1
    ed90:	10c0142e 	bgeu	r2,r3,ede4 <__fpcmp_parts_d+0x5c>
    ed94:	29800017 	ldw	r6,0(r5)
    ed98:	1180122e 	bgeu	r2,r6,ede4 <__fpcmp_parts_d+0x5c>
    ed9c:	01c00104 	movi	r7,4
    eda0:	19c02826 	beq	r3,r7,ee44 <__fpcmp_parts_d+0xbc>
    eda4:	31c00926 	beq	r6,r7,edcc <__fpcmp_parts_d+0x44>
    eda8:	01c00084 	movi	r7,2
    edac:	19c00626 	beq	r3,r7,edc8 <__fpcmp_parts_d+0x40>
    edb0:	31c00a26 	beq	r6,r7,eddc <__fpcmp_parts_d+0x54>
    edb4:	20c00117 	ldw	r3,4(r4)
    edb8:	29800117 	ldw	r6,4(r5)
    edbc:	19800b26 	beq	r3,r6,edec <__fpcmp_parts_d+0x64>
    edc0:	1800041e 	bne	r3,zero,edd4 <__fpcmp_parts_d+0x4c>
    edc4:	f800283a 	ret
    edc8:	30c01a26 	beq	r6,r3,ee34 <__fpcmp_parts_d+0xac>
    edcc:	28800117 	ldw	r2,4(r5)
    edd0:	1000041e 	bne	r2,zero,ede4 <__fpcmp_parts_d+0x5c>
    edd4:	00bfffc4 	movi	r2,-1
    edd8:	f800283a 	ret
    eddc:	20800117 	ldw	r2,4(r4)
    ede0:	103ffc1e 	bne	r2,zero,edd4 <__fpcmp_parts_d+0x4c>
    ede4:	00800044 	movi	r2,1
    ede8:	f800283a 	ret
    edec:	21c00217 	ldw	r7,8(r4)
    edf0:	29800217 	ldw	r6,8(r5)
    edf4:	31c0020e 	bge	r6,r7,ee00 <__fpcmp_parts_d+0x78>
    edf8:	183ff61e 	bne	r3,zero,edd4 <__fpcmp_parts_d+0x4c>
    edfc:	f800283a 	ret
    ee00:	39800a16 	blt	r7,r6,ee2c <__fpcmp_parts_d+0xa4>
    ee04:	20800417 	ldw	r2,16(r4)
    ee08:	29800417 	ldw	r6,16(r5)
    ee0c:	21c00317 	ldw	r7,12(r4)
    ee10:	29000317 	ldw	r4,12(r5)
    ee14:	30800936 	bltu	r6,r2,ee3c <__fpcmp_parts_d+0xb4>
    ee18:	1180011e 	bne	r2,r6,ee20 <__fpcmp_parts_d+0x98>
    ee1c:	21c00736 	bltu	r4,r7,ee3c <__fpcmp_parts_d+0xb4>
    ee20:	11800236 	bltu	r2,r6,ee2c <__fpcmp_parts_d+0xa4>
    ee24:	3080031e 	bne	r6,r2,ee34 <__fpcmp_parts_d+0xac>
    ee28:	3900022e 	bgeu	r7,r4,ee34 <__fpcmp_parts_d+0xac>
    ee2c:	183fe926 	beq	r3,zero,edd4 <__fpcmp_parts_d+0x4c>
    ee30:	003fec06 	br	ede4 <__fpcmp_parts_d+0x5c>
    ee34:	0005883a 	mov	r2,zero
    ee38:	f800283a 	ret
    ee3c:	183fe926 	beq	r3,zero,ede4 <__fpcmp_parts_d+0x5c>
    ee40:	003fe406 	br	edd4 <__fpcmp_parts_d+0x4c>
    ee44:	30ffe51e 	bne	r6,r3,eddc <__fpcmp_parts_d+0x54>
    ee48:	28c00117 	ldw	r3,4(r5)
    ee4c:	20800117 	ldw	r2,4(r4)
    ee50:	1885c83a 	sub	r2,r3,r2
    ee54:	f800283a 	ret

0000ee58 <__lshrdi3>:
    ee58:	2005883a 	mov	r2,r4
    ee5c:	2807883a 	mov	r3,r5
    ee60:	30000826 	beq	r6,zero,ee84 <__lshrdi3+0x2c>
    ee64:	01000804 	movi	r4,32
    ee68:	2189c83a 	sub	r4,r4,r6
    ee6c:	0100060e 	bge	zero,r4,ee88 <__lshrdi3+0x30>
    ee70:	1184d83a 	srl	r2,r2,r6
    ee74:	2908983a 	sll	r4,r5,r4
    ee78:	298cd83a 	srl	r6,r5,r6
    ee7c:	2084b03a 	or	r2,r4,r2
    ee80:	3007883a 	mov	r3,r6
    ee84:	f800283a 	ret
    ee88:	0105c83a 	sub	r2,zero,r4
    ee8c:	000d883a 	mov	r6,zero
    ee90:	2884d83a 	srl	r2,r5,r2
    ee94:	3007883a 	mov	r3,r6
    ee98:	003ffa06 	br	ee84 <__lshrdi3+0x2c>

0000ee9c <__ashldi3>:
    ee9c:	2005883a 	mov	r2,r4
    eea0:	2807883a 	mov	r3,r5
    eea4:	30000826 	beq	r6,zero,eec8 <__ashldi3+0x2c>
    eea8:	01000804 	movi	r4,32
    eeac:	2189c83a 	sub	r4,r4,r6
    eeb0:	0100060e 	bge	zero,r4,eecc <__ashldi3+0x30>
    eeb4:	1108d83a 	srl	r4,r2,r4
    eeb8:	2986983a 	sll	r3,r5,r6
    eebc:	118c983a 	sll	r6,r2,r6
    eec0:	20c6b03a 	or	r3,r4,r3
    eec4:	3005883a 	mov	r2,r6
    eec8:	f800283a 	ret
    eecc:	0107c83a 	sub	r3,zero,r4
    eed0:	000d883a 	mov	r6,zero
    eed4:	10c6983a 	sll	r3,r2,r3
    eed8:	3005883a 	mov	r2,r6
    eedc:	003ffa06 	br	eec8 <__ashldi3+0x2c>

0000eee0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    eee0:	defffc04 	addi	sp,sp,-16
    eee4:	df000315 	stw	fp,12(sp)
    eee8:	df000304 	addi	fp,sp,12
    eeec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    eef0:	00800074 	movhi	r2,1
    eef4:	1089e644 	addi	r2,r2,10137
    eef8:	10000005 	stb	zero,0(r2)
    eefc:	e0bfff17 	ldw	r2,-4(fp)
    ef00:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    ef04:	e0bffd17 	ldw	r2,-12(fp)
    ef08:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ef0c:	e0bffe17 	ldw	r2,-8(fp)
    ef10:	10000226 	beq	r2,zero,ef1c <_exit+0x3c>
    ALT_SIM_FAIL();
    ef14:	002af070 	cmpltui	zero,zero,43969
    ef18:	00000106 	br	ef20 <_exit+0x40>
  } else {
    ALT_SIM_PASS();
    ef1c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ef20:	003fff06 	br	ef20 <_exit+0x40>
