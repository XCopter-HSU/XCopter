// soc_system_mm_interconnect_6.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2014.12.19.15:55:08

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_6 (
		input  wire        sdram_pll_outclk0_clk,                                           //                                         sdram_pll_outclk0.clk
		input  wire        sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset, // sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset.reset
		input  wire [25:0] sdram_clockCrossing_Bridge_m0_address,                           //                             sdram_clockCrossing_Bridge_m0.address
		output wire        sdram_clockCrossing_Bridge_m0_waitrequest,                       //                                                          .waitrequest
		input  wire [3:0]  sdram_clockCrossing_Bridge_m0_burstcount,                        //                                                          .burstcount
		input  wire [3:0]  sdram_clockCrossing_Bridge_m0_byteenable,                        //                                                          .byteenable
		input  wire        sdram_clockCrossing_Bridge_m0_read,                              //                                                          .read
		output wire [31:0] sdram_clockCrossing_Bridge_m0_readdata,                          //                                                          .readdata
		output wire        sdram_clockCrossing_Bridge_m0_readdatavalid,                     //                                                          .readdatavalid
		input  wire        sdram_clockCrossing_Bridge_m0_write,                             //                                                          .write
		input  wire [31:0] sdram_clockCrossing_Bridge_m0_writedata,                         //                                                          .writedata
		input  wire        sdram_clockCrossing_Bridge_m0_debugaccess,                       //                                                          .debugaccess
		output wire [24:0] sdram_s1_address,                                                //                                                  sdram_s1.address
		output wire        sdram_s1_write,                                                  //                                                          .write
		output wire        sdram_s1_read,                                                   //                                                          .read
		input  wire [15:0] sdram_s1_readdata,                                               //                                                          .readdata
		output wire [15:0] sdram_s1_writedata,                                              //                                                          .writedata
		output wire [1:0]  sdram_s1_byteenable,                                             //                                                          .byteenable
		input  wire        sdram_s1_readdatavalid,                                          //                                                          .readdatavalid
		input  wire        sdram_s1_waitrequest,                                            //                                                          .waitrequest
		output wire        sdram_s1_chipselect                                              //                                                          .chipselect
	);

	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_waitrequest;            // sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> sdram_clockCrossing_Bridge_m0_translator:uav_waitrequest
	wire   [5:0] sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_burstcount;             // sdram_clockCrossing_Bridge_m0_translator:uav_burstcount -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [31:0] sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_writedata;              // sdram_clockCrossing_Bridge_m0_translator:uav_writedata -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire  [25:0] sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_address;                // sdram_clockCrossing_Bridge_m0_translator:uav_address -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_address
	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_lock;                   // sdram_clockCrossing_Bridge_m0_translator:uav_lock -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_lock
	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_write;                  // sdram_clockCrossing_Bridge_m0_translator:uav_write -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_write
	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_read;                   // sdram_clockCrossing_Bridge_m0_translator:uav_read -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [31:0] sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_readdata;               // sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_readdata -> sdram_clockCrossing_Bridge_m0_translator:uav_readdata
	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_debugaccess;            // sdram_clockCrossing_Bridge_m0_translator:uav_debugaccess -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [3:0] sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_byteenable;             // sdram_clockCrossing_Bridge_m0_translator:uav_byteenable -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_readdatavalid;          // sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> sdram_clockCrossing_Bridge_m0_translator:uav_readdatavalid
	wire         rsp_xbar_mux_src_endofpacket;                                                              // rsp_xbar_mux:src_endofpacket -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         rsp_xbar_mux_src_valid;                                                                    // rsp_xbar_mux:src_valid -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire         rsp_xbar_mux_src_startofpacket;                                                            // rsp_xbar_mux:src_startofpacket -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [98:0] rsp_xbar_mux_src_data;                                                                     // rsp_xbar_mux:src_data -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [0:0] rsp_xbar_mux_src_channel;                                                                  // rsp_xbar_mux:src_channel -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire         rsp_xbar_mux_src_ready;                                                                    // sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux:src_ready
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                         // sdram_s1_translator:uav_waitrequest -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [1:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                          // sdram_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire  [15:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                           // sdram_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire  [25:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_address;                             // sdram_s1_translator_avalon_universal_slave_0_agent:m0_address -> sdram_s1_translator:uav_address
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_write;                               // sdram_s1_translator_avalon_universal_slave_0_agent:m0_write -> sdram_s1_translator:uav_write
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                // sdram_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_read;                                // sdram_s1_translator_avalon_universal_slave_0_agent:m0_read -> sdram_s1_translator:uav_read
	wire  [15:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                            // sdram_s1_translator:uav_readdata -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                       // sdram_s1_translator:uav_readdatavalid -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                         // sdram_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [1:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                          // sdram_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                  // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                        // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [81:0] sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                         // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                        // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;               // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                     // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;             // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [81:0] sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                      // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                     // sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                   // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire  [17:0] sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                    // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                   // sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                   // sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [17:0] sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                    // sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                   // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;   // sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid;         // sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket; // sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [98:0] sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_data;          // sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire         sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready;         // addr_router:sink_ready -> sdram_clockCrossing_Bridge_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire         addr_router_src_endofpacket;                                                               // addr_router:src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire         addr_router_src_valid;                                                                     // addr_router:src_valid -> cmd_xbar_demux:sink_valid
	wire         addr_router_src_startofpacket;                                                             // addr_router:src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [98:0] addr_router_src_data;                                                                      // addr_router:src_data -> cmd_xbar_demux:sink_data
	wire   [0:0] addr_router_src_channel;                                                                   // addr_router:src_channel -> cmd_xbar_demux:sink_channel
	wire         addr_router_src_ready;                                                                     // cmd_xbar_demux:sink_ready -> addr_router:src_ready
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                         // sdram_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid;                               // sdram_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                       // sdram_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [80:0] sdram_s1_translator_avalon_universal_slave_0_agent_rp_data;                                // sdram_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready;                               // id_router:sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire         burst_adapter_source0_endofpacket;                                                         // burst_adapter:source0_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         burst_adapter_source0_valid;                                                               // burst_adapter:source0_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire         burst_adapter_source0_startofpacket;                                                       // burst_adapter:source0_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [80:0] burst_adapter_source0_data;                                                                // burst_adapter:source0_data -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire         burst_adapter_source0_ready;                                                               // sdram_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire   [0:0] burst_adapter_source0_channel;                                                             // burst_adapter:source0_channel -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_demux_src0_endofpacket;                                                           // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire         cmd_xbar_demux_src0_valid;                                                                 // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire         cmd_xbar_demux_src0_startofpacket;                                                         // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [98:0] cmd_xbar_demux_src0_data;                                                                  // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [0:0] cmd_xbar_demux_src0_channel;                                                               // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire         cmd_xbar_demux_src0_ready;                                                                 // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire         rsp_xbar_demux_src0_endofpacket;                                                           // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire         rsp_xbar_demux_src0_valid;                                                                 // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire         rsp_xbar_demux_src0_startofpacket;                                                         // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [98:0] rsp_xbar_demux_src0_data;                                                                  // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [0:0] rsp_xbar_demux_src0_channel;                                                               // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire         rsp_xbar_demux_src0_ready;                                                                 // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire         id_router_src_endofpacket;                                                                 // id_router:src_endofpacket -> width_adapter:in_endofpacket
	wire         id_router_src_valid;                                                                       // id_router:src_valid -> width_adapter:in_valid
	wire         id_router_src_startofpacket;                                                               // id_router:src_startofpacket -> width_adapter:in_startofpacket
	wire  [80:0] id_router_src_data;                                                                        // id_router:src_data -> width_adapter:in_data
	wire   [0:0] id_router_src_channel;                                                                     // id_router:src_channel -> width_adapter:in_channel
	wire         id_router_src_ready;                                                                       // width_adapter:in_ready -> id_router:src_ready
	wire         width_adapter_src_endofpacket;                                                             // width_adapter:out_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire         width_adapter_src_valid;                                                                   // width_adapter:out_valid -> rsp_xbar_demux:sink_valid
	wire         width_adapter_src_startofpacket;                                                           // width_adapter:out_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [98:0] width_adapter_src_data;                                                                    // width_adapter:out_data -> rsp_xbar_demux:sink_data
	wire         width_adapter_src_ready;                                                                   // rsp_xbar_demux:sink_ready -> width_adapter:out_ready
	wire   [0:0] width_adapter_src_channel;                                                                 // width_adapter:out_channel -> rsp_xbar_demux:sink_channel
	wire         cmd_xbar_mux_src_endofpacket;                                                              // cmd_xbar_mux:src_endofpacket -> width_adapter_001:in_endofpacket
	wire         cmd_xbar_mux_src_valid;                                                                    // cmd_xbar_mux:src_valid -> width_adapter_001:in_valid
	wire         cmd_xbar_mux_src_startofpacket;                                                            // cmd_xbar_mux:src_startofpacket -> width_adapter_001:in_startofpacket
	wire  [98:0] cmd_xbar_mux_src_data;                                                                     // cmd_xbar_mux:src_data -> width_adapter_001:in_data
	wire   [0:0] cmd_xbar_mux_src_channel;                                                                  // cmd_xbar_mux:src_channel -> width_adapter_001:in_channel
	wire         cmd_xbar_mux_src_ready;                                                                    // width_adapter_001:in_ready -> cmd_xbar_mux:src_ready
	wire         width_adapter_001_src_endofpacket;                                                         // width_adapter_001:out_endofpacket -> burst_adapter:sink0_endofpacket
	wire         width_adapter_001_src_valid;                                                               // width_adapter_001:out_valid -> burst_adapter:sink0_valid
	wire         width_adapter_001_src_startofpacket;                                                       // width_adapter_001:out_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [80:0] width_adapter_001_src_data;                                                                // width_adapter_001:out_data -> burst_adapter:sink0_data
	wire         width_adapter_001_src_ready;                                                               // burst_adapter:sink0_ready -> width_adapter_001:out_ready
	wire   [0:0] width_adapter_001_src_channel;                                                             // width_adapter_001:out_channel -> burst_adapter:sink0_channel

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sdram_clockcrossing_bridge_m0_translator (
		.clk                      (sdram_pll_outclk0_clk),                                                            //                       clk.clk
		.reset                    (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address              (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sdram_clockCrossing_Bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sdram_clockCrossing_Bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (sdram_clockCrossing_Bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (sdram_clockCrossing_Bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                  (sdram_clockCrossing_Bridge_m0_read),                                               //                          .read
		.av_readdata              (sdram_clockCrossing_Bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (sdram_clockCrossing_Bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (sdram_clockCrossing_Bridge_m0_write),                                              //                          .write
		.av_writedata             (sdram_clockCrossing_Bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (sdram_clockCrossing_Bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                             //               (terminated)
		.av_begintransfer         (1'b0),                                                                             //               (terminated)
		.av_chipselect            (1'b0),                                                                             //               (terminated)
		.av_lock                  (1'b0),                                                                             //               (terminated)
		.uav_clken                (),                                                                                 //               (terminated)
		.av_clken                 (1'b1),                                                                             //               (terminated)
		.uav_response             (2'b00),                                                                            //               (terminated)
		.av_response              (),                                                                                 //               (terminated)
		.uav_writeresponserequest (),                                                                                 //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                             //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid    ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (sdram_pll_outclk0_clk),                                               //                      clk.clk
		.reset                    (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sdram_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sdram_s1_write),                                                      //                         .write
		.av_read                  (sdram_s1_read),                                                       //                         .read
		.av_readdata              (sdram_s1_readdata),                                                   //                         .readdata
		.av_writedata             (sdram_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (sdram_s1_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (sdram_s1_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (sdram_s1_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (sdram_s1_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BEGIN_BURST           (82),
		.PKT_BURSTWRAP_H           (74),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BURST_SIZE_H          (77),
		.PKT_BURST_SIZE_L          (75),
		.PKT_BURST_TYPE_H          (79),
		.PKT_BURST_TYPE_L          (78),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_TRANS_LOCK            (66),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (84),
		.PKT_SRC_ID_L              (84),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (85),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_DATA_SIDEBAND_H       (81),
		.PKT_DATA_SIDEBAND_L       (81),
		.PKT_QOS_H                 (83),
		.PKT_QOS_L                 (83),
		.PKT_ADDR_SIDEBAND_H       (80),
		.PKT_ADDR_SIDEBAND_L       (80),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_ORI_BURST_SIZE_H      (98),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent (
		.clk                     (sdram_pll_outclk0_clk),                                                                     //       clk.clk
		.reset                   (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address              (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_src_valid),                                                                    //        rp.valid
		.rp_data                 (rsp_xbar_mux_src_data),                                                                     //          .data
		.rp_channel              (rsp_xbar_mux_src_channel),                                                                  //          .channel
		.rp_startofpacket        (rsp_xbar_mux_src_startofpacket),                                                            //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_src_endofpacket),                                                              //          .endofpacket
		.rp_ready                (rsp_xbar_mux_src_ready),                                                                    //          .ready
		.av_response             (),                                                                                          // (terminated)
		.av_writeresponserequest (1'b0),                                                                                      // (terminated)
		.av_writeresponsevalid   ()                                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (64),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_TRANS_LOCK            (48),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (67),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (50),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_ORI_BURST_SIZE_H      (80),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sdram_pll_outclk0_clk),                                                         //             clk.clk
		.reset                   (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                 //                .channel
		.rf_sink_ready           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sdram_pll_outclk0_clk),                                                         //       clk.clk
		.reset             (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sdram_pll_outclk0_clk),                                                   //       clk.clk
		.reset             (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	soc_system_mm_interconnect_6_addr_router addr_router (
		.sink_ready         (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_clockcrossing_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sdram_pll_outclk0_clk),                                                                     //       clk.clk
		.reset              (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                                     //       src.ready
		.src_valid          (addr_router_src_valid),                                                                     //          .valid
		.src_data           (addr_router_src_data),                                                                      //          .data
		.src_channel        (addr_router_src_channel),                                                                   //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                             //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                                //          .endofpacket
	);

	soc_system_mm_interconnect_6_id_router id_router (
		.sink_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sdram_pll_outclk0_clk),                                               //       clk.clk
		.reset              (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                 //       src.ready
		.src_valid          (id_router_src_valid),                                                 //          .valid
		.src_data           (id_router_src_data),                                                  //          .data
		.src_channel        (id_router_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                            //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (64),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (50),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (81),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (51),
		.OUT_BURSTWRAP_H           (56),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1)
	) burst_adapter (
		.clk                   (sdram_pll_outclk0_clk),                                           //       cr0.clk
		.reset                 (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_001_src_valid),                                     //     sink0.valid
		.sink0_data            (width_adapter_001_src_data),                                      //          .data
		.sink0_channel         (width_adapter_001_src_channel),                                   //          .channel
		.sink0_startofpacket   (width_adapter_001_src_startofpacket),                             //          .startofpacket
		.sink0_endofpacket     (width_adapter_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready           (width_adapter_001_src_ready),                                     //          .ready
		.source0_valid         (burst_adapter_source0_valid),                                     //   source0.valid
		.source0_data          (burst_adapter_source0_data),                                      //          .data
		.source0_channel       (burst_adapter_source0_channel),                                   //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),                             //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),                               //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                                      //          .ready
	);

	soc_system_mm_interconnect_6_cmd_xbar_demux cmd_xbar_demux (
		.clk                (sdram_pll_outclk0_clk),                                           //       clk.clk
		.reset              (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_src_ready),                                           //      sink.ready
		.sink_channel       (addr_router_src_channel),                                         //          .channel
		.sink_data          (addr_router_src_data),                                            //          .data
		.sink_startofpacket (addr_router_src_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (addr_router_src_endofpacket),                                     //          .endofpacket
		.sink_valid         (addr_router_src_valid),                                           //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                                       //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),                                        //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_6_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (sdram_pll_outclk0_clk),                                           //       clk.clk
		.reset               (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                                          //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                                          //          .valid
		.src_data            (cmd_xbar_mux_src_data),                                           //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                                       //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                                     //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                                        //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_6_cmd_xbar_demux rsp_xbar_demux (
		.clk                (sdram_pll_outclk0_clk),                                           //       clk.clk
		.reset              (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_src_ready),                                         //      sink.ready
		.sink_channel       (width_adapter_src_channel),                                       //          .channel
		.sink_data          (width_adapter_src_data),                                          //          .data
		.sink_startofpacket (width_adapter_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (width_adapter_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (width_adapter_src_valid),                                         //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                                       //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                                        //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_6_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (sdram_pll_outclk0_clk),                                           //       clk.clk
		.reset               (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                                          //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                                          //          .valid
		.src_data            (rsp_xbar_mux_src_data),                                           //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                                        //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                                       //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                                       //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                                     //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                                        //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (43),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (50),
		.IN_PKT_TRANS_COMPRESSED_READ  (44),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (77),
		.IN_PKT_RESPONSE_STATUS_L      (76),
		.IN_PKT_TRANS_EXCLUSIVE        (49),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (78),
		.IN_PKT_ORI_BURST_SIZE_H       (80),
		.IN_ST_DATA_W                  (81),
		.OUT_PKT_ADDR_H                (61),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (73),
		.OUT_PKT_BYTE_CNT_L            (68),
		.OUT_PKT_TRANS_COMPRESSED_READ (62),
		.OUT_PKT_BURST_SIZE_H          (77),
		.OUT_PKT_BURST_SIZE_L          (75),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (67),
		.OUT_PKT_BURST_TYPE_H          (79),
		.OUT_PKT_BURST_TYPE_L          (78),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter (
		.clk                  (sdram_pll_outclk0_clk),                                           //       clk.clk
		.reset                (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_src_valid),                                             //      sink.valid
		.in_channel           (id_router_src_channel),                                           //          .channel
		.in_startofpacket     (id_router_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (id_router_src_endofpacket),                                       //          .endofpacket
		.in_ready             (id_router_src_ready),                                             //          .ready
		.in_data              (id_router_src_data),                                              //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),                                   //       src.endofpacket
		.out_data             (width_adapter_src_data),                                          //          .data
		.out_channel          (width_adapter_src_channel),                                       //          .channel
		.out_valid            (width_adapter_src_valid),                                         //          .valid
		.out_ready            (width_adapter_src_ready),                                         //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),                                 //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (61),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (73),
		.IN_PKT_BYTE_CNT_L             (68),
		.IN_PKT_TRANS_COMPRESSED_READ  (62),
		.IN_PKT_BURSTWRAP_H            (74),
		.IN_PKT_BURSTWRAP_L            (74),
		.IN_PKT_BURST_SIZE_H           (77),
		.IN_PKT_BURST_SIZE_L           (75),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (67),
		.IN_PKT_BURST_TYPE_H           (79),
		.IN_PKT_BURST_TYPE_L           (78),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (43),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (50),
		.OUT_PKT_TRANS_COMPRESSED_READ (44),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (77),
		.OUT_PKT_RESPONSE_STATUS_L     (76),
		.OUT_PKT_TRANS_EXCLUSIVE       (49),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (78),
		.OUT_PKT_ORI_BURST_SIZE_H      (80),
		.OUT_ST_DATA_W                 (81),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (sdram_pll_outclk0_clk),                                           //       clk.clk
		.reset                (sdram_clockCrossing_Bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_src_valid),                                          //      sink.valid
		.in_channel           (cmd_xbar_mux_src_channel),                                        //          .channel
		.in_startofpacket     (cmd_xbar_mux_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_src_endofpacket),                                    //          .endofpacket
		.in_ready             (cmd_xbar_mux_src_ready),                                          //          .ready
		.in_data              (cmd_xbar_mux_src_data),                                           //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),                               //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                                      //          .data
		.out_channel          (width_adapter_001_src_channel),                                   //          .channel
		.out_valid            (width_adapter_001_src_valid),                                     //          .valid
		.out_ready            (width_adapter_001_src_ready),                                     //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),                             //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

endmodule
