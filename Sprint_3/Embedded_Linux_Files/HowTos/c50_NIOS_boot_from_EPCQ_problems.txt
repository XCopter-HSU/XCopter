    Nios® II Boot from EPCQ or EPCS Problems
    ========================================
               (2015-01-20 - ms)

Because of several problems trying to boot a NIOS cpu from EPCQ
device has been interrupted, maybe untiel Quartus II 20.1 will be
availabe.
Decision was not to waste in solving Altera's problems but to 
implement a maybe better solution, see. NIOS_boot_from_sdram.


II. Nios® II Boot from EPCQ or EPCS in Quartus® II 13.1
    ---------------------------------------------------
    Due to a problem in the Quartus II software, the Quartus Programmer 
    must be used to program EPCQ devices using a generated .jic file in 
    order to enable 4 bytes addressing mode.
    The nios2-flash-programmer is then required to program the EPCS/EPCQ 
    device with the .flash file generated by the sof2flash tool in order 
    to include the header information required by the new Nios II 
    bootcopier.

    The new Nios II bootcopier introduced in Quartus® II 13.1 requires 
    a new work flow.

    Workaround / Fix
    To enable the Nios II processor to load software from EPCS / EPCQ 
	after power cycle or reset in the Quartus II software version 13.1 
	and later follow the steps below:

    1. Add the following 2 lines in your <project>.qsf file.
       a. set_global_assignment -name STRATIXV_CONFIGURATION_SCHEME "ACTIVE SERIAL X1"
       b. set_global_assignment -name ENABLE_INIT_DONE_OUTPUT ON

    2. Delete the “db”, “incremental_db” and “qsys generated folders” in 
       your project directory.

    3. Make sure the Nios II’s Reset Vector is pointing at EPCS/EPCQ 
	   Controller.

    4. Make sure the Nios II’s Exception Vector is pointing at 
	   onchip_memory or some other memory devices.

    5. Generate in Qsys.

    6. Compile in Quartus II.

    7. Note: If the design is not targeting EPCQ device, skip this step
       Generate the .jic file with “Convert Programming File” tool.
       a. Select .jic file for “Programming file type”.

       b. Select the correct EPCQ (EPCQ256) device for “Configuration device”.

       c. Make sure “Active Serial” is selected for “Configuring device 
	      mode”. (Selected: "Active Serial x4" !!!!!!)

       d. Click on “Flash Loader”, then click on “Add Device” to select 
	      the device you’re using (Cyclone V / 5CSEMA5) then clicks “Ok”.

       e. Click on “SOF Data”, and then click on “Add File” to select 
	      the .sof file generated by Quartus II compilation.

       f. Click on the .sof file you have just added, click on 
	      “Properties” and enable the “Compression” from there.

       g. Click on “Generate” to generate the .jic file.

       h. Program the EPCQ with the .jic file generated with Quartus 
	      Programmer and power-cycle the board.
		  (for that see also: DE1-SoC User Manual, chapter 8 (on CD)

Have Care!
	There once again is a bug Quartus II 13.1:
Due to a problem in the Quartus II software® version 13.1,  some of 
the NIOS® II EDS utilities may fail with no error output or messages 
when run on a Windows PC.
The affected utilities are: sof2flash, elf2flash, elf2hex and bin2flash	
To work around this problem in the Quartus II software version 13.1 on 
Windows:
- Open the Nios II Command Shell from Qsys via the Tools menu, then 
  run the required utility
      or
- Run the required utility from a Linux installation of the Quartus II 
  software version 13.1		  
		  
    8. Generate the .flash files for the .sof and .elf files with:
       a. sof2flash --input=soc_system.sof --output=hw.flash --epcq –-verbose

       b. elf2flash --input=infile.elf --output=sw.flash --epcs 
	        --after=hw.flash –-verbose
	        (this is supposed to be "epcs" even though the chip is "epcq")
			
    9. Use nios2-configure-sof or Quartus Programmer to configure the 
	   FPGA with the .sof file then program the EPCQ device with the 
	   Nios II Flash Programmer as follow:
       a. nios2-flash-programmer --epcs --base=<base address of EPCQ device> 
             --instance=0 hw.flash
          Note: The EPCQ need to be programmed with the .flash file even 
		            if it had been programmed with Quartus Programmer earlier in 
		            .jic format

       b. nios2-flash-programmer --epcs --base=<base address of EPCQ device> 
             --instance=0 sw.flash
             
1. Add lines STRATIXV_CONFIGURATION_SCHEME "ACTIVE SERIAL X1" and 
   ENABLE_INIT_DONE_OUTPUT ON to project qsf
   set_global_assignment -name STRATIXV_CONFIGURATION_SCHEME "ACTIVE SERIAL X1"
   set_global_assignment -name ENABLE_INIT_DONE_OUTPUT ON
2. Deleted db and incremental db in project directory
3. Pointed the reset vector of NIOS to an EPCS/EPCQ controller 
   (connected in Qsys, with a locked base address of 0x00)
4. Pointed the exception vector to on-chip-memory
5. Generated Qsys design
6. Compiled in Quartus II

7. Converted programming file from sof to jic, specified active serial x4, added the correct p/n for the flash loader, and turned on compression (as requested by solution document)
8. Generated a jic
9. Successfully programmed and verified EPCQ
10. Power cycled - I have an LED turn on when the FPGA configures, and this LED turned on
11. Generated flash files for hardware with sof2flash --input=hw.sof --output=hw.flash -epcq --verbose
12. Generated flash file for software with elf2flash --input=sw.elf --output=sw.flash --epcs --after=hw.flash --verbose (this is supposed to be "epcs" even though the chip is "epcq")
13. Used nios2-configure-sof (command line programmer) to configure FPGA with hw.sof
14. programmed the device using the Nios II flash programmer using nios2-flash-programmer --epcs --base=0x00 hw.flash (the epcq needs to be programmed with the .flash file even if it had been programmed with quartus programmer earlier in .jic format)
15. nios2-flash-programmer --epcs --base=0x00 sw.flash 

-----------------------------------------------------------------------------------------
The method used to create a .jic file with a Nios® II hardware and software image is as follows.

1. Create a flash file from a .sof file:
   sof2flash --input=soc_system.sof --output=hw.flash --epcq --verbose

2. Create a flash file from a ,elf file:
   elf2flash --input=<elf file>.elf --output=sw.flash --epcs 
       --after=hw.flash --verbose

3. Convert the .flash image into a.hex file:
   nios2-elf-objcopy -I srec -O ihex sw.flash sw.hex

4. In the Quartus® II software, open File > Convert Programming Files 
   > Set the programming file as JTAG Indirect Configuration File (.jic).

6. Select the correct size EPCS device in the Configuration pull-down

7. Name your output .jic file

8. Click Flash Loader below, and select Add Device on the right hand side

9. Select your FPGA device from the list (Cyclone V, 5CSEMA5)

10. Click SOF Data, and select Add File, and select your .sof file
    Select File Properties and select Compression ON!!!???
	
11. Click Add Hex data, select Relative addressing, and select your .hex file created above

12. Now push generate. You should verify that the generated .map file has Page_0 at a start address of 0x0, and the hex file at a start address 1 after the end address of Page_0

13. Now in the Quartus II Programmer, select Add File and select your .jic file. Check the Program box next to the .jic file, and push Start

--------------------------------------------------------------------------
Hi,
I have included the hex-files for FPGA configuration and Nios firmware in the jic file generation.
Than the FPGA and Nios Firmware will be loaded from EPCQ256 (Micron N25Q256A). I'm using Quartus 13.1.4 build 182 and a Cyclone 5CEFA7 device.

After step 6 in the Knowledge Base Solution ID: rd11192013_118
(http://www.altera.com/support/kdb/so...92013_118.html)

I converted the .sof and .elf files to intel hex files:
First you have to generate the srec .flash files described in step 8

sof2flash --input=hw.sof --output=hw.flash --XX –verbose
Note: Replace XX with EPCS for EPCS device and replace XX with EPCQ for EPCQ device

elf2flash --input=sw.elf --output=sw.flash --epcs --after=hw.flash –verbose

Next convert them to ihex
nios2-elf-objcopy -I srec -O ihex hw.flash hw.hex
nios2-elf-objcopy -I srec -O ihex sw.flash sw.hex

Now proceed with step 7 from Solution ID: rd11192013_118
After 7f choose "Add Hex Data" to include the hw.hex and sw.hex than generate the .jic
Program the EPCQ with the .jic file generated with Quartus Programmer and power-cycle the board
FPGA configuration should configure and Nios firmware is starting.

Steps 8 and 9 aren't needed

Best regards
Jens 

-------------------------------------------------------------------

o 2014-12-09:
  - SoPC in EPCQ-Device programmiert gemäß "DE1-SoC User Manual"
    (von Begleit-CD), Kapitel 8.2 und 8.3
	--> SoPC startet AliveTest_for_cpu_s1 wird automatisch ausgeführt

o 2014-12-11:
  - scheinbar benötigt Windows 8.1 ein Cygwin Update, welche aktualisiert
    wurde gemäß:
    http://www.altera.com/education/univ/software/quartus2/unv-quartus2.html
	  installiert!

o 2014-12-16/19:
  - Es ist immer noch nicht möglich eine Anwendung aus dem EPCQ-Flash zu
    booten!!!
    => Installation von Quartus II Version 14.1 in einer Windows-VM
       Notwendige SoPC-Anpassungen durchgeführt (u. a. EPCS-Reset-Input
       mit cpu_s0 jtag_debug_module_reset Output verbunden!!!!!)
       - QSYS-Design nach leichten Anpassungen generierbar
       - Quartus II Compile ebenfalls erfolgreich
       - Hardware-Design (jiq-Datei) in EPCQ erfolgreich geflasht
  - Scheinbar für Quartus II v13.1 notwendigen Änderungen, welche zur
    Deaktivierung von HEX3 führten wieder rückgängig gemacht.
  - Device and Pin Options -> Configuration
    von 'Passive Serial' auf 'Active Serial x1' umgestellt!

o 2014-12-23:
  - Projekt "DE1-SoC_BasicComp" als Ausgangspunkt gewählt. Die folgenden
    dem Rocketboard/datamover-Projekt entnommenen Einstellungen übernommen
    bzw. verifiziert:
    Quartus II > Assignments > Device > Device and Pin Options ...
	  Configuration Scheme: Active Serial x1 (can use Config. Device)
      Configuration Mode: Standard
	  Use configuration device: EPCQ256
	  Generate compressed bitstreams
	  Active serial clock source: 100 MHz Internal Oscillator
	In .qsf Datei:
	  set_global_assignment -name STRATIXV_CONFIGURATION_SCHEME "ACTIVE SERIAL X1"
	  set_global_assignment -name ENABLE_INIT_DONE_OUTPUT ON
	  
	QSYS specific settings:
	  EPCS/EPCQx1 Flash Controller:
	    clk connected to same clock signal as NIOS II CPU
		reset connected to clock generator reset, but NOT to jtag_debug_module_reset
		irq connected to CPU's irq input
		epcs_control_port connected to CPU's instruction and data master port
	  jtag_debug_module_reset is used to reset any other component!

	Inhalte der Ordner: db, incremental_db und QSYS-Ordner (Name des SoPCs)
	gelöscht.
  - QSYS - Generate HDL ausgeführt
  - Quartus II - Projekt compiliert
    Aufgrund von Timing Verletzungen wurde EPCQ Taktfrequenz auf 25 MHz
	reduziert!!!
  - DE1-SoC Board exakt nach folgender Quelle programmiert:
    http://www.rocketboards.org/foswiki/Documentation/ConfigureEpcq131
	
  - System successfully tested with BlinkTest01 test program.
  
  - Generate the .flash files for the .sof and .elf files with:
     sof2flash --input=hw.sof --output=hw.flash --epcq –-verbose
     elf2flash --input=sw.elf --output=sw.flash --epcs --after=hw.flash –-verbose
		
  - Convert the .flash image into a.hex file:
     nios2-elf-objcopy -I srec -O ihex sw.flash sw.hex

  - In the Quartus® II software, open File > Convert Programming Files 
    > Set the programming file as JTAG Indirect Configuration File (.jic).

  - Select the correct size EPCS device in the Configuration pull-down

  - Name your output .jic file

  - Click Flash Loader below, and select Add Device on the right hand side

  - Select your FPGA device from the list (Cyclone V, 5CSEMA5)

  - Click SOF Data, and select Add File, and select your .sof file
    Select File Properties and select Compression ON!!!
	
  - Click Add Hex data, select Relative addressing, and select your .hex file created above

  - Now push generate. You should verify that the generated .map file has Page_0 at a start address of 0x0, and the hex file at a start address 1 after the end address of Page_0

  - Now in the Quartus II Programmer, select Add File and select your .jic file. Check the Program box next to the .jic file, and push Start

=> Board bootet Hardware und Software scheinbar korrekt hoch!
   Nach ca. 7 s geht Board jedoch in eine Art Reset Zustand!!!


